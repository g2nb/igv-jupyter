(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.igv = factory());
}(this, function () { 'use strict';

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Modified for injection into igv.js after bable translation.  Search for "regeneratorRuntime rollup" for
 * threads on this topic.  Posted solutions did not work for me or others.
 */

var regeneratorRuntime  = {}
var Op = Object.prototype;
var hasOwn = Op.hasOwnProperty;
var undefined; // More compressible than void 0.
var $Symbol = typeof Symbol === "function" ? Symbol : {};
var iteratorSymbol = $Symbol.iterator || "@@iterator";
var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
}
regeneratorRuntime.wrap = wrap;

// Try/catch helper to minimize deoptimizations. Returns a completion
// record like context.tryEntries[i].completion. This interface could
// have been (and was previously) designed to take a closure to be
// invoked without arguments, but in all the cases we care about we
// already have an existing method we want to call, so there's no need
// to create a new function object. We can even get away with assuming
// the method takes exactly one argument, since that happens to be true
// in every case, so we don't have to touch the arguments object. The
// only additional allocation required is the completion record, which
// has a stable shape and so hopefully should be cheap to allocate.
function tryCatch(fn, obj, arg) {
    try {
        return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
        return { type: "throw", arg: err };
    }
}

var GenStateSuspendedStart = "suspendedStart";
var GenStateSuspendedYield = "suspendedYield";
var GenStateExecuting = "executing";
var GenStateCompleted = "completed";

// Returning this object from the innerFn has the same effect as
// breaking out of the dispatch switch statement.
var ContinueSentinel = {};

// Dummy constructor functions that we use as the .constructor and
// .constructor.prototype properties for functions that return Generator
// objects. For full spec compliance, you may wish to configure your
// minifier not to mangle the names of these two functions.
function Generator() {}
function GeneratorFunction() {}
function GeneratorFunctionPrototype() {}

// This is a polyfill for %IteratorPrototype% for environments that
// don't natively support it.
var IteratorPrototype = {};
IteratorPrototype[iteratorSymbol] = function () {
    return this;
};

var getProto = Object.getPrototypeOf;
var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
if (NativeIteratorPrototype &&
    NativeIteratorPrototype !== Op &&
    hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
}

var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
GeneratorFunctionPrototype.constructor = GeneratorFunction;
GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

// Helper for defining the .next, .throw, and .return methods of the
// Iterator interface in terms of a single ._invoke method.
function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
        prototype[method] = function(arg) {
            return this._invoke(method, arg);
        };
    });
}

regeneratorRuntime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
        ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
        : false;
};

regeneratorRuntime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
            genFun[toStringTagSymbol] = "GeneratorFunction";
        }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
};

// Within the body of any async function, `await x` is transformed to
// `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
// `hasOwn.call(value, "__await")` to determine if the yielded value is
// meant to be awaited.
regeneratorRuntime.awrap = function(arg) {
    return { __await: arg };
};

function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
            reject(record.arg);
        } else {
            var result = record.arg;
            var value = result.value;
            if (value &&
                typeof value === "object" &&
                hasOwn.call(value, "__await")) {
                return Promise.resolve(value.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                });
            }

            return Promise.resolve(value).then(function(unwrapped) {
                // When a yielded Promise is resolved, its final value becomes
                // the .value of the Promise<{value,done}> result for the
                // current iteration.
                result.value = unwrapped;
                resolve(result);
            }, function(error) {
                // If a rejected Promise was yielded, throw the rejection back
                // into the async generator function so it can be handled there.
                return invoke("throw", error, resolve, reject);
            });
        }
    }

    var previousPromise;

    function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
            return new Promise(function(resolve, reject) {
                invoke(method, arg, resolve, reject);
            });
        }

        return previousPromise =
            // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(
                callInvokeWithMethodAndArg,
                // Avoid propagating failures to Promises returned by later
                // invocations of the iterator.
                callInvokeWithMethodAndArg
            ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
}

defineIteratorMethods(AsyncIterator.prototype);
AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
};
regeneratorRuntime.AsyncIterator = AsyncIterator;

// Note that simple async functions are implemented on top of
// AsyncIterator objects; they just return a Promise for the value of
// the final result produced by the iterator.
regeneratorRuntime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
        wrap(innerFn, outerFn, self, tryLocsList)
    );

    return regeneratorRuntime.isGeneratorFunction(outerFn)
        ? iter // If outerFn is a generator, return the full iterator.
        : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
};

function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
        if (state === GenStateExecuting) {
            throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
            if (method === "throw") {
                throw arg;
            }

            // Be forgiving, per 25.3.3.3.3 of the spec:
            // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
            return doneResult();
        }

        context.method = method;
        context.arg = arg;

        while (true) {
            var delegate = context.delegate;
            if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);
                if (delegateResult) {
                    if (delegateResult === ContinueSentinel) continue;
                    return delegateResult;
                }
            }

            if (context.method === "next") {
                // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;

            } else if (context.method === "throw") {
                if (state === GenStateSuspendedStart) {
                    state = GenStateCompleted;
                    throw context.arg;
                }

                context.dispatchException(context.arg);

            } else if (context.method === "return") {
                context.abrupt("return", context.arg);
            }

            state = GenStateExecuting;

            var record = tryCatch(innerFn, self, context);
            if (record.type === "normal") {
                // If an exception is thrown from innerFn, we leave state ===
                // GenStateExecuting and loop back for another invocation.
                state = context.done
                    ? GenStateCompleted
                    : GenStateSuspendedYield;

                if (record.arg === ContinueSentinel) {
                    continue;
                }

                return {
                    value: record.arg,
                    done: context.done
                };

            } else if (record.type === "throw") {
                state = GenStateCompleted;
                // Dispatch the exception by looping back around to the
                // context.dispatchException(context.arg) call above.
                context.method = "throw";
                context.arg = record.arg;
            }
        }
    };
}

// Call delegate.iterator[context.method](context.arg) and handle the
// result, either by returning a { value, done } result from the
// delegate iterator, or by modifying context.method and context.arg,
// setting context.delegate to null, and returning the ContinueSentinel.
function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
        // A .throw or .return when the delegate iterator has no .throw
        // method always terminates the yield* loop.
        context.delegate = null;

        if (context.method === "throw") {
            // Note: ["return"] must be used for ES3 parsing compatibility.
            if (delegate.iterator["return"]) {
                // If the delegate iterator has a return method, give it a
                // chance to clean up.
                context.method = "return";
                context.arg = undefined;
                maybeInvokeDelegate(delegate, context);

                if (context.method === "throw") {
                    // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
            }

            context.method = "throw";
            context.arg = new TypeError(
                "The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
        context.method = "throw";
        context.arg = record.arg;
        context.delegate = null;
        return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
        context.method = "throw";
        context.arg = new TypeError("iterator result is not an object");
        context.delegate = null;
        return ContinueSentinel;
    }

    if (info.done) {
        // Assign the result of the finished delegate to the temporary
        // variable specified by delegate.resultName (see delegateYield).
        context[delegate.resultName] = info.value;

        // Resume execution at the desired location (see delegateYield).
        context.next = delegate.nextLoc;

        // If context.method was "throw" but the delegate handled the
        // exception, let the outer generator proceed normally. If
        // context.method was "next", forget context.arg since it has been
        // "consumed" by the delegate iterator. If context.method was
        // "return", allow the original .return call to continue in the
        // outer generator.
        if (context.method !== "return") {
            context.method = "next";
            context.arg = undefined;
        }

    } else {
        // Re-yield the result returned by the delegate method.
        return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
}

// Define Generator.prototype.{next,throw,return} in terms of the
// unified ._invoke helper method.
defineIteratorMethods(Gp);

Gp[toStringTagSymbol] = "Generator";

// A Generator should always return itself as the iterator object when the
// @@iterator function is called on it. Some browsers' implementations of the
// iterator prototype chain incorrectly implement this, causing the Generator
// object to not be returned from this call. This ensures that doesn't happen.
// See https://github.com/facebook/regenerator/issues/274 for more details.
Gp[iteratorSymbol] = function() {
    return this;
};

Gp.toString = function() {
    return "[object Generator]";
};

function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
        entry.catchLoc = locs[1];
    }

    if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
}

function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
}

function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
}

regeneratorRuntime.keys = function(object) {
    var keys = [];
    for (var key in object) {
        keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
        while (keys.length) {
            var key = keys.pop();
            if (key in object) {
                next.value = key;
                next.done = false;
                return next;
            }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
    };
};

function values(iterable) {
    if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
            return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
            return iterable;
        }

        if (!isNaN(iterable.length)) {
            var i = -1, next = function next() {
                while (++i < iterable.length) {
                    if (hasOwn.call(iterable, i)) {
                        next.value = iterable[i];
                        next.done = false;
                        return next;
                    }
                }

                next.value = undefined;
                next.done = true;

                return next;
            };

            return next.next = next;
        }
    }

    // Return an iterator with no values.
    return { next: doneResult };
}
regeneratorRuntime.values = values;

function doneResult() {
    return { value: undefined, done: true };
}

Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;

        this.method = "next";
        this.arg = undefined;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
            for (var name in this) {
                // Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" &&
                    hasOwn.call(this, name) &&
                    !isNaN(+name.slice(1))) {
                    this[name] = undefined;
                }
            }
        }
    },

    stop: function() {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
            throw rootRecord.arg;
        }

        return this.rval;
    },

    dispatchException: function(exception) {
        if (this.done) {
            throw exception;
        }

        var context = this;
        function handle(loc, caught) {
            record.type = "throw";
            record.arg = exception;
            context.next = loc;

            if (caught) {
                // If the dispatched exception was caught by a catch block,
                // then let that catch block handle the exception normally.
                context.method = "next";
                context.arg = undefined;
            }

            return !! caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            var record = entry.completion;

            if (entry.tryLoc === "root") {
                // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
            }

            if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");

                if (hasCatch && hasFinally) {
                    if (this.prev < entry.catchLoc) {
                        return handle(entry.catchLoc, true);
                    } else if (this.prev < entry.finallyLoc) {
                        return handle(entry.finallyLoc);
                    }

                } else if (hasCatch) {
                    if (this.prev < entry.catchLoc) {
                        return handle(entry.catchLoc, true);
                    }

                } else if (hasFinally) {
                    if (this.prev < entry.finallyLoc) {
                        return handle(entry.finallyLoc);
                    }

                } else {
                    throw new Error("try statement without catch or finally");
                }
            }
        }
    },

    abrupt: function(type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc <= this.prev &&
                hasOwn.call(entry, "finallyLoc") &&
                this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
            }
        }

        if (finallyEntry &&
            (type === "break" ||
                type === "continue") &&
            finallyEntry.tryLoc <= arg &&
            arg <= finallyEntry.finallyLoc) {
            // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
            this.method = "next";
            this.next = finallyEntry.finallyLoc;
            return ContinueSentinel;
        }

        return this.complete(record);
    },

    complete: function(record, afterLoc) {
        if (record.type === "throw") {
            throw record.arg;
        }

        if (record.type === "break" ||
            record.type === "continue") {
            this.next = record.arg;
        } else if (record.type === "return") {
            this.rval = this.arg = record.arg;
            this.method = "return";
            this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
            this.next = afterLoc;
        }

        return ContinueSentinel;
    },

    finish: function(finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
            }
        }
    },

    "catch": function(tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
            var entry = this.tryEntries[i];
            if (entry.tryLoc === tryLoc) {
                var record = entry.completion;
                if (record.type === "throw") {
                    var thrown = record.arg;
                    resetTryEntry(entry);
                }
                return thrown;
            }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
        this.delegate = {
            iterator: values(iterable),
            resultName: resultName,
            nextLoc: nextLoc
        };

        if (this.method === "next") {
            // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
        }

        return ContinueSentinel;
    }
};

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }

  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !_isNativeFunction(Class)) return Class;

      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }

      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);

        _cache.set(Class, Wrapper);
      }

      function Wrapper() {
        return _construct(Class, arguments, _getPrototypeOf(this).constructor);
      }

      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true
        }
      });
      return _setPrototypeOf(Wrapper, Class);
    };

    return _wrapNativeSuper(Class);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toArray(arr) {
    return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  /*!
   * jQuery JavaScript Library v3.3.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector
   * https://jquery.com/
   *
   * Includes Sizzle.js
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://jquery.org/license
   *
   * Date: 2018-01-20T17:24Z
   */
  var arr = [];
  var document$1 = window.document;
  var getProto = Object.getPrototypeOf;
  var _slice = arr.slice;
  var concat = arr.concat;
  var push = arr.push;
  var indexOf = arr.indexOf;
  var class2type = {};
  var toString = class2type.toString;
  var hasOwn = class2type.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);
  var support = {};

  var isFunction = function isFunction(obj) {
    // Support: Chrome <=57, Firefox <=52
    // In some browsers, typeof returns "function" for HTML <object> elements
    // (i.e., `typeof document.createElement( "object" ) === "function"`).
    // We don't want to classify *any* DOM node as a function.
    return typeof obj === "function" && typeof obj.nodeType !== "number";
  };

  var isWindow = function isWindow(obj) {
    return obj != null && obj === obj.window;
  };

  var preservedScriptAttributes = {
    type: true,
    src: true,
    noModule: true
  };

  function DOMEval(code, doc, node) {
    doc = doc || document$1;
    var i,
        script = doc.createElement("script");
    script.text = code;

    if (node) {
      for (i in preservedScriptAttributes) {
        if (node[i]) {
          script[i] = node[i];
        }
      }
    }

    doc.head.appendChild(script).parentNode.removeChild(script);
  }

  function toType(obj) {
    if (obj == null) {
      return obj + "";
    } // Support: Android <=2.3 only (functionish RegExp)


    return _typeof(obj) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : _typeof(obj);
  } // global Symbol
  // Defining this global in .eslintrc.json would create a danger of using the global
  // unguarded in another place, it seems safer to define global only for this module


  var version = "3.3.1 -ajax,-ajax/jsonp,-ajax/load,-ajax/parseXML,-ajax/script,-ajax/var/location,-ajax/var/nonce,-ajax/var/rquery,-ajax/xhr,-manipulation/_evalUrl,-event/ajax,-effects,-effects/Tween,-effects/animatedSelector",
      // Define a local copy of jQuery
  jQuery = function jQuery(selector, context) {
    // The jQuery object is actually just the init constructor 'enhanced'
    // Need init if jQuery is called (just allow error to be thrown if not included)
    return new jQuery.fn.init(selector, context);
  },
      // Support: Android <=4.0 only
  // Make sure we trim BOM and NBSP
  rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

  jQuery.fn = jQuery.prototype = {
    // The current version of jQuery being used
    jquery: version,
    constructor: jQuery,
    // The default length of a jQuery object is 0
    length: 0,
    toArray: function toArray() {
      return _slice.call(this);
    },
    // Get the Nth element in the matched element set OR
    // Get the whole matched element set as a clean array
    get: function get(num) {
      // Return all the elements in a clean array
      if (num == null) {
        return _slice.call(this);
      } // Return just the one element from the set


      return num < 0 ? this[num + this.length] : this[num];
    },
    // Take an array of elements and push it onto the stack
    // (returning the new matched element set)
    pushStack: function pushStack(elems) {
      // Build a new jQuery matched element set
      var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)

      ret.prevObject = this; // Return the newly-formed element set

      return ret;
    },
    // Execute a callback for every element in the matched set.
    each: function each(callback) {
      return jQuery.each(this, callback);
    },
    map: function map(callback) {
      return this.pushStack(jQuery.map(this, function (elem, i) {
        return callback.call(elem, i, elem);
      }));
    },
    slice: function slice() {
      return this.pushStack(_slice.apply(this, arguments));
    },
    first: function first() {
      return this.eq(0);
    },
    last: function last() {
      return this.eq(-1);
    },
    eq: function eq(i) {
      var len = this.length,
          j = +i + (i < 0 ? len : 0);
      return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
    },
    end: function end() {
      return this.prevObject || this.constructor();
    },
    // For internal use only.
    // Behaves like an Array's method, not like a jQuery method.
    push: push,
    sort: arr.sort,
    splice: arr.splice
  };

  jQuery.extend = jQuery.fn.extend = function () {
    var options,
        name,
        src,
        copy,
        copyIsArray,
        clone,
        target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        deep = false; // Handle a deep copy situation

    if (typeof target === "boolean") {
      deep = target; // Skip the boolean and the target

      target = arguments[i] || {};
      i++;
    } // Handle case when target is a string or something (possible in deep copy)


    if (_typeof(target) !== "object" && !isFunction(target)) {
      target = {};
    } // Extend jQuery itself if only one argument is passed


    if (i === length) {
      target = this;
      i--;
    }

    for (; i < length; i++) {
      // Only deal with non-null/undefined values
      if ((options = arguments[i]) != null) {
        // Extend the base object
        for (name in options) {
          src = target[name];
          copy = options[name]; // Prevent never-ending loop

          if (target === copy) {
            continue;
          } // Recurse if we're merging plain objects or arrays


          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
            if (copyIsArray) {
              copyIsArray = false;
              clone = src && Array.isArray(src) ? src : [];
            } else {
              clone = src && jQuery.isPlainObject(src) ? src : {};
            } // Never move original objects, clone them


            target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values
          } else if (copy !== undefined) {
            target[name] = copy;
          }
        }
      }
    } // Return the modified object


    return target;
  };

  jQuery.extend({
    // Unique for each copy of jQuery on the page
    expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),
    // Assume jQuery is ready without the ready module
    isReady: true,
    error: function error(msg) {
      throw new Error(msg);
    },
    noop: function noop() {},
    isPlainObject: function isPlainObject(obj) {
      var proto, Ctor; // Detect obvious negatives
      // Use toString instead of jQuery.type to catch host objects

      if (!obj || toString.call(obj) !== "[object Object]") {
        return false;
      }

      proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain

      if (!proto) {
        return true;
      } // Objects with prototype are plain iff they were constructed by a global Object function


      Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
      return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
    },
    isEmptyObject: function isEmptyObject(obj) {
      /* eslint-disable no-unused-vars */
      // See https://github.com/eslint/eslint/issues/6125
      var name;

      for (name in obj) {
        return false;
      }

      return true;
    },
    // Evaluates a script in a global context
    globalEval: function globalEval(code) {
      DOMEval(code);
    },
    each: function each(obj, callback) {
      var length,
          i = 0;

      if (isArrayLike(obj)) {
        length = obj.length;

        for (; i < length; i++) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      } else {
        for (i in obj) {
          if (callback.call(obj[i], i, obj[i]) === false) {
            break;
          }
        }
      }

      return obj;
    },
    // Support: Android <=4.0 only
    trim: function trim(text) {
      return text == null ? "" : (text + "").replace(rtrim, "");
    },
    // results is for internal usage only
    makeArray: function makeArray(arr, results) {
      var ret = results || [];

      if (arr != null) {
        if (isArrayLike(Object(arr))) {
          jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
        } else {
          push.call(ret, arr);
        }
      }

      return ret;
    },
    inArray: function inArray(elem, arr, i) {
      return arr == null ? -1 : indexOf.call(arr, elem, i);
    },
    // Support: Android <=4.0 only, PhantomJS 1 only
    // push.apply(_, arraylike) throws on ancient WebKit
    merge: function merge(first, second) {
      var len = +second.length,
          j = 0,
          i = first.length;

      for (; j < len; j++) {
        first[i++] = second[j];
      }

      first.length = i;
      return first;
    },
    grep: function grep(elems, callback, invert) {
      var callbackInverse,
          matches = [],
          i = 0,
          length = elems.length,
          callbackExpect = !invert; // Go through the array, only saving the items
      // that pass the validator function

      for (; i < length; i++) {
        callbackInverse = !callback(elems[i], i);

        if (callbackInverse !== callbackExpect) {
          matches.push(elems[i]);
        }
      }

      return matches;
    },
    // arg is for internal usage only
    map: function map(elems, callback, arg) {
      var length,
          value,
          i = 0,
          ret = []; // Go through the array, translating each of the items to their new values

      if (isArrayLike(elems)) {
        length = elems.length;

        for (; i < length; i++) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        } // Go through every key on the object,

      } else {
        for (i in elems) {
          value = callback(elems[i], i, arg);

          if (value != null) {
            ret.push(value);
          }
        }
      } // Flatten any nested arrays


      return concat.apply([], ret);
    },
    // A global GUID counter for objects
    guid: 1,
    // jQuery.support is not used in Core but other projects attach their
    // properties to it so it needs to exist.
    support: support
  });

  if (typeof Symbol === "function") {
    jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
  } // Populate the class2type map


  jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
    class2type["[object " + name + "]"] = name.toLowerCase();
  });

  function isArrayLike(obj) {
    // Support: real iOS 8.2 only (not reproducible in simulator)
    // `in` check used to prevent JIT error (gh-2145)
    // hasOwn isn't used here due to false negatives
    // regarding Nodelist length in IE
    var length = !!obj && "length" in obj && obj.length,
        type = toType(obj);

    if (isFunction(obj) || isWindow(obj)) {
      return false;
    }

    return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
  }

  var Sizzle =
  /*!
  * Sizzle CSS Selector Engine v2.3.3
  * https://sizzlejs.com/
  *
  * Copyright jQuery Foundation and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2016-08-08
  */
  function (window) {
    var i,
        support,
        Expr,
        getText,
        isXML,
        tokenize,
        compile,
        select,
        outermostContext,
        sortInput,
        hasDuplicate,
        // Local document vars
    setDocument,
        document,
        docElem,
        documentIsHTML,
        rbuggyQSA,
        rbuggyMatches,
        matches,
        contains,
        // Instance-specific data
    expando = "sizzle" + 1 * new Date(),
        preferredDoc = window.document,
        dirruns = 0,
        done = 0,
        classCache = createCache(),
        tokenCache = createCache(),
        compilerCache = createCache(),
        sortOrder = function sortOrder(a, b) {
      if (a === b) {
        hasDuplicate = true;
      }

      return 0;
    },
        // Instance methods
    hasOwn = {}.hasOwnProperty,
        arr = [],
        pop = arr.pop,
        push_native = arr.push,
        push = arr.push,
        slice = arr.slice,
        // Use a stripped-down indexOf as it's faster than native
    // https://jsperf.com/thor-indexof-vs-for/5
    indexOf = function indexOf(list, elem) {
      var i = 0,
          len = list.length;

      for (; i < len; i++) {
        if (list[i] === elem) {
          return i;
        }
      }

      return -1;
    },
        booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
        // Regular expressions
    // http://www.w3.org/TR/css3-selectors/#whitespace
    whitespace = "[\\x20\\t\\r\\n\\f]",
        // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
    identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
        // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
    attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace + // Operator (capture 2)
    "*([*^$|!~]?=)" + whitespace + // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
    "*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
        pseudos = ":(" + identifier + ")(?:\\((" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
    // 1. quoted (capture 3; capture 4 or capture 5)
    "('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" + // 2. simple (capture 6)
    "((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" + // 3. anything else (capture 2)
    ".*" + ")\\)|)",
        // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
    rwhitespace = new RegExp(whitespace + "+", "g"),
        rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
        rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
        rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
        rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
        rpseudo = new RegExp(pseudos),
        ridentifier = new RegExp("^" + identifier + "$"),
        matchExpr = {
      "ID": new RegExp("^#(" + identifier + ")"),
      "CLASS": new RegExp("^\\.(" + identifier + ")"),
      "TAG": new RegExp("^(" + identifier + "|[*])"),
      "ATTR": new RegExp("^" + attributes),
      "PSEUDO": new RegExp("^" + pseudos),
      "CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
      "bool": new RegExp("^(?:" + booleans + ")$", "i"),
      // For use in libraries implementing .is()
      // We use this for POS matching in `select`
      "needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
    },
        rinputs = /^(?:input|select|textarea|button)$/i,
        rheader = /^h\d$/i,
        rnative = /^[^{]+\{\s*\[native \w/,
        // Easily-parseable/retrievable ID or TAG or CLASS selectors
    rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
        rsibling = /[+~]/,
        // CSS escapes
    // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
    runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
        funescape = function funescape(_, escaped, escapedWhitespace) {
      var high = "0x" + escaped - 0x10000; // NaN means non-codepoint
      // Support: Firefox<24
      // Workaround erroneous numeric interpretation of +"0x"

      return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint
      String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)
      String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
    },
        // CSS string/identifier serialization
    // https://drafts.csswg.org/cssom/#common-serializing-idioms
    // eslint-disable-next-line no-control-regex
    rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
        fcssescape = function fcssescape(ch, asCodePoint) {
      if (asCodePoint) {
        // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
        if (ch === "\0") {
          return "\uFFFD";
        } // Control characters and (dependent upon position) numbers get escaped as code points


        return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
      } // Other potentially-special ASCII characters get backslash-escaped


      return "\\" + ch;
    },
        // Used for iframes
    // See setDocument()
    // Removing the function wrapper causes a "Permission Denied"
    // error in IE
    unloadHandler = function unloadHandler() {
      setDocument();
    },
        disabledAncestor = addCombinator(function (elem) {
      return elem.disabled === true && ("form" in elem || "label" in elem);
    }, {
      dir: "parentNode",
      next: "legend"
    }); // Optimize for push.apply( _, NodeList )


    try {
      push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0
      // Detect silently failing push.apply

      arr[preferredDoc.childNodes.length].nodeType;
    } catch (e) {
      push = {
        apply: arr.length ? // Leverage slice if possible
        function (target, els) {
          push_native.apply(target, slice.call(els));
        } : // Support: IE<9
        // Otherwise append directly
        function (target, els) {
          var j = target.length,
              i = 0; // Can't trust NodeList.length

          while (target[j++] = els[i++]) {}

          target.length = j - 1;
        }
      };
    }

    function Sizzle(selector, context, results, seed) {
      var m,
          i,
          elem,
          nid,
          match,
          groups,
          newSelector,
          newContext = context && context.ownerDocument,
          // nodeType defaults to 9, since context defaults to document
      nodeType = context ? context.nodeType : 9;
      results = results || []; // Return early from calls with invalid selector or context

      if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {
        return results;
      } // Try to shortcut find operations (as opposed to filters) in HTML documents


      if (!seed) {
        if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
          setDocument(context);
        }

        context = context || document;

        if (documentIsHTML) {
          // If the selector is sufficiently simple, try using a "get*By*" DOM method
          // (excepting DocumentFragment context, where the methods don't exist)
          if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {
            // ID selector
            if (m = match[1]) {
              // Document context
              if (nodeType === 9) {
                if (elem = context.getElementById(m)) {
                  // Support: IE, Opera, Webkit
                  // TODO: identify versions
                  // getElementById can match elements by name instead of ID
                  if (elem.id === m) {
                    results.push(elem);
                    return results;
                  }
                } else {
                  return results;
                } // Element context

              } else {
                // Support: IE, Opera, Webkit
                // TODO: identify versions
                // getElementById can match elements by name instead of ID
                if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {
                  results.push(elem);
                  return results;
                }
              } // Type selector

            } else if (match[2]) {
              push.apply(results, context.getElementsByTagName(selector));
              return results; // Class selector
            } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {
              push.apply(results, context.getElementsByClassName(m));
              return results;
            }
          } // Take advantage of querySelectorAll


          if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {
            if (nodeType !== 1) {
              newContext = context;
              newSelector = selector; // qSA looks outside Element context, which is not what we want
              // Thanks to Andrew Dupont for this workaround technique
              // Support: IE <=8
              // Exclude object elements
            } else if (context.nodeName.toLowerCase() !== "object") {
              // Capture the context ID, setting it first if necessary
              if (nid = context.getAttribute("id")) {
                nid = nid.replace(rcssescape, fcssescape);
              } else {
                context.setAttribute("id", nid = expando);
              } // Prefix every selector in the list


              groups = tokenize(selector);
              i = groups.length;

              while (i--) {
                groups[i] = "#" + nid + " " + toSelector(groups[i]);
              }

              newSelector = groups.join(","); // Expand context for sibling selectors

              newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
            }

            if (newSelector) {
              try {
                push.apply(results, newContext.querySelectorAll(newSelector));
                return results;
              } catch (qsaError) {} finally {
                if (nid === expando) {
                  context.removeAttribute("id");
                }
              }
            }
          }
        }
      } // All others


      return select(selector.replace(rtrim, "$1"), context, results, seed);
    }
    /**
     * Create key-value caches of limited size
     * @returns {function(string, object)} Returns the Object data after storing it on itself with
     *    property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
     *    deleting the oldest entry
     */


    function createCache() {
      var keys = [];

      function cache(key, value) {
        // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
        if (keys.push(key + " ") > Expr.cacheLength) {
          // Only keep the most recent entries
          delete cache[keys.shift()];
        }

        return cache[key + " "] = value;
      }

      return cache;
    }
    /**
     * Mark a function for special use by Sizzle
     * @param {Function} fn The function to mark
     */


    function markFunction(fn) {
      fn[expando] = true;
      return fn;
    }
    /**
     * Support testing using an element
     * @param {Function} fn Passed the created element and returns a boolean result
     */


    function assert(fn) {
      var el = document.createElement("fieldset");

      try {
        return !!fn(el);
      } catch (e) {
        return false;
      } finally {
        // Remove from its parent by default
        if (el.parentNode) {
          el.parentNode.removeChild(el);
        } // release memory in IE


        el = null;
      }
    }
    /**
     * Adds the same handler for all of the specified attrs
     * @param {String} attrs Pipe-separated list of attributes
     * @param {Function} handler The method that will be applied
     */


    function addHandle(attrs, handler) {
      var arr = attrs.split("|"),
          i = arr.length;

      while (i--) {
        Expr.attrHandle[arr[i]] = handler;
      }
    }
    /**
     * Checks document order of two siblings
     * @param {Element} a
     * @param {Element} b
     * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
     */


    function siblingCheck(a, b) {
      var cur = b && a,
          diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes

      if (diff) {
        return diff;
      } // Check if b follows a


      if (cur) {
        while (cur = cur.nextSibling) {
          if (cur === b) {
            return -1;
          }
        }
      }

      return a ? 1 : -1;
    }
    /**
     * Returns a function to use in pseudos for input types
     * @param {String} type
     */


    function createInputPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return name === "input" && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for buttons
     * @param {String} type
     */


    function createButtonPseudo(type) {
      return function (elem) {
        var name = elem.nodeName.toLowerCase();
        return (name === "input" || name === "button") && elem.type === type;
      };
    }
    /**
     * Returns a function to use in pseudos for :enabled/:disabled
     * @param {Boolean} disabled true for :disabled; false for :enabled
     */


    function createDisabledPseudo(disabled) {
      // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
      return function (elem) {
        // Only certain elements can match :enabled or :disabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
        // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
        if ("form" in elem) {
          // Check for inherited disabledness on relevant non-disabled elements:
          // * listed form-associated elements in a disabled fieldset
          //   https://html.spec.whatwg.org/multipage/forms.html#category-listed
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
          // * option elements in a disabled optgroup
          //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
          // All such elements have a "form" property.
          if (elem.parentNode && elem.disabled === false) {
            // Option elements defer to a parent optgroup if present
            if ("label" in elem) {
              if ("label" in elem.parentNode) {
                return elem.parentNode.disabled === disabled;
              } else {
                return elem.disabled === disabled;
              }
            } // Support: IE 6 - 11
            // Use the isDisabled shortcut property to check for disabled fieldset ancestors


            return elem.isDisabled === disabled || // Where there is no isDisabled, check manually

            /* jshint -W018 */
            elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
          }

          return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.
          // Some victims get caught in our net (label, legend, menu, track), but it shouldn't
          // even exist on them, let alone have a boolean value.
        } else if ("label" in elem) {
          return elem.disabled === disabled;
        } // Remaining elements are neither :enabled nor :disabled


        return false;
      };
    }
    /**
     * Returns a function to use in pseudos for positionals
     * @param {Function} fn
     */


    function createPositionalPseudo(fn) {
      return markFunction(function (argument) {
        argument = +argument;
        return markFunction(function (seed, matches) {
          var j,
              matchIndexes = fn([], seed.length, argument),
              i = matchIndexes.length; // Match elements found at the specified indexes

          while (i--) {
            if (seed[j = matchIndexes[i]]) {
              seed[j] = !(matches[j] = seed[j]);
            }
          }
        });
      });
    }
    /**
     * Checks a node for validity as a Sizzle context
     * @param {Element|Object=} context
     * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
     */


    function testContext(context) {
      return context && typeof context.getElementsByTagName !== "undefined" && context;
    } // Expose support vars for convenience


    support = Sizzle.support = {};
    /**
     * Detects XML nodes
     * @param {Element|Object} elem An element or a document
     * @returns {Boolean} True iff elem is a non-HTML XML node
     */

    isXML = Sizzle.isXML = function (elem) {
      // documentElement is verified for cases where it doesn't yet exist
      // (such as loading iframes in IE - #4833)
      var documentElement = elem && (elem.ownerDocument || elem).documentElement;
      return documentElement ? documentElement.nodeName !== "HTML" : false;
    };
    /**
     * Sets document-related variables once based on the current document
     * @param {Element|Object} [doc] An element or document object to use to set the document
     * @returns {Object} Returns the current document
     */


    setDocument = Sizzle.setDocument = function (node) {
      var hasCompare,
          subWindow,
          doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected

      if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
        return document;
      } // Update global variables


      document = doc;
      docElem = document.documentElement;
      documentIsHTML = !isXML(document); // Support: IE 9-11, Edge
      // Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)

      if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {
        // Support: IE 11, Edge
        if (subWindow.addEventListener) {
          subWindow.addEventListener("unload", unloadHandler, false); // Support: IE 9 - 10 only
        } else if (subWindow.attachEvent) {
          subWindow.attachEvent("onunload", unloadHandler);
        }
      }
      /* Attributes
      ---------------------------------------------------------------------- */
      // Support: IE<8
      // Verify that getAttribute really returns attributes and not properties
      // (excepting IE8 booleans)


      support.attributes = assert(function (el) {
        el.className = "i";
        return !el.getAttribute("className");
      });
      /* getElement(s)By*
      ---------------------------------------------------------------------- */
      // Check if getElementsByTagName("*") returns only elements

      support.getElementsByTagName = assert(function (el) {
        el.appendChild(document.createComment(""));
        return !el.getElementsByTagName("*").length;
      }); // Support: IE<9

      support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10
      // Check if getElementById returns elements by name
      // The broken getElementById methods don't pick up programmatically-set names,
      // so use a roundabout getElementsByName test

      support.getById = assert(function (el) {
        docElem.appendChild(el).id = expando;
        return !document.getElementsByName || !document.getElementsByName(expando).length;
      }); // ID filter and find

      if (support.getById) {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            return elem.getAttribute("id") === attrId;
          };
        };

        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var elem = context.getElementById(id);
            return elem ? [elem] : [];
          }
        };
      } else {
        Expr.filter["ID"] = function (id) {
          var attrId = id.replace(runescape, funescape);
          return function (elem) {
            var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
            return node && node.value === attrId;
          };
        }; // Support: IE 6 - 7 only
        // getElementById is not reliable as a find shortcut


        Expr.find["ID"] = function (id, context) {
          if (typeof context.getElementById !== "undefined" && documentIsHTML) {
            var node,
                i,
                elems,
                elem = context.getElementById(id);

            if (elem) {
              // Verify the id attribute
              node = elem.getAttributeNode("id");

              if (node && node.value === id) {
                return [elem];
              } // Fall back on getElementsByName


              elems = context.getElementsByName(id);
              i = 0;

              while (elem = elems[i++]) {
                node = elem.getAttributeNode("id");

                if (node && node.value === id) {
                  return [elem];
                }
              }
            }

            return [];
          }
        };
      } // Tag


      Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
        if (typeof context.getElementsByTagName !== "undefined") {
          return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
        } else if (support.qsa) {
          return context.querySelectorAll(tag);
        }
      } : function (tag, context) {
        var elem,
            tmp = [],
            i = 0,
            // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
        results = context.getElementsByTagName(tag); // Filter out possible comments

        if (tag === "*") {
          while (elem = results[i++]) {
            if (elem.nodeType === 1) {
              tmp.push(elem);
            }
          }

          return tmp;
        }

        return results;
      }; // Class

      Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
        if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
          return context.getElementsByClassName(className);
        }
      };
      /* QSA/matchesSelector
      ---------------------------------------------------------------------- */
      // QSA and matchesSelector support
      // matchesSelector(:active) reports false when true (IE9/Opera 11.5)


      rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
      // We allow this because of a bug in IE8/9 that throws an error
      // whenever `document.activeElement` is accessed on an iframe
      // So, we allow :focus to pass through QSA all the time to avoid the IE error
      // See https://bugs.jquery.com/ticket/13378

      rbuggyQSA = [];

      if (support.qsa = rnative.test(document.querySelectorAll)) {
        // Build QSA regex
        // Regex strategy adopted from Diego Perini
        assert(function (el) {
          // Select is set to empty string on purpose
          // This is to test IE's treatment of not explicitly
          // setting a boolean content attribute,
          // since its presence should be enough
          // https://bugs.jquery.com/ticket/12359
          docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
          // Nothing should be selected when empty strings follow ^= or $= or *=
          // The test attribute must be unknown in Opera but "safe" for WinRT
          // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section

          if (el.querySelectorAll("[msallowcapture^='']").length) {
            rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
          } // Support: IE8
          // Boolean attributes and "value" are not treated correctly


          if (!el.querySelectorAll("[selected]").length) {
            rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
          } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+


          if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
            rbuggyQSA.push("~=");
          } // Webkit/Opera - :checked should return selected option elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          // IE8 throws error here and will not see later tests


          if (!el.querySelectorAll(":checked").length) {
            rbuggyQSA.push(":checked");
          } // Support: Safari 8+, iOS 8+
          // https://bugs.webkit.org/show_bug.cgi?id=136851
          // In-page `selector#id sibling-combinator selector` fails


          if (!el.querySelectorAll("a#" + expando + "+*").length) {
            rbuggyQSA.push(".#.+[+~]");
          }
        });
        assert(function (el) {
          el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>"; // Support: Windows 8 Native Apps
          // The type and name attributes are restricted during .innerHTML assignment

          var input = document.createElement("input");
          input.setAttribute("type", "hidden");
          el.appendChild(input).setAttribute("name", "D"); // Support: IE8
          // Enforce case-sensitivity of name attribute

          if (el.querySelectorAll("[name=d]").length) {
            rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
          } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
          // IE8 throws error here and will not see later tests


          if (el.querySelectorAll(":enabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Support: IE9-11+
          // IE's :disabled selector does not pick up the children of disabled fieldsets


          docElem.appendChild(el).disabled = true;

          if (el.querySelectorAll(":disabled").length !== 2) {
            rbuggyQSA.push(":enabled", ":disabled");
          } // Opera 10-11 does not throw on post-comma invalid pseudos


          el.querySelectorAll("*,:x");
          rbuggyQSA.push(",.*:");
        });
      }

      if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {
        assert(function (el) {
          // Check to see if it's possible to do matchesSelector
          // on a disconnected node (IE 9)
          support.disconnectedMatch = matches.call(el, "*"); // This should fail with an exception
          // Gecko does not error, returns false instead

          matches.call(el, "[s!='']:x");
          rbuggyMatches.push("!=", pseudos);
        });
      }

      rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
      rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));
      /* Contains
      ---------------------------------------------------------------------- */

      hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
      // Purposefully self-exclusive
      // As in, an element does not contain itself

      contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
        var adown = a.nodeType === 9 ? a.documentElement : a,
            bup = b && b.parentNode;
        return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
      } : function (a, b) {
        if (b) {
          while (b = b.parentNode) {
            if (b === a) {
              return true;
            }
          }
        }

        return false;
      };
      /* Sorting
      ---------------------------------------------------------------------- */
      // Document order sorting

      sortOrder = hasCompare ? function (a, b) {
        // Flag for duplicate removal
        if (a === b) {
          hasDuplicate = true;
          return 0;
        } // Sort on method existence if only one input has compareDocumentPosition


        var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;

        if (compare) {
          return compare;
        } // Calculate position if both inputs belong to the same document


        compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected
        1; // Disconnected nodes

        if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {
          // Choose the first element that is related to our preferred document
          if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
            return -1;
          }

          if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
            return 1;
          } // Maintain original order


          return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
        }

        return compare & 4 ? -1 : 1;
      } : function (a, b) {
        // Exit early if the nodes are identical
        if (a === b) {
          hasDuplicate = true;
          return 0;
        }

        var cur,
            i = 0,
            aup = a.parentNode,
            bup = b.parentNode,
            ap = [a],
            bp = [b]; // Parentless nodes are either documents or disconnected

        if (!aup || !bup) {
          return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check
        } else if (aup === bup) {
          return siblingCheck(a, b);
        } // Otherwise we need full lists of their ancestors for comparison


        cur = a;

        while (cur = cur.parentNode) {
          ap.unshift(cur);
        }

        cur = b;

        while (cur = cur.parentNode) {
          bp.unshift(cur);
        } // Walk down the tree looking for a discrepancy


        while (ap[i] === bp[i]) {
          i++;
        }

        return i ? // Do a sibling check if the nodes have a common ancestor
        siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first
        ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
      };
      return document;
    };

    Sizzle.matches = function (expr, elements) {
      return Sizzle(expr, null, null, elements);
    };

    Sizzle.matchesSelector = function (elem, expr) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      } // Make sure that attribute selectors are quoted


      expr = expr.replace(rattributeQuotes, "='$1']");

      if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {
        try {
          var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes

          if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document
          // fragment in IE 9
          elem.document && elem.document.nodeType !== 11) {
            return ret;
          }
        } catch (e) {}
      }

      return Sizzle(expr, document, null, [elem]).length > 0;
    };

    Sizzle.contains = function (context, elem) {
      // Set document vars if needed
      if ((context.ownerDocument || context) !== document) {
        setDocument(context);
      }

      return contains(context, elem);
    };

    Sizzle.attr = function (elem, name) {
      // Set document vars if needed
      if ((elem.ownerDocument || elem) !== document) {
        setDocument(elem);
      }

      var fn = Expr.attrHandle[name.toLowerCase()],
          // Don't get fooled by Object.prototype properties (jQuery #13807)
      val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;
      return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
    };

    Sizzle.escape = function (sel) {
      return (sel + "").replace(rcssescape, fcssescape);
    };

    Sizzle.error = function (msg) {
      throw new Error("Syntax error, unrecognized expression: " + msg);
    };
    /**
     * Document sorting and removing duplicates
     * @param {ArrayLike} results
     */


    Sizzle.uniqueSort = function (results) {
      var elem,
          duplicates = [],
          j = 0,
          i = 0; // Unless we *know* we can detect duplicates, assume their presence

      hasDuplicate = !support.detectDuplicates;
      sortInput = !support.sortStable && results.slice(0);
      results.sort(sortOrder);

      if (hasDuplicate) {
        while (elem = results[i++]) {
          if (elem === results[i]) {
            j = duplicates.push(i);
          }
        }

        while (j--) {
          results.splice(duplicates[j], 1);
        }
      } // Clear input after sorting to release objects
      // See https://github.com/jquery/sizzle/pull/225


      sortInput = null;
      return results;
    };
    /**
     * Utility function for retrieving the text value of an array of DOM nodes
     * @param {Array|Element} elem
     */


    getText = Sizzle.getText = function (elem) {
      var node,
          ret = "",
          i = 0,
          nodeType = elem.nodeType;

      if (!nodeType) {
        // If no nodeType, this is expected to be an array
        while (node = elem[i++]) {
          // Do not traverse comment nodes
          ret += getText(node);
        }
      } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
        // Use textContent for elements
        // innerText usage removed for consistency of new lines (jQuery #11153)
        if (typeof elem.textContent === "string") {
          return elem.textContent;
        } else {
          // Traverse its children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            ret += getText(elem);
          }
        }
      } else if (nodeType === 3 || nodeType === 4) {
        return elem.nodeValue;
      } // Do not include comment or processing instruction nodes


      return ret;
    };

    Expr = Sizzle.selectors = {
      // Can be adjusted by the user
      cacheLength: 50,
      createPseudo: markFunction,
      match: matchExpr,
      attrHandle: {},
      find: {},
      relative: {
        ">": {
          dir: "parentNode",
          first: true
        },
        " ": {
          dir: "parentNode"
        },
        "+": {
          dir: "previousSibling",
          first: true
        },
        "~": {
          dir: "previousSibling"
        }
      },
      preFilter: {
        "ATTR": function ATTR(match) {
          match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted

          match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

          if (match[2] === "~=") {
            match[3] = " " + match[3] + " ";
          }

          return match.slice(0, 4);
        },
        "CHILD": function CHILD(match) {
          /* matches from matchExpr["CHILD"]
          1 type (only|nth|...)
          2 what (child|of-type)
          3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
          4 xn-component of xn+y argument ([+-]?\d*n|)
          5 sign of xn-component
          6 x of xn-component
          7 sign of y-component
          8 y of y-component
          */
          match[1] = match[1].toLowerCase();

          if (match[1].slice(0, 3) === "nth") {
            // nth-* requires argument
            if (!match[3]) {
              Sizzle.error(match[0]);
            } // numeric x and y parameters for Expr.filter.CHILD
            // remember that false/true cast respectively to 0/1


            match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
            match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
          } else if (match[3]) {
            Sizzle.error(match[0]);
          }

          return match;
        },
        "PSEUDO": function PSEUDO(match) {
          var excess,
              unquoted = !match[6] && match[2];

          if (matchExpr["CHILD"].test(match[0])) {
            return null;
          } // Accept quoted arguments as-is


          if (match[3]) {
            match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
          } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
          excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis
          excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {
            // excess is a negative index
            match[0] = match[0].slice(0, excess);
            match[2] = unquoted.slice(0, excess);
          } // Return only captures needed by the pseudo filter method (type and argument)


          return match.slice(0, 3);
        }
      },
      filter: {
        "TAG": function TAG(nodeNameSelector) {
          var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
          return nodeNameSelector === "*" ? function () {
            return true;
          } : function (elem) {
            return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
          };
        },
        "CLASS": function CLASS(className) {
          var pattern = classCache[className + " "];
          return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
            return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
          });
        },
        "ATTR": function ATTR(name, operator, check) {
          return function (elem) {
            var result = Sizzle.attr(elem, name);

            if (result == null) {
              return operator === "!=";
            }

            if (!operator) {
              return true;
            }

            result += "";
            return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
          };
        },
        "CHILD": function CHILD(type, what, argument, first, last) {
          var simple = type.slice(0, 3) !== "nth",
              forward = type.slice(-4) !== "last",
              ofType = what === "of-type";
          return first === 1 && last === 0 ? // Shortcut for :nth-*(n)
          function (elem) {
            return !!elem.parentNode;
          } : function (elem, context, xml) {
            var cache,
                uniqueCache,
                outerCache,
                node,
                nodeIndex,
                start,
                dir = simple !== forward ? "nextSibling" : "previousSibling",
                parent = elem.parentNode,
                name = ofType && elem.nodeName.toLowerCase(),
                useCache = !xml && !ofType,
                diff = false;

            if (parent) {
              // :(first|last|only)-(child|of-type)
              if (simple) {
                while (dir) {
                  node = elem;

                  while (node = node[dir]) {
                    if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {
                      return false;
                    }
                  } // Reverse direction for :only-* (if we haven't yet done so)


                  start = dir = type === "only" && !start && "nextSibling";
                }

                return true;
              }

              start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`

              if (forward && useCache) {
                // Seek `elem` from a previously-cached index
                // ...in a gzip-friendly way
                node = parent;
                outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                // Defend against cloned attroperties (jQuery gh-1709)

                uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                cache = uniqueCache[type] || [];
                nodeIndex = cache[0] === dirruns && cache[1];
                diff = nodeIndex && cache[2];
                node = nodeIndex && parent.childNodes[nodeIndex];

                while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
                diff = nodeIndex = 0) || start.pop()) {
                  // When found, cache indexes on `parent` and break
                  if (node.nodeType === 1 && ++diff && node === elem) {
                    uniqueCache[type] = [dirruns, nodeIndex, diff];
                    break;
                  }
                }
              } else {
                // Use previously-cached element index if available
                if (useCache) {
                  // ...in a gzip-friendly way
                  node = elem;
                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                  // Defend against cloned attroperties (jQuery gh-1709)

                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                  cache = uniqueCache[type] || [];
                  nodeIndex = cache[0] === dirruns && cache[1];
                  diff = nodeIndex;
                } // xml :nth-child(...)
                // or :nth-last-child(...) or :nth(-last)?-of-type(...)


                if (diff === false) {
                  // Use the same loop as above to seek `elem` from the start
                  while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {
                    if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {
                      // Cache the index of each encountered element
                      if (useCache) {
                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only
                        // Defend against cloned attroperties (jQuery gh-1709)

                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});
                        uniqueCache[type] = [dirruns, diff];
                      }

                      if (node === elem) {
                        break;
                      }
                    }
                  }
                }
              } // Incorporate the offset, then check against cycle size


              diff -= last;
              return diff === first || diff % first === 0 && diff / first >= 0;
            }
          };
        },
        "PSEUDO": function PSEUDO(pseudo, argument) {
          // pseudo-class names are case-insensitive
          // http://www.w3.org/TR/selectors/#pseudo-classes
          // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
          // Remember that setFilters inherits from pseudos
          var args,
              fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
          // arguments are needed to create the filter function
          // just as Sizzle does

          if (fn[expando]) {
            return fn(argument);
          } // But maintain support for old signatures


          if (fn.length > 1) {
            args = [pseudo, pseudo, "", argument];
            return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
              var idx,
                  matched = fn(seed, argument),
                  i = matched.length;

              while (i--) {
                idx = indexOf(seed, matched[i]);
                seed[idx] = !(matches[idx] = matched[i]);
              }
            }) : function (elem) {
              return fn(elem, 0, args);
            };
          }

          return fn;
        }
      },
      pseudos: {
        // Potentially complex pseudos
        "not": markFunction(function (selector) {
          // Trim the selector passed to compile
          // to avoid treating leading and trailing
          // spaces as combinators
          var input = [],
              results = [],
              matcher = compile(selector.replace(rtrim, "$1"));
          return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
            var elem,
                unmatched = matcher(seed, null, xml, []),
                i = seed.length; // Match elements unmatched by `matcher`

            while (i--) {
              if (elem = unmatched[i]) {
                seed[i] = !(matches[i] = elem);
              }
            }
          }) : function (elem, context, xml) {
            input[0] = elem;
            matcher(input, null, xml, results); // Don't keep the element (issue #299)

            input[0] = null;
            return !results.pop();
          };
        }),
        "has": markFunction(function (selector) {
          return function (elem) {
            return Sizzle(selector, elem).length > 0;
          };
        }),
        "contains": markFunction(function (text) {
          text = text.replace(runescape, funescape);
          return function (elem) {
            return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
          };
        }),
        // "Whether an element is represented by a :lang() selector
        // is based solely on the element's language value
        // being equal to the identifier C,
        // or beginning with the identifier C immediately followed by "-".
        // The matching of C against the element's language value is performed case-insensitively.
        // The identifier C does not have to be a valid language name."
        // http://www.w3.org/TR/selectors/#lang-pseudo
        "lang": markFunction(function (lang) {
          // lang value must be a valid identifier
          if (!ridentifier.test(lang || "")) {
            Sizzle.error("unsupported lang: " + lang);
          }

          lang = lang.replace(runescape, funescape).toLowerCase();
          return function (elem) {
            var elemLang;

            do {
              if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {
                elemLang = elemLang.toLowerCase();
                return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
              }
            } while ((elem = elem.parentNode) && elem.nodeType === 1);

            return false;
          };
        }),
        // Miscellaneous
        "target": function target(elem) {
          var hash = window.location && window.location.hash;
          return hash && hash.slice(1) === elem.id;
        },
        "root": function root(elem) {
          return elem === docElem;
        },
        "focus": function focus(elem) {
          return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
        },
        // Boolean properties
        "enabled": createDisabledPseudo(false),
        "disabled": createDisabledPseudo(true),
        "checked": function checked(elem) {
          // In CSS3, :checked should return both checked and selected elements
          // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
          var nodeName = elem.nodeName.toLowerCase();
          return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
        },
        "selected": function selected(elem) {
          // Accessing this property makes selected-by-default
          // options in Safari work properly
          if (elem.parentNode) {
            elem.parentNode.selectedIndex;
          }

          return elem.selected === true;
        },
        // Contents
        "empty": function empty(elem) {
          // http://www.w3.org/TR/selectors/#empty-pseudo
          // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
          //   but not by others (comment: 8; processing instruction: 7; etc.)
          // nodeType < 6 works because attributes (2) do not appear as children
          for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
            if (elem.nodeType < 6) {
              return false;
            }
          }

          return true;
        },
        "parent": function parent(elem) {
          return !Expr.pseudos["empty"](elem);
        },
        // Element/input types
        "header": function header(elem) {
          return rheader.test(elem.nodeName);
        },
        "input": function input(elem) {
          return rinputs.test(elem.nodeName);
        },
        "button": function button(elem) {
          var name = elem.nodeName.toLowerCase();
          return name === "input" && elem.type === "button" || name === "button";
        },
        "text": function text(elem) {
          var attr;
          return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
          // New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
          (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
        },
        // Position-in-collection
        "first": createPositionalPseudo(function () {
          return [0];
        }),
        "last": createPositionalPseudo(function (matchIndexes, length) {
          return [length - 1];
        }),
        "eq": createPositionalPseudo(function (matchIndexes, length, argument) {
          return [argument < 0 ? argument + length : argument];
        }),
        "even": createPositionalPseudo(function (matchIndexes, length) {
          var i = 0;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "odd": createPositionalPseudo(function (matchIndexes, length) {
          var i = 1;

          for (; i < length; i += 2) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "lt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; --i >= 0;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        }),
        "gt": createPositionalPseudo(function (matchIndexes, length, argument) {
          var i = argument < 0 ? argument + length : argument;

          for (; ++i < length;) {
            matchIndexes.push(i);
          }

          return matchIndexes;
        })
      }
    };
    Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos

    for (i in {
      radio: true,
      checkbox: true,
      file: true,
      password: true,
      image: true
    }) {
      Expr.pseudos[i] = createInputPseudo(i);
    }

    for (i in {
      submit: true,
      reset: true
    }) {
      Expr.pseudos[i] = createButtonPseudo(i);
    } // Easy API for creating new setFilters


    function setFilters() {}

    setFilters.prototype = Expr.filters = Expr.pseudos;
    Expr.setFilters = new setFilters();

    tokenize = Sizzle.tokenize = function (selector, parseOnly) {
      var matched,
          match,
          tokens,
          type,
          soFar,
          groups,
          preFilters,
          cached = tokenCache[selector + " "];

      if (cached) {
        return parseOnly ? 0 : cached.slice(0);
      }

      soFar = selector;
      groups = [];
      preFilters = Expr.preFilter;

      while (soFar) {
        // Comma and first run
        if (!matched || (match = rcomma.exec(soFar))) {
          if (match) {
            // Don't consume trailing commas as valid
            soFar = soFar.slice(match[0].length) || soFar;
          }

          groups.push(tokens = []);
        }

        matched = false; // Combinators

        if (match = rcombinators.exec(soFar)) {
          matched = match.shift();
          tokens.push({
            value: matched,
            // Cast descendant combinators to space
            type: match[0].replace(rtrim, " ")
          });
          soFar = soFar.slice(matched.length);
        } // Filters


        for (type in Expr.filter) {
          if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
            matched = match.shift();
            tokens.push({
              value: matched,
              type: type,
              matches: match
            });
            soFar = soFar.slice(matched.length);
          }
        }

        if (!matched) {
          break;
        }
      } // Return the length of the invalid excess
      // if we're just parsing
      // Otherwise, throw an error or return tokens


      return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens
      tokenCache(selector, groups).slice(0);
    };

    function toSelector(tokens) {
      var i = 0,
          len = tokens.length,
          selector = "";

      for (; i < len; i++) {
        selector += tokens[i].value;
      }

      return selector;
    }

    function addCombinator(matcher, combinator, base) {
      var dir = combinator.dir,
          skip = combinator.next,
          key = skip || dir,
          checkNonElements = base && key === "parentNode",
          doneName = done++;
      return combinator.first ? // Check against closest ancestor/preceding element
      function (elem, context, xml) {
        while (elem = elem[dir]) {
          if (elem.nodeType === 1 || checkNonElements) {
            return matcher(elem, context, xml);
          }
        }

        return false;
      } : // Check against all ancestor/preceding elements
      function (elem, context, xml) {
        var oldCache,
            uniqueCache,
            outerCache,
            newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching

        if (xml) {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              if (matcher(elem, context, xml)) {
                return true;
              }
            }
          }
        } else {
          while (elem = elem[dir]) {
            if (elem.nodeType === 1 || checkNonElements) {
              outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only
              // Defend against cloned attroperties (jQuery gh-1709)

              uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

              if (skip && skip === elem.nodeName.toLowerCase()) {
                elem = elem[dir] || elem;
              } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {
                // Assign to newCache so results back-propagate to previous elements
                return newCache[2] = oldCache[2];
              } else {
                // Reuse newcache so results back-propagate to previous elements
                uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking

                if (newCache[2] = matcher(elem, context, xml)) {
                  return true;
                }
              }
            }
          }
        }

        return false;
      };
    }

    function elementMatcher(matchers) {
      return matchers.length > 1 ? function (elem, context, xml) {
        var i = matchers.length;

        while (i--) {
          if (!matchers[i](elem, context, xml)) {
            return false;
          }
        }

        return true;
      } : matchers[0];
    }

    function multipleContexts(selector, contexts, results) {
      var i = 0,
          len = contexts.length;

      for (; i < len; i++) {
        Sizzle(selector, contexts[i], results);
      }

      return results;
    }

    function condense(unmatched, map, filter, context, xml) {
      var elem,
          newUnmatched = [],
          i = 0,
          len = unmatched.length,
          mapped = map != null;

      for (; i < len; i++) {
        if (elem = unmatched[i]) {
          if (!filter || filter(elem, context, xml)) {
            newUnmatched.push(elem);

            if (mapped) {
              map.push(i);
            }
          }
        }
      }

      return newUnmatched;
    }

    function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
      if (postFilter && !postFilter[expando]) {
        postFilter = setMatcher(postFilter);
      }

      if (postFinder && !postFinder[expando]) {
        postFinder = setMatcher(postFinder, postSelector);
      }

      return markFunction(function (seed, results, context, xml) {
        var temp,
            i,
            elem,
            preMap = [],
            postMap = [],
            preexisting = results.length,
            // Get initial elements from seed or context
        elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),
            // Prefilter to get matcher input, preserving a map for seed-results synchronization
        matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
            matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
        postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary
        [] : // ...otherwise use results directly
        results : matcherIn; // Find primary matches

        if (matcher) {
          matcher(matcherIn, matcherOut, context, xml);
        } // Apply postFilter


        if (postFilter) {
          temp = condense(matcherOut, postMap);
          postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn

          i = temp.length;

          while (i--) {
            if (elem = temp[i]) {
              matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
            }
          }
        }

        if (seed) {
          if (postFinder || preFilter) {
            if (postFinder) {
              // Get the final matcherOut by condensing this intermediate into postFinder contexts
              temp = [];
              i = matcherOut.length;

              while (i--) {
                if (elem = matcherOut[i]) {
                  // Restore matcherIn since elem is not yet a final match
                  temp.push(matcherIn[i] = elem);
                }
              }

              postFinder(null, matcherOut = [], temp, xml);
            } // Move matched elements from seed to results to keep them synchronized


            i = matcherOut.length;

            while (i--) {
              if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {
                seed[temp] = !(results[temp] = elem);
              }
            }
          } // Add elements to results, through postFinder if defined

        } else {
          matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);

          if (postFinder) {
            postFinder(null, results, matcherOut, xml);
          } else {
            push.apply(results, matcherOut);
          }
        }
      });
    }

    function matcherFromTokens(tokens) {
      var checkContext,
          matcher,
          j,
          len = tokens.length,
          leadingRelative = Expr.relative[tokens[0].type],
          implicitRelative = leadingRelative || Expr.relative[" "],
          i = leadingRelative ? 1 : 0,
          // The foundational matcher ensures that elements are reachable from top-level context(s)
      matchContext = addCombinator(function (elem) {
        return elem === checkContext;
      }, implicitRelative, true),
          matchAnyContext = addCombinator(function (elem) {
        return indexOf(checkContext, elem) > -1;
      }, implicitRelative, true),
          matchers = [function (elem, context, xml) {
        var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)

        checkContext = null;
        return ret;
      }];

      for (; i < len; i++) {
        if (matcher = Expr.relative[tokens[i].type]) {
          matchers = [addCombinator(elementMatcher(matchers), matcher)];
        } else {
          matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher

          if (matcher[expando]) {
            // Find the next relative operator (if any) for proper handling
            j = ++i;

            for (; j < len; j++) {
              if (Expr.relative[tokens[j].type]) {
                break;
              }
            }

            return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
            tokens.slice(0, i - 1).concat({
              value: tokens[i - 2].type === " " ? "*" : ""
            })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
          }

          matchers.push(matcher);
        }
      }

      return elementMatcher(matchers);
    }

    function matcherFromGroupMatchers(elementMatchers, setMatchers) {
      var bySet = setMatchers.length > 0,
          byElement = elementMatchers.length > 0,
          superMatcher = function superMatcher(seed, context, xml, results, outermost) {
        var elem,
            j,
            matcher,
            matchedCount = 0,
            i = "0",
            unmatched = seed && [],
            setMatched = [],
            contextBackup = outermostContext,
            // We must always have either seed elements or outermost context
        elems = seed || byElement && Expr.find["TAG"]("*", outermost),
            // Use integer dirruns iff this is the outermost matcher
        dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
            len = elems.length;

        if (outermost) {
          outermostContext = context === document || context || outermost;
        } // Add elements passing elementMatchers directly to results
        // Support: IE<9, Safari
        // Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id


        for (; i !== len && (elem = elems[i]) != null; i++) {
          if (byElement && elem) {
            j = 0;

            if (!context && elem.ownerDocument !== document) {
              setDocument(elem);
              xml = !documentIsHTML;
            }

            while (matcher = elementMatchers[j++]) {
              if (matcher(elem, context || document, xml)) {
                results.push(elem);
                break;
              }
            }

            if (outermost) {
              dirruns = dirrunsUnique;
            }
          } // Track unmatched elements for set filters


          if (bySet) {
            // They will have gone through all possible matchers
            if (elem = !matcher && elem) {
              matchedCount--;
            } // Lengthen the array for every element, matched or not


            if (seed) {
              unmatched.push(elem);
            }
          }
        } // `i` is now the count of elements visited above, and adding it to `matchedCount`
        // makes the latter nonnegative.


        matchedCount += i; // Apply set filters to unmatched elements
        // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
        // equals `i`), unless we didn't visit _any_ elements in the above loop because we have
        // no element matchers and no seed.
        // Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
        // case, which will result in a "00" `matchedCount` that differs from `i` but is also
        // numerically zero.

        if (bySet && i !== matchedCount) {
          j = 0;

          while (matcher = setMatchers[j++]) {
            matcher(unmatched, setMatched, context, xml);
          }

          if (seed) {
            // Reintegrate element matches to eliminate the need for sorting
            if (matchedCount > 0) {
              while (i--) {
                if (!(unmatched[i] || setMatched[i])) {
                  setMatched[i] = pop.call(results);
                }
              }
            } // Discard index placeholder values to get only actual matches


            setMatched = condense(setMatched);
          } // Add matches to results


          push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting

          if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {
            Sizzle.uniqueSort(results);
          }
        } // Override manipulation of globals by nested matchers


        if (outermost) {
          dirruns = dirrunsUnique;
          outermostContext = contextBackup;
        }

        return unmatched;
      };

      return bySet ? markFunction(superMatcher) : superMatcher;
    }

    compile = Sizzle.compile = function (selector, match
    /* Internal Use Only */
    ) {
      var i,
          setMatchers = [],
          elementMatchers = [],
          cached = compilerCache[selector + " "];

      if (!cached) {
        // Generate a function of recursive functions that can be used to check each element
        if (!match) {
          match = tokenize(selector);
        }

        i = match.length;

        while (i--) {
          cached = matcherFromTokens(match[i]);

          if (cached[expando]) {
            setMatchers.push(cached);
          } else {
            elementMatchers.push(cached);
          }
        } // Cache the compiled function


        cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization

        cached.selector = selector;
      }

      return cached;
    };
    /**
     * A low-level selection function that works with Sizzle's compiled
     *  selector functions
     * @param {String|Function} selector A selector or a pre-compiled
     *  selector function built with Sizzle.compile
     * @param {Element} context
     * @param {Array} [results]
     * @param {Array} [seed] A set of elements to match against
     */


    select = Sizzle.select = function (selector, context, results, seed) {
      var i,
          tokens,
          token,
          type,
          find,
          compiled = typeof selector === "function" && selector,
          match = !seed && tokenize(selector = compiled.selector || selector);
      results = results || []; // Try to minimize operations if there is only one selector in the list and no seed
      // (the latter of which guarantees us context)

      if (match.length === 1) {
        // Reduce context if the leading compound selector is an ID
        tokens = match[0] = match[0].slice(0);

        if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {
          context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];

          if (!context) {
            return results; // Precompiled matchers will still verify ancestry, so step up a level
          } else if (compiled) {
            context = context.parentNode;
          }

          selector = selector.slice(tokens.shift().value.length);
        } // Fetch a seed set for right-to-left matching


        i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;

        while (i--) {
          token = tokens[i]; // Abort if we hit a combinator

          if (Expr.relative[type = token.type]) {
            break;
          }

          if (find = Expr.find[type]) {
            // Search, expanding context for leading sibling combinators
            if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {
              // If seed is empty or no tokens remain, we can return early
              tokens.splice(i, 1);
              selector = seed.length && toSelector(tokens);

              if (!selector) {
                push.apply(results, seed);
                return results;
              }

              break;
            }
          }
        }
      } // Compile and execute a filtering function if one is not provided
      // Provide `match` to avoid retokenization if we modified the selector above


      (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
      return results;
    }; // One-time assignments
    // Sort stability


    support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
    // Always assume duplicates if they aren't passed to the comparison function

    support.detectDuplicates = !!hasDuplicate; // Initialize against the default document

    setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
    // Detached nodes confoundingly follow *each other*

    support.sortDetached = assert(function (el) {
      // Should return 1, but returns 4 (following)
      return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
    }); // Support: IE<8
    // Prevent attribute/property "interpolation"
    // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx

    if (!assert(function (el) {
      el.innerHTML = "<a href='#'></a>";
      return el.firstChild.getAttribute("href") === "#";
    })) {
      addHandle("type|href|height|width", function (elem, name, isXML) {
        if (!isXML) {
          return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
        }
      });
    } // Support: IE<9
    // Use defaultValue in place of getAttribute("value")


    if (!support.attributes || !assert(function (el) {
      el.innerHTML = "<input/>";
      el.firstChild.setAttribute("value", "");
      return el.firstChild.getAttribute("value") === "";
    })) {
      addHandle("value", function (elem, name, isXML) {
        if (!isXML && elem.nodeName.toLowerCase() === "input") {
          return elem.defaultValue;
        }
      });
    } // Support: IE<9
    // Use getAttributeNode to fetch booleans when getAttribute lies


    if (!assert(function (el) {
      return el.getAttribute("disabled") == null;
    })) {
      addHandle(booleans, function (elem, name, isXML) {
        var val;

        if (!isXML) {
          return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
        }
      });
    }

    return Sizzle;
  }(window);

  jQuery.find = Sizzle;
  jQuery.expr = Sizzle.selectors; // Deprecated

  jQuery.expr[":"] = jQuery.expr.pseudos;
  jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
  jQuery.text = Sizzle.getText;
  jQuery.isXMLDoc = Sizzle.isXML;
  jQuery.contains = Sizzle.contains;
  jQuery.escapeSelector = Sizzle.escape;

  var dir = function dir(elem, _dir, until) {
    var matched = [],
        truncate = until !== undefined;

    while ((elem = elem[_dir]) && elem.nodeType !== 9) {
      if (elem.nodeType === 1) {
        if (truncate && jQuery(elem).is(until)) {
          break;
        }

        matched.push(elem);
      }
    }

    return matched;
  };

  var _siblings = function siblings(n, elem) {
    var matched = [];

    for (; n; n = n.nextSibling) {
      if (n.nodeType === 1 && n !== elem) {
        matched.push(n);
      }
    }

    return matched;
  };

  var rneedsContext = jQuery.expr.match.needsContext;

  function nodeName(elem, name) {
    return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
  }

  var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i; // Implement the identical functionality for filter and not

  function winnow(elements, qualifier, not) {
    if (isFunction(qualifier)) {
      return jQuery.grep(elements, function (elem, i) {
        return !!qualifier.call(elem, i, elem) !== not;
      });
    } // Single element


    if (qualifier.nodeType) {
      return jQuery.grep(elements, function (elem) {
        return elem === qualifier !== not;
      });
    } // Arraylike of elements (jQuery, arguments, Array)


    if (typeof qualifier !== "string") {
      return jQuery.grep(elements, function (elem) {
        return indexOf.call(qualifier, elem) > -1 !== not;
      });
    } // Filtered directly for both simple and complex selectors


    return jQuery.filter(qualifier, elements, not);
  }

  jQuery.filter = function (expr, elems, not) {
    var elem = elems[0];

    if (not) {
      expr = ":not(" + expr + ")";
    }

    if (elems.length === 1 && elem.nodeType === 1) {
      return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
    }

    return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
      return elem.nodeType === 1;
    }));
  };

  jQuery.fn.extend({
    find: function find(selector) {
      var i,
          ret,
          len = this.length,
          self = this;

      if (typeof selector !== "string") {
        return this.pushStack(jQuery(selector).filter(function () {
          for (i = 0; i < len; i++) {
            if (jQuery.contains(self[i], this)) {
              return true;
            }
          }
        }));
      }

      ret = this.pushStack([]);

      for (i = 0; i < len; i++) {
        jQuery.find(selector, self[i], ret);
      }

      return len > 1 ? jQuery.uniqueSort(ret) : ret;
    },
    filter: function filter(selector) {
      return this.pushStack(winnow(this, selector || [], false));
    },
    not: function not(selector) {
      return this.pushStack(winnow(this, selector || [], true));
    },
    is: function is(selector) {
      return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
      // so $("p:first").is("p:last") won't return true for a doc with two "p".
      typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
    }
  }); // Initialize a jQuery object
  // A central reference to the root jQuery(document)

  var rootjQuery,
      // A simple way to check for HTML strings
  // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
  // Strict HTML recognition (#11290: must start with <)
  // Shortcut simple #id case for speed
  rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
      init = jQuery.fn.init = function (selector, context, root) {
    var match, elem; // HANDLE: $(""), $(null), $(undefined), $(false)

    if (!selector) {
      return this;
    } // Method init() accepts an alternate rootjQuery
    // so migrate can support jQuery.sub (gh-2101)


    root = root || rootjQuery; // Handle HTML strings

    if (typeof selector === "string") {
      if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {
        // Assume that strings that start and end with <> are HTML and skip the regex check
        match = [null, selector, null];
      } else {
        match = rquickExpr.exec(selector);
      } // Match html or make sure no context is specified for #id


      if (match && (match[1] || !context)) {
        // HANDLE: $(html) -> $(array)
        if (match[1]) {
          context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat
          // Intentionally let the error be thrown if parseHTML is not present

          jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document$1, true)); // HANDLE: $(html, props)

          if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
            for (match in context) {
              // Properties of context are called as methods if possible
              if (isFunction(this[match])) {
                this[match](context[match]); // ...and otherwise set as attributes
              } else {
                this.attr(match, context[match]);
              }
            }
          }

          return this; // HANDLE: $(#id)
        } else {
          elem = document$1.getElementById(match[2]);

          if (elem) {
            // Inject the element directly into the jQuery object
            this[0] = elem;
            this.length = 1;
          }

          return this;
        } // HANDLE: $(expr, $(...))

      } else if (!context || context.jquery) {
        return (context || root).find(selector); // HANDLE: $(expr, context)
        // (which is just equivalent to: $(context).find(expr)
      } else {
        return this.constructor(context).find(selector);
      } // HANDLE: $(DOMElement)

    } else if (selector.nodeType) {
      this[0] = selector;
      this.length = 1;
      return this; // HANDLE: $(function)
      // Shortcut for document ready
    } else if (isFunction(selector)) {
      return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present
      selector(jQuery);
    }

    return jQuery.makeArray(selector, this);
  }; // Give the init function the jQuery prototype for later instantiation


  init.prototype = jQuery.fn; // Initialize central reference

  rootjQuery = jQuery(document$1);
  var rparentsprev = /^(?:parents|prev(?:Until|All))/,
      // Methods guaranteed to produce a unique set when starting from a unique set
  guaranteedUnique = {
    children: true,
    contents: true,
    next: true,
    prev: true
  };
  jQuery.fn.extend({
    has: function has(target) {
      var targets = jQuery(target, this),
          l = targets.length;
      return this.filter(function () {
        var i = 0;

        for (; i < l; i++) {
          if (jQuery.contains(this, targets[i])) {
            return true;
          }
        }
      });
    },
    closest: function closest(selectors, context) {
      var cur,
          i = 0,
          l = this.length,
          matched = [],
          targets = typeof selectors !== "string" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context

      if (!rneedsContext.test(selectors)) {
        for (; i < l; i++) {
          for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {
            // Always skip document fragments
            if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle
            cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {
              matched.push(cur);
              break;
            }
          }
        }
      }

      return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
    },
    // Determine the position of an element within the set
    index: function index(elem) {
      // No argument, return index in parent
      if (!elem) {
        return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
      } // Index in selector


      if (typeof elem === "string") {
        return indexOf.call(jQuery(elem), this[0]);
      } // Locate the position of the desired element


      return indexOf.call(this, // If it receives a jQuery object, the first element is used
      elem.jquery ? elem[0] : elem);
    },
    add: function add(selector, context) {
      return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
    },
    addBack: function addBack(selector) {
      return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
    }
  });

  function sibling(cur, dir) {
    while ((cur = cur[dir]) && cur.nodeType !== 1) {}

    return cur;
  }

  jQuery.each({
    parent: function parent(elem) {
      var parent = elem.parentNode;
      return parent && parent.nodeType !== 11 ? parent : null;
    },
    parents: function parents(elem) {
      return dir(elem, "parentNode");
    },
    parentsUntil: function parentsUntil(elem, i, until) {
      return dir(elem, "parentNode", until);
    },
    next: function next(elem) {
      return sibling(elem, "nextSibling");
    },
    prev: function prev(elem) {
      return sibling(elem, "previousSibling");
    },
    nextAll: function nextAll(elem) {
      return dir(elem, "nextSibling");
    },
    prevAll: function prevAll(elem) {
      return dir(elem, "previousSibling");
    },
    nextUntil: function nextUntil(elem, i, until) {
      return dir(elem, "nextSibling", until);
    },
    prevUntil: function prevUntil(elem, i, until) {
      return dir(elem, "previousSibling", until);
    },
    siblings: function siblings(elem) {
      return _siblings((elem.parentNode || {}).firstChild, elem);
    },
    children: function children(elem) {
      return _siblings(elem.firstChild);
    },
    contents: function contents(elem) {
      if (nodeName(elem, "iframe")) {
        return elem.contentDocument;
      } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
      // Treat the template element as a regular one in browsers that
      // don't support it.


      if (nodeName(elem, "template")) {
        elem = elem.content || elem;
      }

      return jQuery.merge([], elem.childNodes);
    }
  }, function (name, fn) {
    jQuery.fn[name] = function (until, selector) {
      var matched = jQuery.map(this, fn, until);

      if (name.slice(-5) !== "Until") {
        selector = until;
      }

      if (selector && typeof selector === "string") {
        matched = jQuery.filter(selector, matched);
      }

      if (this.length > 1) {
        // Remove duplicates
        if (!guaranteedUnique[name]) {
          jQuery.uniqueSort(matched);
        } // Reverse order for parents* and prev-derivatives


        if (rparentsprev.test(name)) {
          matched.reverse();
        }
      }

      return this.pushStack(matched);
    };
  });
  var rnothtmlwhite = /[^\x20\t\r\n\f]+/g; // Convert String-formatted options into Object-formatted ones

  function createOptions(options) {
    var object = {};
    jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
      object[flag] = true;
    });
    return object;
  }
  /*
   * Create a callback list using the following parameters:
   *
   *	options: an optional list of space-separated options that will change how
   *			the callback list behaves or a more traditional option object
   *
   * By default a callback list will act like an event callback list and can be
   * "fired" multiple times.
   *
   * Possible options:
   *
   *	once:			will ensure the callback list can only be fired once (like a Deferred)
   *
   *	memory:			will keep track of previous values and will call any callback added
   *					after the list has been fired right away with the latest "memorized"
   *					values (like a Deferred)
   *
   *	unique:			will ensure a callback can only be added once (no duplicate in the list)
   *
   *	stopOnFalse:	interrupt callings when a callback returns false
   *
   */


  jQuery.Callbacks = function (options) {
    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

    var // Flag to know if list is currently firing
    firing,
        // Last fire value for non-forgettable lists
    memory,
        // Flag to know if list was already fired
    _fired,
        // Flag to prevent firing
    _locked,
        // Actual callback list
    list = [],
        // Queue of execution data for repeatable lists
    queue = [],
        // Index of currently firing callback (modified by add/remove as needed)
    firingIndex = -1,
        // Fire callbacks
    fire = function fire() {
      // Enforce single-firing
      _locked = _locked || options.once; // Execute callbacks for all pending executions,
      // respecting firingIndex overrides and runtime changes

      _fired = firing = true;

      for (; queue.length; firingIndex = -1) {
        memory = queue.shift();

        while (++firingIndex < list.length) {
          // Run callback and check for early termination
          if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {
            // Jump to end and forget the data so .add doesn't re-fire
            firingIndex = list.length;
            memory = false;
          }
        }
      } // Forget the data if we're done with it


      if (!options.memory) {
        memory = false;
      }

      firing = false; // Clean up if we're done firing for good

      if (_locked) {
        // Keep an empty list if we have data for future add calls
        if (memory) {
          list = []; // Otherwise, this object is spent
        } else {
          list = "";
        }
      }
    },
        // Actual Callbacks object
    self = {
      // Add a callback or a collection of callbacks to the list
      add: function add() {
        if (list) {
          // If we have memory from a past run, we should fire after adding
          if (memory && !firing) {
            firingIndex = list.length - 1;
            queue.push(memory);
          }

          (function add(args) {
            jQuery.each(args, function (_, arg) {
              if (isFunction(arg)) {
                if (!options.unique || !self.has(arg)) {
                  list.push(arg);
                }
              } else if (arg && arg.length && toType(arg) !== "string") {
                // Inspect recursively
                add(arg);
              }
            });
          })(arguments);

          if (memory && !firing) {
            fire();
          }
        }

        return this;
      },
      // Remove a callback from the list
      remove: function remove() {
        jQuery.each(arguments, function (_, arg) {
          var index;

          while ((index = jQuery.inArray(arg, list, index)) > -1) {
            list.splice(index, 1); // Handle firing indexes

            if (index <= firingIndex) {
              firingIndex--;
            }
          }
        });
        return this;
      },
      // Check if a given callback is in the list.
      // If no argument is given, return whether or not list has callbacks attached.
      has: function has(fn) {
        return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
      },
      // Remove all callbacks from the list
      empty: function empty() {
        if (list) {
          list = [];
        }

        return this;
      },
      // Disable .fire and .add
      // Abort any current/pending executions
      // Clear all callbacks and values
      disable: function disable() {
        _locked = queue = [];
        list = memory = "";
        return this;
      },
      disabled: function disabled() {
        return !list;
      },
      // Disable .fire
      // Also disable .add unless we have memory (since it would have no effect)
      // Abort any pending executions
      lock: function lock() {
        _locked = queue = [];

        if (!memory && !firing) {
          list = memory = "";
        }

        return this;
      },
      locked: function locked() {
        return !!_locked;
      },
      // Call all callbacks with the given context and arguments
      fireWith: function fireWith(context, args) {
        if (!_locked) {
          args = args || [];
          args = [context, args.slice ? args.slice() : args];
          queue.push(args);

          if (!firing) {
            fire();
          }
        }

        return this;
      },
      // Call all the callbacks with the given arguments
      fire: function fire() {
        self.fireWith(this, arguments);
        return this;
      },
      // To know if the callbacks have already been called at least once
      fired: function fired() {
        return !!_fired;
      }
    };

    return self;
  };

  function Identity(v) {
    return v;
  }

  function Thrower(ex) {
    throw ex;
  }

  function adoptValue(value, resolve, reject, noValue) {
    var method;

    try {
      // Check for promise aspect first to privilege synchronous behavior
      if (value && isFunction(method = value.promise)) {
        method.call(value).done(resolve).fail(reject); // Other thenables
      } else if (value && isFunction(method = value.then)) {
        method.call(value, resolve, reject); // Other non-thenables
      } else {
        // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
        // * false: [ value ].slice( 0 ) => resolve( value )
        // * true: [ value ].slice( 1 ) => resolve()
        resolve.apply(undefined, [value].slice(noValue));
      } // For Promises/A+, convert exceptions into rejections
      // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
      // Deferred#then to conditionally suppress rejection.

    } catch (value) {
      // Support: Android 4.0 only
      // Strict mode functions invoked without .call/.apply get global-object context
      reject.apply(undefined, [value]);
    }
  }

  jQuery.extend({
    Deferred: function Deferred(func) {
      var tuples = [// action, add listener, callbacks,
      // ... .then handlers, argument index, [final state]
      ["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
          _state = "pending",
          _promise = {
        state: function state() {
          return _state;
        },
        always: function always() {
          deferred.done(arguments).fail(arguments);
          return this;
        },
        "catch": function _catch(fn) {
          return _promise.then(null, fn);
        },
        // Keep pipe for back-compat
        pipe: function pipe()
        /* fnDone, fnFail, fnProgress */
        {
          var fns = arguments;
          return jQuery.Deferred(function (newDefer) {
            jQuery.each(tuples, function (i, tuple) {
              // Map tuples (progress, done, fail) to arguments (done, fail, progress)
              var fn = isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })
              // deferred.done(function() { bind to newDefer or newDefer.resolve })
              // deferred.fail(function() { bind to newDefer or newDefer.reject })

              deferred[tuple[1]](function () {
                var returned = fn && fn.apply(this, arguments);

                if (returned && isFunction(returned.promise)) {
                  returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
                } else {
                  newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
                }
              });
            });
            fns = null;
          }).promise();
        },
        then: function then(onFulfilled, onRejected, onProgress) {
          var maxDepth = 0;

          function resolve(depth, deferred, handler, special) {
            return function () {
              var that = this,
                  args = arguments,
                  mightThrow = function mightThrow() {
                var returned, then; // Support: Promises/A+ section 2.3.3.3.3
                // https://promisesaplus.com/#point-59
                // Ignore double-resolution attempts

                if (depth < maxDepth) {
                  return;
                }

                returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1
                // https://promisesaplus.com/#point-48

                if (returned === deferred.promise()) {
                  throw new TypeError("Thenable self-resolution");
                } // Support: Promises/A+ sections 2.3.3.1, 3.5
                // https://promisesaplus.com/#point-54
                // https://promisesaplus.com/#point-75
                // Retrieve `then` only once


                then = returned && ( // Support: Promises/A+ section 2.3.4
                // https://promisesaplus.com/#point-64
                // Only check objects and functions for thenability
                _typeof(returned) === "object" || typeof returned === "function") && returned.then; // Handle a returned thenable

                if (isFunction(then)) {
                  // Special processors (notify) just wait for resolution
                  if (special) {
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress
                  } else {
                    // ...and disregard older resolution values
                    maxDepth++;
                    then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
                  } // Handle all other returned values

                } else {
                  // Only substitute handlers pass on context
                  // and multiple values (non-spec behavior)
                  if (handler !== Identity) {
                    that = undefined;
                    args = [returned];
                  } // Process the value(s)
                  // Default process is resolve


                  (special || deferred.resolveWith)(that, args);
                }
              },
                  // Only normal processors (resolve) catch and reject exceptions
              process = special ? mightThrow : function () {
                try {
                  mightThrow();
                } catch (e) {
                  if (jQuery.Deferred.exceptionHook) {
                    jQuery.Deferred.exceptionHook(e, process.stackTrace);
                  } // Support: Promises/A+ section 2.3.3.3.4.1
                  // https://promisesaplus.com/#point-61
                  // Ignore post-resolution exceptions


                  if (depth + 1 >= maxDepth) {
                    // Only substitute handlers pass on context
                    // and multiple values (non-spec behavior)
                    if (handler !== Thrower) {
                      that = undefined;
                      args = [e];
                    }

                    deferred.rejectWith(that, args);
                  }
                }
              }; // Support: Promises/A+ section 2.3.3.3.1
              // https://promisesaplus.com/#point-57
              // Re-resolve promises immediately to dodge false rejection from
              // subsequent errors


              if (depth) {
                process();
              } else {
                // Call an optional hook to record the stack, in case of exception
                // since it's otherwise lost when execution goes async
                if (jQuery.Deferred.getStackHook) {
                  process.stackTrace = jQuery.Deferred.getStackHook();
                }

                window.setTimeout(process);
              }
            };
          }

          return jQuery.Deferred(function (newDefer) {
            // progress_handlers.add( ... )
            tuples[0][3].add(resolve(0, newDefer, isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )

            tuples[1][3].add(resolve(0, newDefer, isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )

            tuples[2][3].add(resolve(0, newDefer, isFunction(onRejected) ? onRejected : Thrower));
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function promise(obj) {
          return obj != null ? jQuery.extend(obj, _promise) : _promise;
        }
      },
          deferred = {}; // Add list-specific methods

      jQuery.each(tuples, function (i, tuple) {
        var list = tuple[2],
            stateString = tuple[5]; // promise.progress = list.add
        // promise.done = list.add
        // promise.fail = list.add

        _promise[tuple[1]] = list.add; // Handle state

        if (stateString) {
          list.add(function () {
            // state = "resolved" (i.e., fulfilled)
            // state = "rejected"
            _state = stateString;
          }, // rejected_callbacks.disable
          // fulfilled_callbacks.disable
          tuples[3 - i][2].disable, // rejected_handlers.disable
          // fulfilled_handlers.disable
          tuples[3 - i][3].disable, // progress_callbacks.lock
          tuples[0][2].lock, // progress_handlers.lock
          tuples[0][3].lock);
        } // progress_handlers.fire
        // fulfilled_handlers.fire
        // rejected_handlers.fire


        list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }
        // deferred.resolve = function() { deferred.resolveWith(...) }
        // deferred.reject = function() { deferred.rejectWith(...) }

        deferred[tuple[0]] = function () {
          deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
          return this;
        }; // deferred.notifyWith = list.fireWith
        // deferred.resolveWith = list.fireWith
        // deferred.rejectWith = list.fireWith


        deferred[tuple[0] + "With"] = list.fireWith;
      }); // Make the deferred a promise

      _promise.promise(deferred); // Call given func if any


      if (func) {
        func.call(deferred, deferred);
      } // All done!


      return deferred;
    },
    // Deferred helper
    when: function when(singleValue) {
      var // count of uncompleted subordinates
      remaining = arguments.length,
          // count of unprocessed arguments
      i = remaining,
          // subordinate fulfillment data
      resolveContexts = Array(i),
          resolveValues = _slice.call(arguments),
          // the master Deferred
      master = jQuery.Deferred(),
          // subordinate callback factory
      updateFunc = function updateFunc(i) {
        return function (value) {
          resolveContexts[i] = this;
          resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;

          if (! --remaining) {
            master.resolveWith(resolveContexts, resolveValues);
          }
        };
      }; // Single- and empty arguments are adopted like Promise.resolve


      if (remaining <= 1) {
        adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)

        if (master.state() === "pending" || isFunction(resolveValues[i] && resolveValues[i].then)) {
          return master.then();
        }
      } // Multiple arguments are aggregated like Promise.all array elements


      while (i--) {
        adoptValue(resolveValues[i], updateFunc(i), master.reject);
      }

      return master.promise();
    }
  }); // These usually indicate a programmer mistake during development,
  // warn about them ASAP rather than swallowing them by default.

  var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

  jQuery.Deferred.exceptionHook = function (error, stack) {
    // Support: IE 8 - 9 only
    // Console exists when dev tools are open, which can happen at any time
    if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
      window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
    }
  };

  jQuery.readyException = function (error) {
    window.setTimeout(function () {
      throw error;
    });
  }; // The deferred used on DOM ready


  var readyList = jQuery.Deferred();

  jQuery.fn.ready = function (fn) {
    readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup
    // happens at the time of error handling instead of callback
    // registration.
    .catch(function (error) {
      jQuery.readyException(error);
    });
    return this;
  };

  jQuery.extend({
    // Is the DOM ready to be used? Set to true once it occurs.
    isReady: false,
    // A counter to track how many items to wait for before
    // the ready event fires. See #6781
    readyWait: 1,
    // Handle when the DOM is ready
    ready: function ready(wait) {
      // Abort if there are pending holds or we're already ready
      if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
        return;
      } // Remember that the DOM is ready


      jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be

      if (wait !== true && --jQuery.readyWait > 0) {
        return;
      } // If there are functions bound, to execute


      readyList.resolveWith(document$1, [jQuery]);
    }
  });
  jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method

  function completed() {
    document$1.removeEventListener("DOMContentLoaded", completed);
    window.removeEventListener("load", completed);
    jQuery.ready();
  } // Catch cases where $(document).ready() is called
  // after the browser event has already occurred.
  // Support: IE <=9 - 10 only
  // Older IE sometimes signals "interactive" too soon


  if (document$1.readyState === "complete" || document$1.readyState !== "loading" && !document$1.documentElement.doScroll) {
    // Handle it asynchronously to allow scripts the opportunity to delay ready
    window.setTimeout(jQuery.ready);
  } else {
    // Use the handy event callback
    document$1.addEventListener("DOMContentLoaded", completed); // A fallback to window.onload, that will always work

    window.addEventListener("load", completed);
  } // Multifunctional method to get and set values of a collection
  // The value/s can optionally be executed if it's a function


  var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
    var i = 0,
        len = elems.length,
        bulk = key == null; // Sets many values

    if (toType(key) === "object") {
      chainable = true;

      for (i in key) {
        access(elems, fn, i, key[i], true, emptyGet, raw);
      } // Sets one value

    } else if (value !== undefined) {
      chainable = true;

      if (!isFunction(value)) {
        raw = true;
      }

      if (bulk) {
        // Bulk operations run against the entire set
        if (raw) {
          fn.call(elems, value);
          fn = null; // ...except when executing function values
        } else {
          bulk = fn;

          fn = function fn(elem, key, value) {
            return bulk.call(jQuery(elem), value);
          };
        }
      }

      if (fn) {
        for (; i < len; i++) {
          fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
        }
      }
    }

    if (chainable) {
      return elems;
    } // Gets


    if (bulk) {
      return fn.call(elems);
    }

    return len ? fn(elems[0], key) : emptyGet;
  }; // Matches dashed string for camelizing


  var rmsPrefix = /^-ms-/,
      rdashAlpha = /-([a-z])/g; // Used by camelCase as callback to replace()

  function fcamelCase(all, letter) {
    return letter.toUpperCase();
  } // Convert dashed to camelCase; used by the css and data modules
  // Support: IE <=9 - 11, Edge 12 - 15
  // Microsoft forgot to hump their vendor prefix (#9572)


  function camelCase(string) {
    return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
  }

  var acceptData = function acceptData(owner) {
    // Accepts only:
    //  - Node
    //    - Node.ELEMENT_NODE
    //    - Node.DOCUMENT_NODE
    //  - Object
    //    - Any
    return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
  };

  function Data() {
    this.expando = jQuery.expando + Data.uid++;
  }

  Data.uid = 1;
  Data.prototype = {
    cache: function cache(owner) {
      // Check if the owner object already has a cache
      var value = owner[this.expando]; // If not, create one

      if (!value) {
        value = {}; // We can accept data for non-element nodes in modern browsers,
        // but we should not, see #8335.
        // Always return an empty object.

        if (acceptData(owner)) {
          // If it is a node unlikely to be stringify-ed or looped over
          // use plain assignment
          if (owner.nodeType) {
            owner[this.expando] = value; // Otherwise secure it in a non-enumerable property
            // configurable must be true to allow the property to be
            // deleted when data is removed
          } else {
            Object.defineProperty(owner, this.expando, {
              value: value,
              configurable: true
            });
          }
        }
      }

      return value;
    },
    set: function set(owner, data, value) {
      var prop,
          cache = this.cache(owner); // Handle: [ owner, key, value ] args
      // Always use camelCase key (gh-2257)

      if (typeof data === "string") {
        cache[camelCase(data)] = value; // Handle: [ owner, { properties } ] args
      } else {
        // Copy the properties one-by-one to the cache object
        for (prop in data) {
          cache[camelCase(prop)] = data[prop];
        }
      }

      return cache;
    },
    get: function get(owner, key) {
      return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)
      owner[this.expando] && owner[this.expando][camelCase(key)];
    },
    access: function access(owner, key, value) {
      // In cases where either:
      //
      //   1. No key was specified
      //   2. A string key was specified, but no value provided
      //
      // Take the "read" path and allow the get method to determine
      // which value to return, respectively either:
      //
      //   1. The entire cache object
      //   2. The data stored at the key
      //
      if (key === undefined || key && typeof key === "string" && value === undefined) {
        return this.get(owner, key);
      } // When the key is not a string, or both a key and value
      // are specified, set or extend (existing objects) with either:
      //
      //   1. An object of properties
      //   2. A key and value
      //


      this.set(owner, key, value); // Since the "set" path can have two possible entry points
      // return the expected data based on which path was taken[*]

      return value !== undefined ? value : key;
    },
    remove: function remove(owner, key) {
      var i,
          cache = owner[this.expando];

      if (cache === undefined) {
        return;
      }

      if (key !== undefined) {
        // Support array or space separated string of keys
        if (Array.isArray(key)) {
          // If key is an array of keys...
          // We always set camelCase keys, so remove that.
          key = key.map(camelCase);
        } else {
          key = camelCase(key); // If a key with the spaces exists, use it.
          // Otherwise, create an array by matching non-whitespace

          key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
        }

        i = key.length;

        while (i--) {
          delete cache[key[i]];
        }
      } // Remove the expando if there's no more data


      if (key === undefined || jQuery.isEmptyObject(cache)) {
        // Support: Chrome <=35 - 45
        // Webkit & Blink performance suffers when deleting properties
        // from DOM nodes, so set to undefined instead
        // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
        if (owner.nodeType) {
          owner[this.expando] = undefined;
        } else {
          delete owner[this.expando];
        }
      }
    },
    hasData: function hasData(owner) {
      var cache = owner[this.expando];
      return cache !== undefined && !jQuery.isEmptyObject(cache);
    }
  };
  var dataPriv = new Data();
  var dataUser = new Data(); //	Implementation Summary
  //
  //	1. Enforce API surface and semantic compatibility with 1.9.x branch
  //	2. Improve the module's maintainability by reducing the storage
  //		paths to a single mechanism.
  //	3. Use the same single mechanism to support "private" and "user" data.
  //	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
  //	5. Avoid exposing implementation details on user objects (eg. expando properties)
  //	6. Provide a clear path for implementation upgrade to WeakMap in 2014

  var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
      rmultiDash = /[A-Z]/g;

  function getData(data) {
    if (data === "true") {
      return true;
    }

    if (data === "false") {
      return false;
    }

    if (data === "null") {
      return null;
    } // Only convert to a number if it doesn't change the string


    if (data === +data + "") {
      return +data;
    }

    if (rbrace.test(data)) {
      return JSON.parse(data);
    }

    return data;
  }

  function dataAttr(elem, key, data) {
    var name; // If nothing was found internally, try to fetch any
    // data from the HTML5 data-* attribute

    if (data === undefined && elem.nodeType === 1) {
      name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
      data = elem.getAttribute(name);

      if (typeof data === "string") {
        try {
          data = getData(data);
        } catch (e) {} // Make sure we set the data so it isn't changed later


        dataUser.set(elem, key, data);
      } else {
        data = undefined;
      }
    }

    return data;
  }

  jQuery.extend({
    hasData: function hasData(elem) {
      return dataUser.hasData(elem) || dataPriv.hasData(elem);
    },
    data: function data(elem, name, _data) {
      return dataUser.access(elem, name, _data);
    },
    removeData: function removeData(elem, name) {
      dataUser.remove(elem, name);
    },
    // TODO: Now that all calls to _data and _removeData have been replaced
    // with direct calls to dataPriv methods, these can be deprecated.
    _data: function _data(elem, name, data) {
      return dataPriv.access(elem, name, data);
    },
    _removeData: function _removeData(elem, name) {
      dataPriv.remove(elem, name);
    }
  });
  jQuery.fn.extend({
    data: function data(key, value) {
      var i,
          name,
          data,
          elem = this[0],
          attrs = elem && elem.attributes; // Gets all values

      if (key === undefined) {
        if (this.length) {
          data = dataUser.get(elem);

          if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
            i = attrs.length;

            while (i--) {
              // Support: IE 11 only
              // The attrs elements can be null (#14894)
              if (attrs[i]) {
                name = attrs[i].name;

                if (name.indexOf("data-") === 0) {
                  name = camelCase(name.slice(5));
                  dataAttr(elem, name, data[name]);
                }
              }
            }

            dataPriv.set(elem, "hasDataAttrs", true);
          }
        }

        return data;
      } // Sets multiple values


      if (_typeof(key) === "object") {
        return this.each(function () {
          dataUser.set(this, key);
        });
      }

      return access(this, function (value) {
        var data; // The calling jQuery object (element matches) is not empty
        // (and therefore has an element appears at this[ 0 ]) and the
        // `value` parameter was not undefined. An empty jQuery object
        // will result in `undefined` for elem = this[ 0 ] which will
        // throw an exception if an attempt to read a data cache is made.

        if (elem && value === undefined) {
          // Attempt to get data from the cache
          // The key will always be camelCased in Data
          data = dataUser.get(elem, key);

          if (data !== undefined) {
            return data;
          } // Attempt to "discover" the data in
          // HTML5 custom data-* attrs


          data = dataAttr(elem, key);

          if (data !== undefined) {
            return data;
          } // We tried really hard, but the data doesn't exist.


          return;
        } // Set the data...


        this.each(function () {
          // We always store the camelCased key
          dataUser.set(this, key, value);
        });
      }, null, value, arguments.length > 1, null, true);
    },
    removeData: function removeData(key) {
      return this.each(function () {
        dataUser.remove(this, key);
      });
    }
  });
  jQuery.extend({
    queue: function queue(elem, type, data) {
      var queue;

      if (elem) {
        type = (type || "fx") + "queue";
        queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup

        if (data) {
          if (!queue || Array.isArray(data)) {
            queue = dataPriv.access(elem, type, jQuery.makeArray(data));
          } else {
            queue.push(data);
          }
        }

        return queue || [];
      }
    },
    dequeue: function dequeue(elem, type) {
      type = type || "fx";

      var queue = jQuery.queue(elem, type),
          startLength = queue.length,
          fn = queue.shift(),
          hooks = jQuery._queueHooks(elem, type),
          next = function next() {
        jQuery.dequeue(elem, type);
      }; // If the fx queue is dequeued, always remove the progress sentinel


      if (fn === "inprogress") {
        fn = queue.shift();
        startLength--;
      }

      if (fn) {
        // Add a progress sentinel to prevent the fx queue from being
        // automatically dequeued
        if (type === "fx") {
          queue.unshift("inprogress");
        } // Clear up the last queue stop function


        delete hooks.stop;
        fn.call(elem, next, hooks);
      }

      if (!startLength && hooks) {
        hooks.empty.fire();
      }
    },
    // Not public - generate a queueHooks object, or return the current one
    _queueHooks: function _queueHooks(elem, type) {
      var key = type + "queueHooks";
      return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
        empty: jQuery.Callbacks("once memory").add(function () {
          dataPriv.remove(elem, [type + "queue", key]);
        })
      });
    }
  });
  jQuery.fn.extend({
    queue: function queue(type, data) {
      var setter = 2;

      if (typeof type !== "string") {
        data = type;
        type = "fx";
        setter--;
      }

      if (arguments.length < setter) {
        return jQuery.queue(this[0], type);
      }

      return data === undefined ? this : this.each(function () {
        var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue

        jQuery._queueHooks(this, type);

        if (type === "fx" && queue[0] !== "inprogress") {
          jQuery.dequeue(this, type);
        }
      });
    },
    dequeue: function dequeue(type) {
      return this.each(function () {
        jQuery.dequeue(this, type);
      });
    },
    clearQueue: function clearQueue(type) {
      return this.queue(type || "fx", []);
    },
    // Get a promise resolved when queues of a certain type
    // are emptied (fx is the type by default)
    promise: function promise(type, obj) {
      var tmp,
          count = 1,
          defer = jQuery.Deferred(),
          elements = this,
          i = this.length,
          resolve = function resolve() {
        if (! --count) {
          defer.resolveWith(elements, [elements]);
        }
      };

      if (typeof type !== "string") {
        obj = type;
        type = undefined;
      }

      type = type || "fx";

      while (i--) {
        tmp = dataPriv.get(elements[i], type + "queueHooks");

        if (tmp && tmp.empty) {
          count++;
          tmp.empty.add(resolve);
        }
      }

      resolve();
      return defer.promise(obj);
    }
  });
  var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
  var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");
  var cssExpand = ["Top", "Right", "Bottom", "Left"];

  var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {
    // isHiddenWithinTree might be called from jQuery#filter function;
    // in that case, element will be second argument
    elem = el || elem; // Inline style trumps all

    return elem.style.display === "none" || elem.style.display === "" && // Otherwise, check computed style
    // Support: Firefox <=43 - 45
    // Disconnected elements can have computed display: none, so first confirm that elem is
    // in the document.
    jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
  };

  var swap = function swap(elem, options, callback, args) {
    var ret,
        name,
        old = {}; // Remember the old values, and insert the new ones

    for (name in options) {
      old[name] = elem.style[name];
      elem.style[name] = options[name];
    }

    ret = callback.apply(elem, args || []); // Revert the old values

    for (name in options) {
      elem.style[name] = old[name];
    }

    return ret;
  };

  function adjustCSS(elem, prop, valueParts, tween) {
    var adjusted,
        scale,
        maxIterations = 20,
        currentValue = tween ? function () {
      return tween.cur();
    } : function () {
      return jQuery.css(elem, prop, "");
    },
        initial = currentValue(),
        unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),
        // Starting value computation is required for potential unit mismatches
    initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

    if (initialInUnit && initialInUnit[3] !== unit) {
      // Support: Firefox <=54
      // Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
      initial = initial / 2; // Trust units reported by jQuery.css

      unit = unit || initialInUnit[3]; // Iteratively approximate from a nonzero starting point

      initialInUnit = +initial || 1;

      while (maxIterations--) {
        // Evaluate and update our best guess (doubling guesses that zero out).
        // Finish if the scale equals or crosses 1 (making the old*new product non-positive).
        jQuery.style(elem, prop, initialInUnit + unit);

        if ((1 - scale) * (1 - (scale = currentValue() / initial || 0.5)) <= 0) {
          maxIterations = 0;
        }

        initialInUnit = initialInUnit / scale;
      }

      initialInUnit = initialInUnit * 2;
      jQuery.style(elem, prop, initialInUnit + unit); // Make sure we update the tween properties later on

      valueParts = valueParts || [];
    }

    if (valueParts) {
      initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified

      adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];

      if (tween) {
        tween.unit = unit;
        tween.start = initialInUnit;
        tween.end = adjusted;
      }
    }

    return adjusted;
  }

  var defaultDisplayMap = {};

  function getDefaultDisplay(elem) {
    var temp,
        doc = elem.ownerDocument,
        nodeName = elem.nodeName,
        display = defaultDisplayMap[nodeName];

    if (display) {
      return display;
    }

    temp = doc.body.appendChild(doc.createElement(nodeName));
    display = jQuery.css(temp, "display");
    temp.parentNode.removeChild(temp);

    if (display === "none") {
      display = "block";
    }

    defaultDisplayMap[nodeName] = display;
    return display;
  }

  function showHide(elements, show) {
    var display,
        elem,
        values = [],
        index = 0,
        length = elements.length; // Determine new display value for elements that need to change

    for (; index < length; index++) {
      elem = elements[index];

      if (!elem.style) {
        continue;
      }

      display = elem.style.display;

      if (show) {
        // Since we force visibility upon cascade-hidden elements, an immediate (and slow)
        // check is required in this first loop unless we have a nonempty display value (either
        // inline or about-to-be-restored)
        if (display === "none") {
          values[index] = dataPriv.get(elem, "display") || null;

          if (!values[index]) {
            elem.style.display = "";
          }
        }

        if (elem.style.display === "" && isHiddenWithinTree(elem)) {
          values[index] = getDefaultDisplay(elem);
        }
      } else {
        if (display !== "none") {
          values[index] = "none"; // Remember what we're overwriting

          dataPriv.set(elem, "display", display);
        }
      }
    } // Set the display of the elements in a second loop to avoid constant reflow


    for (index = 0; index < length; index++) {
      if (values[index] != null) {
        elements[index].style.display = values[index];
      }
    }

    return elements;
  }

  jQuery.fn.extend({
    show: function show() {
      return showHide(this, true);
    },
    hide: function hide() {
      return showHide(this);
    },
    toggle: function toggle(state) {
      if (typeof state === "boolean") {
        return state ? this.show() : this.hide();
      }

      return this.each(function () {
        if (isHiddenWithinTree(this)) {
          jQuery(this).show();
        } else {
          jQuery(this).hide();
        }
      });
    }
  });
  var rcheckableType = /^(?:checkbox|radio)$/i;
  var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;
  var rscriptType = /^$|^module$|\/(?:java|ecma)script/i; // We have to close these tags to support XHTML (#13200)

  var wrapMap = {
    // Support: IE <=9 only
    option: [1, "<select multiple='multiple'>", "</select>"],
    // XHTML parsers do not magically insert elements in the
    // same way that tag soup parsers do. So we cannot shorten
    // this by omitting <tbody> or other required elements.
    thead: [1, "<table>", "</table>"],
    col: [2, "<table><colgroup>", "</colgroup></table>"],
    tr: [2, "<table><tbody>", "</tbody></table>"],
    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    _default: [0, "", ""]
  }; // Support: IE <=9 only

  wrapMap.optgroup = wrapMap.option;
  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
  wrapMap.th = wrapMap.td;

  function getAll(context, tag) {
    // Support: IE <=9 - 11 only
    // Use typeof to avoid zero-argument method invocation on host objects (#15151)
    var ret;

    if (typeof context.getElementsByTagName !== "undefined") {
      ret = context.getElementsByTagName(tag || "*");
    } else if (typeof context.querySelectorAll !== "undefined") {
      ret = context.querySelectorAll(tag || "*");
    } else {
      ret = [];
    }

    if (tag === undefined || tag && nodeName(context, tag)) {
      return jQuery.merge([context], ret);
    }

    return ret;
  } // Mark scripts as having already been evaluated


  function setGlobalEval(elems, refElements) {
    var i = 0,
        l = elems.length;

    for (; i < l; i++) {
      dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
    }
  }

  var rhtml = /<|&#?\w+;/;

  function buildFragment(elems, context, scripts, selection, ignored) {
    var elem,
        tmp,
        tag,
        wrap,
        contains,
        j,
        fragment = context.createDocumentFragment(),
        nodes = [],
        i = 0,
        l = elems.length;

    for (; i < l; i++) {
      elem = elems[i];

      if (elem || elem === 0) {
        // Add nodes directly
        if (toType(elem) === "object") {
          // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit
          jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node
        } else if (!rhtml.test(elem)) {
          nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
        } else {
          tmp = tmp || fragment.appendChild(context.createElement("div")); // Deserialize a standard representation

          tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
          wrap = wrapMap[tag] || wrapMap._default;
          tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content

          j = wrap[0];

          while (j--) {
            tmp = tmp.lastChild;
          } // Support: Android <=4.0 only, PhantomJS 1 only
          // push.apply(_, arraylike) throws on ancient WebKit


          jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container

          tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)

          tmp.textContent = "";
        }
      }
    } // Remove wrapper from fragment


    fragment.textContent = "";
    i = 0;

    while (elem = nodes[i++]) {
      // Skip elements already in the context collection (trac-4087)
      if (selection && jQuery.inArray(elem, selection) > -1) {
        if (ignored) {
          ignored.push(elem);
        }

        continue;
      }

      contains = jQuery.contains(elem.ownerDocument, elem); // Append to fragment

      tmp = getAll(fragment.appendChild(elem), "script"); // Preserve script evaluation history

      if (contains) {
        setGlobalEval(tmp);
      } // Capture executables


      if (scripts) {
        j = 0;

        while (elem = tmp[j++]) {
          if (rscriptType.test(elem.type || "")) {
            scripts.push(elem);
          }
        }
      }
    }

    return fragment;
  }

  (function () {
    var fragment = document$1.createDocumentFragment(),
        div = fragment.appendChild(document$1.createElement("div")),
        input = document$1.createElement("input"); // Support: Android 4.0 - 4.3 only
    // Check state lost if the name is set (#11217)
    // Support: Windows Web Apps (WWA)
    // `name` and `type` must use .setAttribute for WWA (#14901)

    input.setAttribute("type", "radio");
    input.setAttribute("checked", "checked");
    input.setAttribute("name", "t");
    div.appendChild(input); // Support: Android <=4.1 only
    // Older WebKit doesn't clone checked state correctly in fragments

    support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only
    // Make sure textarea (and checkbox) defaultValue is properly cloned

    div.innerHTML = "<textarea>x</textarea>";
    support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
  })();

  var documentElement = document$1.documentElement;
  var rkeyEvent = /^key/,
      rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
      rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

  function returnTrue() {
    return true;
  }

  function returnFalse() {
    return false;
  } // Support: IE <=9 only
  // See #13393 for more info


  function safeActiveElement() {
    try {
      return document$1.activeElement;
    } catch (err) {}
  }

  function _on(elem, types, selector, data, fn, one) {
    var origFn, type; // Types can be a map of types/handlers

    if (_typeof(types) === "object") {
      // ( types-Object, selector, data )
      if (typeof selector !== "string") {
        // ( types-Object, data )
        data = data || selector;
        selector = undefined;
      }

      for (type in types) {
        _on(elem, type, selector, data, types[type], one);
      }

      return elem;
    }

    if (data == null && fn == null) {
      // ( types, fn )
      fn = selector;
      data = selector = undefined;
    } else if (fn == null) {
      if (typeof selector === "string") {
        // ( types, selector, fn )
        fn = data;
        data = undefined;
      } else {
        // ( types, data, fn )
        fn = data;
        data = selector;
        selector = undefined;
      }
    }

    if (fn === false) {
      fn = returnFalse;
    } else if (!fn) {
      return elem;
    }

    if (one === 1) {
      origFn = fn;

      fn = function fn(event) {
        // Can use an empty set, since event contains the info
        jQuery().off(event);
        return origFn.apply(this, arguments);
      }; // Use same guid so caller can remove using origFn


      fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
    }

    return elem.each(function () {
      jQuery.event.add(this, types, fn, data, selector);
    });
  }
  /*
   * Helper functions for managing events -- not part of the public interface.
   * Props to Dean Edwards' addEvent library for many of the ideas.
   */


  jQuery.event = {
    global: {},
    add: function add(elem, types, handler, data, selector) {
      var handleObjIn,
          eventHandle,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.get(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)

      if (!elemData) {
        return;
      } // Caller can pass in an object of custom data in lieu of the handler


      if (handler.handler) {
        handleObjIn = handler;
        handler = handleObjIn.handler;
        selector = handleObjIn.selector;
      } // Ensure that invalid selectors throw exceptions at attach time
      // Evaluate against documentElement in case elem is a non-element node (e.g., document)


      if (selector) {
        jQuery.find.matchesSelector(documentElement, selector);
      } // Make sure that the handler has a unique ID, used to find/remove it later


      if (!handler.guid) {
        handler.guid = jQuery.guid++;
      } // Init the element's event structure and main handler, if this is the first


      if (!(events = elemData.events)) {
        events = elemData.events = {};
      }

      if (!(eventHandle = elemData.handle)) {
        eventHandle = elemData.handle = function (e) {
          // Discard the second event of a jQuery.event.trigger() and
          // when an event is called after a page has unloaded
          return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
        };
      } // Handle multiple events separated by a space


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers

        if (!type) {
          continue;
        } // If event changes its type, use the special event handlers for the changed type


        special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type

        type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type

        special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers

        handleObj = jQuery.extend({
          type: type,
          origType: origType,
          data: data,
          handler: handler,
          guid: handler.guid,
          selector: selector,
          needsContext: selector && jQuery.expr.match.needsContext.test(selector),
          namespace: namespaces.join(".")
        }, handleObjIn); // Init the event handler queue if we're the first

        if (!(handlers = events[type])) {
          handlers = events[type] = [];
          handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false

          if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {
            if (elem.addEventListener) {
              elem.addEventListener(type, eventHandle);
            }
          }
        }

        if (special.add) {
          special.add.call(elem, handleObj);

          if (!handleObj.handler.guid) {
            handleObj.handler.guid = handler.guid;
          }
        } // Add to the element's handler list, delegates in front


        if (selector) {
          handlers.splice(handlers.delegateCount++, 0, handleObj);
        } else {
          handlers.push(handleObj);
        } // Keep track of which events have ever been used, for event optimization


        jQuery.event.global[type] = true;
      }
    },
    // Detach an event or set of events from an element
    remove: function remove(elem, types, handler, selector, mappedTypes) {
      var j,
          origCount,
          tmp,
          events,
          t,
          handleObj,
          special,
          handlers,
          type,
          namespaces,
          origType,
          elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

      if (!elemData || !(events = elemData.events)) {
        return;
      } // Once for each type.namespace in types; type may be omitted


      types = (types || "").match(rnothtmlwhite) || [""];
      t = types.length;

      while (t--) {
        tmp = rtypenamespace.exec(types[t]) || [];
        type = origType = tmp[1];
        namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element

        if (!type) {
          for (type in events) {
            jQuery.event.remove(elem, type + types[t], handler, selector, true);
          }

          continue;
        }

        special = jQuery.event.special[type] || {};
        type = (selector ? special.delegateType : special.bindType) || type;
        handlers = events[type] || [];
        tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events

        origCount = j = handlers.length;

        while (j--) {
          handleObj = handlers[j];

          if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
            handlers.splice(j, 1);

            if (handleObj.selector) {
              handlers.delegateCount--;
            }

            if (special.remove) {
              special.remove.call(elem, handleObj);
            }
          }
        } // Remove generic event handler if we removed something and no more handlers exist
        // (avoids potential for endless recursion during removal of special event handlers)


        if (origCount && !handlers.length) {
          if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {
            jQuery.removeEvent(elem, type, elemData.handle);
          }

          delete events[type];
        }
      } // Remove data and the expando if it's no longer used


      if (jQuery.isEmptyObject(events)) {
        dataPriv.remove(elem, "handle events");
      }
    },
    dispatch: function dispatch(nativeEvent) {
      // Make a writable jQuery.Event from the native event object
      var event = jQuery.event.fix(nativeEvent);
      var i,
          j,
          ret,
          matched,
          handleObj,
          handlerQueue,
          args = new Array(arguments.length),
          handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
          special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event

      args[0] = event;

      for (i = 1; i < arguments.length; i++) {
        args[i] = arguments[i];
      }

      event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired

      if (special.preDispatch && special.preDispatch.call(this, event) === false) {
        return;
      } // Determine handlers


      handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us

      i = 0;

      while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
        event.currentTarget = matched.elem;
        j = 0;

        while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {
          // Triggered event must either 1) have no namespace, or 2) have namespace(s)
          // a subset or equal to those in the bound event (both can have no namespace).
          if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {
            event.handleObj = handleObj;
            event.data = handleObj.data;
            ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

            if (ret !== undefined) {
              if ((event.result = ret) === false) {
                event.preventDefault();
                event.stopPropagation();
              }
            }
          }
        }
      } // Call the postDispatch hook for the mapped type


      if (special.postDispatch) {
        special.postDispatch.call(this, event);
      }

      return event.result;
    },
    handlers: function handlers(event, _handlers) {
      var i,
          handleObj,
          sel,
          matchedHandlers,
          matchedSelectors,
          handlerQueue = [],
          delegateCount = _handlers.delegateCount,
          cur = event.target; // Find delegate handlers

      if (delegateCount && // Support: IE <=9
      // Black-hole SVG <use> instance trees (trac-13180)
      cur.nodeType && // Support: Firefox <=42
      // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
      // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
      // Support: IE 11 only
      // ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
      !(event.type === "click" && event.button >= 1)) {
        for (; cur !== this; cur = cur.parentNode || this) {
          // Don't check non-elements (#13208)
          // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
          if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
            matchedHandlers = [];
            matchedSelectors = {};

            for (i = 0; i < delegateCount; i++) {
              handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)

              sel = handleObj.selector + " ";

              if (matchedSelectors[sel] === undefined) {
                matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
              }

              if (matchedSelectors[sel]) {
                matchedHandlers.push(handleObj);
              }
            }

            if (matchedHandlers.length) {
              handlerQueue.push({
                elem: cur,
                handlers: matchedHandlers
              });
            }
          }
        }
      } // Add the remaining (directly-bound) handlers


      cur = this;

      if (delegateCount < _handlers.length) {
        handlerQueue.push({
          elem: cur,
          handlers: _handlers.slice(delegateCount)
        });
      }

      return handlerQueue;
    },
    addProp: function addProp(name, hook) {
      Object.defineProperty(jQuery.Event.prototype, name, {
        enumerable: true,
        configurable: true,
        get: isFunction(hook) ? function () {
          if (this.originalEvent) {
            return hook(this.originalEvent);
          }
        } : function () {
          if (this.originalEvent) {
            return this.originalEvent[name];
          }
        },
        set: function set(value) {
          Object.defineProperty(this, name, {
            enumerable: true,
            configurable: true,
            writable: true,
            value: value
          });
        }
      });
    },
    fix: function fix(originalEvent) {
      return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
    },
    special: {
      load: {
        // Prevent triggered image.load events from bubbling to window.load
        noBubble: true
      },
      focus: {
        // Fire native event if possible so blur/focus sequence is correct
        trigger: function trigger() {
          if (this !== safeActiveElement() && this.focus) {
            this.focus();
            return false;
          }
        },
        delegateType: "focusin"
      },
      blur: {
        trigger: function trigger() {
          if (this === safeActiveElement() && this.blur) {
            this.blur();
            return false;
          }
        },
        delegateType: "focusout"
      },
      click: {
        // For checkbox, fire native event so checked state will be right
        trigger: function trigger() {
          if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
            this.click();
            return false;
          }
        },
        // For cross-browser consistency, don't fire native .click() on links
        _default: function _default(event) {
          return nodeName(event.target, "a");
        }
      },
      beforeunload: {
        postDispatch: function postDispatch(event) {
          // Support: Firefox 20+
          // Firefox doesn't alert if the returnValue field is not set.
          if (event.result !== undefined && event.originalEvent) {
            event.originalEvent.returnValue = event.result;
          }
        }
      }
    }
  };

  jQuery.removeEvent = function (elem, type, handle) {
    // This "if" is needed for plain objects
    if (elem.removeEventListener) {
      elem.removeEventListener(type, handle);
    }
  };

  jQuery.Event = function (src, props) {
    // Allow instantiation without the 'new' keyword
    if (!(this instanceof jQuery.Event)) {
      return new jQuery.Event(src, props);
    } // Event object


    if (src && src.type) {
      this.originalEvent = src;
      this.type = src.type; // Events bubbling up the document may have been marked as prevented
      // by a handler lower down the tree; reflect the correct value.

      this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only
      src.returnValue === false ? returnTrue : returnFalse; // Create target properties
      // Support: Safari <=6 - 7 only
      // Target should not be a text node (#504, #13143)

      this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;
      this.currentTarget = src.currentTarget;
      this.relatedTarget = src.relatedTarget; // Event type
    } else {
      this.type = src;
    } // Put explicitly provided properties onto the event object


    if (props) {
      jQuery.extend(this, props);
    } // Create a timestamp if incoming event doesn't have one


    this.timeStamp = src && src.timeStamp || Date.now(); // Mark it as fixed

    this[jQuery.expando] = true;
  }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
  // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


  jQuery.Event.prototype = {
    constructor: jQuery.Event,
    isDefaultPrevented: returnFalse,
    isPropagationStopped: returnFalse,
    isImmediatePropagationStopped: returnFalse,
    isSimulated: false,
    preventDefault: function preventDefault() {
      var e = this.originalEvent;
      this.isDefaultPrevented = returnTrue;

      if (e && !this.isSimulated) {
        e.preventDefault();
      }
    },
    stopPropagation: function stopPropagation() {
      var e = this.originalEvent;
      this.isPropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopPropagation();
      }
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      var e = this.originalEvent;
      this.isImmediatePropagationStopped = returnTrue;

      if (e && !this.isSimulated) {
        e.stopImmediatePropagation();
      }

      this.stopPropagation();
    }
  }; // Includes all common event props including KeyEvent and MouseEvent specific props

  jQuery.each({
    altKey: true,
    bubbles: true,
    cancelable: true,
    changedTouches: true,
    ctrlKey: true,
    detail: true,
    eventPhase: true,
    metaKey: true,
    pageX: true,
    pageY: true,
    shiftKey: true,
    view: true,
    "char": true,
    charCode: true,
    key: true,
    keyCode: true,
    button: true,
    buttons: true,
    clientX: true,
    clientY: true,
    offsetX: true,
    offsetY: true,
    pointerId: true,
    pointerType: true,
    screenX: true,
    screenY: true,
    targetTouches: true,
    toElement: true,
    touches: true,
    which: function which(event) {
      var button = event.button; // Add which for key events

      if (event.which == null && rkeyEvent.test(event.type)) {
        return event.charCode != null ? event.charCode : event.keyCode;
      } // Add which for click: 1 === left; 2 === middle; 3 === right


      if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
        if (button & 1) {
          return 1;
        }

        if (button & 2) {
          return 3;
        }

        if (button & 4) {
          return 2;
        }

        return 0;
      }

      return event.which;
    }
  }, jQuery.event.addProp); // Create mouseenter/leave events using mouseover/out and event-time checks
  // so that event delegation works in jQuery.
  // Do the same for pointerenter/pointerleave and pointerover/pointerout
  //
  // Support: Safari 7 only
  // Safari sends mouseenter too often; see:
  // https://bugs.chromium.org/p/chromium/issues/detail?id=470258
  // for the description of the bug (it existed in older Chrome versions as well).

  jQuery.each({
    mouseenter: "mouseover",
    mouseleave: "mouseout",
    pointerenter: "pointerover",
    pointerleave: "pointerout"
  }, function (orig, fix) {
    jQuery.event.special[orig] = {
      delegateType: fix,
      bindType: fix,
      handle: function handle(event) {
        var ret,
            target = this,
            related = event.relatedTarget,
            handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.
        // NB: No relatedTarget if the mouse left/entered the browser window

        if (!related || related !== target && !jQuery.contains(target, related)) {
          event.type = handleObj.origType;
          ret = handleObj.handler.apply(this, arguments);
          event.type = fix;
        }

        return ret;
      }
    };
  });
  jQuery.fn.extend({
    on: function on(types, selector, data, fn) {
      return _on(this, types, selector, data, fn);
    },
    one: function one(types, selector, data, fn) {
      return _on(this, types, selector, data, fn, 1);
    },
    off: function off(types, selector, fn) {
      var handleObj, type;

      if (types && types.preventDefault && types.handleObj) {
        // ( event )  dispatched jQuery.Event
        handleObj = types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
        return this;
      }

      if (_typeof(types) === "object") {
        // ( types-object [, selector] )
        for (type in types) {
          this.off(type, selector, types[type]);
        }

        return this;
      }

      if (selector === false || typeof selector === "function") {
        // ( types [, fn] )
        fn = selector;
        selector = undefined;
      }

      if (fn === false) {
        fn = returnFalse;
      }

      return this.each(function () {
        jQuery.event.remove(this, types, fn, selector);
      });
    }
  });
  var
  /* eslint-disable max-len */
  // See https://github.com/eslint/eslint/issues/3229
  rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

  /* eslint-enable */
  // Support: IE <=10 - 11, Edge 12 - 13 only
  // In IE/Edge using regex groups here causes severe slowdowns.
  // See https://connect.microsoft.com/IE/feedback/details/1736512/
  rnoInnerhtml = /<script|<style|<link/i,
      // checked="checked" or checked
  rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
      rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g; // Prefer a tbody over its parent table for containing new rows

  function manipulationTarget(elem, content) {
    if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {
      return jQuery(elem).children("tbody")[0] || elem;
    }

    return elem;
  } // Replace/restore the type attribute of script elements for safe DOM manipulation


  function disableScript(elem) {
    elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
    return elem;
  }

  function restoreScript(elem) {
    if ((elem.type || "").slice(0, 5) === "true/") {
      elem.type = elem.type.slice(5);
    } else {
      elem.removeAttribute("type");
    }

    return elem;
  }

  function cloneCopyEvent(src, dest) {
    var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

    if (dest.nodeType !== 1) {
      return;
    } // 1. Copy private data: events, handlers, etc.


    if (dataPriv.hasData(src)) {
      pdataOld = dataPriv.access(src);
      pdataCur = dataPriv.set(dest, pdataOld);
      events = pdataOld.events;

      if (events) {
        delete pdataCur.handle;
        pdataCur.events = {};

        for (type in events) {
          for (i = 0, l = events[type].length; i < l; i++) {
            jQuery.event.add(dest, type, events[type][i]);
          }
        }
      }
    } // 2. Copy user data


    if (dataUser.hasData(src)) {
      udataOld = dataUser.access(src);
      udataCur = jQuery.extend({}, udataOld);
      dataUser.set(dest, udataCur);
    }
  } // Fix IE bugs, see support tests


  function fixInput(src, dest) {
    var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.

    if (nodeName === "input" && rcheckableType.test(src.type)) {
      dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options
    } else if (nodeName === "input" || nodeName === "textarea") {
      dest.defaultValue = src.defaultValue;
    }
  }

  function domManip(collection, args, callback, ignored) {
    // Flatten any nested arrays
    args = concat.apply([], args);
    var fragment,
        first,
        scripts,
        hasScripts,
        node,
        doc,
        i = 0,
        l = collection.length,
        iNoClone = l - 1,
        value = args[0],
        valueIsFunction = isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit

    if (valueIsFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
      return collection.each(function (index) {
        var self = collection.eq(index);

        if (valueIsFunction) {
          args[0] = value.call(this, index, self.html());
        }

        domManip(self, args, callback, ignored);
      });
    }

    if (l) {
      fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
      first = fragment.firstChild;

      if (fragment.childNodes.length === 1) {
        fragment = first;
      } // Require either new content or an interest in ignored elements to invoke the callback


      if (first || ignored) {
        scripts = jQuery.map(getAll(fragment, "script"), disableScript);
        hasScripts = scripts.length; // Use the original fragment for the last item
        // instead of the first because it can end up
        // being emptied incorrectly in certain situations (#8070).

        for (; i < l; i++) {
          node = fragment;

          if (i !== iNoClone) {
            node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration

            if (hasScripts) {
              // Support: Android <=4.0 only, PhantomJS 1 only
              // push.apply(_, arraylike) throws on ancient WebKit
              jQuery.merge(scripts, getAll(node, "script"));
            }
          }

          callback.call(collection[i], node, i);
        }

        if (hasScripts) {
          doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts

          jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion

          for (i = 0; i < hasScripts; i++) {
            node = scripts[i];

            if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {
              if (node.src && (node.type || "").toLowerCase() !== "module") {
                // Optional AJAX dependency, but won't run scripts if not present
                if (jQuery._evalUrl) {
                  jQuery._evalUrl(node.src);
                }
              } else {
                DOMEval(node.textContent.replace(rcleanScript, ""), doc, node);
              }
            }
          }
        }
      }
    }

    return collection;
  }

  function _remove(elem, selector, keepData) {
    var node,
        nodes = selector ? jQuery.filter(selector, elem) : elem,
        i = 0;

    for (; (node = nodes[i]) != null; i++) {
      if (!keepData && node.nodeType === 1) {
        jQuery.cleanData(getAll(node));
      }

      if (node.parentNode) {
        if (keepData && jQuery.contains(node.ownerDocument, node)) {
          setGlobalEval(getAll(node, "script"));
        }

        node.parentNode.removeChild(node);
      }
    }

    return elem;
  }

  jQuery.extend({
    htmlPrefilter: function htmlPrefilter(html) {
      return html.replace(rxhtmlTag, "<$1></$2>");
    },
    clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
      var i,
          l,
          srcElements,
          destElements,
          clone = elem.cloneNode(true),
          inPage = jQuery.contains(elem.ownerDocument, elem); // Fix IE cloning issues

      if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {
        // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
        destElements = getAll(clone);
        srcElements = getAll(elem);

        for (i = 0, l = srcElements.length; i < l; i++) {
          fixInput(srcElements[i], destElements[i]);
        }
      } // Copy the events from the original to the clone


      if (dataAndEvents) {
        if (deepDataAndEvents) {
          srcElements = srcElements || getAll(elem);
          destElements = destElements || getAll(clone);

          for (i = 0, l = srcElements.length; i < l; i++) {
            cloneCopyEvent(srcElements[i], destElements[i]);
          }
        } else {
          cloneCopyEvent(elem, clone);
        }
      } // Preserve script evaluation history


      destElements = getAll(clone, "script");

      if (destElements.length > 0) {
        setGlobalEval(destElements, !inPage && getAll(elem, "script"));
      } // Return the cloned set


      return clone;
    },
    cleanData: function cleanData(elems) {
      var data,
          elem,
          type,
          special = jQuery.event.special,
          i = 0;

      for (; (elem = elems[i]) !== undefined; i++) {
        if (acceptData(elem)) {
          if (data = elem[dataPriv.expando]) {
            if (data.events) {
              for (type in data.events) {
                if (special[type]) {
                  jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead
                } else {
                  jQuery.removeEvent(elem, type, data.handle);
                }
              }
            } // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove


            elem[dataPriv.expando] = undefined;
          }

          if (elem[dataUser.expando]) {
            // Support: Chrome <=35 - 45+
            // Assign undefined instead of using delete, see Data#remove
            elem[dataUser.expando] = undefined;
          }
        }
      }
    }
  });
  jQuery.fn.extend({
    detach: function detach(selector) {
      return _remove(this, selector, true);
    },
    remove: function remove(selector) {
      return _remove(this, selector);
    },
    text: function text(value) {
      return access(this, function (value) {
        return value === undefined ? jQuery.text(this) : this.empty().each(function () {
          if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
            this.textContent = value;
          }
        });
      }, null, value, arguments.length);
    },
    append: function append() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.appendChild(elem);
        }
      });
    },
    prepend: function prepend() {
      return domManip(this, arguments, function (elem) {
        if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
          var target = manipulationTarget(this, elem);
          target.insertBefore(elem, target.firstChild);
        }
      });
    },
    before: function before() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this);
        }
      });
    },
    after: function after() {
      return domManip(this, arguments, function (elem) {
        if (this.parentNode) {
          this.parentNode.insertBefore(elem, this.nextSibling);
        }
      });
    },
    empty: function empty() {
      var elem,
          i = 0;

      for (; (elem = this[i]) != null; i++) {
        if (elem.nodeType === 1) {
          // Prevent memory leaks
          jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes

          elem.textContent = "";
        }
      }

      return this;
    },
    clone: function clone(dataAndEvents, deepDataAndEvents) {
      dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
      deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
      return this.map(function () {
        return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
      });
    },
    html: function html(value) {
      return access(this, function (value) {
        var elem = this[0] || {},
            i = 0,
            l = this.length;

        if (value === undefined && elem.nodeType === 1) {
          return elem.innerHTML;
        } // See if we can take a shortcut and just use innerHTML


        if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {
          value = jQuery.htmlPrefilter(value);

          try {
            for (; i < l; i++) {
              elem = this[i] || {}; // Remove element nodes and prevent memory leaks

              if (elem.nodeType === 1) {
                jQuery.cleanData(getAll(elem, false));
                elem.innerHTML = value;
              }
            }

            elem = 0; // If using innerHTML throws an exception, use the fallback method
          } catch (e) {}
        }

        if (elem) {
          this.empty().append(value);
        }
      }, null, value, arguments.length);
    },
    replaceWith: function replaceWith() {
      var ignored = []; // Make the changes, replacing each non-ignored context element with the new content

      return domManip(this, arguments, function (elem) {
        var parent = this.parentNode;

        if (jQuery.inArray(this, ignored) < 0) {
          jQuery.cleanData(getAll(this));

          if (parent) {
            parent.replaceChild(elem, this);
          }
        } // Force callback invocation

      }, ignored);
    }
  });
  jQuery.each({
    appendTo: "append",
    prependTo: "prepend",
    insertBefore: "before",
    insertAfter: "after",
    replaceAll: "replaceWith"
  }, function (name, original) {
    jQuery.fn[name] = function (selector) {
      var elems,
          ret = [],
          insert = jQuery(selector),
          last = insert.length - 1,
          i = 0;

      for (; i <= last; i++) {
        elems = i === last ? this : this.clone(true);
        jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only
        // .get() because push.apply(_, arraylike) throws on ancient WebKit

        push.apply(ret, elems.get());
      }

      return this.pushStack(ret);
    };
  });
  var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

  var getStyles = function getStyles(elem) {
    // Support: IE <=11 only, Firefox <=30 (#15098, #14150)
    // IE throws on elements created in popups
    // FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
    var view = elem.ownerDocument.defaultView;

    if (!view || !view.opener) {
      view = window;
    }

    return view.getComputedStyle(elem);
  };

  var rboxStyle = new RegExp(cssExpand.join("|"), "i");

  (function () {
    // Executing both pixelPosition & boxSizingReliable tests require only one layout
    // so they're executed at the same time to save the second computation.
    function computeStyleTests() {
      // This is a singleton, we need to execute it only once
      if (!div) {
        return;
      }

      container.style.cssText = "position:absolute;left:-11111px;width:60px;" + "margin-top:1px;padding:0;border:0";
      div.style.cssText = "position:relative;display:block;box-sizing:border-box;overflow:scroll;" + "margin:auto;border:1px;padding:1px;" + "width:60%;top:1%";
      documentElement.appendChild(container).appendChild(div);
      var divStyle = window.getComputedStyle(div);
      pixelPositionVal = divStyle.top !== "1%"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44

      reliableMarginLeftVal = roundPixelMeasures(divStyle.marginLeft) === 12; // Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
      // Some styles come back with percentage values, even though they shouldn't

      div.style.right = "60%";
      pixelBoxStylesVal = roundPixelMeasures(divStyle.right) === 36; // Support: IE 9 - 11 only
      // Detect misreporting of content dimensions for box-sizing:border-box elements

      boxSizingReliableVal = roundPixelMeasures(divStyle.width) === 36; // Support: IE 9 only
      // Detect overflow:scroll screwiness (gh-3699)

      div.style.position = "absolute";
      scrollboxSizeVal = div.offsetWidth === 36 || "absolute";
      documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and
      // it will also be a sign that checks already performed

      div = null;
    }

    function roundPixelMeasures(measure) {
      return Math.round(parseFloat(measure));
    }

    var pixelPositionVal,
        boxSizingReliableVal,
        scrollboxSizeVal,
        pixelBoxStylesVal,
        reliableMarginLeftVal,
        container = document$1.createElement("div"),
        div = document$1.createElement("div"); // Finish early in limited (non-browser) environments

    if (!div.style) {
      return;
    } // Support: IE <=9 - 11 only
    // Style of cloned element affects source element cloned (#8908)


    div.style.backgroundClip = "content-box";
    div.cloneNode(true).style.backgroundClip = "";
    support.clearCloneStyle = div.style.backgroundClip === "content-box";
    jQuery.extend(support, {
      boxSizingReliable: function boxSizingReliable() {
        computeStyleTests();
        return boxSizingReliableVal;
      },
      pixelBoxStyles: function pixelBoxStyles() {
        computeStyleTests();
        return pixelBoxStylesVal;
      },
      pixelPosition: function pixelPosition() {
        computeStyleTests();
        return pixelPositionVal;
      },
      reliableMarginLeft: function reliableMarginLeft() {
        computeStyleTests();
        return reliableMarginLeftVal;
      },
      scrollboxSize: function scrollboxSize() {
        computeStyleTests();
        return scrollboxSizeVal;
      }
    });
  })();

  function curCSS(elem, name, computed) {
    var width,
        minWidth,
        maxWidth,
        ret,
        // Support: Firefox 51+
    // Retrieving style before computed somehow
    // fixes an issue with getting wrong values
    // on detached elements
    style = elem.style;
    computed = computed || getStyles(elem); // getPropertyValue is needed for:
    //   .css('filter') (IE 9 only, #12537)
    //   .css('--customProperty) (#3144)

    if (computed) {
      ret = computed.getPropertyValue(name) || computed[name];

      if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
        ret = jQuery.style(elem, name);
      } // A tribute to the "awesome hack by Dean Edwards"
      // Android Browser returns percentage for some values,
      // but width seems to be reliably pixels.
      // This is against the CSSOM draft spec:
      // https://drafts.csswg.org/cssom/#resolved-values


      if (!support.pixelBoxStyles() && rnumnonpx.test(ret) && rboxStyle.test(name)) {
        // Remember the original values
        width = style.width;
        minWidth = style.minWidth;
        maxWidth = style.maxWidth; // Put in the new values to get a computed value out

        style.minWidth = style.maxWidth = style.width = ret;
        ret = computed.width; // Revert the changed values

        style.width = width;
        style.minWidth = minWidth;
        style.maxWidth = maxWidth;
      }
    }

    return ret !== undefined ? // Support: IE <=9 - 11 only
    // IE returns zIndex value as an integer.
    ret + "" : ret;
  }

  function addGetHookIf(conditionFn, hookFn) {
    // Define the hook, we'll check on the first run if it's really needed.
    return {
      get: function get() {
        if (conditionFn()) {
          // Hook not needed (or it's not possible to use it due
          // to missing dependency), remove it.
          delete this.get;
          return;
        } // Hook needed; redefine it so that the support test is not executed again.


        return (this.get = hookFn).apply(this, arguments);
      }
    };
  }

  var // Swappable if display is none or starts with table
  // except "table", "table-cell", or "table-caption"
  // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
  rdisplayswap = /^(none|table(?!-c[ea]).+)/,
      rcustomProp = /^--/,
      cssShow = {
    position: "absolute",
    visibility: "hidden",
    display: "block"
  },
      cssNormalTransform = {
    letterSpacing: "0",
    fontWeight: "400"
  },
      cssPrefixes = ["Webkit", "Moz", "ms"],
      emptyStyle = document$1.createElement("div").style; // Return a css property mapped to a potentially vendor prefixed property

  function vendorPropName(name) {
    // Shortcut for names that are not vendor prefixed
    if (name in emptyStyle) {
      return name;
    } // Check for vendor prefixed names


    var capName = name[0].toUpperCase() + name.slice(1),
        i = cssPrefixes.length;

    while (i--) {
      name = cssPrefixes[i] + capName;

      if (name in emptyStyle) {
        return name;
      }
    }
  } // Return a property mapped along what jQuery.cssProps suggests or to
  // a vendor prefixed property.


  function finalPropName(name) {
    var ret = jQuery.cssProps[name];

    if (!ret) {
      ret = jQuery.cssProps[name] = vendorPropName(name) || name;
    }

    return ret;
  }

  function setPositiveNumber(elem, value, subtract) {
    // Any relative (+/-) values have already been
    // normalized at this point
    var matches = rcssNum.exec(value);
    return matches ? // Guard against undefined "subtract", e.g., when used as in cssHooks
    Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
  }

  function boxModelAdjustment(elem, dimension, box, isBorderBox, styles, computedVal) {
    var i = dimension === "width" ? 1 : 0,
        extra = 0,
        delta = 0; // Adjustment may not be necessary

    if (box === (isBorderBox ? "border" : "content")) {
      return 0;
    }

    for (; i < 4; i += 2) {
      // Both box models exclude margin
      if (box === "margin") {
        delta += jQuery.css(elem, box + cssExpand[i], true, styles);
      } // If we get here with a content-box, we're seeking "padding" or "border" or "margin"


      if (!isBorderBox) {
        // Add padding
        delta += jQuery.css(elem, "padding" + cssExpand[i], true, styles); // For "border" or "margin", add border

        if (box !== "padding") {
          delta += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles); // But still keep track of it otherwise
        } else {
          extra += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        } // If we get here with a border-box (content + padding + border), we're seeking "content" or
        // "padding" or "margin"

      } else {
        // For "content", subtract padding
        if (box === "content") {
          delta -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
        } // For "content" or "padding", subtract border


        if (box !== "margin") {
          delta -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
        }
      }
    } // Account for positive content-box scroll gutter when requested by providing computedVal


    if (!isBorderBox && computedVal >= 0) {
      // offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
      // Assuming integer scroll gutter, subtract the rest and round down
      delta += Math.max(0, Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - computedVal - delta - extra - 0.5));
    }

    return delta;
  }

  function getWidthOrHeight(elem, dimension, extra) {
    // Start with computed style
    var styles = getStyles(elem),
        val = curCSS(elem, dimension, styles),
        isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box",
        valueIsBorderBox = isBorderBox; // Support: Firefox <=54
    // Return a confounding non-pixel value or feign ignorance, as appropriate.

    if (rnumnonpx.test(val)) {
      if (!extra) {
        return val;
      }

      val = "auto";
    } // Check for style in case a browser which returns unreliable values
    // for getComputedStyle silently falls back to the reliable elem.style


    valueIsBorderBox = valueIsBorderBox && (support.boxSizingReliable() || val === elem.style[dimension]); // Fall back to offsetWidth/offsetHeight when value is "auto"
    // This happens for inline elements with no explicit setting (gh-3571)
    // Support: Android <=4.1 - 4.3 only
    // Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)

    if (val === "auto" || !parseFloat(val) && jQuery.css(elem, "display", false, styles) === "inline") {
      val = elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)]; // offsetWidth/offsetHeight provide border-box values

      valueIsBorderBox = true;
    } // Normalize "" and auto


    val = parseFloat(val) || 0; // Adjust for the element's box model

    return val + boxModelAdjustment(elem, dimension, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles, // Provide the current computed size to request scroll gutter calculation (gh-3589)
    val) + "px";
  }

  jQuery.extend({
    // Add in style property hooks for overriding the default
    // behavior of getting and setting a style property
    cssHooks: {
      opacity: {
        get: function get(elem, computed) {
          if (computed) {
            // We should always get a number back from opacity
            var ret = curCSS(elem, "opacity");
            return ret === "" ? "1" : ret;
          }
        }
      }
    },
    // Don't automatically add "px" to these possibly-unitless properties
    cssNumber: {
      "animationIterationCount": true,
      "columnCount": true,
      "fillOpacity": true,
      "flexGrow": true,
      "flexShrink": true,
      "fontWeight": true,
      "lineHeight": true,
      "opacity": true,
      "order": true,
      "orphans": true,
      "widows": true,
      "zIndex": true,
      "zoom": true
    },
    // Add in properties whose names you wish to fix before
    // setting or getting the value
    cssProps: {},
    // Get and set the style property on a DOM Node
    style: function style(elem, name, value, extra) {
      // Don't set styles on text and comment nodes
      if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
        return;
      } // Make sure that we're working with the right name


      var ret,
          type,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name),
          style = elem.style; // Make sure that we're working with the right name. We don't
      // want to query the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Gets hook for the prefixed version, then unprefixed version


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value

      if (value !== undefined) {
        type = _typeof(value); // Convert "+=" or "-=" to relative numbers (#7345)

        if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
          value = adjustCSS(elem, name, ret); // Fixes bug #9237

          type = "number";
        } // Make sure that null and NaN values aren't set (#7116)


        if (value == null || value !== value) {
          return;
        } // If a number was passed in, add the unit (except for certain CSS properties)


        if (type === "number") {
          value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
        } // background-* props affect original clone's values


        if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
          style[name] = "inherit";
        } // If a hook was provided, use that value, otherwise just set the specified value


        if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {
          if (isCustomProp) {
            style.setProperty(name, value);
          } else {
            style[name] = value;
          }
        }
      } else {
        // If a hook was provided get the non-computed value from there
        if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {
          return ret;
        } // Otherwise just get the value from the style object


        return style[name];
      }
    },
    css: function css(elem, name, extra, styles) {
      var val,
          num,
          hooks,
          origName = camelCase(name),
          isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't
      // want to modify the value if it is a CSS custom property
      // since they are user-defined.

      if (!isCustomProp) {
        name = finalPropName(origName);
      } // Try prefixed name followed by the unprefixed name


      hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there

      if (hooks && "get" in hooks) {
        val = hooks.get(elem, true, extra);
      } // Otherwise, if a way to get the computed value exists, use that


      if (val === undefined) {
        val = curCSS(elem, name, styles);
      } // Convert "normal" to computed value


      if (val === "normal" && name in cssNormalTransform) {
        val = cssNormalTransform[name];
      } // Make numeric if forced or a qualifier was provided and val looks numeric


      if (extra === "" || extra) {
        num = parseFloat(val);
        return extra === true || isFinite(num) ? num || 0 : val;
      }

      return val;
    }
  });
  jQuery.each(["height", "width"], function (i, dimension) {
    jQuery.cssHooks[dimension] = {
      get: function get(elem, computed, extra) {
        if (computed) {
          // Certain elements can have dimension info if we invisibly show them
          // but it must have a current display style that would benefit
          return rdisplayswap.test(jQuery.css(elem, "display")) && ( // Support: Safari 8+
          // Table columns in Safari have non-zero offsetWidth & zero
          // getBoundingClientRect().width unless display is changed.
          // Support: IE <=11 only
          // Running getBoundingClientRect on a disconnected node
          // in IE throws an error.
          !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
            return getWidthOrHeight(elem, dimension, extra);
          }) : getWidthOrHeight(elem, dimension, extra);
        }
      },
      set: function set(elem, value, extra) {
        var matches,
            styles = getStyles(elem),
            isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box",
            subtract = extra && boxModelAdjustment(elem, dimension, extra, isBorderBox, styles); // Account for unreliable border-box dimensions by comparing offset* to computed and
        // faking a content-box to get border and padding (gh-3699)

        if (isBorderBox && support.scrollboxSize() === styles.position) {
          subtract -= Math.ceil(elem["offset" + dimension[0].toUpperCase() + dimension.slice(1)] - parseFloat(styles[dimension]) - boxModelAdjustment(elem, dimension, "border", false, styles) - 0.5);
        } // Convert to pixels if value adjustment is needed


        if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {
          elem.style[dimension] = value;
          value = jQuery.css(elem, dimension);
        }

        return setPositiveNumber(elem, value, subtract);
      }
    };
  });
  jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
    if (computed) {
      return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, {
        marginLeft: 0
      }, function () {
        return elem.getBoundingClientRect().left;
      })) + "px";
    }
  }); // These hooks are used by animate to expand properties

  jQuery.each({
    margin: "",
    padding: "",
    border: "Width"
  }, function (prefix, suffix) {
    jQuery.cssHooks[prefix + suffix] = {
      expand: function expand(value) {
        var i = 0,
            expanded = {},
            // Assumes a single number if not a string
        parts = typeof value === "string" ? value.split(" ") : [value];

        for (; i < 4; i++) {
          expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
        }

        return expanded;
      }
    };

    if (prefix !== "margin") {
      jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
    }
  });
  jQuery.fn.extend({
    css: function css(name, value) {
      return access(this, function (elem, name, value) {
        var styles,
            len,
            map = {},
            i = 0;

        if (Array.isArray(name)) {
          styles = getStyles(elem);
          len = name.length;

          for (; i < len; i++) {
            map[name[i]] = jQuery.css(elem, name[i], false, styles);
          }

          return map;
        }

        return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
      }, name, value, arguments.length > 1);
    }
  }); // Based off of the plugin by Clint Helfers, with permission.
  // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/

  jQuery.fn.delay = function (time, type) {
    time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
    type = type || "fx";
    return this.queue(type, function (next, hooks) {
      var timeout = window.setTimeout(next, time);

      hooks.stop = function () {
        window.clearTimeout(timeout);
      };
    });
  };

  (function () {
    var input = document$1.createElement("input"),
        select = document$1.createElement("select"),
        opt = select.appendChild(document$1.createElement("option"));
    input.type = "checkbox"; // Support: Android <=4.3 only
    // Default value for a checkbox should be "on"

    support.checkOn = input.value !== ""; // Support: IE <=11 only
    // Must access selectedIndex to make default options select

    support.optSelected = opt.selected; // Support: IE <=11 only
    // An input loses its value after becoming a radio

    input = document$1.createElement("input");
    input.value = "t";
    input.type = "radio";
    support.radioValue = input.value === "t";
  })();

  var boolHook,
      attrHandle = jQuery.expr.attrHandle;
  jQuery.fn.extend({
    attr: function attr(name, value) {
      return access(this, jQuery.attr, name, value, arguments.length > 1);
    },
    removeAttr: function removeAttr(name) {
      return this.each(function () {
        jQuery.removeAttr(this, name);
      });
    }
  });
  jQuery.extend({
    attr: function attr(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      } // Fallback to prop when attributes are not supported


      if (typeof elem.getAttribute === "undefined") {
        return jQuery.prop(elem, name, value);
      } // Attribute hooks are determined by the lowercase version
      // Grab necessary hook if one is defined


      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
      }

      if (value !== undefined) {
        if (value === null) {
          jQuery.removeAttr(elem, name);
          return;
        }

        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        elem.setAttribute(name, value + "");
        return value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined

      return ret == null ? undefined : ret;
    },
    attrHooks: {
      type: {
        set: function set(elem, value) {
          if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
            var val = elem.value;
            elem.setAttribute("type", value);

            if (val) {
              elem.value = val;
            }

            return value;
          }
        }
      }
    },
    removeAttr: function removeAttr(elem, value) {
      var name,
          i = 0,
          // Attribute names can contain non-HTML whitespace characters
      // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
      attrNames = value && value.match(rnothtmlwhite);

      if (attrNames && elem.nodeType === 1) {
        while (name = attrNames[i++]) {
          elem.removeAttribute(name);
        }
      }
    }
  }); // Hooks for boolean attributes

  boolHook = {
    set: function set(elem, value, name) {
      if (value === false) {
        // Remove boolean attributes when set to false
        jQuery.removeAttr(elem, name);
      } else {
        elem.setAttribute(name, name);
      }

      return name;
    }
  };
  jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
    var getter = attrHandle[name] || jQuery.find.attr;

    attrHandle[name] = function (elem, name, isXML) {
      var ret,
          handle,
          lowercaseName = name.toLowerCase();

      if (!isXML) {
        // Avoid an infinite loop by temporarily removing this function from the getter
        handle = attrHandle[lowercaseName];
        attrHandle[lowercaseName] = ret;
        ret = getter(elem, name, isXML) != null ? lowercaseName : null;
        attrHandle[lowercaseName] = handle;
      }

      return ret;
    };
  });
  var rfocusable = /^(?:input|select|textarea|button)$/i,
      rclickable = /^(?:a|area)$/i;
  jQuery.fn.extend({
    prop: function prop(name, value) {
      return access(this, jQuery.prop, name, value, arguments.length > 1);
    },
    removeProp: function removeProp(name) {
      return this.each(function () {
        delete this[jQuery.propFix[name] || name];
      });
    }
  });
  jQuery.extend({
    prop: function prop(elem, name, value) {
      var ret,
          hooks,
          nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes

      if (nType === 3 || nType === 8 || nType === 2) {
        return;
      }

      if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
        // Fix name and attach hooks
        name = jQuery.propFix[name] || name;
        hooks = jQuery.propHooks[name];
      }

      if (value !== undefined) {
        if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
          return ret;
        }

        return elem[name] = value;
      }

      if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
        return ret;
      }

      return elem[name];
    },
    propHooks: {
      tabIndex: {
        get: function get(elem) {
          // Support: IE <=9 - 11 only
          // elem.tabIndex doesn't always return the
          // correct value when it hasn't been explicitly set
          // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
          // Use proper attribute retrieval(#12072)
          var tabindex = jQuery.find.attr(elem, "tabindex");

          if (tabindex) {
            return parseInt(tabindex, 10);
          }

          if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
            return 0;
          }

          return -1;
        }
      }
    },
    propFix: {
      "for": "htmlFor",
      "class": "className"
    }
  }); // Support: IE <=11 only
  // Accessing the selectedIndex property
  // forces the browser to respect setting selected
  // on the option
  // The getter ensures a default option is selected
  // when in an optgroup
  // eslint rule "no-unused-expressions" is disabled for this code
  // since it considers such accessions noop

  if (!support.optSelected) {
    jQuery.propHooks.selected = {
      get: function get(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent && parent.parentNode) {
          parent.parentNode.selectedIndex;
        }

        return null;
      },
      set: function set(elem) {
        /* eslint no-unused-expressions: "off" */
        var parent = elem.parentNode;

        if (parent) {
          parent.selectedIndex;

          if (parent.parentNode) {
            parent.parentNode.selectedIndex;
          }
        }
      }
    };
  }

  jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
    jQuery.propFix[this.toLowerCase()] = this;
  }); // Strip and collapse whitespace according to HTML spec
  // https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace

  function stripAndCollapse(value) {
    var tokens = value.match(rnothtmlwhite) || [];
    return tokens.join(" ");
  }

  function getClass(elem) {
    return elem.getAttribute && elem.getAttribute("class") || "";
  }

  function classesToArray(value) {
    if (Array.isArray(value)) {
      return value;
    }

    if (typeof value === "string") {
      return value.match(rnothtmlwhite) || [];
    }

    return [];
  }

  jQuery.fn.extend({
    addClass: function addClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).addClass(value.call(this, j, getClass(this)));
        });
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem);
          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              if (cur.indexOf(" " + clazz + " ") < 0) {
                cur += clazz + " ";
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    removeClass: function removeClass(value) {
      var classes,
          elem,
          cur,
          curValue,
          clazz,
          j,
          finalValue,
          i = 0;

      if (isFunction(value)) {
        return this.each(function (j) {
          jQuery(this).removeClass(value.call(this, j, getClass(this)));
        });
      }

      if (!arguments.length) {
        return this.attr("class", "");
      }

      classes = classesToArray(value);

      if (classes.length) {
        while (elem = this[i++]) {
          curValue = getClass(elem); // This expression is here for better compressibility (see addClass)

          cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

          if (cur) {
            j = 0;

            while (clazz = classes[j++]) {
              // Remove *all* instances
              while (cur.indexOf(" " + clazz + " ") > -1) {
                cur = cur.replace(" " + clazz + " ", " ");
              }
            } // Only assign if different to avoid unneeded rendering.


            finalValue = stripAndCollapse(cur);

            if (curValue !== finalValue) {
              elem.setAttribute("class", finalValue);
            }
          }
        }
      }

      return this;
    },
    toggleClass: function toggleClass(value, stateVal) {
      var type = _typeof(value),
          isValidValue = type === "string" || Array.isArray(value);

      if (typeof stateVal === "boolean" && isValidValue) {
        return stateVal ? this.addClass(value) : this.removeClass(value);
      }

      if (isFunction(value)) {
        return this.each(function (i) {
          jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
        });
      }

      return this.each(function () {
        var className, i, self, classNames;

        if (isValidValue) {
          // Toggle individual class names
          i = 0;
          self = jQuery(this);
          classNames = classesToArray(value);

          while (className = classNames[i++]) {
            // Check each className given, space separated list
            if (self.hasClass(className)) {
              self.removeClass(className);
            } else {
              self.addClass(className);
            }
          } // Toggle whole class name

        } else if (value === undefined || type === "boolean") {
          className = getClass(this);

          if (className) {
            // Store className if set
            dataPriv.set(this, "__className__", className);
          } // If the element has a class name or if we're passed `false`,
          // then remove the whole classname (if there was one, the above saved it).
          // Otherwise bring back whatever was previously saved (if anything),
          // falling back to the empty string if nothing was stored.


          if (this.setAttribute) {
            this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
          }
        }
      });
    },
    hasClass: function hasClass(selector) {
      var className,
          elem,
          i = 0;
      className = " " + selector + " ";

      while (elem = this[i++]) {
        if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
          return true;
        }
      }

      return false;
    }
  });
  var rreturn = /\r/g;
  jQuery.fn.extend({
    val: function val(value) {
      var hooks,
          ret,
          valueIsFunction,
          elem = this[0];

      if (!arguments.length) {
        if (elem) {
          hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

          if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
            return ret;
          }

          ret = elem.value; // Handle most common string cases

          if (typeof ret === "string") {
            return ret.replace(rreturn, "");
          } // Handle cases where value is null/undef or number


          return ret == null ? "" : ret;
        }

        return;
      }

      valueIsFunction = isFunction(value);
      return this.each(function (i) {
        var val;

        if (this.nodeType !== 1) {
          return;
        }

        if (valueIsFunction) {
          val = value.call(this, i, jQuery(this).val());
        } else {
          val = value;
        } // Treat null/undefined as ""; convert numbers to string


        if (val == null) {
          val = "";
        } else if (typeof val === "number") {
          val += "";
        } else if (Array.isArray(val)) {
          val = jQuery.map(val, function (value) {
            return value == null ? "" : value + "";
          });
        }

        hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting

        if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
          this.value = val;
        }
      });
    }
  });
  jQuery.extend({
    valHooks: {
      option: {
        get: function get(elem) {
          var val = jQuery.find.attr(elem, "value");
          return val != null ? val : // Support: IE <=10 - 11 only
          // option.text throws exceptions (#14686, #14858)
          // Strip and collapse whitespace
          // https://html.spec.whatwg.org/#strip-and-collapse-whitespace
          stripAndCollapse(jQuery.text(elem));
        }
      },
      select: {
        get: function get(elem) {
          var value,
              option,
              i,
              options = elem.options,
              index = elem.selectedIndex,
              one = elem.type === "select-one",
              values = one ? null : [],
              max = one ? index + 1 : options.length;

          if (index < 0) {
            i = max;
          } else {
            i = one ? index : 0;
          } // Loop through all the selected options


          for (; i < max; i++) {
            option = options[i]; // Support: IE <=9 only
            // IE8-9 doesn't update selected after form reset (#2551)

            if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup
            !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {
              // Get the specific value for the option
              value = jQuery(option).val(); // We don't need an array for one selects

              if (one) {
                return value;
              } // Multi-Selects return an array


              values.push(value);
            }
          }

          return values;
        },
        set: function set(elem, value) {
          var optionSet,
              option,
              options = elem.options,
              values = jQuery.makeArray(value),
              i = options.length;

          while (i--) {
            option = options[i];
            /* eslint-disable no-cond-assign */

            if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
              optionSet = true;
            }
            /* eslint-enable no-cond-assign */

          } // Force browsers to behave consistently when non-matching value is set


          if (!optionSet) {
            elem.selectedIndex = -1;
          }

          return values;
        }
      }
    }
  }); // Radios and checkboxes getter/setter

  jQuery.each(["radio", "checkbox"], function () {
    jQuery.valHooks[this] = {
      set: function set(elem, value) {
        if (Array.isArray(value)) {
          return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
        }
      }
    };

    if (!support.checkOn) {
      jQuery.valHooks[this].get = function (elem) {
        return elem.getAttribute("value") === null ? "on" : elem.value;
      };
    }
  }); // Return jQuery for attributes-only inclusion

  support.focusin = "onfocusin" in window;

  var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
      stopPropagationCallback = function stopPropagationCallback(e) {
    e.stopPropagation();
  };

  jQuery.extend(jQuery.event, {
    trigger: function trigger(event, data, elem, onlyHandlers) {
      var i,
          cur,
          tmp,
          bubbleType,
          ontype,
          handle,
          special,
          lastElement,
          eventPath = [elem || document$1],
          type = hasOwn.call(event, "type") ? event.type : event,
          namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];
      cur = lastElement = tmp = elem = elem || document$1; // Don't do events on text and comment nodes

      if (elem.nodeType === 3 || elem.nodeType === 8) {
        return;
      } // focus/blur morphs to focusin/out; ensure we're not firing them right now


      if (rfocusMorph.test(type + jQuery.event.triggered)) {
        return;
      }

      if (type.indexOf(".") > -1) {
        // Namespaced trigger; create a regexp to match event type in handle()
        namespaces = type.split(".");
        type = namespaces.shift();
        namespaces.sort();
      }

      ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string

      event = event[jQuery.expando] ? event : new jQuery.Event(type, _typeof(event) === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)

      event.isTrigger = onlyHandlers ? 2 : 3;
      event.namespace = namespaces.join(".");
      event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null; // Clean up the event in case it is being reused

      event.result = undefined;

      if (!event.target) {
        event.target = elem;
      } // Clone any incoming data and prepend the event, creating the handler arg list


      data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines

      special = jQuery.event.special[type] || {};

      if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
        return;
      } // Determine event propagation path in advance, per W3C events spec (#9951)
      // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)


      if (!onlyHandlers && !special.noBubble && !isWindow(elem)) {
        bubbleType = special.delegateType || type;

        if (!rfocusMorph.test(bubbleType + type)) {
          cur = cur.parentNode;
        }

        for (; cur; cur = cur.parentNode) {
          eventPath.push(cur);
          tmp = cur;
        } // Only add window if we got to document (e.g., not plain obj or detached DOM)


        if (tmp === (elem.ownerDocument || document$1)) {
          eventPath.push(tmp.defaultView || tmp.parentWindow || window);
        }
      } // Fire handlers on the event path


      i = 0;

      while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {
        lastElement = cur;
        event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler

        handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");

        if (handle) {
          handle.apply(cur, data);
        } // Native handler


        handle = ontype && cur[ontype];

        if (handle && handle.apply && acceptData(cur)) {
          event.result = handle.apply(cur, data);

          if (event.result === false) {
            event.preventDefault();
          }
        }
      }

      event.type = type; // If nobody prevented the default action, do it now

      if (!onlyHandlers && !event.isDefaultPrevented()) {
        if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {
          // Call a native DOM method on the target with the same name as the event.
          // Don't do default actions on window, that's where global variables be (#6170)
          if (ontype && isFunction(elem[type]) && !isWindow(elem)) {
            // Don't re-trigger an onFOO event when we call its FOO() method
            tmp = elem[ontype];

            if (tmp) {
              elem[ontype] = null;
            } // Prevent re-triggering of the same event, since we already bubbled it above


            jQuery.event.triggered = type;

            if (event.isPropagationStopped()) {
              lastElement.addEventListener(type, stopPropagationCallback);
            }

            elem[type]();

            if (event.isPropagationStopped()) {
              lastElement.removeEventListener(type, stopPropagationCallback);
            }

            jQuery.event.triggered = undefined;

            if (tmp) {
              elem[ontype] = tmp;
            }
          }
        }
      }

      return event.result;
    },
    // Piggyback on a donor event to simulate a different one
    // Used only for `focus(in | out)` events
    simulate: function simulate(type, elem, event) {
      var e = jQuery.extend(new jQuery.Event(), event, {
        type: type,
        isSimulated: true
      });
      jQuery.event.trigger(e, null, elem);
    }
  });
  jQuery.fn.extend({
    trigger: function trigger(type, data) {
      return this.each(function () {
        jQuery.event.trigger(type, data, this);
      });
    },
    triggerHandler: function triggerHandler(type, data) {
      var elem = this[0];

      if (elem) {
        return jQuery.event.trigger(type, data, elem, true);
      }
    }
  }); // Support: Firefox <=44
  // Firefox doesn't have focus(in | out) events
  // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
  //
  // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
  // focus(in | out) events fire after focus & blur events,
  // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
  // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857

  if (!support.focusin) {
    jQuery.each({
      focus: "focusin",
      blur: "focusout"
    }, function (orig, fix) {
      // Attach a single capturing handler on the document while someone wants focusin/focusout
      var handler = function handler(event) {
        jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
      };

      jQuery.event.special[fix] = {
        setup: function setup() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix);

          if (!attaches) {
            doc.addEventListener(orig, handler, true);
          }

          dataPriv.access(doc, fix, (attaches || 0) + 1);
        },
        teardown: function teardown() {
          var doc = this.ownerDocument || this,
              attaches = dataPriv.access(doc, fix) - 1;

          if (!attaches) {
            doc.removeEventListener(orig, handler, true);
            dataPriv.remove(doc, fix);
          } else {
            dataPriv.access(doc, fix, attaches);
          }
        }
      };
    });
  }

  var rbracket = /\[\]$/,
      rCRLF = /\r?\n/g,
      rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
      rsubmittable = /^(?:input|select|textarea|keygen)/i;

  function buildParams(prefix, obj, traditional, add) {
    var name;

    if (Array.isArray(obj)) {
      // Serialize array item.
      jQuery.each(obj, function (i, v) {
        if (traditional || rbracket.test(prefix)) {
          // Treat each array item as a scalar.
          add(prefix, v);
        } else {
          // Item is non-scalar (array or object), encode its numeric index.
          buildParams(prefix + "[" + (_typeof(v) === "object" && v != null ? i : "") + "]", v, traditional, add);
        }
      });
    } else if (!traditional && toType(obj) === "object") {
      // Serialize object item.
      for (name in obj) {
        buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
      }
    } else {
      // Serialize scalar item.
      add(prefix, obj);
    }
  } // Serialize an array of form elements or a set of
  // key/values into a query string


  jQuery.param = function (a, traditional) {
    var prefix,
        s = [],
        add = function add(key, valueOrFunction) {
      // If value is a function, invoke it and use its return value
      var value = isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;
      s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
    }; // If an array was passed in, assume that it is an array of form elements.


    if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {
      // Serialize the form elements
      jQuery.each(a, function () {
        add(this.name, this.value);
      });
    } else {
      // If traditional, encode the "old" way (the way 1.3.2 or older
      // did it), otherwise encode params recursively.
      for (prefix in a) {
        buildParams(prefix, a[prefix], traditional, add);
      }
    } // Return the resulting serialization


    return s.join("&");
  };

  jQuery.fn.extend({
    serialize: function serialize() {
      return jQuery.param(this.serializeArray());
    },
    serializeArray: function serializeArray() {
      return this.map(function () {
        // Can add propHook for "elements" to filter or add form elements
        var elements = jQuery.prop(this, "elements");
        return elements ? jQuery.makeArray(elements) : this;
      }).filter(function () {
        var type = this.type; // Use .is( ":disabled" ) so that fieldset[disabled] works

        return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
      }).map(function (i, elem) {
        var val = jQuery(this).val();

        if (val == null) {
          return null;
        }

        if (Array.isArray(val)) {
          return jQuery.map(val, function (val) {
            return {
              name: elem.name,
              value: val.replace(rCRLF, "\r\n")
            };
          });
        }

        return {
          name: elem.name,
          value: val.replace(rCRLF, "\r\n")
        };
      }).get();
    }
  });
  jQuery.fn.extend({
    wrapAll: function wrapAll(html) {
      var wrap;

      if (this[0]) {
        if (isFunction(html)) {
          html = html.call(this[0]);
        } // The elements to wrap the target around


        wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

        if (this[0].parentNode) {
          wrap.insertBefore(this[0]);
        }

        wrap.map(function () {
          var elem = this;

          while (elem.firstElementChild) {
            elem = elem.firstElementChild;
          }

          return elem;
        }).append(this);
      }

      return this;
    },
    wrapInner: function wrapInner(html) {
      if (isFunction(html)) {
        return this.each(function (i) {
          jQuery(this).wrapInner(html.call(this, i));
        });
      }

      return this.each(function () {
        var self = jQuery(this),
            contents = self.contents();

        if (contents.length) {
          contents.wrapAll(html);
        } else {
          self.append(html);
        }
      });
    },
    wrap: function wrap(html) {
      var htmlIsFunction = isFunction(html);
      return this.each(function (i) {
        jQuery(this).wrapAll(htmlIsFunction ? html.call(this, i) : html);
      });
    },
    unwrap: function unwrap(selector) {
      this.parent(selector).not("body").each(function () {
        jQuery(this).replaceWith(this.childNodes);
      });
      return this;
    }
  });

  jQuery.expr.pseudos.hidden = function (elem) {
    return !jQuery.expr.pseudos.visible(elem);
  };

  jQuery.expr.pseudos.visible = function (elem) {
    return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
  }; // Support: Safari 8 only
  // In Safari 8 documents created via document.implementation.createHTMLDocument
  // collapse sibling forms: the second one becomes a child of the first one.
  // Because of that, this security measure has to be disabled in Safari 8.
  // https://bugs.webkit.org/show_bug.cgi?id=137337


  support.createHTMLDocument = function () {
    var body = document$1.implementation.createHTMLDocument("").body;
    body.innerHTML = "<form></form><form></form>";
    return body.childNodes.length === 2;
  }(); // Argument "data" should be string of html
  // context (optional): If specified, the fragment will be created in this context,
  // defaults to document
  // keepScripts (optional): If true, will include scripts passed in the html string


  jQuery.parseHTML = function (data, context, keepScripts) {
    if (typeof data !== "string") {
      return [];
    }

    if (typeof context === "boolean") {
      keepScripts = context;
      context = false;
    }

    var base, parsed, scripts;

    if (!context) {
      // Stop scripts or inline event handlers from being executed immediately
      // by using document.implementation
      if (support.createHTMLDocument) {
        context = document$1.implementation.createHTMLDocument(""); // Set the base href for the created document
        // so any parsed elements with URLs
        // are based on the document's URL (gh-2965)

        base = context.createElement("base");
        base.href = document$1.location.href;
        context.head.appendChild(base);
      } else {
        context = document$1;
      }
    }

    parsed = rsingleTag.exec(data);
    scripts = !keepScripts && []; // Single tag

    if (parsed) {
      return [context.createElement(parsed[1])];
    }

    parsed = buildFragment([data], context, scripts);

    if (scripts && scripts.length) {
      jQuery(scripts).remove();
    }

    return jQuery.merge([], parsed.childNodes);
  };

  jQuery.offset = {
    setOffset: function setOffset(elem, options, i) {
      var curPosition,
          curLeft,
          curCSSTop,
          curTop,
          curOffset,
          curCSSLeft,
          calculatePosition,
          position = jQuery.css(elem, "position"),
          curElem = jQuery(elem),
          props = {}; // Set position first, in-case top/left are set even on static elem

      if (position === "static") {
        elem.style.position = "relative";
      }

      curOffset = curElem.offset();
      curCSSTop = jQuery.css(elem, "top");
      curCSSLeft = jQuery.css(elem, "left");
      calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1; // Need to be able to calculate position if either
      // top or left is auto and position is either absolute or fixed

      if (calculatePosition) {
        curPosition = curElem.position();
        curTop = curPosition.top;
        curLeft = curPosition.left;
      } else {
        curTop = parseFloat(curCSSTop) || 0;
        curLeft = parseFloat(curCSSLeft) || 0;
      }

      if (isFunction(options)) {
        // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
        options = options.call(elem, i, jQuery.extend({}, curOffset));
      }

      if (options.top != null) {
        props.top = options.top - curOffset.top + curTop;
      }

      if (options.left != null) {
        props.left = options.left - curOffset.left + curLeft;
      }

      if ("using" in options) {
        options.using.call(elem, props);
      } else {
        curElem.css(props);
      }
    }
  };
  jQuery.fn.extend({
    // offset() relates an element's border box to the document origin
    offset: function offset(options) {
      // Preserve chaining for setter
      if (arguments.length) {
        return options === undefined ? this : this.each(function (i) {
          jQuery.offset.setOffset(this, options, i);
        });
      }

      var rect,
          win,
          elem = this[0];

      if (!elem) {
        return;
      } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
      // Support: IE <=11 only
      // Running getBoundingClientRect on a
      // disconnected node in IE throws an error


      if (!elem.getClientRects().length) {
        return {
          top: 0,
          left: 0
        };
      } // Get document-relative position by adding viewport scroll to viewport-relative gBCR


      rect = elem.getBoundingClientRect();
      win = elem.ownerDocument.defaultView;
      return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
      };
    },
    // position() relates an element's margin box to its offset parent's padding box
    // This corresponds to the behavior of CSS absolute positioning
    position: function position() {
      if (!this[0]) {
        return;
      }

      var offsetParent,
          offset,
          doc,
          elem = this[0],
          parentOffset = {
        top: 0,
        left: 0
      }; // position:fixed elements are offset from the viewport, which itself always has zero offset

      if (jQuery.css(elem, "position") === "fixed") {
        // Assume position:fixed implies availability of getBoundingClientRect
        offset = elem.getBoundingClientRect();
      } else {
        offset = this.offset(); // Account for the *real* offset parent, which can be the document or its root element
        // when a statically positioned element is identified

        doc = elem.ownerDocument;
        offsetParent = elem.offsetParent || doc.documentElement;

        while (offsetParent && (offsetParent === doc.body || offsetParent === doc.documentElement) && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.parentNode;
        }

        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
          // Incorporate borders into its offset, since they are outside its content origin
          parentOffset = jQuery(offsetParent).offset();
          parentOffset.top += jQuery.css(offsetParent, "borderTopWidth", true);
          parentOffset.left += jQuery.css(offsetParent, "borderLeftWidth", true);
        }
      } // Subtract parent offsets and element margins


      return {
        top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
        left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
      };
    },
    // This method will return documentElement in the following cases:
    // 1) For the element inside the iframe without offsetParent, this method will return
    //    documentElement of the parent window
    // 2) For the hidden or detached element
    // 3) For body or html element, i.e. in case of the html node - it will return itself
    //
    // but those exceptions were never presented as a real life use-cases
    // and might be considered as more preferable results.
    //
    // This logic, however, is not guaranteed and can change at any point in the future
    offsetParent: function offsetParent() {
      return this.map(function () {
        var offsetParent = this.offsetParent;

        while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
          offsetParent = offsetParent.offsetParent;
        }

        return offsetParent || documentElement;
      });
    }
  }); // Create scrollLeft and scrollTop methods

  jQuery.each({
    scrollLeft: "pageXOffset",
    scrollTop: "pageYOffset"
  }, function (method, prop) {
    var top = "pageYOffset" === prop;

    jQuery.fn[method] = function (val) {
      return access(this, function (elem, method, val) {
        // Coalesce documents and windows
        var win;

        if (isWindow(elem)) {
          win = elem;
        } else if (elem.nodeType === 9) {
          win = elem.defaultView;
        }

        if (val === undefined) {
          return win ? win[prop] : elem[method];
        }

        if (win) {
          win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
        } else {
          elem[method] = val;
        }
      }, method, val, arguments.length);
    };
  }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49
  // Add the top/left cssHooks using jQuery.fn.position
  // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
  // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
  // getComputedStyle returns percent when specified for top/left/bottom/right;
  // rather than make the css module depend on the offset module, just check for it here

  jQuery.each(["top", "left"], function (i, prop) {
    jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
      if (computed) {
        computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset

        return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
      }
    });
  }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods

  jQuery.each({
    Height: "height",
    Width: "width"
  }, function (name, type) {
    jQuery.each({
      padding: "inner" + name,
      content: type,
      "": "outer" + name
    }, function (defaultExtra, funcName) {
      // Margin is only for outerHeight, outerWidth
      jQuery.fn[funcName] = function (margin, value) {
        var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
            extra = defaultExtra || (margin === true || value === true ? "margin" : "border");
        return access(this, function (elem, type, value) {
          var doc;

          if (isWindow(elem)) {
            // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
            return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
          } // Get document width or height


          if (elem.nodeType === 9) {
            doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
            // whichever is greatest

            return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
          }

          return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat
          jQuery.css(elem, type, extra) : // Set width or height on the element
          jQuery.style(elem, type, value, extra);
        }, type, chainable ? margin : undefined, chainable);
      };
    });
  });
  jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {
    // Handle event binding
    jQuery.fn[name] = function (data, fn) {
      return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
    };
  });
  jQuery.fn.extend({
    hover: function hover(fnOver, fnOut) {
      return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
    }
  });
  jQuery.fn.extend({
    bind: function bind(types, data, fn) {
      return this.on(types, null, data, fn);
    },
    unbind: function unbind(types, fn) {
      return this.off(types, null, fn);
    },
    delegate: function delegate(selector, types, data, fn) {
      return this.on(types, selector, data, fn);
    },
    undelegate: function undelegate(selector, types, fn) {
      // ( namespace ) or ( selector, types [, fn] )
      return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
    }
  }); // Bind a function to a context, optionally partially applying any
  // arguments.
  // jQuery.proxy is deprecated to promote standards (specifically Function#bind)
  // However, it is not slated for removal any time soon

  jQuery.proxy = function (fn, context) {
    var tmp, args, proxy;

    if (typeof context === "string") {
      tmp = fn[context];
      context = fn;
      fn = tmp;
    } // Quick check to determine if target is callable, in the spec
    // this throws a TypeError, but we will just return undefined.


    if (!isFunction(fn)) {
      return undefined;
    } // Simulated bind


    args = _slice.call(arguments, 2);

    proxy = function proxy() {
      return fn.apply(context || this, args.concat(_slice.call(arguments)));
    }; // Set the guid of unique handler to the same of original handler, so it can be removed


    proxy.guid = fn.guid = fn.guid || jQuery.guid++;
    return proxy;
  };

  jQuery.holdReady = function (hold) {
    if (hold) {
      jQuery.readyWait++;
    } else {
      jQuery.ready(true);
    }
  };

  jQuery.isArray = Array.isArray;
  jQuery.parseJSON = JSON.parse;
  jQuery.nodeName = nodeName;
  jQuery.isFunction = isFunction;
  jQuery.isWindow = isWindow;
  jQuery.camelCase = camelCase;
  jQuery.type = toType;
  jQuery.now = Date.now;

  jQuery.isNumeric = function (obj) {
    // As of jQuery 3.0, isNumeric is limited to
    // strings and numbers (primitives or objects)
    // that can be coerced to finite numbers (gh-2662)
    var type = jQuery.type(obj);
    return (type === "number" || type === "string") && // parseFloat NaNs numeric-cast false positives ("")
    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
    // subtraction forces infinities to NaN
    !isNaN(obj - parseFloat(obj));
  };

  var $ = jQuery;

  /*!!
   *  Canvas 2 Svg v1.0.19
   *  A low level canvas to SVG converter. Uses a mock canvas context to build an SVG document.
   *
   *  Licensed under the MIT license:
   *  http://www.opensource.org/licenses/mit-license.php
   *
   *  Author:
   *  Kerry Liu
   *
   *  Copyright (c) 2014 Gliffy Inc.
   */

  var STYLES, _ctx, CanvasGradient, CanvasPattern, namedEntities; //helper function to format a string


  function format(str, args) {
    var keys = Object.keys(args),
        i;

    for (i = 0; i < keys.length; i++) {
      str = str.replace(new RegExp("\\{" + keys[i] + "\\}", "gi"), args[keys[i]]);
    }

    return str;
  } //helper function that generates a random string


  function randomString(holder) {
    var chars, randomstring, i;

    if (!holder) {
      throw new Error("cannot create a random attribute name for an undefined object");
    }

    chars = "ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";
    randomstring = "";

    do {
      randomstring = "";

      for (i = 0; i < 12; i++) {
        randomstring += chars[Math.floor(Math.random() * chars.length)];
      }
    } while (holder[randomstring]);

    return randomstring;
  } //helper function to map named to numbered entities


  function createNamedToNumberedLookup(items, radix) {
    var i,
        entity,
        lookup = {},
        base10;
    items = items.split(',');
    radix = radix || 10; // Map from named to numbered entities.

    for (i = 0; i < items.length; i += 2) {
      entity = '&' + items[i + 1] + ';';
      base10 = parseInt(items[i], radix);
      lookup[entity] = '&#' + base10 + ';';
    } //FF and IE need to create a regex from hex values ie &nbsp; == \xa0


    lookup["\\xa0"] = '&#160;';
    return lookup;
  } //helper function to map canvas-textAlign to svg-textAnchor


  function getTextAnchor(textAlign) {
    //TODO: support rtl languages
    var mapping = {
      "left": "start",
      "right": "end",
      "center": "middle",
      "start": "start",
      "end": "end"
    };
    return mapping[textAlign] || mapping.start;
  } //helper function to map canvas-textBaseline to svg-dominantBaseline


  function getDominantBaseline(textBaseline) {
    //INFO: not supported in all browsers
    var mapping = {
      "alphabetic": "alphabetic",
      "hanging": "hanging",
      "top": "text-before-edge",
      "bottom": "text-after-edge",
      "middle": "central"
    };
    return mapping[textBaseline] || mapping.alphabetic;
  } // Unpack entities lookup where the numbers are in radix 32 to reduce the size
  // entity mapping courtesy of tinymce


  namedEntities = createNamedToNumberedLookup('50,nbsp,51,iexcl,52,cent,53,pound,54,curren,55,yen,56,brvbar,57,sect,58,uml,59,copy,' + '5a,ordf,5b,laquo,5c,not,5d,shy,5e,reg,5f,macr,5g,deg,5h,plusmn,5i,sup2,5j,sup3,5k,acute,' + '5l,micro,5m,para,5n,middot,5o,cedil,5p,sup1,5q,ordm,5r,raquo,5s,frac14,5t,frac12,5u,frac34,' + '5v,iquest,60,Agrave,61,Aacute,62,Acirc,63,Atilde,64,Auml,65,Aring,66,AElig,67,Ccedil,' + '68,Egrave,69,Eacute,6a,Ecirc,6b,Euml,6c,Igrave,6d,Iacute,6e,Icirc,6f,Iuml,6g,ETH,6h,Ntilde,' + '6i,Ograve,6j,Oacute,6k,Ocirc,6l,Otilde,6m,Ouml,6n,times,6o,Oslash,6p,Ugrave,6q,Uacute,' + '6r,Ucirc,6s,Uuml,6t,Yacute,6u,THORN,6v,szlig,70,agrave,71,aacute,72,acirc,73,atilde,74,auml,' + '75,aring,76,aelig,77,ccedil,78,egrave,79,eacute,7a,ecirc,7b,euml,7c,igrave,7d,iacute,7e,icirc,' + '7f,iuml,7g,eth,7h,ntilde,7i,ograve,7j,oacute,7k,ocirc,7l,otilde,7m,ouml,7n,divide,7o,oslash,' + '7p,ugrave,7q,uacute,7r,ucirc,7s,uuml,7t,yacute,7u,thorn,7v,yuml,ci,fnof,sh,Alpha,si,Beta,' + 'sj,Gamma,sk,Delta,sl,Epsilon,sm,Zeta,sn,Eta,so,Theta,sp,Iota,sq,Kappa,sr,Lambda,ss,Mu,' + 'st,Nu,su,Xi,sv,Omicron,t0,Pi,t1,Rho,t3,Sigma,t4,Tau,t5,Upsilon,t6,Phi,t7,Chi,t8,Psi,' + 't9,Omega,th,alpha,ti,beta,tj,gamma,tk,delta,tl,epsilon,tm,zeta,tn,eta,to,theta,tp,iota,' + 'tq,kappa,tr,lambda,ts,mu,tt,nu,tu,xi,tv,omicron,u0,pi,u1,rho,u2,sigmaf,u3,sigma,u4,tau,' + 'u5,upsilon,u6,phi,u7,chi,u8,psi,u9,omega,uh,thetasym,ui,upsih,um,piv,812,bull,816,hellip,' + '81i,prime,81j,Prime,81u,oline,824,frasl,88o,weierp,88h,image,88s,real,892,trade,89l,alefsym,' + '8cg,larr,8ch,uarr,8ci,rarr,8cj,darr,8ck,harr,8dl,crarr,8eg,lArr,8eh,uArr,8ei,rArr,8ej,dArr,' + '8ek,hArr,8g0,forall,8g2,part,8g3,exist,8g5,empty,8g7,nabla,8g8,isin,8g9,notin,8gb,ni,8gf,prod,' + '8gh,sum,8gi,minus,8gn,lowast,8gq,radic,8gt,prop,8gu,infin,8h0,ang,8h7,and,8h8,or,8h9,cap,8ha,cup,' + '8hb,int,8hk,there4,8hs,sim,8i5,cong,8i8,asymp,8j0,ne,8j1,equiv,8j4,le,8j5,ge,8k2,sub,8k3,sup,8k4,' + 'nsub,8k6,sube,8k7,supe,8kl,oplus,8kn,otimes,8l5,perp,8m5,sdot,8o8,lceil,8o9,rceil,8oa,lfloor,8ob,' + 'rfloor,8p9,lang,8pa,rang,9ea,loz,9j0,spades,9j3,clubs,9j5,hearts,9j6,diams,ai,OElig,aj,oelig,b0,' + 'Scaron,b1,scaron,bo,Yuml,m6,circ,ms,tilde,802,ensp,803,emsp,809,thinsp,80c,zwnj,80d,zwj,80e,lrm,' + '80f,rlm,80j,ndash,80k,mdash,80o,lsquo,80p,rsquo,80q,sbquo,80s,ldquo,80t,rdquo,80u,bdquo,810,dagger,' + '811,Dagger,81g,permil,81p,lsaquo,81q,rsaquo,85c,euro', 32); //Some basic mappings for attributes and default values.

  STYLES = {
    "strokeStyle": {
      svgAttr: "stroke",
      //corresponding svg attribute
      canvas: "#000000",
      //canvas default
      svg: "none",
      //svg default
      apply: "stroke" //apply on stroke() or fill()

    },
    "fillStyle": {
      svgAttr: "fill",
      canvas: "#000000",
      svg: null,
      //svg default is black, but we need to special case this to handle canvas stroke without fill
      apply: "fill"
    },
    "lineCap": {
      svgAttr: "stroke-linecap",
      canvas: "butt",
      svg: "butt",
      apply: "stroke"
    },
    "lineJoin": {
      svgAttr: "stroke-linejoin",
      canvas: "miter",
      svg: "miter",
      apply: "stroke"
    },
    "miterLimit": {
      svgAttr: "stroke-miterlimit",
      canvas: 10,
      svg: 4,
      apply: "stroke"
    },
    "lineWidth": {
      svgAttr: "stroke-width",
      canvas: 1,
      svg: 1,
      apply: "stroke"
    },
    "globalAlpha": {
      svgAttr: "opacity",
      canvas: 1,
      svg: 1,
      apply: "fill stroke"
    },
    "font": {
      //font converts to multiple svg attributes, there is custom logic for this
      canvas: "10px sans-serif"
    },
    "shadowColor": {
      canvas: "#000000"
    },
    "shadowOffsetX": {
      canvas: 0
    },
    "shadowOffsetY": {
      canvas: 0
    },
    "shadowBlur": {
      canvas: 0
    },
    "textAlign": {
      canvas: "start"
    },
    "textBaseline": {
      canvas: "alphabetic"
    },
    "lineDash": {
      svgAttr: "stroke-dasharray",
      canvas: [],
      svg: null,
      apply: "stroke"
    }
  };
  /**
   *
   * @param gradientNode - reference to the gradient
   * @constructor
   */

  CanvasGradient = function CanvasGradient(gradientNode, ctx) {
    this.__root = gradientNode;
    this.__ctx = ctx;
  };
  /**
   * Adds a color stop to the gradient root
   */


  CanvasGradient.prototype.addColorStop = function (offset, color) {
    var stop = this.__ctx.__createElement("stop"),
        regex,
        matches;

    stop.setAttribute("offset", offset);

    if (color && color.indexOf("rgba") !== -1) {
      //separate alpha value, since webkit can't handle it
      regex = /rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi;
      matches = regex.exec(color);
      stop.setAttribute("stop-color", format("rgb({r},{g},{b})", {
        r: matches[1],
        g: matches[2],
        b: matches[3]
      }));
      stop.setAttribute("stop-opacity", matches[4]);
    } else {
      stop.setAttribute("stop-color", color);
    }

    this.__root.appendChild(stop);
  };

  CanvasPattern = function CanvasPattern(pattern, ctx) {
    this.__root = pattern;
    this.__ctx = ctx;
  };
  /**
   * The mock canvas context
   * @param config - options include:
   * ctx - existing Context2D to wrap around
   * width - width of your canvas (defaults to 500)
   * height - height of your canvas (defaults to 500)
   * enableMirroring - enables canvas mirroring (get image data) (defaults to false)
   * document - the document object (defaults to the current document)
   */


  _ctx = function ctx(config) {
    if (!(this instanceof _ctx)) {
      //did someone call this without new?
      return new _ctx(config);
    } // clone config


    this.config = config; //setup options

    this.width = config.width;
    this.height = config.height;
    this.enableMirroring = config.enableMirroring || false;
    this.canvas = this; ///point back to this instance!

    this.__document = document; // allow passing in an existing context to wrap around
    // if a context is passed in, we know a canvas already exist

    if (config.ctx) {
      this.__ctx = config.ctx;
    } else {
      this.__canvas = this.__document.createElement("canvas");
      this.__ctx = this.__canvas.getContext("2d");
    } // give this canvas a type


    this.isSVG = true;

    this.__setDefaultStyles();

    this.__stack = [this.__getStyleState()];
    this.__groupStack = []; // root svg element

    this.__root = this.__createElement("svg");

    this.__root.setAttribute("width", this.width);

    this.__root.setAttribute("height", this.height); // allow contents to overflow svg bbox


    this.__root.setAttribute('overflow', 'visible'); // viewbox


    if (config.viewbox) {
      var str = config.viewbox.x + ' ' + config.viewbox.y + ' ' + config.viewbox.width + ' ' + config.viewbox.height;

      this.__root.setAttribute("viewBox", str);

      this.viewbox = config.viewbox;
    } // make sure we don't generate the same ids in defs


    this.__ids = {}; // defs

    this.__defs = this.__createElement("defs");

    this.__root.appendChild(this.__defs);

    this.multiLocusGap = config.multiLocusGap; // svg background color

    var backdropConfig = {
      id: 'svg_output_backdrop',
      width: '100%',
      height: '100%',
      fill: config.backdropColor || 'white'
    };

    var backdropRect = this.__createElement('rect', backdropConfig);

    this.__root.appendChild(backdropRect); // root group


    this.__rootGroup = this.__createElement('g', {
      id: 'root-group'
    });

    this.__root.appendChild(this.__rootGroup); // point current element to root group


    this.__currentElement = this.__rootGroup;
  };

  _ctx.prototype.setWidth = function (width) {
    this.width = width;

    this.__root.setAttribute("width", this.width);

    var str = this.config.viewbox.x + ' ' + this.config.viewbox.y + ' ' + width + ' ' + this.config.viewbox.height;

    this.__root.setAttribute("viewBox", str);
  };

  _ctx.prototype.setHeight = function (height) {
    this.height = height;

    this.__root.setAttribute("height", this.height);

    var str = this.config.viewbox.x + ' ' + this.config.viewbox.y + ' ' + this.config.viewbox.width + ' ' + height;

    this.__root.setAttribute("viewBox", str);
  };
  /**
   * Creates the specified svg element
   * @private
   */


  _ctx.prototype.__createElement = function (elementName, properties, resetFill) {
    if (typeof properties === "undefined") {
      properties = {};
    }

    var element = this.__document.createElementNS("http://www.w3.org/2000/svg", elementName);

    if (resetFill) {
      //if fill or stroke is not specified, the svg element should not display. By default SVG's fill is black.
      element.setAttribute("fill", "none");
      element.setAttribute("stroke", "none");
    }

    for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];
      element.setAttribute(key, properties[key]);
    }

    return element;
  };
  /**
   * Applies default canvas styles to the context
   * @private
   */


  _ctx.prototype.__setDefaultStyles = function () {
    //default 2d canvas context properties see:http://www.w3.org/TR/2dcontext/
    var keys = Object.keys(STYLES),
        i,
        key;

    for (i = 0; i < keys.length; i++) {
      key = keys[i];
      this[key] = STYLES[key].canvas;
    }
  };
  /**
   * Applies styles on restore
   * @param styleState
   * @private
   */


  _ctx.prototype.__applyStyleState = function (styleState) {
    var keys = Object.keys(styleState),
        i,
        key;

    for (i = 0; i < keys.length; i++) {
      key = keys[i];
      this[key] = styleState[key];
    }
  };
  /**
   * Gets the current style state
   * @return {Object}
   * @private
   */


  _ctx.prototype.__getStyleState = function () {
    var i,
        styleState = {},
        keys = Object.keys(STYLES),
        key;

    for (i = 0; i < keys.length; i++) {
      key = keys[i];
      styleState[key] = this[key];
    }

    return styleState;
  };
  /**
   * Apples the current styles to the current SVG element. On "ctx.fill" or "ctx.stroke"
   * @param type
   * @private
   */


  _ctx.prototype.__applyStyleToCurrentElement = function (type) {
    var currentElement = this.__currentElement;
    var currentStyleGroup = this.__currentElementsToStyle;

    if (currentStyleGroup) {
      currentElement.setAttribute(type, "");
      currentElement = currentStyleGroup.element;
      currentStyleGroup.children.forEach(function (node) {
        node.setAttribute(type, "");
      });
    }

    var keys = Object.keys(STYLES),
        i,
        style,
        value,
        id,
        regex,
        matches;

    for (i = 0; i < keys.length; i++) {
      style = STYLES[keys[i]];
      value = this[keys[i]];

      if (style.apply) {
        //is this a gradient or pattern?
        if (value instanceof CanvasPattern) {
          //pattern
          if (value.__ctx) {
            //copy over defs
            while (value.__ctx.__defs.childNodes.length) {
              id = value.__ctx.__defs.childNodes[0].getAttribute("id");
              this.__ids[id] = id;

              this.__defs.appendChild(value.__ctx.__defs.childNodes[0]);
            }
          }

          currentElement.setAttribute(style.apply, format("url(#{id})", {
            id: value.__root.getAttribute("id")
          }));
        } else if (value instanceof CanvasGradient) {
          //gradient
          currentElement.setAttribute(style.apply, format("url(#{id})", {
            id: value.__root.getAttribute("id")
          }));
        } else if (style && style.apply.indexOf(type) !== -1 && style.svg !== value) {
          if ((style.svgAttr === "stroke" || style.svgAttr === "fill") && value && value.indexOf("rgba") !== -1) {
            //separate alpha value, since illustrator can't handle it
            regex = /rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d?\.?\d*)\s*\)/gi;
            matches = regex.exec(value);
            currentElement.setAttribute(style.svgAttr, format("rgb({r},{g},{b})", {
              r: matches[1],
              g: matches[2],
              b: matches[3]
            })); //should take globalAlpha here

            var opacity = matches[4];
            var globalAlpha = this.globalAlpha;

            if (globalAlpha != null) {
              opacity *= globalAlpha;
            }

            currentElement.setAttribute(style.svgAttr + "-opacity", opacity);
          } else {
            var attr = style.svgAttr;

            if (keys[i] === 'globalAlpha') {
              attr = type + '-' + style.svgAttr;

              if (currentElement.getAttribute(attr)) {
                //fill-opacity or stroke-opacity has already been set by stroke or fill.
                continue;
              }
            } //otherwise only update attribute if right type, and not svg default


            currentElement.setAttribute(attr, value);
          }
        }
      }
    }
  };
  /**
   * Will return the closest group or svg node. May return the current element.
   * @private
   */


  _ctx.prototype.__closestGroupOrSvg = function (node) {
    node = node || this.__currentElement;

    if (node.nodeName === "g" || node.nodeName === "svg") {
      return node;
    } else {
      return this.__closestGroupOrSvg(node.parentNode);
    }
  };
  /**
   * Returns the serialized value of the svg so far
   * @param fixNamedEntities - Standalone SVG doesn't support named entities, which document.createTextNode encodes.
   *                           If true, we attempt to find all named entities and encode it as a numeric entity.
   * @return serialized svg
   */


  _ctx.prototype.getSerializedSvg = function (fixNamedEntities) {
    var serialized = new XMLSerializer().serializeToString(this.__root),
        keys,
        i,
        key,
        value,
        regexp;
   //IE search for a duplicate xmnls because they didn't implement setAttributeNS correctly
    // xmlns = /xmlns="http:\/\/www\.w3\.org\/2000\/svg".+xmlns="http:\/\/www\.w3\.org\/2000\/svg/gi;
    // if (xmlns.test(serialized)) {
    //     serialized = serialized.replace('xmlns="http://www.w3.org/2000/svg','xmlns:xlink="http://www.w3.org/1999/xlink');
    // }

    if (fixNamedEntities) {
      keys = Object.keys(namedEntities); //loop over each named entity and replace with the proper equivalent.

      for (i = 0; i < keys.length; i++) {
        key = keys[i];
        value = namedEntities[key];
        regexp = new RegExp(key, "gi");

        if (regexp.test(serialized)) {
          serialized = serialized.replace(regexp, value);
        }
      }
    }

    return serialized;
  };
  /**
   * Returns the root svg
   * @return
   */


  _ctx.prototype.getSvg = function () {
    return this.__root;
  };
  /**
   * Will generate a group tag.
   */


  _ctx.prototype.save = function () {
    var group = this.__createElement("g");

    var parent = this.__closestGroupOrSvg();

    this.__groupStack.push(parent);

    parent.appendChild(group);
    this.__currentElement = group;

    this.__stack.push(this.__getStyleState());
  };
  /**
   * Sets current element to parent, or just root if already root
   */


  _ctx.prototype.restore = function () {
    this.__currentElement = this.__groupStack.pop();
    this.__currentElementsToStyle = null; //Clearing canvas will make the poped group invalid, currentElement is set to the root group node.

    if (!this.__currentElement) {
      this.__currentElement = this.__root.childNodes[1];
    }

    var state = this.__stack.pop();

    this.__applyStyleState(state);
  };
  /**
   * Helper method to add transform
   * @private
   */


  _ctx.prototype.__addTransform = function (t) {
    //if the current element has siblings, add another group
    var parent = this.__closestGroupOrSvg();

    if (parent.childNodes.length > 0) {
      if (this.__currentElement.nodeName === "path") {
        if (!this.__currentElementsToStyle) this.__currentElementsToStyle = {
          element: parent,
          children: []
        };

        this.__currentElementsToStyle.children.push(this.__currentElement);

        this.__applyCurrentDefaultPath();
      }

      var group = this.__createElement("g");

      parent.appendChild(group);
      this.__currentElement = group;
    }

    var transform = this.__currentElement.getAttribute("transform");

    if (transform) {
      transform += " ";
    } else {
      transform = "";
    }

    transform += t;

    this.__currentElement.setAttribute("transform", transform);
  };

  _ctx.prototype.addTrackGroupWithTranslationAndClipRect = function (id, tx, ty, width, height, clipYOffset) {
    // clip rect
    var clip_id = id + '_clip_rect';

    var clipPath = this.__createElement('clipPath', {
      id: clip_id
    });

    this.__defs.appendChild(clipPath);

    clipPath.appendChild(this.__createElement('rect', {
      x: '0',
      y: clipYOffset.toString(),
      width: width.toString(),
      height: height.toString()
    }));

    var group = this.__createElement('g');

    this.__rootGroup.appendChild(group);

    group.setAttribute('transform', format('translate({x},{y})', {
      x: tx,
      y: ty
    }));
    group.setAttribute('id', id + '_group'); // add clip rect

    group.setAttribute('clip-path', format('url(#{id})', {
      id: clip_id
    }));
    this.__currentElement = group;
  };
  /**
   *  scales the current element
   */


  _ctx.prototype.scale = function (x, y) {
    if (y === undefined) {
      y = x;
    }

    this.__addTransform(format("scale({x},{y})", {
      x: x,
      y: y
    }));
  };
  /**
   * rotates the current element
   */


  _ctx.prototype.rotate = function (angle) {
    var degrees = angle * 180 / Math.PI;

    this.__addTransform(format("rotate({angle},{cx},{cy})", {
      angle: degrees,
      cx: 0,
      cy: 0
    }));
  };
  /**
   * translates the current element
   */


  _ctx.prototype.translate = function (x, y) {
    this.__addTransform(format("translate({x},{y})", {
      x: x,
      y: y
    }));
  };
  /**
   * applies a transform to the current element
   */


  _ctx.prototype.transform = function (a, b, c, d, e, f) {
    this.__addTransform(format("matrix({a},{b},{c},{d},{e},{f})", {
      a: a,
      b: b,
      c: c,
      d: d,
      e: e,
      f: f
    }));
  };
  /**
   * Create a new Path Element
   */


  _ctx.prototype.beginPath = function () {
    var path, parent; // Note that there is only one current default path, it is not part of the drawing state.
    // See also: https://html.spec.whatwg.org/multipage/scripting.html#current-default-path

    this.__currentDefaultPath = "";
    this.__currentPosition = {};
    path = this.__createElement("path", {}, true);
    parent = this.__closestGroupOrSvg();
    parent.appendChild(path);
    this.__currentElement = path;
  };
  /**
   * Helper function to apply currentDefaultPath to current path element
   * @private
   */


  _ctx.prototype.__applyCurrentDefaultPath = function () {
    var currentElement = this.__currentElement;

    if (currentElement.nodeName === "path") {
      currentElement.setAttribute("d", this.__currentDefaultPath);
    } else {
      console.error("Attempted to apply path command to node", currentElement.nodeName);
    }
  };
  /**
   * Helper function to add path command
   * @private
   */


  _ctx.prototype.__addPathCommand = function (command) {
    this.__currentDefaultPath += " ";
    this.__currentDefaultPath += command;
  };
  /**
   * Adds the move command to the current path element,
   * if the currentPathElement is not empty create a new path element
   */


  _ctx.prototype.moveTo = function (x, y) {
    if (this.__currentElement.nodeName !== "path") {
      this.beginPath();
    } // creates a new subpath with the given point


    this.__currentPosition = {
      x: x,
      y: y
    };

    this.__addPathCommand(format("M {x} {y}", {
      x: x,
      y: y
    }));
  };
  /**
   * Closes the current path
   */


  _ctx.prototype.closePath = function () {
    if (this.__currentDefaultPath) {
      this.__addPathCommand("Z");
    }
  };
  /**
   * Adds a line to command
   */


  _ctx.prototype.lineTo = function (x, y) {
    this.__currentPosition = {
      x: x,
      y: y
    };

    if (this.__currentDefaultPath && this.__currentDefaultPath.indexOf('M') > -1) {
      this.__addPathCommand(format("L {x} {y}", {
        x: x,
        y: y
      }));
    } else {
      this.__addPathCommand(format("M {x} {y}", {
        x: x,
        y: y
      }));
    }
  };
  /**
   * Add a bezier command
   */


  _ctx.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
    this.__currentPosition = {
      x: x,
      y: y
    };

    this.__addPathCommand(format("C {cp1x} {cp1y} {cp2x} {cp2y} {x} {y}", {
      cp1x: cp1x,
      cp1y: cp1y,
      cp2x: cp2x,
      cp2y: cp2y,
      x: x,
      y: y
    }));
  };
  /**
   * Adds a quadratic curve to command
   */


  _ctx.prototype.quadraticCurveTo = function (cpx, cpy, x, y) {
    this.__currentPosition = {
      x: x,
      y: y
    };

    this.__addPathCommand(format("Q {cpx} {cpy} {x} {y}", {
      cpx: cpx,
      cpy: cpy,
      x: x,
      y: y
    }));
  };
  /**
   * Return a new normalized vector of given vector
   */


  var normalize = function normalize(vector) {
    var len = Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1]);
    return [vector[0] / len, vector[1] / len];
  };
  /**
   * Adds the arcTo to the current path
   *
   * @see http://www.w3.org/TR/2015/WD-2dcontext-20150514/#dom-context-2d-arcto
   */


  _ctx.prototype.arcTo = function (x1, y1, x2, y2, radius) {
    // Let the point (x0, y0) be the last point in the subpath.
    var x0 = this.__currentPosition && this.__currentPosition.x;
    var y0 = this.__currentPosition && this.__currentPosition.y; // First ensure there is a subpath for (x1, y1).

    if (typeof x0 == "undefined" || typeof y0 == "undefined") {
      return;
    } // Negative values for radius must cause the implementation to throw an IndexSizeError exception.


    if (radius < 0) {
      throw new Error("IndexSizeError: The radius provided (" + radius + ") is negative.");
    } // If the point (x0, y0) is equal to the point (x1, y1),
    // or if the point (x1, y1) is equal to the point (x2, y2),
    // or if the radius radius is zero,
    // then the method must add the point (x1, y1) to the subpath,
    // and connect that point to the previous point (x0, y0) by a straight line.


    if (x0 === x1 && y0 === y1 || x1 === x2 && y1 === y2 || radius === 0) {
      this.lineTo(x1, y1);
      return;
    } // Otherwise, if the points (x0, y0), (x1, y1), and (x2, y2) all lie on a single straight line,
    // then the method must add the point (x1, y1) to the subpath,
    // and connect that point to the previous point (x0, y0) by a straight line.


    var unit_vec_p1_p0 = normalize([x0 - x1, y0 - y1]);
    var unit_vec_p1_p2 = normalize([x2 - x1, y2 - y1]);

    if (unit_vec_p1_p0[0] * unit_vec_p1_p2[1] === unit_vec_p1_p0[1] * unit_vec_p1_p2[0]) {
      this.lineTo(x1, y1);
      return;
    } // Otherwise, let The Arc be the shortest arc given by circumference of the circle that has radius radius,
    // and that has one point tangent to the half-infinite line that crosses the point (x0, y0) and ends at the point (x1, y1),
    // and that has a different point tangent to the half-infinite line that ends at the point (x1, y1), and crosses the point (x2, y2).
    // The points at which this circle touches these two lines are called the start and end tangent points respectively.
    // note that both vectors are unit vectors, so the length is 1


    var cos = unit_vec_p1_p0[0] * unit_vec_p1_p2[0] + unit_vec_p1_p0[1] * unit_vec_p1_p2[1];
    var theta = Math.acos(Math.abs(cos)); // Calculate origin

    var unit_vec_p1_origin = normalize([unit_vec_p1_p0[0] + unit_vec_p1_p2[0], unit_vec_p1_p0[1] + unit_vec_p1_p2[1]]);
    var len_p1_origin = radius / Math.sin(theta / 2);
    var x = x1 + len_p1_origin * unit_vec_p1_origin[0];
    var y = y1 + len_p1_origin * unit_vec_p1_origin[1]; // Calculate start angle and end angle
    // rotate 90deg clockwise (note that y axis points to its down)

    var unit_vec_origin_start_tangent = [-unit_vec_p1_p0[1], unit_vec_p1_p0[0]]; // rotate 90deg counter clockwise (note that y axis points to its down)

    var unit_vec_origin_end_tangent = [unit_vec_p1_p2[1], -unit_vec_p1_p2[0]];

    var getAngle = function getAngle(vector) {
      // get angle (clockwise) between vector and (1, 0)
      var x = vector[0];
      var y = vector[1];

      if (y >= 0) {
        // note that y axis points to its down
        return Math.acos(x);
      } else {
        return -Math.acos(x);
      }
    };

    var startAngle = getAngle(unit_vec_origin_start_tangent);
    var endAngle = getAngle(unit_vec_origin_end_tangent); // Connect the point (x0, y0) to the start tangent point by a straight line

    this.lineTo(x + unit_vec_origin_start_tangent[0] * radius, y + unit_vec_origin_start_tangent[1] * radius); // Connect the start tangent point to the end tangent point by arc
    // and adding the end tangent point to the subpath.

    this.arc(x, y, radius, startAngle, endAngle);
  };
  /**
   * Sets the stroke property on the current element
   */


  _ctx.prototype.stroke = function () {
    if (this.__currentElement.nodeName === "path") {
      this.__currentElement.setAttribute("paint-order", "fill stroke markers");
    }

    this.__applyCurrentDefaultPath();

    this.__applyStyleToCurrentElement("stroke");
  };
  /**
   * Sets fill properties on the current element
   */


  _ctx.prototype.fill = function () {
    if (this.__currentElement.nodeName === "path") {
      this.__currentElement.setAttribute("paint-order", "stroke fill markers");
    }

    this.__applyCurrentDefaultPath();

    this.__applyStyleToCurrentElement("fill");
  };
  /**
   *  Adds a rectangle to the path.
   */


  _ctx.prototype.rect = function (x, y, width, height) {
    if (this.__currentElement.nodeName !== "path") {
      this.beginPath();
    }

    this.moveTo(x, y);
    this.lineTo(x + width, y);
    this.lineTo(x + width, y + height);
    this.lineTo(x, y + height);
    this.lineTo(x, y);
    this.closePath();
  };
  /**
   * adds a rectangle element
   */


  _ctx.prototype.fillRect = function (x, y, width, height) {
    // See if rect instersects current viewbox
    var r2 = {
      x: x,
      y: y,
      width: width,
      height: height
    };

    if (this.viewbox) {
      if (!intersectRect(this.viewbox, r2)) {
        return;
      }
    }

    var rect, parent;
    rect = this.__createElement("rect", r2, true);
    parent = this.__closestGroupOrSvg();
    parent.appendChild(rect);
    this.__currentElement = rect;

    this.__applyStyleToCurrentElement("fill");
  };

  function intersectRect(rect1, rect2) {
    return rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y;
  }
  /**
   * Draws a rectangle with no fill
   * @param x
   * @param y
   * @param width
   * @param height
   */


  _ctx.prototype.strokeRect = function (x, y, width, height) {
    var rect, parent;
    rect = this.__createElement("rect", {
      x: x,
      y: y,
      width: width,
      height: height
    }, true);
    parent = this.__closestGroupOrSvg();
    parent.appendChild(rect);
    this.__currentElement = rect;

    this.__applyStyleToCurrentElement("stroke");
  };
  /**
   * Clear entire canvas:
   * 1. save current transforms
   * 2. remove all the childNodes of the root g element
   */


  _ctx.prototype.__clearCanvas = function () {
    var current = this.__closestGroupOrSvg(),
        transform = current.getAttribute("transform");

    var rootGroup = this.__root.childNodes[1];
    var childNodes = rootGroup.childNodes;

    for (var i = childNodes.length - 1; i >= 0; i--) {
      if (childNodes[i]) {
        rootGroup.removeChild(childNodes[i]);
      }
    }

    this.__currentElement = rootGroup; //reset __groupStack as all the child group nodes are all removed.

    this.__groupStack = [];

    if (transform) {
      this.__addTransform(transform);
    }
  };
  /**
   * "Clears" a canvas by just drawing a white rectangle in the current group.
   */


  _ctx.prototype.clearRect = function (x, y, width, height) {
    //clear entire canvas
    if (x === 0 && y === 0 && width === this.width && height === this.height) {
      this.__clearCanvas();

      return;
    }

    var rect,
        parent = this.__closestGroupOrSvg();

    rect = this.__createElement("rect", {
      x: x,
      y: y,
      width: width,
      height: height,
      fill: "#FFFFFF"
    }, true);
    parent.appendChild(rect);
  };
  /**
   * Adds a linear gradient to a defs tag.
   * Returns a canvas gradient object that has a reference to it's parent def
   */


  _ctx.prototype.createLinearGradient = function (x1, y1, x2, y2) {
    var grad = this.__createElement("linearGradient", {
      id: randomString(this.__ids),
      x1: x1 + "px",
      x2: x2 + "px",
      y1: y1 + "px",
      y2: y2 + "px",
      "gradientUnits": "userSpaceOnUse"
    }, false);

    this.__defs.appendChild(grad);

    return new CanvasGradient(grad, this);
  };
  /**
   * Adds a radial gradient to a defs tag.
   * Returns a canvas gradient object that has a reference to it's parent def
   */


  _ctx.prototype.createRadialGradient = function (x0, y0, r0, x1, y1, r1) {
    var grad = this.__createElement("radialGradient", {
      id: randomString(this.__ids),
      cx: x1 + "px",
      cy: y1 + "px",
      r: r1 + "px",
      fx: x0 + "px",
      fy: y0 + "px",
      "gradientUnits": "userSpaceOnUse"
    }, false);

    this.__defs.appendChild(grad);

    return new CanvasGradient(grad, this);
  };
  /**
   * Parses the font string and returns svg mapping
   * @private
   */


  _ctx.prototype.__parseFont = function () {
    var regex = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-,\'\"\sa-z0-9]+?)\s*$/i;
    var fontPart = regex.exec(this.font);
    var data = {
      style: fontPart[1] || 'normal',
      size: fontPart[4] || '10px',
      family: fontPart[6] || 'sans-serif',
      weight: fontPart[3] || 'normal',
      decoration: fontPart[2] || 'normal',
      href: null
    }; //canvas doesn't support underline natively, but we can pass this attribute

    if (this.__fontUnderline === "underline") {
      data.decoration = "underline";
    } //canvas also doesn't support linking, but we can pass this as well


    if (this.__fontHref) {
      data.href = this.__fontHref;
    }

    return data;
  };
  /**
   * Helper to link text fragments
   * @param font
   * @param element
   * @return {*}
   * @private
   */


  _ctx.prototype.__wrapTextLink = function (font, element) {
    if (font.href) {
      var a = this.__createElement("a");

      a.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", font.href);
      a.appendChild(element);
      return a;
    }

    return element;
  };
  /**
   * Fills or strokes text
   * @param text
   * @param x
   * @param y
   * @param action - stroke or fill
   * @private
   */


  _ctx.prototype.__applyText = function (text, x, y, action) {
    var font = this.__parseFont(),
        parent = this.__closestGroupOrSvg(),
        textElement = this.__createElement("text", {
      "font-family": font.family,
      "font-size": font.size,
      "font-style": font.style,
      "font-weight": font.weight,
      "text-decoration": font.decoration,
      "x": x,
      "y": y,
      "text-anchor": getTextAnchor(this.textAlign),
      "dominant-baseline": getDominantBaseline(this.textBaseline)
    }, true);

    textElement.appendChild(this.__document.createTextNode(text));
    this.__currentElement = textElement;

    this.__applyStyleToCurrentElement(action);

    parent.appendChild(this.__wrapTextLink(font, textElement));
  };
  /**
   * Creates a text element
   * @param text
   * @param x
   * @param y
   */


  _ctx.prototype.fillText = function (text, x, y) {
    this.__applyText(text, x, y, "fill");
  };
  /**
   * Strokes text
   * @param text
   * @param x
   * @param y
   */


  _ctx.prototype.strokeText = function (text, x, y) {
    this.__applyText(text, x, y, "stroke");
  };
  /**
   * No need to implement this for svg.
   * @param text
   * @return {TextMetrics}
   */


  _ctx.prototype.measureText = function (text) {
    this.__ctx.font = this.font;
    return this.__ctx.measureText(text);
  };
  /**
   *  Arc command!
   */


  _ctx.prototype.arc = function (x, y, radius, startAngle, endAngle, counterClockwise) {
    // in canvas no circle is drawn if no angle is provided.
    if (startAngle === endAngle) {
      return;
    }

    startAngle = startAngle % (2 * Math.PI);
    endAngle = endAngle % (2 * Math.PI);

    if (startAngle === endAngle) {
      //circle time! subtract some of the angle so svg is happy (svg elliptical arc can't draw a full circle)
      endAngle = (endAngle + 2 * Math.PI - 0.001 * (counterClockwise ? -1 : 1)) % (2 * Math.PI);
    }

    var endX = x + radius * Math.cos(endAngle),
        endY = y + radius * Math.sin(endAngle),
        startX = x + radius * Math.cos(startAngle),
        startY = y + radius * Math.sin(startAngle),
        sweepFlag = counterClockwise ? 0 : 1,
        largeArcFlag = 0,
        diff = endAngle - startAngle; // https://github.com/gliffy/canvas2svg/issues/4

    if (diff < 0) {
      diff += 2 * Math.PI;
    }

    if (counterClockwise) {
      largeArcFlag = diff > Math.PI ? 0 : 1;
    } else {
      largeArcFlag = diff > Math.PI ? 1 : 0;
    }

    this.lineTo(startX, startY);

    this.__addPathCommand(format("A {rx} {ry} {xAxisRotation} {largeArcFlag} {sweepFlag} {endX} {endY}", {
      rx: radius,
      ry: radius,
      xAxisRotation: 0,
      largeArcFlag: largeArcFlag,
      sweepFlag: sweepFlag,
      endX: endX,
      endY: endY
    }));

    this.__currentPosition = {
      x: endX,
      y: endY
    };
  };
  /**
   * Generates a ClipPath from the clip command.
   */


  _ctx.prototype.clip = function () {
    var group = this.__closestGroupOrSvg(),
        clipPath = this.__createElement("clipPath"),
        id = randomString(this.__ids),
        newGroup = this.__createElement("g");

    this.__applyCurrentDefaultPath();

    group.removeChild(this.__currentElement);
    clipPath.setAttribute("id", id);
    clipPath.appendChild(this.__currentElement);

    this.__defs.appendChild(clipPath); //set the clip path to this group


    group.setAttribute("clip-path", format("url(#{id})", {
      id: id
    })); //clip paths can be scaled and transformed, we need to add another wrapper group to avoid later transformations
    // to this path

    group.appendChild(newGroup);
    this.__currentElement = newGroup;
  };
  /**
   * Draws a canvas, image or mock context to this canvas.
   * Note that all svg dom manipulation uses node.childNodes rather than node.children for IE support.
   * http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-drawimage
   */


  _ctx.prototype.drawImage = function () {
    //convert arguments to a real array
    var args = Array.prototype.slice.call(arguments),
        image = args[0],
        dx,
        dy,
        dw,
        dh,
        sx = 0,
        sy = 0,
        sw,
        sh,
        parent,
        svg,
        defs,
        group,
        currentElement,
        svgImage,
        canvas,
        context,
        id;

    if (args.length === 3) {
      dx = args[1];
      dy = args[2];
      sw = image.width;
      sh = image.height;
      dw = sw;
      dh = sh;
    } else if (args.length === 5) {
      dx = args[1];
      dy = args[2];
      dw = args[3];
      dh = args[4];
      sw = image.width;
      sh = image.height;
    } else if (args.length === 9) {
      sx = args[1];
      sy = args[2];
      sw = args[3];
      sh = args[4];
      dx = args[5];
      dy = args[6];
      dw = args[7];
      dh = args[8];
    } else {
      throw new Error("Invalid number of arguments passed to drawImage: " + arguments.length);
    }

    parent = this.__closestGroupOrSvg();
    currentElement = this.__currentElement;
    var translateDirective = "translate(" + dx + ", " + dy + ")";

    if (image instanceof _ctx) {
      //canvas2svg mock canvas context. In the future we may want to clone nodes instead.
      //also I'm currently ignoring dw, dh, sw, sh, sx, sy for a mock context.
      svg = image.getSvg().cloneNode(true);

      if (svg.childNodes && svg.childNodes.length > 1) {
        defs = svg.childNodes[0];

        while (defs.childNodes.length) {
          id = defs.childNodes[0].getAttribute("id");
          this.__ids[id] = id;

          this.__defs.appendChild(defs.childNodes[0]);
        }

        group = svg.childNodes[1];

        if (group) {
          //save original transform
          var originTransform = group.getAttribute("transform");
          var transformDirective;

          if (originTransform) {
            transformDirective = originTransform + " " + translateDirective;
          } else {
            transformDirective = translateDirective;
          }

          group.setAttribute("transform", transformDirective);
          parent.appendChild(group);
        }
      }
    } else if (image.nodeName === "CANVAS" || image.nodeName === "IMG") {
      //canvas or image
      svgImage = this.__createElement("image");
      svgImage.setAttribute("width", dw);
      svgImage.setAttribute("height", dh);
      svgImage.setAttribute("preserveAspectRatio", "none");

      if (sx || sy || sw !== image.width || sh !== image.height) {
        //crop the image using a temporary canvas
        canvas = this.__document.createElement("canvas");
        canvas.width = dw;
        canvas.height = dh;
        context = canvas.getContext("2d");
        context.drawImage(image, sx, sy, sw, sh, 0, 0, dw, dh);
        image = canvas;
      }

      svgImage.setAttribute("transform", translateDirective);
      svgImage.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", image.nodeName === "CANVAS" ? image.toDataURL() : image.getAttribute("src"));
      parent.appendChild(svgImage);
    }
  };
  /**
   * Generates a pattern tag
   */


  _ctx.prototype.createPattern = function (image, repetition) {
    var pattern = this.__document.__createElement("pattern");

    var id = randomString(this.__ids);
    var img;
    pattern.setAttribute("id", id);
    pattern.setAttribute("width", image.width);
    pattern.setAttribute("height", image.height);

    if (image.nodeName === "CANVAS" || image.nodeName === "IMG") {
      img = this.__createElement("image");
      img.setAttribute("width", image.width);
      img.setAttribute("height", image.height);
      img.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", image.nodeName === "CANVAS" ? image.toDataURL() : image.getAttribute("src"));
      pattern.appendChild(img);

      this.__defs.appendChild(pattern);
    } else if (image instanceof _ctx) {
      pattern.appendChild(image.__root.childNodes[1]);

      this.__defs.appendChild(pattern);
    }

    return new CanvasPattern(pattern, this);
  };

  _ctx.prototype.setLineDash = function (dashArray) {
    if (dashArray && dashArray.length > 0) {
      this.lineDash = dashArray.join(",");
    } else {
      this.lineDash = null;
    }
  };
  /**
   * Not yet implemented
   */


  _ctx.prototype.drawFocusRing = function () {};

  _ctx.prototype.createImageData = function () {};

  _ctx.prototype.getImageData = function () {};

  _ctx.prototype.putImageData = function () {};

  _ctx.prototype.globalCompositeOperation = function () {};

  _ctx.prototype.setTransform = function () {};

  var C2S = _ctx;

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2018 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /**
   * Make the target element movable by clicking and dragging on the handle.  This is not a general purprose function,
   * it makes several options specific to igv dialogs, the primary one being that the
   * target is absolutely positioned in pixel coordinates

   */

  var namespace = ".igv_drag";
  var dragData; // Its assumed we are only dragging one element at a time.

  function makeDraggable(target, handle) {
    $(handle).on('mousedown' + namespace, dragStart.bind(target));
  }

  function dragStart(event) {
    event.stopPropagation();
    event.preventDefault();
    var styleX = Math.round(parseFloat(this.style.left.replace("px", "")));
    var styleY = Math.round(parseFloat(this.style.top.replace("px", "")));
    var dragFunction = drag.bind(this);
    var dragEndFunction = dragEnd.bind(this);
    dragData = {
      dragFunction: dragFunction,
      dragEndFunction: dragEndFunction,
      dx: styleX - event.screenX,
      dy: styleY - event.screenY
    };
    $(document).on('mousemove' + namespace, dragFunction);
    $(document).on('mouseup' + namespace, dragEndFunction);
    $(document).on('mouseleave' + namespace, dragEndFunction);
    $(document).on('mouseexit' + namespace, dragEndFunction);
  }

  function drag(event) {
    if (!dragData) {
      return;
    }

    event.stopPropagation();
    event.preventDefault();
    var styleX = dragData.dx + event.screenX;
    var styleY = dragData.dy + event.screenY;
    this.style.left = styleX + "px";
    this.style.top = styleY + "px"; // console.log('drag ' + 'x ' + styleX + ' y ' + styleY);
  }

  function dragEnd(event) {
    if (!dragData) {
      return;
    }

    event.stopPropagation();
    event.preventDefault();
    var styleX = dragData.dx + event.screenX;
    var styleY = dragData.dy + event.screenY; // console.log('drag end ' + 'x ' + styleX + ' y ' + styleY);

    this.style.left = styleX + "px";
    this.style.top = styleY + "px";
    $(document).off(namespace);
    dragData = undefined;
  }

  /**
   * Configure item list for track "gear" menu.
   * @param trackView
   */

  var MenuUtils = {
    trackMenuItemList: function trackMenuItemList(trackView) {
      var vizWindowTypes = new Set(['alignment', 'annotation', 'variant', 'eqtl', 'snp']);
      var hasVizWindow = trackView.track.config && trackView.track.config.visibilityWindow !== undefined;
      var menuItems = [];

      if (trackView.track.config.type !== 'sequence') {
        menuItems.push(trackRenameMenuItem(trackView));
        menuItems.push(trackHeightMenuItem(trackView));
      }

      if (doProvideColoSwatchWidget(trackView.track)) {
        menuItems.push(colorPickerMenuItem(trackView));
      }

      if (trackView.track.menuItemList) {
        menuItems = menuItems.concat(trackView.track.menuItemList());
      }

      if (hasVizWindow || vizWindowTypes.has(trackView.track.config.type)) {
        menuItems.push('<hr/>');
        menuItems.push(visibilityWindowMenuItem(trackView));
      }

      if (trackView.track.removable !== false) {
        menuItems.push('<hr/>');
        menuItems.push(trackRemovalMenuItem(trackView));
      }

      return menuItems;
    },
    dataRangeMenuItem: function dataRangeMenuItem(trackView) {
      var $e, clickHandler;
      $e = $('<div>');
      $e.text('Set data range');

      clickHandler = function clickHandler() {
        trackView.browser.dataRangeDialog.configure({
          trackView: trackView
        });
        trackView.browser.dataRangeDialog.present($(trackView.trackDiv));
      };

      return {
        object: $e,
        click: clickHandler
      };
    },
    trackMenuItemListHelper: function trackMenuItemListHelper(itemList, $popover) {
      var list = [];

      if (itemList.length > 0) {
        list = itemList.map(function (item, i) {
          var $e; // name and object fields checked for backward compatibility

          if (item.name) {
            $e = $('<div>');
            $e.text(item.name);
          } else if (item.object) {
            $e = item.object;
          } else if (typeof item.label === 'string') {
            $e = $('<div>');
            $e.text(item.label);
          } else if (typeof item === 'string') {
            if (item.startsWith("<")) {
              $e = $(item);
            } else {
              $e = $("<div>" + item + "</div>");
            }
          }

          if (0 === i) {
            $e.addClass('igv-track-menu-border-top');
          }

          if (item.click) {
            $e.on('click', handleClick);
            $e.on('touchend', function (e) {
              handleClick(e);
            });
            $e.on('mouseup', function (e) {
              e.preventDefault();
              e.stopPropagation();
            }); // eslint-disable-next-line no-inner-declarations

            function handleClick(e) {
              item.click();
              $popover.hide();
              e.preventDefault();
              e.stopPropagation();
            }
          }

          return {
            object: $e,
            init: item.init || undefined
          };
        });
      }

      return list;
    }
  };

  function doProvideColoSwatchWidget(track) {
    return "alignment" === track.type || "annotation" === track.type || "variant" === track.type || "wig" === track.type;
  }

  function visibilityWindowMenuItem(trackView) {
    var menuClickHandler = function menuClickHandler() {
      var dialogClickHandler = function dialogClickHandler() {
        var value = trackView.browser.inputDialog.$input.val().trim();

        if ('' === value || undefined === value) {
          value = -1;
        }

        value = Number.parseInt(value);
        trackView.track.visibilityWindow = value;
        trackView.track.config.visibilityWindow = value;
        trackView.updateViews();
      };

      trackView.browser.inputDialog.configure({
        label: 'Visibility Window',
        input: trackView.track.visibilityWindow,
        click: dialogClickHandler
      });
      trackView.browser.inputDialog.present($(trackView.trackDiv));
    };

    var $e = $('<div>');
    $e.text('Set visibility window');
    return {
      object: $e,
      click: menuClickHandler
    };
  }

  function trackRemovalMenuItem(trackView) {
    var $e, menuClickHandler;
    $e = $('<div>');
    $e.text('Remove track');

    menuClickHandler = function menuClickHandler() {
      trackView.browser.removeTrack(trackView.track);
    };

    return {
      object: $e,
      click: menuClickHandler
    };
  }

  function colorPickerMenuItem(trackView) {
    var $e, clickHandler;
    $e = $('<div>');
    $e.text('Set track color');

    clickHandler = function clickHandler() {
      trackView.presentColorPicker();
    };

    return {
      object: $e,
      click: clickHandler
    };
  }

  function trackRenameMenuItem(trackView) {
    var $e, menuClickHandler;
    $e = $('<div>');
    $e.text('Set track name');

    menuClickHandler = function menuClickHandler() {
      var dialogClickHandler;

      dialogClickHandler = function dialogClickHandler() {
        var value;
        value = trackView.browser.inputDialog.$input.val().trim();
        value = '' === value || undefined === value ? 'untitled' : value;
        trackView.browser.setTrackLabelName(trackView, value);
      };

      trackView.browser.inputDialog.configure({
        label: 'Track Name',
        input: getTrackLabelText(trackView.track) || 'unnamed',
        click: dialogClickHandler
      });
      trackView.browser.inputDialog.present($(trackView.trackDiv));
    };

    return {
      object: $e,
      click: menuClickHandler
    };
  }

  function trackHeightMenuItem(trackView) {
    var $e, menuClickHandler;
    $e = $('<div>');
    $e.text('Set track height');

    menuClickHandler = function menuClickHandler() {
      var dialogClickHandler;

      dialogClickHandler = function dialogClickHandler() {
        var number;
        number = parseFloat(trackView.browser.inputDialog.$input.val(), 10);

        if (undefined !== number) {
          // If explicitly setting the height adust min or max, if neccessary.
          if (trackView.track.minHeight !== undefined && trackView.track.minHeight > number) {
            trackView.track.minHeight = number;
          }

          if (trackView.track.maxHeight !== undefined && trackView.track.maxHeight < number) {
            trackView.track.minHeight = number;
          }

          trackView.setTrackHeight(number, true, true); // Explicitly setting track height turns off autoHeight

          trackView.track.autoHeight = false;
        }
      };

      trackView.browser.inputDialog.configure({
        label: 'Track Height',
        input: trackView.trackDiv.clientHeight,
        click: dialogClickHandler
      });
      trackView.browser.inputDialog.present($(trackView.trackDiv));
    };

    return {
      object: $e,
      click: menuClickHandler
    };
  }

  function getTrackLabelText(track) {
    var vp, txt;
    vp = track.trackView.viewports[0];
    txt = vp.$trackLabel.text();
    return txt;
  }
  /**
   * Configure item list for contextual (right-click) track popup menu.
   * @param viewport
   * @param genomicLocation - (bp)
   * @param xOffset - (pixels) within track extent
   * @param yOffset - (pixels) within track extent
   */
  // igv.trackContextMenuItemList = function (viewport, genomicLocation, xOffset, yOffset) {
  //
  //     var config,
  //         menuItems;
  //
  //     config =
  //         {
  //             viewport: viewport,
  //             genomicState: viewport.genomicState,
  //             genomicLocation: genomicLocation,
  //             x: xOffset,
  //             y: yOffset
  //         };
  //
  //     menuItems = [];
  //     if (typeof viewport.trackView.track.contextMenuItemList === "function") {
  //         menuItems = viewport.trackView.track.contextMenuItemList(config);
  //     }
  //
  //     return menuItems;
  // };

  /**
   * Configure item for track "gear" menu.
   * @param trackView
   * @param menuItemLabel - menu item string
   * @param dialogLabelHandler - dialog label creation handler
   * @param dialogInputValue
   * @param dialogClickHandler
   */
  // function trackMenuItem(trackView, menuItemLabel, dialogLabelHandler, dialogInputValue, dialogClickHandler) {
  //
  //     var $e,
  //         clickHandler;
  //
  //     $e = $('<div>');
  //
  //     $e.text(menuItemLabel);
  //
  //     clickHandler = function () {
  //
  //         trackView.browser.inputDialog.configure(dialogLabelHandler, dialogInputValue, dialogClickHandler, undefined, undefined);
  //         trackView.browser.inputDialog.show($(trackView.trackDiv));
  //
  //     };
  //
  //     return {object: $e, click: clickHandler};
  // };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *
   *
   * This class uses icons from Font Awesome
   * Font Awesome Free 5.0.8 by @fontawesome - https://fontawesome.com
   * License - https://fontawesome.com/license (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
   */

  function createCheckbox(name, initialState) {
    var $container = $('<div>', {
      class: 'igv-trackgear-popover-check-container'
    });
    var $div = $('<div>');
    $container.append($div);
    var $svg = iconMarkup('check', true === initialState ? '#444' : 'transparent');
    $div.append($svg);
    var $label = $('<div>'
    /*, { class: 'igv-some-label-class' }*/
    );
    $label.text(name);
    $container.append($label);
    return $container;
  }

  function createIcon(name, color) {
    return $(iconMarkup(name, color));
  }

  function iconMarkup(name, color) {
    color = color || "currentColor";
    var icon = icons[name];
    var svg = '<svg ' + 'viewBox="0 0 ' + icon[0] + ' ' + icon[1] + '">';
    svg += '<path fill="' + color + '" ' + 'd="' + icon[4] + '">' + '</path>';
    svg += '</svg>';
    return svg;
  }

  var icons = {
    "address-book": [448, 512, [], "f2b9", "M436 160c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-20V48c0-26.51-21.49-48-48-48H48C21.49 0 0 21.49 0 48v416c0 26.51 21.49 48 48 48h320c26.51 0 48-21.49 48-48v-48h20c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-20v-64h20c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-20v-64h20zm-228-32c44.183 0 80 35.817 80 80s-35.817 80-80 80-80-35.817-80-80 35.817-80 80-80zm128 232c0 13.255-10.745 24-24 24H104c-13.255 0-24-10.745-24-24v-18.523c0-22.026 14.99-41.225 36.358-46.567l35.657-8.914c29.101 20.932 74.509 26.945 111.97 0l35.657 8.914C321.01 300.252 336 319.452 336 341.477V360z"],
    "address-card": [512, 512, [], "f2bb", "M464 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zm-288 80c38.66 0 70 31.34 70 70s-31.34 70-70 70-70-31.34-70-70 31.34-70 70-70zm112 203c0 11.598-9.402 21-21 21H85c-11.598 0-21-9.402-21-21v-16.207c0-19.272 13.116-36.072 31.813-40.746l31.2-7.8c25.464 18.316 65.195 23.577 97.974 0l31.2 7.8C274.884 294.721 288 311.52 288 330.793V347zm160-39c0 6.627-5.373 12-12 12H332c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h104c6.627 0 12 5.373 12 12v8zm0-64c0 6.627-5.373 12-12 12H332c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h104c6.627 0 12 5.373 12 12v8zm0-64c0 6.627-5.373 12-12 12H332c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h104c6.627 0 12 5.373 12 12v8z"],
    "adjust": [512, 512, [], "f042", "M8 256c0 136.966 111.033 248 248 248s248-111.034 248-248S392.966 8 256 8 8 119.033 8 256zm248 184V72c101.705 0 184 82.311 184 184 0 101.705-82.311 184-184 184z"],
    "align-center": [448, 512, [], "f037", "M352 44v40c0 8.837-7.163 16-16 16H112c-8.837 0-16-7.163-16-16V44c0-8.837 7.163-16 16-16h224c8.837 0 16 7.163 16 16zM16 228h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 256h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm320-200H112c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16h224c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16z"],
    "align-justify": [448, 512, [], "f039", "M0 84V44c0-8.837 7.163-16 16-16h416c8.837 0 16 7.163 16 16v40c0 8.837-7.163 16-16 16H16c-8.837 0-16-7.163-16-16zm16 144h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 256h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0-128h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"],
    "align-left": [448, 512, [], "f036", "M288 44v40c0 8.837-7.163 16-16 16H16c-8.837 0-16-7.163-16-16V44c0-8.837 7.163-16 16-16h256c8.837 0 16 7.163 16 16zM0 172v40c0 8.837 7.163 16 16 16h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16zm16 312h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm256-200H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16h256c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16z"],
    "align-right": [448, 512, [], "f038", "M160 84V44c0-8.837 7.163-16 16-16h256c8.837 0 16 7.163 16 16v40c0 8.837-7.163 16-16 16H176c-8.837 0-16-7.163-16-16zM16 228h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 256h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm160-128h256c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H176c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"],
    "ambulance": [640, 512, [], "f0f9", "M624 352h-16V243.9c0-12.7-5.1-24.9-14.1-33.9L494 110.1c-9-9-21.2-14.1-33.9-14.1H416V48c0-26.5-21.5-48-48-48H48C21.5 0 0 21.5 0 48v320c0 26.5 21.5 48 48 48h16c0 53 43 96 96 96s96-43 96-96h128c0 53 43 96 96 96s96-43 96-96h48c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zM160 464c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm144-248c0 4.4-3.6 8-8 8h-56v56c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-56h-56c-4.4 0-8-3.6-8-8v-48c0-4.4 3.6-8 8-8h56v-56c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v56h56c4.4 0 8 3.6 8 8v48zm176 248c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm80-208H416V144h44.1l99.9 99.9V256z"],
    "american-sign-language-interpreting": [640, 512, [], "f2a3", "M290.547 189.039c-20.295-10.149-44.147-11.199-64.739-3.89 42.606 0 71.208 20.475 85.578 50.576 8.576 17.899-5.148 38.071-23.617 38.071 18.429 0 32.211 20.136 23.617 38.071-14.725 30.846-46.123 50.854-80.298 50.854-.557 0-94.471-8.615-94.471-8.615l-66.406 33.347c-9.384 4.693-19.815.379-23.895-7.781L1.86 290.747c-4.167-8.615-1.111-18.897 6.946-23.621l58.072-33.069L108 159.861c6.39-57.245 34.731-109.767 79.743-146.726 11.391-9.448 28.341-7.781 37.51 3.613 9.446 11.394 7.78 28.067-3.612 37.516-12.503 10.559-23.618 22.509-32.509 35.57 21.672-14.729 46.679-24.732 74.186-28.067 14.725-1.945 28.063 8.336 29.73 23.065 1.945 14.728-8.336 28.067-23.062 29.734-16.116 1.945-31.12 7.503-44.178 15.284 26.114-5.713 58.712-3.138 88.079 11.115 13.336 6.669 18.893 22.509 12.224 35.848-6.389 13.06-22.504 18.617-35.564 12.226zm-27.229 69.472c-6.112-12.505-18.338-20.286-32.231-20.286a35.46 35.46 0 0 0-35.565 35.57c0 21.428 17.808 35.57 35.565 35.57 13.893 0 26.119-7.781 32.231-20.286 4.446-9.449 13.614-15.006 23.339-15.284-9.725-.277-18.893-5.835-23.339-15.284zm374.821-37.237c4.168 8.615 1.111 18.897-6.946 23.621l-58.071 33.069L532 352.16c-6.39 57.245-34.731 109.767-79.743 146.726-10.932 9.112-27.799 8.144-37.51-3.613-9.446-11.394-7.78-28.067 3.613-37.516 12.503-10.559 23.617-22.509 32.508-35.57-21.672 14.729-46.679 24.732-74.186 28.067-10.021 2.506-27.552-5.643-29.73-23.065-1.945-14.728 8.336-28.067 23.062-29.734 16.116-1.946 31.12-7.503 44.178-15.284-26.114 5.713-58.712 3.138-88.079-11.115-13.336-6.669-18.893-22.509-12.224-35.848 6.389-13.061 22.505-18.619 35.565-12.227 20.295 10.149 44.147 11.199 64.739 3.89-42.606 0-71.208-20.475-85.578-50.576-8.576-17.899 5.148-38.071 23.617-38.071-18.429 0-32.211-20.136-23.617-38.071 14.033-29.396 44.039-50.887 81.966-50.854l92.803 8.615 66.406-33.347c9.408-4.704 19.828-.354 23.894 7.781l44.455 88.926zm-229.227-18.618c-13.893 0-26.119 7.781-32.231 20.286-4.446 9.449-13.614 15.006-23.339 15.284 9.725.278 18.893 5.836 23.339 15.284 6.112 12.505 18.338 20.286 32.231 20.286a35.46 35.46 0 0 0 35.565-35.57c0-21.429-17.808-35.57-35.565-35.57z"],
    "anchor": [576, 512, [], "f13d", "M12.971 352h32.394C67.172 454.735 181.944 512 288 512c106.229 0 220.853-57.38 242.635-160h32.394c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0l-67.029 67.029c-7.56 7.56-2.206 20.485 8.485 20.485h35.146c-20.29 54.317-84.963 86.588-144.117 94.015V256h52c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-52v-5.47c37.281-13.178 63.995-48.725 64-90.518C384.005 43.772 341.605.738 289.37.01 235.723-.739 192 42.525 192 96c0 41.798 26.716 77.35 64 90.53V192h-52c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v190.015c-58.936-7.399-123.82-39.679-144.117-94.015h35.146c10.691 0 16.045-12.926 8.485-20.485l-67.029-67.029c-4.686-4.686-12.284-4.686-16.971 0L4.485 331.515C-3.074 339.074 2.28 352 12.971 352zM288 64c17.645 0 32 14.355 32 32s-14.355 32-32 32-32-14.355-32-32 14.355-32 32-32z"],
    "angle-double-down": [320, 512, [], "f103", "M143 256.3L7 120.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0L313 86.3c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.4 9.5-24.6 9.5-34 .1zm34 192l136-136c9.4-9.4 9.4-24.6 0-33.9l-22.6-22.6c-9.4-9.4-24.6-9.4-33.9 0L160 352.1l-96.4-96.4c-9.4-9.4-24.6-9.4-33.9 0L7 278.3c-9.4 9.4-9.4 24.6 0 33.9l136 136c9.4 9.5 24.6 9.5 34 .1z"],
    "angle-double-left": [448, 512, [], "f100", "M223.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L319.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L393.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34zm-192 34l136 136c9.4 9.4 24.6 9.4 33.9 0l22.6-22.6c9.4-9.4 9.4-24.6 0-33.9L127.9 256l96.4-96.4c9.4-9.4 9.4-24.6 0-33.9L201.7 103c-9.4-9.4-24.6-9.4-33.9 0l-136 136c-9.5 9.4-9.5 24.6-.1 34z"],
    "angle-double-right": [448, 512, [], "f101", "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34zm192-34l-136-136c-9.4-9.4-24.6-9.4-33.9 0l-22.6 22.6c-9.4 9.4-9.4 24.6 0 33.9l96.4 96.4-96.4 96.4c-9.4 9.4-9.4 24.6 0 33.9l22.6 22.6c9.4 9.4 24.6 9.4 33.9 0l136-136c9.4-9.2 9.4-24.4 0-33.8z"],
    "angle-double-up": [320, 512, [], "f102", "M177 255.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 351.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 425.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1zm-34-192L7 199.7c-9.4 9.4-9.4 24.6 0 33.9l22.6 22.6c9.4 9.4 24.6 9.4 33.9 0l96.4-96.4 96.4 96.4c9.4 9.4 24.6 9.4 33.9 0l22.6-22.6c9.4-9.4 9.4-24.6 0-33.9l-136-136c-9.2-9.4-24.4-9.4-33.8 0z"],
    "angle-down": [320, 512, [], "f107", "M143 352.3L7 216.3c-9.4-9.4-9.4-24.6 0-33.9l22.6-22.6c9.4-9.4 24.6-9.4 33.9 0l96.4 96.4 96.4-96.4c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9l-136 136c-9.2 9.4-24.4 9.4-33.8 0z"],
    "angle-left": [256, 512, [], "f104", "M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z"],
    "angle-right": [256, 512, [], "f105", "M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"],
    "angle-up": [320, 512, [], "f106", "M177 159.7l136 136c9.4 9.4 9.4 24.6 0 33.9l-22.6 22.6c-9.4 9.4-24.6 9.4-33.9 0L160 255.9l-96.4 96.4c-9.4 9.4-24.6 9.4-33.9 0L7 329.7c-9.4-9.4-9.4-24.6 0-33.9l136-136c9.4-9.5 24.6-9.5 34-.1z"],
    "archive": [512, 512, [], "f187", "M488 128H24c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h464c13.255 0 24 10.745 24 24v48c0 13.255-10.745 24-24 24zm-8 328V184c0-13.255-10.745-24-24-24H56c-13.255 0-24 10.745-24 24v272c0 13.255 10.745 24 24 24h400c13.255 0 24-10.745 24-24zM308 256H204c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h104c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12z"],
    "arrow-alt-circle-down": [512, 512, [], "f358", "M504 256c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zM212 140v116h-70.9c-10.7 0-16.1 13-8.5 20.5l114.9 114.3c4.7 4.7 12.2 4.7 16.9 0l114.9-114.3c7.6-7.6 2.2-20.5-8.5-20.5H300V140c0-6.6-5.4-12-12-12h-64c-6.6 0-12 5.4-12 12z"],
    "arrow-alt-circle-left": [512, 512, [], "f359", "M256 504C119 504 8 393 8 256S119 8 256 8s248 111 248 248-111 248-248 248zm116-292H256v-70.9c0-10.7-13-16.1-20.5-8.5L121.2 247.5c-4.7 4.7-4.7 12.2 0 16.9l114.3 114.9c7.6 7.6 20.5 2.2 20.5-8.5V300h116c6.6 0 12-5.4 12-12v-64c0-6.6-5.4-12-12-12z"],
    "arrow-alt-circle-right": [512, 512, [], "f35a", "M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zM140 300h116v70.9c0 10.7 13 16.1 20.5 8.5l114.3-114.9c4.7-4.7 4.7-12.2 0-16.9l-114.3-115c-7.6-7.6-20.5-2.2-20.5 8.5V212H140c-6.6 0-12 5.4-12 12v64c0 6.6 5.4 12 12 12z"],
    "arrow-alt-circle-up": [512, 512, [], "f35b", "M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm292 116V256h70.9c10.7 0 16.1-13 8.5-20.5L264.5 121.2c-4.7-4.7-12.2-4.7-16.9 0l-115 114.3c-7.6 7.6-2.2 20.5 8.5 20.5H212v116c0 6.6 5.4 12 12 12h64c6.6 0 12-5.4 12-12z"],
    "arrow-circle-down": [512, 512, [], "f0ab", "M504 256c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zm-143.6-28.9L288 302.6V120c0-13.3-10.7-24-24-24h-16c-13.3 0-24 10.7-24 24v182.6l-72.4-75.5c-9.3-9.7-24.8-9.9-34.3-.4l-10.9 11c-9.4 9.4-9.4 24.6 0 33.9L239 404.3c9.4 9.4 24.6 9.4 33.9 0l132.7-132.7c9.4-9.4 9.4-24.6 0-33.9l-10.9-11c-9.5-9.5-25-9.3-34.3.4z"],
    "arrow-circle-left": [512, 512, [], "f0a8", "M256 504C119 504 8 393 8 256S119 8 256 8s248 111 248 248-111 248-248 248zm28.9-143.6L209.4 288H392c13.3 0 24-10.7 24-24v-16c0-13.3-10.7-24-24-24H209.4l75.5-72.4c9.7-9.3 9.9-24.8.4-34.3l-11-10.9c-9.4-9.4-24.6-9.4-33.9 0L107.7 239c-9.4 9.4-9.4 24.6 0 33.9l132.7 132.7c9.4 9.4 24.6 9.4 33.9 0l11-10.9c9.5-9.5 9.3-25-.4-34.3z"],
    "arrow-circle-right": [512, 512, [], "f0a9", "M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zm-28.9 143.6l75.5 72.4H120c-13.3 0-24 10.7-24 24v16c0 13.3 10.7 24 24 24h182.6l-75.5 72.4c-9.7 9.3-9.9 24.8-.4 34.3l11 10.9c9.4 9.4 24.6 9.4 33.9 0L404.3 273c9.4-9.4 9.4-24.6 0-33.9L271.6 106.3c-9.4-9.4-24.6-9.4-33.9 0l-11 10.9c-9.5 9.6-9.3 25.1.4 34.4z"],
    "arrow-circle-up": [512, 512, [], "f0aa", "M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm143.6 28.9l72.4-75.5V392c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24V209.4l72.4 75.5c9.3 9.7 24.8 9.9 34.3.4l10.9-11c9.4-9.4 9.4-24.6 0-33.9L273 107.7c-9.4-9.4-24.6-9.4-33.9 0L106.3 240.4c-9.4 9.4-9.4 24.6 0 33.9l10.9 11c9.6 9.5 25.1 9.3 34.4-.4z"],
    "arrow-down": [448, 512, [], "f063", "M413.1 222.5l22.2 22.2c9.4 9.4 9.4 24.6 0 33.9L241 473c-9.4 9.4-24.6 9.4-33.9 0L12.7 278.6c-9.4-9.4-9.4-24.6 0-33.9l22.2-22.2c9.5-9.5 25-9.3 34.3.4L184 343.4V56c0-13.3 10.7-24 24-24h32c13.3 0 24 10.7 24 24v287.4l114.8-120.5c9.3-9.8 24.8-10 34.3-.4z"],
    "arrow-left": [448, 512, [], "f060", "M257.5 445.1l-22.2 22.2c-9.4 9.4-24.6 9.4-33.9 0L7 273c-9.4-9.4-9.4-24.6 0-33.9L201.4 44.7c9.4-9.4 24.6-9.4 33.9 0l22.2 22.2c9.5 9.5 9.3 25-.4 34.3L136.6 216H424c13.3 0 24 10.7 24 24v32c0 13.3-10.7 24-24 24H136.6l120.5 114.8c9.8 9.3 10 24.8.4 34.3z"],
    "arrow-right": [448, 512, [], "f061", "M190.5 66.9l22.2-22.2c9.4-9.4 24.6-9.4 33.9 0L441 239c9.4 9.4 9.4 24.6 0 33.9L246.6 467.3c-9.4 9.4-24.6 9.4-33.9 0l-22.2-22.2c-9.5-9.5-9.3-25 .4-34.3L311.4 296H24c-13.3 0-24-10.7-24-24v-32c0-13.3 10.7-24 24-24h287.4L190.9 101.2c-9.8-9.3-10-24.8-.4-34.3z"],
    "arrow-up": [448, 512, [], "f062", "M34.9 289.5l-22.2-22.2c-9.4-9.4-9.4-24.6 0-33.9L207 39c9.4-9.4 24.6-9.4 33.9 0l194.3 194.3c9.4 9.4 9.4 24.6 0 33.9L413 289.4c-9.5 9.5-25 9.3-34.3-.4L264 168.6V456c0 13.3-10.7 24-24 24h-32c-13.3 0-24-10.7-24-24V168.6L69.2 289.1c-9.3 9.8-24.8 10-34.3.4z"],
    "arrows-alt": [512, 512, [], "f0b2", "M352.201 425.775l-79.196 79.196c-9.373 9.373-24.568 9.373-33.941 0l-79.196-79.196c-15.119-15.119-4.411-40.971 16.971-40.97h51.162L228 284H127.196v51.162c0 21.382-25.851 32.09-40.971 16.971L7.029 272.937c-9.373-9.373-9.373-24.569 0-33.941L86.225 159.8c15.119-15.119 40.971-4.411 40.971 16.971V228H228V127.196h-51.23c-21.382 0-32.09-25.851-16.971-40.971l79.196-79.196c9.373-9.373 24.568-9.373 33.941 0l79.196 79.196c15.119 15.119 4.411 40.971-16.971 40.971h-51.162V228h100.804v-51.162c0-21.382 25.851-32.09 40.97-16.971l79.196 79.196c9.373 9.373 9.373 24.569 0 33.941L425.773 352.2c-15.119 15.119-40.971 4.411-40.97-16.971V284H284v100.804h51.23c21.382 0 32.09 25.851 16.971 40.971z"],
    "arrows-alt-h": [512, 512, [], "f337", "M377.941 169.941V216H134.059v-46.059c0-21.382-25.851-32.09-40.971-16.971L7.029 239.029c-9.373 9.373-9.373 24.568 0 33.941l86.059 86.059c15.119 15.119 40.971 4.411 40.971-16.971V296h243.882v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.568 0-33.941l-86.059-86.059c-15.119-15.12-40.971-4.412-40.971 16.97z"],
    "arrows-alt-v": [256, 512, [], "f338", "M214.059 377.941H168V134.059h46.059c21.382 0 32.09-25.851 16.971-40.971L144.971 7.029c-9.373-9.373-24.568-9.373-33.941 0L24.971 93.088c-15.119 15.119-4.411 40.971 16.971 40.971H88v243.882H41.941c-21.382 0-32.09 25.851-16.971 40.971l86.059 86.059c9.373 9.373 24.568 9.373 33.941 0l86.059-86.059c15.12-15.119 4.412-40.971-16.97-40.971z"],
    "assistive-listening-systems": [512, 512, [], "f2a2", "M216 260c0 15.464-12.536 28-28 28s-28-12.536-28-28c0-44.112 35.888-80 80-80s80 35.888 80 80c0 15.464-12.536 28-28 28s-28-12.536-28-28c0-13.234-10.767-24-24-24s-24 10.766-24 24zm24-176c-97.047 0-176 78.953-176 176 0 15.464 12.536 28 28 28s28-12.536 28-28c0-66.168 53.832-120 120-120s120 53.832 120 120c0 75.164-71.009 70.311-71.997 143.622L288 404c0 28.673-23.327 52-52 52-15.464 0-28 12.536-28 28s12.536 28 28 28c59.475 0 107.876-48.328 108-107.774.595-34.428 72-48.24 72-144.226 0-97.047-78.953-176-176-176zm-80 236c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zM32 448c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm480-187.993c0-1.518-.012-3.025-.045-4.531C510.076 140.525 436.157 38.47 327.994 1.511c-14.633-4.998-30.549 2.809-35.55 17.442-5 14.633 2.81 30.549 17.442 35.55 85.906 29.354 144.61 110.513 146.077 201.953l.003.188c.026 1.118.033 2.236.033 3.363 0 15.464 12.536 28 28 28s28.001-12.536 28.001-28zM152.971 439.029l-80-80L39.03 392.97l80 80 33.941-33.941z"],
    "asterisk": [512, 512, [], "f069", "M478.21 334.093L336 256l142.21-78.093c11.795-6.477 15.961-21.384 9.232-33.037l-19.48-33.741c-6.728-11.653-21.72-15.499-33.227-8.523L296 186.718l3.475-162.204C299.763 11.061 288.937 0 275.48 0h-38.96c-13.456 0-24.283 11.061-23.994 24.514L216 186.718 77.265 102.607c-11.506-6.976-26.499-3.13-33.227 8.523l-19.48 33.741c-6.728 11.653-2.562 26.56 9.233 33.037L176 256 33.79 334.093c-11.795 6.477-15.961 21.384-9.232 33.037l19.48 33.741c6.728 11.653 21.721 15.499 33.227 8.523L216 325.282l-3.475 162.204C212.237 500.939 223.064 512 236.52 512h38.961c13.456 0 24.283-11.061 23.995-24.514L296 325.282l138.735 84.111c11.506 6.976 26.499 3.13 33.227-8.523l19.48-33.741c6.728-11.653 2.563-26.559-9.232-33.036z"],
    "at": [512, 512, [], "f1fa", "M256 8C118.941 8 8 118.919 8 256c0 137.059 110.919 248 248 248 48.154 0 95.342-14.14 135.408-40.223 12.005-7.815 14.625-24.288 5.552-35.372l-10.177-12.433c-7.671-9.371-21.179-11.667-31.373-5.129C325.92 429.757 291.314 440 256 440c-101.458 0-184-82.542-184-184S154.542 72 256 72c100.139 0 184 57.619 184 160 0 38.786-21.093 79.742-58.17 83.693-17.349-.454-16.91-12.857-13.476-30.024l23.433-121.11C394.653 149.75 383.308 136 368.225 136h-44.981a13.518 13.518 0 0 0-13.432 11.993l-.01.092c-14.697-17.901-40.448-21.775-59.971-21.775-74.58 0-137.831 62.234-137.831 151.46 0 65.303 36.785 105.87 96 105.87 26.984 0 57.369-15.637 74.991-38.333 9.522 34.104 40.613 34.103 70.71 34.103C462.609 379.41 504 307.798 504 232 504 95.653 394.023 8 256 8zm-21.68 304.43c-22.249 0-36.07-15.623-36.07-40.771 0-44.993 30.779-72.729 58.63-72.729 22.292 0 35.601 15.241 35.601 40.77 0 45.061-33.875 72.73-58.161 72.73z"],
    "audio-description": [512, 512, [], "f29e", "M162.925 238.709l8.822 30.655h-25.606l9.041-30.652c1.277-4.421 2.651-9.994 3.872-15.245 1.22 5.251 2.594 10.823 3.871 15.242zm166.474-32.099h-14.523v98.781h14.523c29.776 0 46.175-17.678 46.175-49.776 0-32.239-17.49-49.005-46.175-49.005zM512 112v288c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48zM245.459 336.139l-57.097-168A12.001 12.001 0 0 0 177 160h-35.894a12.001 12.001 0 0 0-11.362 8.139l-57.097 168C70.003 343.922 75.789 352 84.009 352h29.133a12 12 0 0 0 11.535-8.693l8.574-29.906h51.367l8.793 29.977A12 12 0 0 0 204.926 352h29.172c8.22 0 14.006-8.078 11.361-15.861zm184.701-80.525c0-58.977-37.919-95.614-98.96-95.614h-57.366c-6.627 0-12 5.373-12 12v168c0 6.627 5.373 12 12 12H331.2c61.041 0 98.96-36.933 98.96-96.386z"],
    "backward": [512, 512, [], "f04a", "M11.5 280.6l192 160c20.6 17.2 52.5 2.8 52.5-24.6V96c0-27.4-31.9-41.8-52.5-24.6l-192 160c-15.3 12.8-15.3 36.4 0 49.2zm256 0l192 160c20.6 17.2 52.5 2.8 52.5-24.6V96c0-27.4-31.9-41.8-52.5-24.6l-192 160c-15.3 12.8-15.3 36.4 0 49.2z"],
    "balance-scale": [640, 512, [], "f24e", "M352 448h168c13.255 0 24 10.745 24 24v16c0 13.255-10.745 24-24 24H120c-13.255 0-24-10.745-24-24v-16c0-13.255 10.745-24 24-24h168V153.324C264.469 143.04 246.836 121.778 241.603 96H120c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h135.999C270.594 12.57 293.828 0 320 0s49.406 12.57 64.001 32H520c13.255 0 24 10.745 24 24v16c0 13.255-10.745 24-24 24H398.397c-5.233 25.778-22.866 47.04-46.397 57.324V448zm287.981-112c.001-16.182 1.342-8.726-85.048-181.506-17.647-35.294-68.186-35.358-85.865 0C381.94 328.75 384.019 320.331 384.019 336H384c0 44.183 57.308 80 128 80s128-35.817 128-80h-.019zM512 176l72 144H440l72-144zM255.981 336c.001-16.182 1.342-8.726-85.048-181.506-17.647-35.294-68.186-35.358-85.865 0C-2.06 328.75.019 320.331.019 336H0c0 44.183 57.308 80 128 80s128-35.817 128-80h-.019zM128 176l72 144H56l72-144z"],
    "ban": [512, 512, [], "f05e", "M256 8C119.034 8 8 119.033 8 256s111.034 248 248 248 248-111.034 248-248S392.967 8 256 8zm130.108 117.892c65.448 65.448 70 165.481 20.677 235.637L150.47 105.216c70.204-49.356 170.226-44.735 235.638 20.676zM125.892 386.108c-65.448-65.448-70-165.481-20.677-235.637L361.53 406.784c-70.203 49.356-170.226 44.736-235.638-20.676z"],
    "band-aid": [640, 512, [], "f462", "M0 160v192c0 35.3 28.7 64 64 64h96V96H64c-35.3 0-64 28.7-64 64zm576-64h-96v320h96c35.3 0 64-28.7 64-64V160c0-35.3-28.7-64-64-64zM192 416h256V96H192v320zm176-232c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm0 96c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm-96-96c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm0 96c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24z"],
    "barcode": [512, 512, [], "f02a", "M0 448V64h18v384H0zm26.857-.273V64H36v383.727h-9.143zm27.143 0V64h8.857v383.727H54zm44.857 0V64h8.857v383.727h-8.857zm36 0V64h17.714v383.727h-17.714zm44.857 0V64h8.857v383.727h-8.857zm18 0V64h8.857v383.727h-8.857zm18 0V64h8.857v383.727h-8.857zm35.715 0V64h18v383.727h-18zm44.857 0V64h18v383.727h-18zm35.999 0V64h18.001v383.727h-18.001zm36.001 0V64h18.001v383.727h-18.001zm26.857 0V64h18v383.727h-18zm45.143 0V64h26.857v383.727h-26.857zm35.714 0V64h9.143v383.727H476zm18 .273V64h18v384h-18z"],
    "bars": [448, 512, [], "f0c9", "M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"],
    "baseball-ball": [496, 512, [], "f433", "M368.5 363.9l28.8-13.9c11.1 22.9 26 43.2 44.1 60.9 34-42.5 54.5-96.3 54.5-154.9 0-58.5-20.4-112.2-54.2-154.6-17.8 17.3-32.6 37.1-43.6 59.5l-28.7-14.1c12.8-26 30-49 50.8-69C375.6 34.7 315 8 248 8 181.1 8 120.5 34.6 75.9 77.7c20.7 19.9 37.9 42.9 50.7 68.8l-28.7 14.1c-11-22.3-25.7-42.1-43.5-59.4C20.4 143.7 0 197.4 0 256c0 58.6 20.4 112.3 54.4 154.7 18.2-17.7 33.2-38 44.3-61l28.8 13.9c-12.9 26.7-30.3 50.3-51.5 70.7 44.5 43.1 105.1 69.7 172 69.7 66.8 0 127.3-26.5 171.9-69.5-21.1-20.4-38.5-43.9-51.4-70.6zm-228.3-32l-30.5-9.8c14.9-46.4 12.7-93.8-.6-134l30.4-10c15 45.6 18 99.9.7 153.8zm216.3-153.4l30.4 10c-13.2 40.1-15.5 87.5-.6 134l-30.5 9.8c-17.3-54-14.3-108.3.7-153.8z"],
    "basketball-ball": [496, 512, [], "f434", "M212.3 10.3c-43.8 6.3-86.2 24.1-122.2 53.8l77.4 77.4c27.8-35.8 43.3-81.2 44.8-131.2zM248 222L405.9 64.1c-42.4-35-93.6-53.5-145.5-56.1-1.2 63.9-21.5 122.3-58.7 167.7L248 222zM56.1 98.1c-29.7 36-47.5 78.4-53.8 122.2 50-1.5 95.5-17 131.2-44.8L56.1 98.1zm272.2 204.2c45.3-37.1 103.7-57.4 167.7-58.7-2.6-51.9-21.1-103.1-56.1-145.5L282 256l46.3 46.3zM248 290L90.1 447.9c42.4 34.9 93.6 53.5 145.5 56.1 1.3-64 21.6-122.4 58.7-167.7L248 290zm191.9 123.9c29.7-36 47.5-78.4 53.8-122.2-50.1 1.6-95.5 17.1-131.2 44.8l77.4 77.4zM167.7 209.7C122.3 246.9 63.9 267.3 0 268.4c2.6 51.9 21.1 103.1 56.1 145.5L214 256l-46.3-46.3zm116 292c43.8-6.3 86.2-24.1 122.2-53.8l-77.4-77.4c-27.7 35.7-43.2 81.2-44.8 131.2z"],
    "bath": [512, 512, [], "f2cd", "M488 256H80V112c0-17.645 14.355-32 32-32 11.351 0 21.332 5.945 27.015 14.88-16.492 25.207-14.687 59.576 6.838 83.035-4.176 4.713-4.021 11.916.491 16.428l11.314 11.314c4.686 4.686 12.284 4.686 16.971 0l95.03-95.029c4.686-4.686 4.686-12.284 0-16.971l-11.314-11.314c-4.512-4.512-11.715-4.666-16.428-.491-17.949-16.469-42.294-21.429-64.178-15.365C163.281 45.667 139.212 32 112 32c-44.112 0-80 35.888-80 80v144h-8c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h8v32c0 28.43 12.362 53.969 32 71.547V456c0 13.255 10.745 24 24 24h16c13.255 0 24-10.745 24-24v-8h256v8c0 13.255 10.745 24 24 24h16c13.255 0 24-10.745 24-24v-32.453c19.638-17.578 32-43.117 32-71.547v-32h8c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24z"],
    "battery-empty": [640, 512, [], "f244", "M544 160v64h32v64h-32v64H64V160h480m16-64H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h512c26.51 0 48-21.49 48-48v-16h8c13.255 0 24-10.745 24-24V184c0-13.255-10.745-24-24-24h-8v-16c0-26.51-21.49-48-48-48z"],
    "battery-full": [640, 512, [], "f240", "M544 160v64h32v64h-32v64H64V160h480m16-64H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h512c26.51 0 48-21.49 48-48v-16h8c13.255 0 24-10.745 24-24V184c0-13.255-10.745-24-24-24h-8v-16c0-26.51-21.49-48-48-48zm-48 96H96v128h416V192z"],
    "battery-half": [640, 512, [], "f242", "M544 160v64h32v64h-32v64H64V160h480m16-64H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h512c26.51 0 48-21.49 48-48v-16h8c13.255 0 24-10.745 24-24V184c0-13.255-10.745-24-24-24h-8v-16c0-26.51-21.49-48-48-48zm-240 96H96v128h224V192z"],
    "battery-quarter": [640, 512, [], "f243", "M544 160v64h32v64h-32v64H64V160h480m16-64H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h512c26.51 0 48-21.49 48-48v-16h8c13.255 0 24-10.745 24-24V184c0-13.255-10.745-24-24-24h-8v-16c0-26.51-21.49-48-48-48zm-336 96H96v128h128V192z"],
    "battery-three-quarters": [640, 512, [], "f241", "M544 160v64h32v64h-32v64H64V160h480m16-64H48c-26.51 0-48 21.49-48 48v224c0 26.51 21.49 48 48 48h512c26.51 0 48-21.49 48-48v-16h8c13.255 0 24-10.745 24-24V184c0-13.255-10.745-24-24-24h-8v-16c0-26.51-21.49-48-48-48zm-144 96H96v128h320V192z"],
    "bed": [576, 512, [], "f236", "M552 288c13.255 0 24 10.745 24 24v136h-96v-64H96v64H0V88c0-13.255 10.745-24 24-24h48c13.255 0 24 10.745 24 24v200h456zM192 96c-44.183 0-80 35.817-80 80s35.817 80 80 80 80-35.817 80-80-35.817-80-80-80zm384 128c0-53.019-42.981-96-96-96H312c-13.255 0-24 10.745-24 24v104h288v-32z"],
    "beer": [448, 512, [], "f0fc", "M368 96h-48V56c0-13.255-10.745-24-24-24H24C10.745 32 0 42.745 0 56v400c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24v-42.11l80.606-35.977C429.396 365.063 448 336.388 448 304.86V176c0-44.112-35.888-80-80-80zm16 208.86a16.018 16.018 0 0 1-9.479 14.611L320 343.805V160h48c8.822 0 16 7.178 16 16v128.86zM208 384c-8.836 0-16-7.164-16-16V144c0-8.836 7.164-16 16-16s16 7.164 16 16v224c0 8.836-7.164 16-16 16zm-96 0c-8.836 0-16-7.164-16-16V144c0-8.836 7.164-16 16-16s16 7.164 16 16v224c0 8.836-7.164 16-16 16z"],
    "bell": [448, 512, [], "f0f3", "M433.884 366.059C411.634 343.809 384 316.118 384 208c0-79.394-57.831-145.269-133.663-157.83A31.845 31.845 0 0 0 256 32c0-17.673-14.327-32-32-32s-32 14.327-32 32c0 6.75 2.095 13.008 5.663 18.17C121.831 62.731 64 128.606 64 208c0 108.118-27.643 135.809-49.893 158.059C-16.042 396.208 5.325 448 48.048 448H160c0 35.346 28.654 64 64 64s64-28.654 64-64h111.943c42.638 0 64.151-51.731 33.941-81.941zM224 472a8 8 0 0 1 0 16c-22.056 0-40-17.944-40-40h16c0 13.234 10.766 24 24 24z"],
    "bell-slash": [576, 512, [], "f1f6", "M78.107 366.059C47.958 396.208 69.325 448 112.048 448H224c0 35.346 28.654 64 64 64 35.346 0 64-28.654 64-64h32.685L127.848 221.379c-2.198 97.078-28.439 123.378-49.741 144.68zM264 448c0 13.234 10.766 24 24 24a8 8 0 0 1 0 16c-22.056 0-40-17.944-40-40h16zm305.896 43.733l-10.762 12.086c-8.915 10.012-24.333 10.967-34.437 2.133L8.256 54.393C-1.848 45.558-2.811 30.28 6.104 20.267L16.865 8.181C25.781-1.831 41.199-2.786 51.303 6.049l113.81 99.512c24.017-28.778 57.946-48.996 96.55-55.39A31.85 31.85 0 0 1 256 32c0-17.673 14.327-32 32-32s32 14.327 32 32c0 6.75-2.095 13.008-5.663 18.17C390.169 62.731 448 128.606 448 208c0 108.118 27.634 135.809 49.884 158.059 12.149 12.149 15.923 27.776 13.33 42.121l56.53 49.427c10.104 8.835 11.067 24.113 2.152 34.126z"],
    "bicycle": [640, 512, [], "f206", "M512.509 192.001c-16.373-.064-32.03 2.955-46.436 8.495l-77.68-125.153A24 24 0 0 0 368.001 64h-64c-8.837 0-16 7.163-16 16v16c0 8.837 7.163 16 16 16h50.649l14.896 24H256.002v-16c0-8.837-7.163-16-16-16h-87.459c-13.441 0-24.777 10.999-24.536 24.437.232 13.044 10.876 23.563 23.995 23.563h48.726l-29.417 47.52c-13.433-4.83-27.904-7.483-42.992-7.52C58.094 191.83.412 249.012.002 319.236-.413 390.279 57.055 448 128.002 448c59.642 0 109.758-40.793 123.967-96h52.033a24 24 0 0 0 20.406-11.367L410.37 201.77l14.938 24.067c-25.455 23.448-41.385 57.081-41.307 94.437.145 68.833 57.899 127.051 126.729 127.719 70.606.685 128.181-55.803 129.255-125.996 1.086-70.941-56.526-129.72-127.476-129.996zM186.75 265.772c9.727 10.529 16.673 23.661 19.642 38.228h-43.306l23.664-38.228zM128.002 400c-44.112 0-80-35.888-80-80s35.888-80 80-80c5.869 0 11.586.653 17.099 1.859l-45.505 73.509C89.715 331.327 101.213 352 120.002 352h81.3c-12.37 28.225-40.562 48-73.3 48zm162.63-96h-35.624c-3.96-31.756-19.556-59.894-42.383-80.026L237.371 184h127.547l-74.286 120zm217.057 95.886c-41.036-2.165-74.049-35.692-75.627-76.755-.812-21.121 6.633-40.518 19.335-55.263l44.433 71.586c4.66 7.508 14.524 9.816 22.032 5.156l13.594-8.437c7.508-4.66 9.817-14.524 5.156-22.032l-44.468-71.643a79.901 79.901 0 0 1 19.858-2.497c44.112 0 80 35.888 80 80-.001 45.54-38.252 82.316-84.313 79.885z"],
    "binoculars": [512, 512, [], "f1e5", "M192 104H96V56c0-13.255 10.745-24 24-24h48c13.255 0 24 10.745 24 24v48zm224-48c0-13.255-10.745-24-24-24h-48c-13.255 0-24 10.745-24 24v48h96V56zM0 456c0 13.255 10.745 24 24 24h120c13.255 0 24-10.745 24-24v-16H0v16zm88-328c-13.255 0-24 10.745-24 24C64 256 0 272 0 416h168V312c0-13.255 10.745-24 24-24V128H88zm256 328c0 13.255 10.745 24 24 24h120c13.255 0 24-10.745 24-24v-16H344v16zM216 128v160h80V128h-80zm128 288h168c0-144-64-160-64-264 0-13.255-10.745-24-24-24H320v160c13.255 0 24 10.745 24 24v104z"],
    "birthday-cake": [448, 512, [], "f1fd", "M448 384c-28.02 0-31.26-32-74.5-32-43.43 0-46.825 32-74.75 32-27.695 0-31.454-32-74.75-32-42.842 0-47.218 32-74.5 32-28.148 0-31.202-32-74.75-32-43.547 0-46.653 32-74.75 32v-80c0-26.5 21.5-48 48-48h16V112h64v144h64V112h64v144h64V112h64v144h16c26.5 0 48 21.5 48 48v80zm0 128H0v-96c43.356 0 46.767-32 74.75-32 27.951 0 31.253 32 74.75 32 42.843 0 47.217-32 74.5-32 28.148 0 31.201 32 74.75 32 43.357 0 46.767-32 74.75-32 27.488 0 31.252 32 74.5 32v96zM96 96c-17.75 0-32-14.25-32-32 0-31 32-23 32-64 12 0 32 29.5 32 56s-14.25 40-32 40zm128 0c-17.75 0-32-14.25-32-32 0-31 32-23 32-64 12 0 32 29.5 32 56s-14.25 40-32 40zm128 0c-17.75 0-32-14.25-32-32 0-31 32-23 32-64 12 0 32 29.5 32 56s-14.25 40-32 40z"],
    "blind": [384, 512, [], "f29d", "M380.15 510.837a8 8 0 0 1-10.989-2.687l-125.33-206.427a31.923 31.923 0 0 0 12.958-9.485l126.048 207.608a8 8 0 0 1-2.687 10.991zM142.803 314.338l-32.54 89.485 36.12 88.285c6.693 16.36 25.377 24.192 41.733 17.501 16.357-6.692 24.193-25.376 17.501-41.734l-62.814-153.537zM96 88c24.301 0 44-19.699 44-44S120.301 0 96 0 52 19.699 52 44s19.699 44 44 44zm154.837 169.128l-120-152c-4.733-5.995-11.75-9.108-18.837-9.112V96H80v.026c-7.146.003-14.217 3.161-18.944 9.24L0 183.766v95.694c0 13.455 11.011 24.791 24.464 24.536C37.505 303.748 48 293.1 48 280v-79.766l16-20.571v140.698L9.927 469.055c-6.04 16.609 2.528 34.969 19.138 41.009 16.602 6.039 34.968-2.524 41.009-19.138L136 309.638V202.441l-31.406-39.816a4 4 0 1 1 6.269-4.971l102.3 129.217c9.145 11.584 24.368 11.339 33.708 3.965 10.41-8.216 12.159-23.334 3.966-33.708z"],
    "bold": [384, 512, [], "f032", "M304.793 243.891c33.639-18.537 53.657-54.16 53.657-95.693 0-48.236-26.25-87.626-68.626-104.179C265.138 34.01 240.849 32 209.661 32H24c-8.837 0-16 7.163-16 16v33.049c0 8.837 7.163 16 16 16h33.113v318.53H24c-8.837 0-16 7.163-16 16V464c0 8.837 7.163 16 16 16h195.69c24.203 0 44.834-1.289 66.866-7.584C337.52 457.193 376 410.647 376 350.014c0-52.168-26.573-91.684-71.207-106.123zM142.217 100.809h67.444c16.294 0 27.536 2.019 37.525 6.717 15.828 8.479 24.906 26.502 24.906 49.446 0 35.029-20.32 56.79-53.029 56.79h-76.846V100.809zm112.642 305.475c-10.14 4.056-22.677 4.907-31.409 4.907h-81.233V281.943h84.367c39.645 0 63.057 25.38 63.057 63.057.001 28.425-13.66 52.483-34.782 61.284z"],
    "bolt": [320, 512, [], "f0e7", "M295.973 160H180.572L215.19 30.184C219.25 14.956 207.756 0 192 0H56C43.971 0 33.8 8.905 32.211 20.828l-31.996 240C-1.704 275.217 9.504 288 24.004 288h118.701L96.646 482.466C93.05 497.649 104.659 512 119.992 512c8.35 0 16.376-4.374 20.778-11.978l175.973-303.997c9.244-15.967-2.288-36.025-20.77-36.025z"],
    "bomb": [512, 512, [], "f1e2", "M440.5 88.5l-52 52L415 167c9.4 9.4 9.4 24.6 0 33.9l-17.4 17.4c11.8 26.1 18.4 55.1 18.4 85.6 0 114.9-93.1 208-208 208S0 418.9 0 304 93.1 96 208 96c30.5 0 59.5 6.6 85.6 18.4L311 97c9.4-9.4 24.6-9.4 33.9 0l26.5 26.5 52-52 17.1 17zM500 60h-24c-6.6 0-12 5.4-12 12s5.4 12 12 12h24c6.6 0 12-5.4 12-12s-5.4-12-12-12zM440 0c-6.6 0-12 5.4-12 12v24c0 6.6 5.4 12 12 12s12-5.4 12-12V12c0-6.6-5.4-12-12-12zm33.9 55l17-17c4.7-4.7 4.7-12.3 0-17-4.7-4.7-12.3-4.7-17 0l-17 17c-4.7 4.7-4.7 12.3 0 17 4.8 4.7 12.4 4.7 17 0zm-67.8 0c4.7 4.7 12.3 4.7 17 0 4.7-4.7 4.7-12.3 0-17l-17-17c-4.7-4.7-12.3-4.7-17 0-4.7 4.7-4.7 12.3 0 17l17 17zm67.8 34c-4.7-4.7-12.3-4.7-17 0-4.7 4.7-4.7 12.3 0 17l17 17c4.7 4.7 12.3 4.7 17 0 4.7-4.7 4.7-12.3 0-17l-17-17zM112 272c0-35.3 28.7-64 64-64 8.8 0 16-7.2 16-16s-7.2-16-16-16c-52.9 0-96 43.1-96 96 0 8.8 7.2 16 16 16s16-7.2 16-16z"],
    "book": [448, 512, [], "f02d", "M448 360V24c0-13.3-10.7-24-24-24H96C43 0 0 43 0 96v320c0 53 43 96 96 96h328c13.3 0 24-10.7 24-24v-16c0-7.5-3.5-14.3-8.9-18.7-4.2-15.4-4.2-59.3 0-74.7 5.4-4.3 8.9-11.1 8.9-18.6zM128 134c0-3.3 2.7-6 6-6h212c3.3 0 6 2.7 6 6v20c0 3.3-2.7 6-6 6H134c-3.3 0-6-2.7-6-6v-20zm0 64c0-3.3 2.7-6 6-6h212c3.3 0 6 2.7 6 6v20c0 3.3-2.7 6-6 6H134c-3.3 0-6-2.7-6-6v-20zm253.4 250H96c-17.7 0-32-14.3-32-32 0-17.6 14.4-32 32-32h285.4c-1.9 17.1-1.9 46.9 0 64z"],
    "bookmark": [384, 512, [], "f02e", "M0 512V48C0 21.49 21.49 0 48 0h288c26.51 0 48 21.49 48 48v464L192 400 0 512z"],
    "bowling-ball": [496, 512, [], "f436", "M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zM120 192c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm64-96c0-17.7 14.3-32 32-32s32 14.3 32 32-14.3 32-32 32-32-14.3-32-32zm48 144c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"],
    "box": [512, 512, [], "f466", "M509.5 184.6L458.9 32.8C452.4 13.2 434.1 0 413.4 0H272v192h238.7c-.4-2.5-.4-5-1.2-7.4zM240 0H98.6c-20.7 0-39 13.2-45.5 32.8L2.5 184.6c-.8 2.4-.8 4.9-1.2 7.4H240V0zM0 224v240c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V224H0z"],
    "boxes": [576, 512, [], "f468", "M560 288h-80v96l-32-21.3-32 21.3v-96h-80c-8.8 0-16 7.2-16 16v192c0 8.8 7.2 16 16 16h224c8.8 0 16-7.2 16-16V304c0-8.8-7.2-16-16-16zm-384-64h224c8.8 0 16-7.2 16-16V16c0-8.8-7.2-16-16-16h-80v96l-32-21.3L256 96V0h-80c-8.8 0-16 7.2-16 16v192c0 8.8 7.2 16 16 16zm64 64h-80v96l-32-21.3L96 384v-96H16c-8.8 0-16 7.2-16 16v192c0 8.8 7.2 16 16 16h224c8.8 0 16-7.2 16-16V304c0-8.8-7.2-16-16-16z"],
    "braille": [640, 512, [], "f2a1", "M128 256c0 35.346-28.654 64-64 64S0 291.346 0 256s28.654-64 64-64 64 28.654 64 64zM64 384c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0-352C28.654 32 0 60.654 0 96s28.654 64 64 64 64-28.654 64-64-28.654-64-64-64zm160 192c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0 160c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0-352c-35.346 0-64 28.654-64 64s28.654 64 64 64 64-28.654 64-64-28.654-64-64-64zm224 192c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0 160c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0-352c-35.346 0-64 28.654-64 64s28.654 64 64 64 64-28.654 64-64-28.654-64-64-64zm160 192c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0 160c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm0-320c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32z"],
    "briefcase": [512, 512, [], "f0b1", "M320 288h192v144c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V288h192v20c0 6.627 5.373 12 12 12h104c6.627 0 12-5.373 12-12v-20zm192-112v80H0v-80c0-26.51 21.49-48 48-48h80V80c0-26.51 21.49-48 48-48h160c26.51 0 48 21.49 48 48v48h80c26.51 0 48 21.49 48 48zM320 96H192v32h128V96z"],
    "bug": [512, 512, [], "f188", "M511.988 288.9c-.478 17.43-15.217 31.1-32.653 31.1H424v16c0 21.864-4.882 42.584-13.6 61.145l60.228 60.228c12.496 12.497 12.496 32.758 0 45.255-12.498 12.497-32.759 12.496-45.256 0l-54.736-54.736C345.886 467.965 314.351 480 280 480V236c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v244c-34.351 0-65.886-12.035-90.636-32.108l-54.736 54.736c-12.498 12.497-32.759 12.496-45.256 0-12.496-12.497-12.496-32.758 0-45.255l60.228-60.228C92.882 378.584 88 357.864 88 336v-16H32.666C15.23 320 .491 306.33.013 288.9-.484 270.816 14.028 256 32 256h56v-58.745l-46.628-46.628c-12.496-12.497-12.496-32.758 0-45.255 12.498-12.497 32.758-12.497 45.256 0L141.255 160h229.489l54.627-54.627c12.498-12.497 32.758-12.497 45.256 0 12.496 12.497 12.496 32.758 0 45.255L424 197.255V256h56c17.972 0 32.484 14.816 31.988 32.9zM257 0c-61.856 0-112 50.144-112 112h224C369 50.144 318.856 0 257 0z"],
    "building": [448, 512, [], "f1ad", "M436 480h-20V24c0-13.255-10.745-24-24-24H56C42.745 0 32 10.745 32 24v456H12c-6.627 0-12 5.373-12 12v20h448v-20c0-6.627-5.373-12-12-12zM128 76c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12h-40c-6.627 0-12-5.373-12-12V76zm0 96c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12h-40c-6.627 0-12-5.373-12-12v-40zm52 148h-40c-6.627 0-12-5.373-12-12v-40c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12zm76 160h-64v-84c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v84zm64-172c0 6.627-5.373 12-12 12h-40c-6.627 0-12-5.373-12-12v-40c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40zm0-96c0 6.627-5.373 12-12 12h-40c-6.627 0-12-5.373-12-12v-40c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40zm0-96c0 6.627-5.373 12-12 12h-40c-6.627 0-12-5.373-12-12V76c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v40z"],
    "bullhorn": [576, 512, [], "f0a1", "M576 224c0-20.896-13.36-38.666-32-45.258V64c0-35.346-28.654-64-64-64-64.985 56-142.031 128-272 128H48c-26.51 0-48 21.49-48 48v96c0 26.51 21.49 48 48 48h43.263c-18.742 64.65 2.479 116.379 18.814 167.44 1.702 5.32 5.203 9.893 9.922 12.88 20.78 13.155 68.355 15.657 93.773 5.151 16.046-6.633 19.96-27.423 7.522-39.537-18.508-18.026-30.136-36.91-19.795-60.858a12.278 12.278 0 0 0-1.045-11.673c-16.309-24.679-3.581-62.107 28.517-72.752C346.403 327.887 418.591 395.081 480 448c35.346 0 64-28.654 64-64V269.258c18.64-6.592 32-24.362 32-45.258zm-96 139.855c-54.609-44.979-125.033-92.94-224-104.982v-69.747c98.967-12.042 169.391-60.002 224-104.982v279.711z"],
    "bullseye": [512, 512, [], "f140", "M256 72c101.689 0 184 82.295 184 184 0 101.689-82.295 184-184 184-101.689 0-184-82.295-184-184 0-101.689 82.295-184 184-184m0-64C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm0 184c35.29 0 64 28.71 64 64s-28.71 64-64 64-64-28.71-64-64 28.71-64 64-64m0-64c-70.692 0-128 57.308-128 128s57.308 128 128 128 128-57.308 128-128-57.308-128-128-128z"],
    "bus": [512, 512, [], "f207", "M512 152v80c0 13.255-10.745 24-24 24h-8v168c0 13.255-10.745 24-24 24h-8v40c0 13.255-10.745 24-24 24h-48c-13.255 0-24-10.745-24-24v-40H160v40c0 13.255-10.745 24-24 24H88c-13.255 0-24-10.745-24-24v-40h-8c-13.255 0-24-10.745-24-24V256h-8c-13.255 0-24-10.745-24-24v-80c0-13.255 10.745-24 24-24h8V80C32 35.817 132.288 0 256 0s224 35.817 224 80v48h8c13.255 0 24 10.745 24 24zM112 320c-22.091 0-40 17.909-40 40s17.909 40 40 40 40-17.909 40-40-17.909-40-40-40zm288 0c-22.091 0-40 17.909-40 40s17.909 40 40 40 40-17.909 40-40-17.909-40-40-40zm32-56V120c0-13.255-10.745-24-24-24H104c-13.255 0-24 10.745-24 24v144c0 13.255 10.745 24 24 24h304c13.255 0 24-10.745 24-24z"],
    "calculator": [448, 512, [], "f1ec", "M0 464V48C0 21.49 21.49 0 48 0h352c26.51 0 48 21.49 48 48v416c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48zm384-284V76c0-6.627-5.373-12-12-12H76c-6.627 0-12 5.373-12 12v104c0 6.627 5.373 12 12 12h296c6.627 0 12-5.373 12-12zM128 308v-40c0-6.627-5.373-12-12-12H76c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm256 128V268c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v168c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm-256 0v-40c0-6.627-5.373-12-12-12H76c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm128-128v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm0 128v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12z"],
    "calendar": [448, 512, [], "f133", "M12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm436-44v-36c0-26.5-21.5-48-48-48h-48V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H160V12c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v52H48C21.5 64 0 85.5 0 112v36c0 6.6 5.4 12 12 12h424c6.6 0 12-5.4 12-12z"],
    "calendar-alt": [448, 512, [], "f073", "M436 160H12c-6.6 0-12-5.4-12-12v-36c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48v36c0 6.6-5.4 12-12 12zM12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm116 204c0-6.6-5.4-12-12-12H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40zm0-128c0-6.6-5.4-12-12-12H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40zm128 128c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40zm0-128c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40zm128 128c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40zm0-128c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-40z"],
    "calendar-check": [448, 512, [], "f274", "M436 160H12c-6.627 0-12-5.373-12-12v-36c0-26.51 21.49-48 48-48h48V12c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v52h128V12c0-6.627 5.373-12 12-12h40c6.627 0 12 5.373 12 12v52h48c26.51 0 48 21.49 48 48v36c0 6.627-5.373 12-12 12zM12 192h424c6.627 0 12 5.373 12 12v260c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V204c0-6.627 5.373-12 12-12zm333.296 95.947l-28.169-28.398c-4.667-4.705-12.265-4.736-16.97-.068L194.12 364.665l-45.98-46.352c-4.667-4.705-12.266-4.736-16.971-.068l-28.397 28.17c-4.705 4.667-4.736 12.265-.068 16.97l82.601 83.269c4.667 4.705 12.265 4.736 16.97.068l142.953-141.805c4.705-4.667 4.736-12.265.068-16.97z"],
    "calendar-minus": [448, 512, [], "f272", "M436 160H12c-6.6 0-12-5.4-12-12v-36c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48v36c0 6.6-5.4 12-12 12zM12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm304 192c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H132c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h184z"],
    "calendar-plus": [448, 512, [], "f271", "M436 160H12c-6.6 0-12-5.4-12-12v-36c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48v36c0 6.6-5.4 12-12 12zM12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm316 140c0-6.6-5.4-12-12-12h-60v-60c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v60h-60c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h60v60c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-60h60c6.6 0 12-5.4 12-12v-40z"],
    "calendar-times": [448, 512, [], "f273", "M436 160H12c-6.6 0-12-5.4-12-12v-36c0-26.5 21.5-48 48-48h48V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h128V12c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h48c26.5 0 48 21.5 48 48v36c0 6.6-5.4 12-12 12zM12 192h424c6.6 0 12 5.4 12 12v260c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V204c0-6.6 5.4-12 12-12zm257.3 160l48.1-48.1c4.7-4.7 4.7-12.3 0-17l-28.3-28.3c-4.7-4.7-12.3-4.7-17 0L224 306.7l-48.1-48.1c-4.7-4.7-12.3-4.7-17 0l-28.3 28.3c-4.7 4.7-4.7 12.3 0 17l48.1 48.1-48.1 48.1c-4.7 4.7-4.7 12.3 0 17l28.3 28.3c4.7 4.7 12.3 4.7 17 0l48.1-48.1 48.1 48.1c4.7 4.7 12.3 4.7 17 0l28.3-28.3c4.7-4.7 4.7-12.3 0-17L269.3 352z"],
    "camera": [512, 512, [], "f030", "M512 144v288c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V144c0-26.5 21.5-48 48-48h88l12.3-32.9c7-18.7 24.9-31.1 44.9-31.1h125.5c20 0 37.9 12.4 44.9 31.1L376 96h88c26.5 0 48 21.5 48 48zM376 288c0-66.2-53.8-120-120-120s-120 53.8-120 120 53.8 120 120 120 120-53.8 120-120zm-32 0c0 48.5-39.5 88-88 88s-88-39.5-88-88 39.5-88 88-88 88 39.5 88 88z"],
    "camera-retro": [512, 512, [], "f083", "M48 32C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48H48zm0 32h106c3.3 0 6 2.7 6 6v20c0 3.3-2.7 6-6 6H38c-3.3 0-6-2.7-6-6V80c0-8.8 7.2-16 16-16zm426 96H38c-3.3 0-6-2.7-6-6v-36c0-3.3 2.7-6 6-6h138l30.2-45.3c1.1-1.7 3-2.7 5-2.7H464c8.8 0 16 7.2 16 16v74c0 3.3-2.7 6-6 6zM256 424c-66.2 0-120-53.8-120-120s53.8-120 120-120 120 53.8 120 120-53.8 120-120 120zm0-208c-48.5 0-88 39.5-88 88s39.5 88 88 88 88-39.5 88-88-39.5-88-88-88zm-48 104c-8.8 0-16-7.2-16-16 0-35.3 28.7-64 64-64 8.8 0 16 7.2 16 16s-7.2 16-16 16c-17.6 0-32 14.4-32 32 0 8.8-7.2 16-16 16z"],
    "car": [512, 512, [], "f1b9", "M499.991 168h-54.815l-7.854-20.944c-9.192-24.513-25.425-45.351-46.942-60.263S343.651 64 317.472 64H194.528c-26.18 0-51.391 7.882-72.908 22.793-21.518 14.912-37.75 35.75-46.942 60.263L66.824 168H12.009c-8.191 0-13.974 8.024-11.384 15.795l8 24A12 12 0 0 0 20.009 216h28.815l-.052.14C29.222 227.093 16 247.997 16 272v48c0 16.225 6.049 31.029 16 42.309V424c0 13.255 10.745 24 24 24h48c13.255 0 24-10.745 24-24v-40h256v40c0 13.255 10.745 24 24 24h48c13.255 0 24-10.745 24-24v-61.691c9.951-11.281 16-26.085 16-42.309v-48c0-24.003-13.222-44.907-32.772-55.86l-.052-.14h28.815a12 12 0 0 0 11.384-8.205l8-24c2.59-7.771-3.193-15.795-11.384-15.795zm-365.388 1.528C143.918 144.689 168 128 194.528 128h122.944c26.528 0 50.61 16.689 59.925 41.528L391.824 208H120.176l14.427-38.472zM88 328c-17.673 0-32-14.327-32-32 0-17.673 14.327-32 32-32s48 30.327 48 48-30.327 16-48 16zm336 0c-17.673 0-48 1.673-48-16 0-17.673 30.327-48 48-48s32 14.327 32 32c0 17.673-14.327 32-32 32z"],
    "caret-down": [320, 512, [], "f0d7", "M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z"],
    "caret-left": [192, 512, [], "f0d9", "M192 127.338v257.324c0 17.818-21.543 26.741-34.142 14.142L29.196 270.142c-7.81-7.81-7.81-20.474 0-28.284l128.662-128.662c12.599-12.6 34.142-3.676 34.142 14.142z"],
    "caret-right": [192, 512, [], "f0da", "M0 384.662V127.338c0-17.818 21.543-26.741 34.142-14.142l128.662 128.662c7.81 7.81 7.81 20.474 0 28.284L34.142 398.804C21.543 411.404 0 402.48 0 384.662z"],
    "caret-square-down": [448, 512, [], "f150", "M448 80v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zM92.5 220.5l123 123c4.7 4.7 12.3 4.7 17 0l123-123c7.6-7.6 2.2-20.5-8.5-20.5H101c-10.7 0-16.1 12.9-8.5 20.5z"],
    "caret-square-left": [448, 512, [], "f191", "M400 480H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48zM259.515 124.485l-123.03 123.03c-4.686 4.686-4.686 12.284 0 16.971l123.029 123.029c7.56 7.56 20.485 2.206 20.485-8.485V132.971c.001-10.691-12.925-16.045-20.484-8.486z"],
    "caret-square-right": [448, 512, [], "f152", "M48 32h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48zm140.485 355.515l123.029-123.029c4.686-4.686 4.686-12.284 0-16.971l-123.029-123.03c-7.56-7.56-20.485-2.206-20.485 8.485v246.059c0 10.691 12.926 16.045 20.485 8.486z"],
    "caret-square-up": [448, 512, [], "f151", "M0 432V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48zm355.515-140.485l-123.03-123.03c-4.686-4.686-12.284-4.686-16.971 0L92.485 291.515c-7.56 7.56-2.206 20.485 8.485 20.485h246.059c10.691 0 16.045-12.926 8.486-20.485z"],
    "caret-up": [320, 512, [], "f0d8", "M288.662 352H31.338c-17.818 0-26.741-21.543-14.142-34.142l128.662-128.662c7.81-7.81 20.474-7.81 28.284 0l128.662 128.662c12.6 12.599 3.676 34.142-14.142 34.142z"],
    "cart-arrow-down": [576, 512, [], "f218", "M504.717 320H211.572l6.545 32h268.418c15.401 0 26.816 14.301 23.403 29.319l-5.517 24.276C523.112 414.668 536 433.828 536 456c0 31.202-25.519 56.444-56.824 55.994-29.823-.429-54.35-24.631-55.155-54.447-.44-16.287 6.085-31.049 16.803-41.548H231.176C241.553 426.165 248 440.326 248 456c0 31.813-26.528 57.431-58.67 55.938-28.54-1.325-51.751-24.385-53.251-52.917-1.158-22.034 10.436-41.455 28.051-51.586L93.883 64H24C10.745 64 0 53.255 0 40V24C0 10.745 10.745 0 24 0h102.529c11.401 0 21.228 8.021 23.513 19.19L159.208 64H551.99c15.401 0 26.816 14.301 23.403 29.319l-47.273 208C525.637 312.246 515.923 320 504.717 320zM403.029 192H360v-60c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v60h-43.029c-10.691 0-16.045 12.926-8.485 20.485l67.029 67.029c4.686 4.686 12.284 4.686 16.971 0l67.029-67.029c7.559-7.559 2.205-20.485-8.486-20.485z"],
    "cart-plus": [576, 512, [], "f217", "M504.717 320H211.572l6.545 32h268.418c15.401 0 26.816 14.301 23.403 29.319l-5.517 24.276C523.112 414.668 536 433.828 536 456c0 31.202-25.519 56.444-56.824 55.994-29.823-.429-54.35-24.631-55.155-54.447-.44-16.287 6.085-31.049 16.803-41.548H231.176C241.553 426.165 248 440.326 248 456c0 31.813-26.528 57.431-58.67 55.938-28.54-1.325-51.751-24.385-53.251-52.917-1.158-22.034 10.436-41.455 28.051-51.586L93.883 64H24C10.745 64 0 53.255 0 40V24C0 10.745 10.745 0 24 0h102.529c11.401 0 21.228 8.021 23.513 19.19L159.208 64H551.99c15.401 0 26.816 14.301 23.403 29.319l-47.273 208C525.637 312.246 515.923 320 504.717 320zM408 168h-48v-40c0-8.837-7.163-16-16-16h-16c-8.837 0-16 7.163-16 16v40h-48c-8.837 0-16 7.163-16 16v16c0 8.837 7.163 16 16 16h48v40c0 8.837 7.163 16 16 16h16c8.837 0 16-7.163 16-16v-40h48c8.837 0 16-7.163 16-16v-16c0-8.837-7.163-16-16-16z"],
    "certificate": [512, 512, [], "f0a3", "M458.622 255.92l45.985-45.005c13.708-12.977 7.316-36.039-10.664-40.339l-62.65-15.99 17.661-62.015c4.991-17.838-11.829-34.663-29.661-29.671l-61.994 17.667-15.984-62.671C337.085.197 313.765-6.276 300.99 7.228L256 53.57 211.011 7.229c-12.63-13.351-36.047-7.234-40.325 10.668l-15.984 62.671-61.995-17.667C74.87 57.907 58.056 74.738 63.046 92.572l17.661 62.015-62.65 15.99C.069 174.878-6.31 197.944 7.392 210.915l45.985 45.005-45.985 45.004c-13.708 12.977-7.316 36.039 10.664 40.339l62.65 15.99-17.661 62.015c-4.991 17.838 11.829 34.663 29.661 29.671l61.994-17.667 15.984 62.671c4.439 18.575 27.696 24.018 40.325 10.668L256 458.61l44.989 46.001c12.5 13.488 35.987 7.486 40.325-10.668l15.984-62.671 61.994 17.667c17.836 4.994 34.651-11.837 29.661-29.671l-17.661-62.015 62.65-15.99c17.987-4.302 24.366-27.367 10.664-40.339l-45.984-45.004z"],
    "chart-area": [512, 512, [], "f1fe", "M500 384c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12V76c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v308h436zM372.7 159.5L288 216l-85.3-113.7c-5.1-6.8-15.5-6.3-19.9 1L96 248v104h384l-89.9-187.8c-3.2-6.5-11.4-8.7-17.4-4.7z"],
    "chart-bar": [512, 512, [], "f080", "M500 384c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12V76c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v308h436zm-308-44v-72c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v72c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0V204c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v136c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm-96 0V140c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v200c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0V108c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v232c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z"],
    "chart-line": [512, 512, [], "f201", "M500 384c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12V76c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v308h436zM456 96H344c-21.4 0-32.1 25.9-17 41l32.9 32.9-72 72.9-55.6-55.6c-4.7-4.7-12.2-4.7-16.9 0L96.4 305c-4.7 4.6-4.8 12.2-.2 16.9l28.5 29.4c4.7 4.8 12.4 4.9 17.1.1l82.1-82.1 55.5 55.5c4.7 4.7 12.3 4.7 17 0l109.2-109.2L439 249c15.1 15.1 41 4.4 41-17V120c0-13.3-10.7-24-24-24z"],
    "chart-pie": [576, 512, [], "f200", "M288 12.3V240h227.7c6.9 0 12.3-5.8 12-12.7-6.4-122.4-104.5-220.6-227-227-6.9-.3-12.7 5.1-12.7 12zM552.7 288c6.9 0 12.3 5.8 12 12.7-2.8 53.2-23.2 105.6-61.2 147.8-4.6 5.1-12.6 5.4-17.5.5L325 288h227.7zM401 433c4.8 4.8 4.7 12.8-.4 17.3-42.6 38.4-99 61.7-160.8 61.7C107.6 511.9-.2 403.8 0 271.5.2 143.4 100.8 38.9 227.3 32.3c6.9-.4 12.7 5.1 12.7 12V272l161 161z"],
    "check": [512, 512, [], "f00c", "M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z"],
    "check-circle": [512, 512, [], "f058", "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z"],
    "check-square": [448, 512, [], "f14a", "M400 480H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48zm-204.686-98.059l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.248-16.379-6.249-22.628 0L184 302.745l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.25 16.379 6.25 22.628.001z"],
    "chess": [512, 512, [], "f439", "M199.821 217.633a6 6 0 0 1 6 6l-.001 20.766a6 6 0 0 1-6 6h-25.805c0 31.715-2.153 96.201 17.398 153.229H64.597C84.54 345.452 82.02 279.245 82.02 250.399H56.183a6 6 0 0 1-6-6l.002-20.766a6 6 0 0 1 6-6h143.636zM41.554 115.088l34.58 95.071h103.734l34.572-95.072c2.846-7.826-2.95-16.101-11.278-16.101H152v-30.22h21.57a6 6 0 0 0 6-6V40.383a6 6 0 0 0-6-6h-28.367V6a6 6 0 0 0-6-6H116.82a6 6 0 0 0-6 6v28.383H82.421a6 6 0 0 0-6 6v22.383a6 6 0 0 0 6 6H104v30.219H52.831c-8.328.001-14.124 8.276-11.277 16.103zM222.678 445.17v-28.067a6 6 0 0 0-6-6H39.322a6 6 0 0 0-6 6v28.067l-22.148 14.164a6 6 0 0 0-2.767 5.055V506a6 6 0 0 0 6 6h227.187a6 6 0 0 0 6-6v-41.612a6 6 0 0 0-2.767-5.055l-22.149-14.163zm90.578-144.225l24.88 16.963c.09 18.124-.167 63.904-11.905 114.522h147.526c-11.713-50.475-11.969-96.324-11.882-114.537l24.859-16.949a3.856 3.856 0 0 0 1.684-3.187v-69.901a3.857 3.857 0 0 0-3.857-3.857h-27.655a3.857 3.857 0 0 0-3.857 3.857v31.514h-22.737v-31.514a3.857 3.857 0 0 0-3.858-3.857h-52.918a3.857 3.857 0 0 0-3.857 3.857v31.514h-22.737v-31.514a3.857 3.857 0 0 0-3.857-3.857H315.43a3.857 3.857 0 0 0-3.857 3.857v69.901a3.855 3.855 0 0 0 1.683 3.188zm71.585 51.906c0-8.372 6.787-15.158 15.159-15.158s15.158 6.787 15.158 15.158v30.318h-30.317v-30.318zM504.62 470.059l-13.664-10.639v-15.552a3.857 3.857 0 0 0-3.857-3.857H312.915a3.857 3.857 0 0 0-3.857 3.857v15.552l-13.677 10.639a3.857 3.857 0 0 0-1.488 3.044v35.039a3.857 3.857 0 0 0 3.857 3.857h204.5a3.857 3.857 0 0 0 3.857-3.857v-35.04a3.859 3.859 0 0 0-1.487-3.043z"],
    "chess-bishop": [320, 512, [], "f43a", "M123.158 77.881C107.369 72.53 96 57.597 96 40c0-22.091 17.909-40 40-40h47.796c22.091 0 40 17.909 40 40 0 17.541-11.295 32.434-27.005 37.829 23.993 16.657 48.577 46.839 68.703 82.05L144.929 280.443a6 6 0 0 0 0 8.485l14.142 14.142a6 6 0 0 0 8.485 0L280.9 189.726c17.758 38.297 29.371 79.443 29.371 114.273 0 53.786-22.897 75.788-58.446 86.033V448H68.174v-57.97C32.631 379.784 9.739 357.781 9.739 304c0-78.029 58.281-187.766 113.419-226.119zM320 500v-24c0-6.627-5.373-12-12-12H12c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h296c6.627 0 12-5.373 12-12z"],
    "chess-board": [512, 512, [], "f43c", "M256 256v64h-64v-64h64zm0-256h-64v64h64V0zm0 256h64v-64h-64v64zM384 0h-64v64h64V0zm0 512h64v-64h-64v64zm128-64v-64h-64v64h64zm-384 64h64v-64h-64v64zm0-512H64v64h64V0zm384 192v-64h-64v64h64zm0 128v-64h-64v64h64zM0 512h64v-64H0v64zM0 64v64h64V64H0zm0 128v64h64v-64H0zm0 128v64h64v-64H0zm256 192h64v-64h-64v64zm-64-128v64h64v-64h-64zm64-192v-64h-64v64h64zM64 384v64h64v-64H64zm64-128H64v64h64v-64zm256 128h64v-64h-64v64zM512 0h-64v64h64V0zM384 256h64v-64h-64v64zm0-192v64h64V64h-64zm-64 320v64h64v-64h-64zm-192-64v64h64v-64h-64zm128 0v64h64v-64h-64zm-64-128h-64v64h64v-64zm-64-64H64v64h64v-64zm192 192h64v-64h-64v64zM192 128V64h-64v64h64zm128 0V64h-64v64h64zm0 64h64v-64h-64v64z"],
    "chess-king": [448, 512, [], "f43f", "M416 476v24c0 6.627-5.373 12-12 12H44c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h360c6.627 0 12 5.373 12 12zm-8.033-324H248v-48h50a6 6 0 0 0 6-6V62a6 6 0 0 0-6-6h-50V6a6 6 0 0 0-6-6h-36a6 6 0 0 0-6 6v50h-50a6 6 0 0 0-6 6v36a6 6 0 0 0 6 6h50v48H40.033c-27.574 0-46.879 27.244-37.738 53.259L87.582 448h272.836l85.287-242.741C454.846 179.244 435.541 152 407.967 152z"],
    "chess-knight": [384, 512, [], "f441", "M352 224v224H32v-46.557c0-30.302 17.12-58.003 44.223-71.554l57.243-28.622A48 48 0 0 0 160 258.334V208l-22.127 11.063a23.996 23.996 0 0 0-12.55 15.645l-11.835 47.338a12 12 0 0 1-7.185 8.231l-29.601 11.84a11.998 11.998 0 0 1-9.33-.176L7.126 275.167A12 12 0 0 1 0 264.201v-158.26c0-6.365 2.529-12.47 7.03-16.971L16 80 1.789 51.578A16.937 16.937 0 0 1 0 44c0-6.627 5.373-12 12-12h148c106.039 0 192 85.961 192 192zm20 240H12c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h360c6.627 0 12-5.373 12-12v-24c0-6.627-5.373-12-12-12zM52 128c-11.046 0-20 8.954-20 20s8.954 20 20 20 20-8.954 20-20-8.954-20-20-20z"],
    "chess-pawn": [320, 512, [], "f443", "M264 448H56s60-42.743 60-176H84c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h40.209C95.721 210.56 76 181.588 76 148c0-46.392 37.608-84 84-84s84 37.608 84 84c0 33.588-19.721 62.56-48.209 76H236c6.627 0 12 5.373 12 12v24c0 6.627-5.373 12-12 12h-32c0 133.257 60 176 60 176zm28 16H28c-6.627 0-12 5.373-12 12v24c0 6.627 5.373 12 12 12h264c6.627 0 12-5.373 12-12v-24c0-6.627-5.373-12-12-12z"],
    "chess-queen": [512, 512, [], "f445", "M436 512H76c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h360c6.627 0 12 5.373 12 12v24c0 6.627-5.373 12-12 12zM255.579 0c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56zm204.568 154.634c-5.768-3.045-12.916-.932-16.082 4.77-8.616 15.516-22.747 37.801-44.065 37.801-28.714 0-30.625-19.804-31.686-57.542-.183-6.492-5.501-11.664-11.995-11.664h-41.006c-5.175 0-9.754 3.328-11.388 8.238-8.89 26.709-26.073 40.992-47.925 40.992s-39.034-14.283-47.925-40.992c-1.634-4.91-6.213-8.238-11.388-8.238h-41.005c-6.495 0-11.813 5.174-11.995 11.667-1.052 37.642-2.934 57.539-31.688 57.539-20.691 0-33.817-20.224-44.425-38.025-3.266-5.48-10.258-7.431-15.899-4.453l-39.179 20.679a12 12 0 0 0-5.51 15.145L112 448h288l105.014-257.448a12 12 0 0 0-5.51-15.145l-39.357-20.773z"],
    "chess-rook": [384, 512, [], "f447", "M81.241 215.027C80.957 258.92 77.411 348.076 48 448h287.982c-29.4-99.604-32.936-188.912-33.221-232.975l45.418-42.312a11.998 11.998 0 0 0 3.82-8.78V44c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v44h-48V44c0-6.627-5.373-12-12-12h-72c-6.627 0-12 5.373-12 12v44H96V44c0-6.627-5.373-12-12-12H44c-6.627 0-12 5.373-12 12v119.932c0 3.33 1.384 6.51 3.82 8.78l45.421 42.315zM160 256c0-17.673 14.327-32 32-32 17.673 0 32 14.327 32 32v64.004h-64V256zm224 220v24c0 6.627-5.373 12-12 12H12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h360c6.627 0 12 5.373 12 12z"],
    "chevron-circle-down": [512, 512, [], "f13a", "M504 256c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zM273 369.9l135.5-135.5c9.4-9.4 9.4-24.6 0-33.9l-17-17c-9.4-9.4-24.6-9.4-33.9 0L256 285.1 154.4 183.5c-9.4-9.4-24.6-9.4-33.9 0l-17 17c-9.4 9.4-9.4 24.6 0 33.9L239 369.9c9.4 9.4 24.6 9.4 34 0z"],
    "chevron-circle-left": [512, 512, [], "f137", "M256 504C119 504 8 393 8 256S119 8 256 8s248 111 248 248-111 248-248 248zM142.1 273l135.5 135.5c9.4 9.4 24.6 9.4 33.9 0l17-17c9.4-9.4 9.4-24.6 0-33.9L226.9 256l101.6-101.6c9.4-9.4 9.4-24.6 0-33.9l-17-17c-9.4-9.4-24.6-9.4-33.9 0L142.1 239c-9.4 9.4-9.4 24.6 0 34z"],
    "chevron-circle-right": [512, 512, [], "f138", "M256 8c137 0 248 111 248 248S393 504 256 504 8 393 8 256 119 8 256 8zm113.9 231L234.4 103.5c-9.4-9.4-24.6-9.4-33.9 0l-17 17c-9.4 9.4-9.4 24.6 0 33.9L285.1 256 183.5 357.6c-9.4 9.4-9.4 24.6 0 33.9l17 17c9.4 9.4 24.6 9.4 33.9 0L369.9 273c9.4-9.4 9.4-24.6 0-34z"],
    "chevron-circle-up": [512, 512, [], "f139", "M8 256C8 119 119 8 256 8s248 111 248 248-111 248-248 248S8 393 8 256zm231-113.9L103.5 277.6c-9.4 9.4-9.4 24.6 0 33.9l17 17c9.4 9.4 24.6 9.4 33.9 0L256 226.9l101.6 101.6c9.4 9.4 24.6 9.4 33.9 0l17-17c9.4-9.4 9.4-24.6 0-33.9L273 142.1c-9.4-9.4-24.6-9.4-34 0z"],
    "chevron-down": [448, 512, [], "f078", "M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"],
    "chevron-left": [320, 512, [], "f053", "M34.52 239.03L228.87 44.69c9.37-9.37 24.57-9.37 33.94 0l22.67 22.67c9.36 9.36 9.37 24.52.04 33.9L131.49 256l154.02 154.75c9.34 9.38 9.32 24.54-.04 33.9l-22.67 22.67c-9.37 9.37-24.57 9.37-33.94 0L34.52 272.97c-9.37-9.37-9.37-24.57 0-33.94z"],
    "chevron-right": [320, 512, [], "f054", "M285.476 272.971L91.132 467.314c-9.373 9.373-24.569 9.373-33.941 0l-22.667-22.667c-9.357-9.357-9.375-24.522-.04-33.901L188.505 256 34.484 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L285.475 239.03c9.373 9.372 9.373 24.568.001 33.941z"],
    "chevron-up": [448, 512, [], "f077", "M240.971 130.524l194.343 194.343c9.373 9.373 9.373 24.569 0 33.941l-22.667 22.667c-9.357 9.357-24.522 9.375-33.901.04L224 227.495 69.255 381.516c-9.379 9.335-24.544 9.317-33.901-.04l-22.667-22.667c-9.373-9.373-9.373-24.569 0-33.941L207.03 130.525c9.372-9.373 24.568-9.373 33.941-.001z"],
    "child": [384, 512, [], "f1ae", "M120 72c0-39.765 32.235-72 72-72s72 32.235 72 72c0 39.764-32.235 72-72 72s-72-32.236-72-72zm254.627 1.373c-12.496-12.497-32.758-12.497-45.254 0L242.745 160H141.254L54.627 73.373c-12.496-12.497-32.758-12.497-45.254 0-12.497 12.497-12.497 32.758 0 45.255L104 213.254V480c0 17.673 14.327 32 32 32h16c17.673 0 32-14.327 32-32V368h16v112c0 17.673 14.327 32 32 32h16c17.673 0 32-14.327 32-32V213.254l94.627-94.627c12.497-12.497 12.497-32.757 0-45.254z"],
    "circle": [512, 512, [], "f111", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8z"],
    "circle-notch": [512, 512, [], "f1ce", "M288 39.056v16.659c0 10.804 7.281 20.159 17.686 23.066C383.204 100.434 440 171.518 440 256c0 101.689-82.295 184-184 184-101.689 0-184-82.295-184-184 0-84.47 56.786-155.564 134.312-177.219C216.719 75.874 224 66.517 224 55.712V39.064c0-15.709-14.834-27.153-30.046-23.234C86.603 43.482 7.394 141.206 8.003 257.332c.72 137.052 111.477 246.956 248.531 246.667C393.255 503.711 504 392.788 504 256c0-115.633-79.14-212.779-186.211-240.236C302.678 11.889 288 23.456 288 39.056z"],
    "clipboard": [384, 512, [], "f328", "M384 112v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h80c0-35.29 28.71-64 64-64s64 28.71 64 64h80c26.51 0 48 21.49 48 48zM192 40c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24m96 114v-20a6 6 0 0 0-6-6H102a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6h180a6 6 0 0 0 6-6z"],
    "clipboard-check": [384, 512, [], "f46c", "M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM192 40c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm121.2 231.8l-143 141.8c-4.7 4.7-12.3 4.6-17-.1l-82.6-83.3c-4.7-4.7-4.6-12.3.1-17L99.1 285c4.7-4.7 12.3-4.6 17 .1l46 46.4 106-105.2c4.7-4.7 12.3-4.6 17 .1l28.2 28.4c4.7 4.8 4.6 12.3-.1 17z"],
    "clipboard-list": [384, 512, [], "f46d", "M336 64h-80c0-35.3-28.7-64-64-64s-64 28.7-64 64H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM96 424c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24-10.7 24-24 24zm0-96c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24-10.7 24-24 24zm0-96c-13.3 0-24-10.7-24-24s10.7-24 24-24 24 10.7 24 24-10.7 24-24 24zm96-192c13.3 0 24 10.7 24 24s-10.7 24-24 24-24-10.7-24-24 10.7-24 24-24zm128 368c0 4.4-3.6 8-8 8H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16zm0-96c0 4.4-3.6 8-8 8H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16zm0-96c0 4.4-3.6 8-8 8H168c-4.4 0-8-3.6-8-8v-16c0-4.4 3.6-8 8-8h144c4.4 0 8 3.6 8 8v16z"],
    "clock": [512, 512, [], "f017", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm57.1 350.1L224.9 294c-3.1-2.3-4.9-5.9-4.9-9.7V116c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12v137.7l63.5 46.2c5.4 3.9 6.5 11.4 2.6 16.8l-28.2 38.8c-3.9 5.3-11.4 6.5-16.8 2.6z"],
    "clone": [512, 512, [], "f24d", "M464 0c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48H176c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h288M176 416c-44.112 0-80-35.888-80-80V128H48c-26.51 0-48 21.49-48 48v288c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48v-48H176z"],
    "closed-captioning": [512, 512, [], "f20a", "M464 64H48C21.5 64 0 85.5 0 112v288c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V112c0-26.5-21.5-48-48-48zM218.1 287.7c2.8-2.5 7.1-2.1 9.2.9l19.5 27.7c1.7 2.4 1.5 5.6-.5 7.7-53.6 56.8-172.8 32.1-172.8-67.9 0-97.3 121.7-119.5 172.5-70.1 2.1 2 2.5 3.2 1 5.7l-17.5 30.5c-1.9 3.1-6.2 4-9.1 1.7-40.8-32-94.6-14.9-94.6 31.2.1 48 51.1 70.5 92.3 32.6zm190.4 0c2.8-2.5 7.1-2.1 9.2.9l19.5 27.7c1.7 2.4 1.5 5.6-.5 7.7-53.5 56.9-172.7 32.1-172.7-67.9 0-97.3 121.7-119.5 172.5-70.1 2.1 2 2.5 3.2 1 5.7L420 222.2c-1.9 3.1-6.2 4-9.1 1.7-40.8-32-94.6-14.9-94.6 31.2 0 48 51 70.5 92.2 32.6z"],
    "cloud": [640, 512, [], "f0c2", "M537.585 226.56C541.725 215.836 544 204.184 544 192c0-53.019-42.981-96-96-96-19.729 0-38.065 5.954-53.316 16.159C367.042 64.248 315.288 32 256 32c-88.366 0-160 71.634-160 160 0 2.728.07 5.439.204 8.133C40.171 219.845 0 273.227 0 336c0 79.529 64.471 144 144 144h368c70.692 0 128-57.308 128-128 0-61.93-43.983-113.586-102.415-125.44z"],
    "cloud-download-alt": [640, 512, [], "f381", "M640 352c0 70.692-57.308 128-128 128H144C64.471 480 0 415.529 0 336c0-62.773 40.171-116.155 96.204-135.867A163.68 163.68 0 0 1 96 192c0-88.366 71.634-160 160-160 59.288 0 111.042 32.248 138.684 80.159C409.935 101.954 428.271 96 448 96c53.019 0 96 42.981 96 96 0 12.184-2.275 23.836-6.415 34.56C596.017 238.414 640 290.07 640 352zm-246.627-64H328V176c0-8.837-7.164-16-16-16h-48c-8.836 0-16 7.163-16 16v112h-65.373c-14.254 0-21.393 17.234-11.314 27.314l105.373 105.373c6.248 6.248 16.379 6.248 22.627 0l105.373-105.373c10.08-10.08 2.941-27.314-11.313-27.314z"],
    "cloud-upload-alt": [640, 512, [], "f382", "M640 352c0 70.692-57.308 128-128 128H144C64.471 480 0 415.529 0 336c0-62.773 40.171-116.155 96.204-135.867A163.68 163.68 0 0 1 96 192c0-88.366 71.634-160 160-160 59.288 0 111.042 32.248 138.684 80.159C409.935 101.954 428.271 96 448 96c53.019 0 96 42.981 96 96 0 12.184-2.275 23.836-6.415 34.56C596.017 238.414 640 290.07 640 352zm-235.314-91.314L299.314 155.314c-6.248-6.248-16.379-6.248-22.627 0L171.314 260.686c-10.08 10.08-2.941 27.314 11.313 27.314H248v112c0 8.837 7.164 16 16 16h48c8.836 0 16-7.163 16-16V288h65.373c14.254 0 21.393-17.234 11.313-27.314z"],
    "code": [640, 512, [], "f121", "M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z"],
    "code-branch": [384, 512, [], "f126", "M384 144c0-44.2-35.8-80-80-80s-80 35.8-80 80c0 36.4 24.3 67.1 57.5 76.8-.6 16.1-4.2 28.5-11 36.9-15.4 19.2-49.3 22.4-85.2 25.7-28.2 2.6-57.4 5.4-81.3 16.9v-144c32.5-10.2 56-40.5 56-76.3 0-44.2-35.8-80-80-80S0 35.8 0 80c0 35.8 23.5 66.1 56 76.3v199.3C23.5 365.9 0 396.2 0 432c0 44.2 35.8 80 80 80s80-35.8 80-80c0-34-21.2-63.1-51.2-74.6 3.1-5.2 7.8-9.8 14.9-13.4 16.2-8.2 40.4-10.4 66.1-12.8 42.2-3.9 90-8.4 118.2-43.4 14-17.4 21.1-39.8 21.6-67.9 31.6-10.8 54.4-40.7 54.4-75.9zM80 64c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16zm0 384c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16zm224-320c8.8 0 16 7.2 16 16s-7.2 16-16 16-16-7.2-16-16 7.2-16 16-16z"],
    "coffee": [640, 512, [], "f0f4", "M192 384h192c53 0 96-43 96-96h32c70.6 0 128-57.4 128-128S582.6 32 512 32H120c-13.3 0-24 10.7-24 24v232c0 53 43 96 96 96zM512 96c35.3 0 64 28.7 64 64s-28.7 64-64 64h-32V96h32zm47.7 384H48.3c-47.6 0-61-64-36-64h583.3c25 0 11.8 64-35.9 64z"],
    "cog": [512, 512, [], "f013", "M444.788 291.1l42.616 24.599c4.867 2.809 7.126 8.618 5.459 13.985-11.07 35.642-29.97 67.842-54.689 94.586a12.016 12.016 0 0 1-14.832 2.254l-42.584-24.595a191.577 191.577 0 0 1-60.759 35.13v49.182a12.01 12.01 0 0 1-9.377 11.718c-34.956 7.85-72.499 8.256-109.219.007-5.49-1.233-9.403-6.096-9.403-11.723v-49.184a191.555 191.555 0 0 1-60.759-35.13l-42.584 24.595a12.016 12.016 0 0 1-14.832-2.254c-24.718-26.744-43.619-58.944-54.689-94.586-1.667-5.366.592-11.175 5.459-13.985L67.212 291.1a193.48 193.48 0 0 1 0-70.199l-42.616-24.599c-4.867-2.809-7.126-8.618-5.459-13.985 11.07-35.642 29.97-67.842 54.689-94.586a12.016 12.016 0 0 1 14.832-2.254l42.584 24.595a191.577 191.577 0 0 1 60.759-35.13V25.759a12.01 12.01 0 0 1 9.377-11.718c34.956-7.85 72.499-8.256 109.219-.007 5.49 1.233 9.403 6.096 9.403 11.723v49.184a191.555 191.555 0 0 1 60.759 35.13l42.584-24.595a12.016 12.016 0 0 1 14.832 2.254c24.718 26.744 43.619 58.944 54.689 94.586 1.667 5.366-.592 11.175-5.459 13.985L444.788 220.9a193.485 193.485 0 0 1 0 70.2zM336 256c0-44.112-35.888-80-80-80s-80 35.888-80 80 35.888 80 80 80 80-35.888 80-80z"],
    "cogs": [640, 512, [], "f085", "M512.1 191l-8.2 14.3c-3 5.3-9.4 7.5-15.1 5.4-11.8-4.4-22.6-10.7-32.1-18.6-4.6-3.8-5.8-10.5-2.8-15.7l8.2-14.3c-6.9-8-12.3-17.3-15.9-27.4h-16.5c-6 0-11.2-4.3-12.2-10.3-2-12-2.1-24.6 0-37.1 1-6 6.2-10.4 12.2-10.4h16.5c3.6-10.1 9-19.4 15.9-27.4l-8.2-14.3c-3-5.2-1.9-11.9 2.8-15.7 9.5-7.9 20.4-14.2 32.1-18.6 5.7-2.1 12.1.1 15.1 5.4l8.2 14.3c10.5-1.9 21.2-1.9 31.7 0L552 6.3c3-5.3 9.4-7.5 15.1-5.4 11.8 4.4 22.6 10.7 32.1 18.6 4.6 3.8 5.8 10.5 2.8 15.7l-8.2 14.3c6.9 8 12.3 17.3 15.9 27.4h16.5c6 0 11.2 4.3 12.2 10.3 2 12 2.1 24.6 0 37.1-1 6-6.2 10.4-12.2 10.4h-16.5c-3.6 10.1-9 19.4-15.9 27.4l8.2 14.3c3 5.2 1.9 11.9-2.8 15.7-9.5 7.9-20.4 14.2-32.1 18.6-5.7 2.1-12.1-.1-15.1-5.4l-8.2-14.3c-10.4 1.9-21.2 1.9-31.7 0zm-10.5-58.8c38.5 29.6 82.4-14.3 52.8-52.8-38.5-29.7-82.4 14.3-52.8 52.8zM386.3 286.1l33.7 16.8c10.1 5.8 14.5 18.1 10.5 29.1-8.9 24.2-26.4 46.4-42.6 65.8-7.4 8.9-20.2 11.1-30.3 5.3l-29.1-16.8c-16 13.7-34.6 24.6-54.9 31.7v33.6c0 11.6-8.3 21.6-19.7 23.6-24.6 4.2-50.4 4.4-75.9 0-11.5-2-20-11.9-20-23.6V418c-20.3-7.2-38.9-18-54.9-31.7L74 403c-10 5.8-22.9 3.6-30.3-5.3-16.2-19.4-33.3-41.6-42.2-65.7-4-10.9.4-23.2 10.5-29.1l33.3-16.8c-3.9-20.9-3.9-42.4 0-63.4L12 205.8c-10.1-5.8-14.6-18.1-10.5-29 8.9-24.2 26-46.4 42.2-65.8 7.4-8.9 20.2-11.1 30.3-5.3l29.1 16.8c16-13.7 34.6-24.6 54.9-31.7V57.1c0-11.5 8.2-21.5 19.6-23.5 24.6-4.2 50.5-4.4 76-.1 11.5 2 20 11.9 20 23.6v33.6c20.3 7.2 38.9 18 54.9 31.7l29.1-16.8c10-5.8 22.9-3.6 30.3 5.3 16.2 19.4 33.2 41.6 42.1 65.8 4 10.9.1 23.2-10 29.1l-33.7 16.8c3.9 21 3.9 42.5 0 63.5zm-117.6 21.1c59.2-77-28.7-164.9-105.7-105.7-59.2 77 28.7 164.9 105.7 105.7zm243.4 182.7l-8.2 14.3c-3 5.3-9.4 7.5-15.1 5.4-11.8-4.4-22.6-10.7-32.1-18.6-4.6-3.8-5.8-10.5-2.8-15.7l8.2-14.3c-6.9-8-12.3-17.3-15.9-27.4h-16.5c-6 0-11.2-4.3-12.2-10.3-2-12-2.1-24.6 0-37.1 1-6 6.2-10.4 12.2-10.4h16.5c3.6-10.1 9-19.4 15.9-27.4l-8.2-14.3c-3-5.2-1.9-11.9 2.8-15.7 9.5-7.9 20.4-14.2 32.1-18.6 5.7-2.1 12.1.1 15.1 5.4l8.2 14.3c10.5-1.9 21.2-1.9 31.7 0l8.2-14.3c3-5.3 9.4-7.5 15.1-5.4 11.8 4.4 22.6 10.7 32.1 18.6 4.6 3.8 5.8 10.5 2.8 15.7l-8.2 14.3c6.9 8 12.3 17.3 15.9 27.4h16.5c6 0 11.2 4.3 12.2 10.3 2 12 2.1 24.6 0 37.1-1 6-6.2 10.4-12.2 10.4h-16.5c-3.6 10.1-9 19.4-15.9 27.4l8.2 14.3c3 5.2 1.9 11.9-2.8 15.7-9.5 7.9-20.4 14.2-32.1 18.6-5.7 2.1-12.1-.1-15.1-5.4l-8.2-14.3c-10.4 1.9-21.2 1.9-31.7 0zM501.6 431c38.5 29.6 82.4-14.3 52.8-52.8-38.5-29.6-82.4 14.3-52.8 52.8z"],
    "columns": [512, 512, [], "f0db", "M464 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM224 416H64V160h160v256zm224 0H288V160h160v256z"],
    "comment": [576, 512, [], "f075", "M576 240c0 115-129 208-288 208-48.3 0-93.9-8.6-133.9-23.8-40.3 31.2-89.8 50.3-142.4 55.7-5.2.6-10.2-2.8-11.5-7.7-1.3-5 2.7-8.1 6.6-11.8 19.3-18.4 42.7-32.8 51.9-94.6C21.9 330.9 0 287.3 0 240 0 125.1 129 32 288 32s288 93.1 288 208z"],
    "comment-alt": [576, 512, [], "f27a", "M576 240c0 115-129 208-288 208-48.3 0-93.9-8.6-133.9-23.8-40.3 31.2-89.8 50.3-142.4 55.7-5.2.6-10.2-2.8-11.5-7.7-1.3-5 2.7-8.1 6.6-11.8 19.3-18.4 42.7-32.8 51.9-94.6C21.9 330.9 0 287.3 0 240 0 125.1 129 32 288 32s288 93.1 288 208zm-416-48c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm128 0c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48zm128 0c-26.5 0-48 21.5-48 48s21.5 48 48 48 48-21.5 48-48-21.5-48-48-48z"],
    "comments": [576, 512, [], "f086", "M224 358.857c-37.599 0-73.027-6.763-104.143-18.7-31.375 24.549-69.869 39.508-110.764 43.796a8.632 8.632 0 0 1-.89.047c-3.736 0-7.111-2.498-8.017-6.061-.98-3.961 2.088-6.399 5.126-9.305 15.017-14.439 33.222-25.79 40.342-74.297C17.015 266.886 0 232.622 0 195.429 0 105.16 100.297 32 224 32s224 73.159 224 163.429c-.001 90.332-100.297 163.428-224 163.428zm347.067 107.174c-13.944-13.127-30.849-23.446-37.46-67.543 68.808-64.568 52.171-156.935-37.674-207.065.031 1.334.066 2.667.066 4.006 0 122.493-129.583 216.394-284.252 211.222 38.121 30.961 93.989 50.492 156.252 50.492 34.914 0 67.811-6.148 96.704-17 29.134 22.317 64.878 35.916 102.853 39.814 3.786.395 7.363-1.973 8.27-5.467.911-3.601-1.938-5.817-4.759-8.459z"],
    "compass": [512, 512, [], "f14e", "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM307.446 120.844l-102.642 97.779a23.997 23.997 0 0 0-6.772 11.729l-33.359 137.779c-5.68 23.459 22.777 39.318 39.88 23.024l102.64-97.779a23.99 23.99 0 0 0 6.772-11.729l33.359-137.779c5.618-23.198-22.591-39.493-39.878-23.024zM256 224c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32z"],
    "compress": [448, 512, [], "f066", "M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z"],
    "copy": [448, 512, [], "f0c5", "M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z"],
    "copyright": [512, 512, [], "f1f9", "M256 8C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm117.134 346.753c-1.592 1.867-39.776 45.731-109.851 45.731-84.692 0-144.484-63.26-144.484-145.567 0-81.303 62.004-143.401 143.762-143.401 66.957 0 101.965 37.315 103.422 38.904a12 12 0 0 1 1.238 14.623l-22.38 34.655c-4.049 6.267-12.774 7.351-18.234 2.295-.233-.214-26.529-23.88-61.88-23.88-46.116 0-73.916 33.575-73.916 76.082 0 39.602 25.514 79.692 74.277 79.692 38.697 0 65.28-28.338 65.544-28.625 5.132-5.565 14.059-5.033 18.508 1.053l24.547 33.572a12.001 12.001 0 0 1-.553 14.866z"],
    "credit-card": [576, 512, [], "f09d", "M0 432c0 26.5 21.5 48 48 48h480c26.5 0 48-21.5 48-48V256H0v176zm192-68c0-6.6 5.4-12 12-12h136c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H204c-6.6 0-12-5.4-12-12v-40zm-128 0c0-6.6 5.4-12 12-12h72c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12v-40zM576 80v48H0V80c0-26.5 21.5-48 48-48h480c26.5 0 48 21.5 48 48z"],
    "crop": [512, 512, [], "f125", "M488 352h-40V109.3l57-57c9.4-9.4 9.4-24.6 0-33.9L493.7 7c-9.4-9.4-24.6-9.4-33.9 0l-57 57H160V24c0-13.3-10.7-24-24-24H88C74.7 0 64 10.7 64 24v40H24C10.7 64 0 74.7 0 88v48c0 13.3 10.7 24 24 24h40v264c0 13.3 10.7 24 24 24h264v40c0 13.3 10.7 24 24 24h48c13.3 0 24-10.7 24-24v-40h40c13.3 0 24-10.7 24-24v-48c0-13.3-10.7-24-24-24zM306.7 160L160 306.7V160h146.7zM205.3 352L352 205.3V352H205.3z"],
    "crosshairs": [512, 512, [], "f05b", "M500 224h-30.364C455.724 130.325 381.675 56.276 288 42.364V12c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v30.364C130.325 56.276 56.276 130.325 42.364 224H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h30.364C56.276 381.675 130.325 455.724 224 469.636V500c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-30.364C381.675 455.724 455.724 381.675 469.636 288H500c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12zM288 404.634V364c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40.634C165.826 392.232 119.783 346.243 107.366 288H148c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-40.634C119.768 165.826 165.757 119.783 224 107.366V148c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40.634C346.174 119.768 392.217 165.757 404.634 224H364c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40.634C392.232 346.174 346.243 392.217 288 404.634zM288 256c0 17.673-14.327 32-32 32s-32-14.327-32-32c0-17.673 14.327-32 32-32s32 14.327 32 32z"],
    "cube": [512, 512, [], "f1b2", "M239.1 6.3l-208 78c-18.7 7-31.1 25-31.1 45v225.1c0 18.2 10.3 34.8 26.5 42.9l208 104c13.5 6.8 29.4 6.8 42.9 0l208-104c16.3-8.1 26.5-24.8 26.5-42.9V129.3c0-20-12.4-37.9-31.1-44.9l-208-78C262 2.2 250 2.2 239.1 6.3zM256 68.4l192 72v1.1l-192 78-192-78v-1.1l192-72zm32 356V275.5l160-65v133.9l-160 80z"],
    "cubes": [512, 512, [], "f1b3", "M488.6 250.2L392 214V105.5c0-15-9.3-28.4-23.4-33.7l-100-37.5c-8.1-3.1-17.1-3.1-25.3 0l-100 37.5c-14.1 5.3-23.4 18.7-23.4 33.7V214l-96.6 36.2C9.3 255.5 0 268.9 0 283.9V394c0 13.6 7.7 26.1 19.9 32.2l100 50c10.1 5.1 22.1 5.1 32.2 0l103.9-52 103.9 52c10.1 5.1 22.1 5.1 32.2 0l100-50c12.2-6.1 19.9-18.6 19.9-32.2V283.9c0-15-9.3-28.4-23.4-33.7zM358 214.8l-85 31.9v-68.2l85-37v73.3zM154 104.1l102-38.2 102 38.2v.6l-102 41.4-102-41.4v-.6zm84 291.1l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6zm240 112l-85 42.5v-79.1l85-38.8v75.4zm0-112l-102 41.4-102-41.4v-.6l102-38.2 102 38.2v.6z"],
    "cut": [448, 512, [], "f0c4", "M444.485 422.426c4.689 4.689 4.684 12.287 0 16.971-32.804 32.804-85.991 32.804-118.795 0L210.176 323.883l-24.859 24.859C189.63 359.657 192 371.552 192 384c0 53.019-42.981 96-96 96S0 437.019 0 384s42.981-96 96-96c4.536 0 8.995.322 13.363.93l32.93-32.93-32.93-32.93c-4.368.608-8.827.93-13.363.93-53.019 0-96-42.981-96-96s42.981-96 96-96 96 42.981 96 96c0 12.448-2.37 24.343-6.682 35.258l24.859 24.859L325.69 72.603c32.804-32.804 85.991-32.804 118.795 0 4.684 4.684 4.689 12.282 0 16.971L278.059 256l166.426 166.426zM96 96c-17.645 0-32 14.355-32 32s14.355 32 32 32 32-14.355 32-32-14.355-32-32-32m0 256c-17.645 0-32 14.355-32 32s14.355 32 32 32 32-14.355 32-32-14.355-32-32-32m112-108c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12z"],
    "database": [448, 512, [], "f1c0", "M448 73.143v45.714C448 159.143 347.667 192 224 192S0 159.143 0 118.857V73.143C0 32.857 100.333 0 224 0s224 32.857 224 73.143zM448 176v102.857C448 319.143 347.667 352 224 352S0 319.143 0 278.857V176c48.125 33.143 136.208 48.572 224 48.572S399.874 209.143 448 176zm0 160v102.857C448 479.143 347.667 512 224 512S0 479.143 0 438.857V336c48.125 33.143 136.208 48.572 224 48.572S399.874 369.143 448 336z"],
    "deaf": [512, 512, [], "f2a4", "M216 260c0 15.464-12.536 28-28 28s-28-12.536-28-28c0-44.112 35.888-80 80-80s80 35.888 80 80c0 15.464-12.536 28-28 28s-28-12.536-28-28c0-13.234-10.767-24-24-24s-24 10.766-24 24zm24-176c-97.047 0-176 78.953-176 176 0 15.464 12.536 28 28 28s28-12.536 28-28c0-66.168 53.832-120 120-120s120 53.832 120 120c0 75.164-71.009 70.311-71.997 143.622L288 404c0 28.673-23.327 52-52 52-15.464 0-28 12.536-28 28s12.536 28 28 28c59.475 0 107.876-48.328 108-107.774.595-34.428 72-48.24 72-144.226 0-97.047-78.953-176-176-176zm268.485-52.201L480.2 3.515c-4.687-4.686-12.284-4.686-16.971 0L376.2 90.544c-4.686 4.686-4.686 12.284 0 16.971l28.285 28.285c4.686 4.686 12.284 4.686 16.97 0l87.03-87.029c4.687-4.688 4.687-12.286 0-16.972zM168.97 314.745c-4.686-4.686-12.284-4.686-16.97 0L3.515 463.23c-4.686 4.686-4.686 12.284 0 16.971L31.8 508.485c4.687 4.686 12.284 4.686 16.971 0L197.256 360c4.686-4.686 4.686-12.284 0-16.971l-28.286-28.284z"],
    "desktop": [576, 512, [], "f108", "M528 0H48C21.5 0 0 21.5 0 48v320c0 26.5 21.5 48 48 48h192l-16 48h-72c-13.3 0-24 10.7-24 24s10.7 24 24 24h272c13.3 0 24-10.7 24-24s-10.7-24-24-24h-72l-16-48h192c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zm-16 352H64V64h448v288z"],
    "dna": [448, 512, [], "f471", "M447.9 17.9C449 8.4 441.6.1 432 .1L399.6 0c-8.1 0-14.9 5.9-16 13.9-.7 4.9-1.8 11.1-3.4 18.1H67.9c-1.6-6.9-2.9-13.2-3.5-18.1-1.1-8-7.9-14-16-13.9L16.1.1C6.5.1-1 8.4.1 17.9c4.6 37.9 25.6 129 118.9 207.7 17.6-12.4 37.1-24.2 58.5-35.4-6.2-4.6-11.4-9.4-17-14.2h127.6c-21.3 18.1-47 35.6-78.7 51.4C37.5 312.9 5.9 446.2.1 494.1c-1.1 9.5 6.3 17.8 15.9 17.8l32.3.1c8.1 0 14.9-5.9 16-13.9.7-4.9 1.8-11.1 3.4-18.1h312.4c1.6 7 2.7 13.1 3.4 18.1 1.1 8 7.9 14 16 13.9l32.3-.1c9.6 0 17.1-8.3 15.9-17.8-5-42.9-31.1-153.9-159.7-238.1C416.5 171.8 442.7 60.8 447.9 17.9zM224 292.4c25.1 13.7 46.4 28.4 64.3 43.6H159.7c17.9-15.2 39.2-30 64.3-43.6zM92.9 416c5.8-10.4 12.8-21.1 21-32h220c8.3 10.9 15.3 21.6 21 32h-262zM355.1 96c-5.8 10.4-12.8 21.1-21 32H114.6c-8.3-10.9-15.4-21.6-21.2-32h261.7z"],
    "dollar-sign": [320, 512, [], "f155", "M113.411 169.375c0-23.337 21.536-38.417 54.865-38.417 26.726 0 54.116 12.263 76.461 28.333 5.88 4.229 14.13 2.354 17.575-4.017l23.552-43.549c2.649-4.898 1.596-10.991-2.575-14.68-24.281-21.477-59.135-34.09-91.289-37.806V12c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v49.832c-58.627 13.29-97.299 55.917-97.299 108.639 0 123.533 184.765 110.81 184.765 169.414 0 19.823-16.311 41.158-52.124 41.158-30.751 0-62.932-15.88-87.848-35.887-5.31-4.264-13.082-3.315-17.159 2.14l-30.389 40.667c-3.627 4.854-3.075 11.657 1.302 15.847 24.049 23.02 59.249 41.255 98.751 47.973V500c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-47.438c65.72-10.215 106.176-59.186 106.176-116.516.001-119.688-184.764-103.707-184.764-166.671z"],
    "dolly": [576, 512, [], "f472", "M294.2 277.7c18 5 34.7 13.4 49.5 24.7l161.5-53.8c8.4-2.8 12.9-11.9 10.1-20.2L454.9 47.2c-2.8-8.4-11.9-12.9-20.2-10.1l-61.1 20.4 33.1 99.4L346 177l-33.1-99.4-61.6 20.5c-8.4 2.8-12.9 11.9-10.1 20.2l53 159.4zm281 48.7L565 296c-2.8-8.4-11.9-12.9-20.2-10.1l-213.5 71.2c-17.2-22-43.6-36.4-73.5-37L158.4 21.9C154 8.8 141.8 0 128 0H16C7.2 0 0 7.2 0 16v32c0 8.8 7.2 16 16 16h88.9l92.2 276.7c-26.1 20.4-41.7 53.6-36 90.5 6.1 39.4 37.9 72.3 77.3 79.2 60.2 10.7 112.3-34.8 113.4-92.6l213.3-71.2c8.3-2.8 12.9-11.8 10.1-20.2zM256 464c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z"],
    "dolly-flatbed": [640, 512, [], "f474", "M208 320h384c8.8 0 16-7.2 16-16V48c0-8.8-7.2-16-16-16H448v128l-48-32-48 32V32H208c-8.8 0-16 7.2-16 16v256c0 8.8 7.2 16 16 16zm416 64H128V16c0-8.8-7.2-16-16-16H16C7.2 0 0 7.2 0 16v32c0 8.8 7.2 16 16 16h48v368c0 8.8 7.2 16 16 16h82.9c-1.8 5-2.9 10.4-2.9 16 0 26.5 21.5 48 48 48s48-21.5 48-48c0-5.6-1.2-11-2.9-16H451c-1.8 5-2.9 10.4-2.9 16 0 26.5 21.5 48 48 48s48-21.5 48-48c0-5.6-1.2-11-2.9-16H624c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16z"],
    "dot-circle": [512, 512, [], "f192", "M256 8C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm80 248c0 44.112-35.888 80-80 80s-80-35.888-80-80 35.888-80 80-80 80 35.888 80 80z"],
    "download": [512, 512, [], "f019", "M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z"],
    "edit": [576, 512, [], "f044", "M402.6 83.2l90.2 90.2c3.8 3.8 3.8 10 0 13.8L274.4 405.6l-92.8 10.3c-12.4 1.4-22.9-9.1-21.5-21.5l10.3-92.8L388.8 83.2c3.8-3.8 10-3.8 13.8 0zm162-22.9l-48.8-48.8c-15.2-15.2-39.9-15.2-55.2 0l-35.4 35.4c-3.8 3.8-3.8 10 0 13.8l90.2 90.2c3.8 3.8 10 3.8 13.8 0l35.4-35.4c15.2-15.3 15.2-40 0-55.2zM384 346.2V448H64V128h229.8c3.2 0 6.2-1.3 8.5-3.5l40-40c7.6-7.6 2.2-20.5-8.5-20.5H48C21.5 64 0 85.5 0 112v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V306.2c0-10.7-12.9-16-20.5-8.5l-40 40c-2.2 2.3-3.5 5.3-3.5 8.5z"],
    "eject": [448, 512, [], "f052", "M448 384v64c0 17.673-14.327 32-32 32H32c-17.673 0-32-14.327-32-32v-64c0-17.673 14.327-32 32-32h384c17.673 0 32 14.327 32 32zM48.053 320h351.886c41.651 0 63.581-49.674 35.383-80.435L259.383 47.558c-19.014-20.743-51.751-20.744-70.767 0L12.67 239.565C-15.475 270.268 6.324 320 48.053 320z"],
    "ellipsis-h": [512, 512, [], "f141", "M328 256c0 39.8-32.2 72-72 72s-72-32.2-72-72 32.2-72 72-72 72 32.2 72 72zm104-72c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72zm-352 0c-39.8 0-72 32.2-72 72s32.2 72 72 72 72-32.2 72-72-32.2-72-72-72z"],
    "ellipsis-v": [192, 512, [], "f142", "M96 184c39.8 0 72 32.2 72 72s-32.2 72-72 72-72-32.2-72-72 32.2-72 72-72zM24 80c0 39.8 32.2 72 72 72s72-32.2 72-72S135.8 8 96 8 24 40.2 24 80zm0 352c0 39.8 32.2 72 72 72s72-32.2 72-72-32.2-72-72-72-72 32.2-72 72z"],
    "envelope": [512, 512, [], "f0e0", "M502.3 190.8c3.9-3.1 9.7-.2 9.7 4.7V400c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V195.6c0-5 5.7-7.8 9.7-4.7 22.4 17.4 52.1 39.5 154.1 113.6 21.1 15.4 56.7 47.8 92.2 47.6 35.7.3 72-32.8 92.3-47.6 102-74.1 131.6-96.3 154-113.7zM256 320c23.2.4 56.6-29.2 73.4-41.4 132.7-96.3 142.8-104.7 173.4-128.7 5.8-4.5 9.2-11.5 9.2-18.9v-19c0-26.5-21.5-48-48-48H48C21.5 64 0 85.5 0 112v19c0 7.4 3.4 14.3 9.2 18.9 30.6 23.9 40.7 32.4 173.4 128.7 16.8 12.2 50.2 41.8 73.4 41.4z"],
    "envelope-open": [512, 512, [], "f2b6", "M512 464c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V200.724a48 48 0 0 1 18.387-37.776c24.913-19.529 45.501-35.365 164.2-121.511C199.412 29.17 232.797-.347 256 .003c23.198-.354 56.596 29.172 73.413 41.433 118.687 86.137 139.303 101.995 164.2 121.512A48 48 0 0 1 512 200.724V464zm-65.666-196.605c-2.563-3.728-7.7-4.595-11.339-1.907-22.845 16.873-55.462 40.705-105.582 77.079-16.825 12.266-50.21 41.781-73.413 41.43-23.211.344-56.559-29.143-73.413-41.43-50.114-36.37-82.734-60.204-105.582-77.079-3.639-2.688-8.776-1.821-11.339 1.907l-9.072 13.196a7.998 7.998 0 0 0 1.839 10.967c22.887 16.899 55.454 40.69 105.303 76.868 20.274 14.781 56.524 47.813 92.264 47.573 35.724.242 71.961-32.771 92.263-47.573 49.85-36.179 82.418-59.97 105.303-76.868a7.998 7.998 0 0 0 1.839-10.967l-9.071-13.196z"],
    "envelope-square": [448, 512, [], "f199", "M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM178.117 262.104C87.429 196.287 88.353 196.121 64 177.167V152c0-13.255 10.745-24 24-24h272c13.255 0 24 10.745 24 24v25.167c-24.371 18.969-23.434 19.124-114.117 84.938-10.5 7.655-31.392 26.12-45.883 25.894-14.503.218-35.367-18.227-45.883-25.895zM384 217.775V360c0 13.255-10.745 24-24 24H88c-13.255 0-24-10.745-24-24V217.775c13.958 10.794 33.329 25.236 95.303 70.214 14.162 10.341 37.975 32.145 64.694 32.01 26.887.134 51.037-22.041 64.72-32.025 61.958-44.965 81.325-59.406 95.283-70.199z"],
    "eraser": [512, 512, [], "f12d", "M497.941 273.941c18.745-18.745 18.745-49.137 0-67.882l-160-160c-18.745-18.745-49.136-18.746-67.883 0l-256 256c-18.745 18.745-18.745 49.137 0 67.882l96 96A48.004 48.004 0 0 0 144 480h356c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12H355.883l142.058-142.059zm-302.627-62.627l137.373 137.373L265.373 416H150.628l-80-80 124.686-124.686z"],
    "euro-sign": [320, 512, [], "f153", "M310.706 413.765c-1.314-6.63-7.835-10.872-14.424-9.369-10.692 2.439-27.422 5.413-45.426 5.413-56.763 0-101.929-34.79-121.461-85.449h113.689a12 12 0 0 0 11.708-9.369l6.373-28.36c1.686-7.502-4.019-14.631-11.708-14.631H115.22c-1.21-14.328-1.414-28.287.137-42.245H261.95a12 12 0 0 0 11.723-9.434l6.512-29.755c1.638-7.484-4.061-14.566-11.723-14.566H130.184c20.633-44.991 62.69-75.03 117.619-75.03 14.486 0 28.564 2.25 37.851 4.145 6.216 1.268 12.347-2.498 14.002-8.623l11.991-44.368c1.822-6.741-2.465-13.616-9.326-14.917C290.217 34.912 270.71 32 249.635 32 152.451 32 74.03 92.252 45.075 176H12c-6.627 0-12 5.373-12 12v29.755c0 6.627 5.373 12 12 12h21.569c-1.009 13.607-1.181 29.287-.181 42.245H12c-6.627 0-12 5.373-12 12v28.36c0 6.627 5.373 12 12 12h30.114C67.139 414.692 145.264 480 249.635 480c26.301 0 48.562-4.544 61.101-7.788 6.167-1.595 10.027-7.708 8.788-13.957l-8.818-44.49z"],
    "exchange-alt": [512, 512, [], "f362", "M0 168v-16c0-13.255 10.745-24 24-24h360V80c0-21.367 25.899-32.042 40.971-16.971l80 80c9.372 9.373 9.372 24.569 0 33.941l-80 80C409.956 271.982 384 261.456 384 240v-48H24c-13.255 0-24-10.745-24-24zm488 152H128v-48c0-21.314-25.862-32.08-40.971-16.971l-80 80c-9.372 9.373-9.372 24.569 0 33.941l80 80C102.057 463.997 128 453.437 128 432v-48h360c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24z"],
    "exclamation": [192, 512, [], "f12a", "M176 432c0 44.112-35.888 80-80 80s-80-35.888-80-80 35.888-80 80-80 80 35.888 80 80zM25.26 25.199l13.6 272C39.499 309.972 50.041 320 62.83 320h66.34c12.789 0 23.331-10.028 23.97-22.801l13.6-272C167.425 11.49 156.496 0 142.77 0H49.23C35.504 0 24.575 11.49 25.26 25.199z"],
    "exclamation-circle": [512, 512, [], "f06a", "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"],
    "exclamation-triangle": [576, 512, [], "f071", "M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"],
    "expand": [448, 512, [], "f065", "M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z"],
    "expand-arrows-alt": [448, 512, [], "f31e", "M448.1 344v112c0 13.3-10.7 24-24 24h-112c-21.4 0-32.1-25.9-17-41l36.2-36.2L224 295.6 116.8 402.9 153 439c15.1 15.1 4.4 41-17 41H24c-13.3 0-24-10.7-24-24V344c0-21.4 25.9-32.1 41-17l36.2 36.2L184.5 256 77.2 148.7 41 185c-15.1 15.1-41 4.4-41-17V56c0-13.3 10.7-24 24-24h112c21.4 0 32.1 25.9 17 41l-36.2 36.2L224 216.4l107.3-107.3L295.1 73c-15.1-15.1-4.4-41 17-41h112c13.3 0 24 10.7 24 24v112c0 21.4-25.9 32.1-41 17l-36.2-36.2L263.6 256l107.3 107.3 36.2-36.2c15.1-15.2 41-4.5 41 16.9z"],
    "external-link-alt": [576, 512, [], "f35d", "M576 24v127.984c0 21.461-25.96 31.98-40.971 16.971l-35.707-35.709-243.523 243.523c-9.373 9.373-24.568 9.373-33.941 0l-22.627-22.627c-9.373-9.373-9.373-24.569 0-33.941L442.756 76.676l-35.703-35.705C391.982 25.9 402.656 0 424.024 0H552c13.255 0 24 10.745 24 24zM407.029 270.794l-16 16A23.999 23.999 0 0 0 384 303.765V448H64V128h264a24.003 24.003 0 0 0 16.97-7.029l16-16C376.089 89.851 365.381 64 344 64H48C21.49 64 0 85.49 0 112v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V287.764c0-21.382-25.852-32.09-40.971-16.97z"],
    "external-link-square-alt": [448, 512, [], "f360", "M448 80v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48zm-88 16H248.029c-21.313 0-32.08 25.861-16.971 40.971l31.984 31.987L67.515 364.485c-4.686 4.686-4.686 12.284 0 16.971l31.029 31.029c4.687 4.686 12.285 4.686 16.971 0l195.526-195.526 31.988 31.991C358.058 263.977 384 253.425 384 231.979V120c0-13.255-10.745-24-24-24z"],
    "eye": [576, 512, [], "f06e", "M569.354 231.631C512.969 135.949 407.81 72 288 72 168.14 72 63.004 135.994 6.646 231.631a47.999 47.999 0 0 0 0 48.739C63.031 376.051 168.19 440 288 440c119.86 0 224.996-63.994 281.354-159.631a47.997 47.997 0 0 0 0-48.738zM288 392c-75.162 0-136-60.827-136-136 0-75.162 60.826-136 136-136 75.162 0 136 60.826 136 136 0 75.162-60.826 136-136 136zm104-136c0 57.438-46.562 104-104 104s-104-46.562-104-104c0-17.708 4.431-34.379 12.236-48.973l-.001.032c0 23.651 19.173 42.823 42.824 42.823s42.824-19.173 42.824-42.823c0-23.651-19.173-42.824-42.824-42.824l-.032.001C253.621 156.431 270.292 152 288 152c57.438 0 104 46.562 104 104z"],
    "eye-dropper": [512, 512, [], "f1fb", "M177.38 206.64L39.03 344.97A24.01 24.01 0 0 0 32 361.94V424L0 480l32 32 56-32h62.06c6.36 0 12.47-2.53 16.97-7.03l138.35-138.33-128-128zm225.552 30.47l16.952 16.95c9.37 9.37 9.37 24.57 0 33.94l-40.973 40.97c-9.292 9.312-24.506 9.434-33.94 0L183.028 167.03c-9.37-9.37-9.37-24.57 0-33.94L224 92.12c9.289-9.309 24.502-9.438 33.94 0l16.992 16.99 82.606-82.601c35.19-35.19 92.5-35.5 128 0 40.49 48.08 29.66 98.34 0 128l-82.606 82.601z"],
    "eye-slash": [576, 512, [], "f070", "M286.693 391.984l32.579 46.542A333.958 333.958 0 0 1 288 440C168.19 440 63.031 376.051 6.646 280.369a47.999 47.999 0 0 1 0-48.739c24.023-40.766 56.913-75.775 96.024-102.537l57.077 81.539C154.736 224.82 152 240.087 152 256c0 74.736 60.135 135.282 134.693 135.984zm282.661-111.615c-31.667 53.737-78.747 97.46-135.175 125.475l.011.015 41.47 59.2c7.6 10.86 4.96 25.82-5.9 33.42l-13.11 9.18c-10.86 7.6-25.82 4.96-33.42-5.9L100.34 46.94c-7.6-10.86-4.96-25.82 5.9-33.42l13.11-9.18c10.86-7.6 25.82-4.96 33.42 5.9l51.038 72.617C230.68 75.776 258.905 72 288 72c119.81 0 224.969 63.949 281.354 159.631a48.002 48.002 0 0 1 0 48.738zM424 256c0-75.174-60.838-136-136-136-17.939 0-35.056 3.473-50.729 9.772l19.299 27.058c25.869-8.171 55.044-6.163 80.4 7.41h-.03c-23.65 0-42.82 19.17-42.82 42.82 0 23.626 19.147 42.82 42.82 42.82 23.65 0 42.82-19.17 42.82-42.82v-.03c18.462 34.49 16.312 77.914-8.25 110.95v.01l19.314 27.061C411.496 321.2 424 290.074 424 256zM262.014 356.727l-77.53-110.757c-5.014 52.387 29.314 98.354 77.53 110.757z"],
    "fast-backward": [512, 512, [], "f049", "M0 436V76c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v151.9L235.5 71.4C256.1 54.3 288 68.6 288 96v131.9L459.5 71.4C480.1 54.3 512 68.6 512 96v320c0 27.4-31.9 41.7-52.5 24.6L288 285.3V416c0 27.4-31.9 41.7-52.5 24.6L64 285.3V436c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12z"],
    "fast-forward": [512, 512, [], "f050", "M512 76v360c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12V284.1L276.5 440.6c-20.6 17.2-52.5 2.8-52.5-24.6V284.1L52.5 440.6C31.9 457.8 0 443.4 0 416V96c0-27.4 31.9-41.7 52.5-24.6L224 226.8V96c0-27.4 31.9-41.7 52.5-24.6L448 226.8V76c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12z"],
    "fax": [512, 512, [], "f1ac", "M128 144v320c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V144c0-26.51 21.49-48 48-48h32c26.51 0 48 21.49 48 48zm384 64v256c0 26.51-21.49 48-48 48H192c-26.51 0-48-21.49-48-48V40c0-22.091 17.909-40 40-40h207.432a39.996 39.996 0 0 1 28.284 11.716l48.569 48.569A39.999 39.999 0 0 1 480 88.568v74.174c18.641 6.591 32 24.36 32 45.258zm-320-16h240V96h-24c-13.203 0-24-10.797-24-24V48H192v144zm96 204c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40zm0-128c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40zm128 128c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40zm0-128c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40z"],
    "female": [256, 512, [], "f182", "M128 0c35.346 0 64 28.654 64 64s-28.654 64-64 64c-35.346 0-64-28.654-64-64S92.654 0 128 0m119.283 354.179l-48-192A24 24 0 0 0 176 144h-11.36c-22.711 10.443-49.59 10.894-73.28 0H80a24 24 0 0 0-23.283 18.179l-48 192C4.935 369.305 16.383 384 32 384h56v104c0 13.255 10.745 24 24 24h32c13.255 0 24-10.745 24-24V384h56c15.591 0 27.071-14.671 23.283-29.821z"],
    "fighter-jet": [640, 512, [], "f0fb", "M544 224l-128-16-48-16h-24L227.158 44h39.509C278.333 44 288 41.375 288 38s-9.667-6-21.333-6H152v12h16v164h-48l-66.667-80H18.667L8 138.667V208h8v16h48v2.666l-64 8v42.667l64 8V288H16v16H8v69.333L18.667 384h34.667L120 304h48v164h-16v12h114.667c11.667 0 21.333-2.625 21.333-6s-9.667-6-21.333-6h-39.509L344 320h24l48-16 128-16c96-21.333 96-26.583 96-32 0-5.417 0-10.667-96-32z"],
    "file": [384, 512, [], "f15b", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm160-14.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"],
    "file-alt": [384, 512, [], "f15c", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm64 236c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12v8zm0-64c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12v8zm0-72v8c0 6.6-5.4 12-12 12H108c-6.6 0-12-5.4-12-12v-8c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm96-114.1v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"],
    "file-archive": [384, 512, [], "f1c6", "M224 136V0h-63.6v32h-32V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zM95.9 32h32v32h-32V32zm32.3 384c-33.2 0-58-30.4-51.4-62.9L96.4 256v-32h32v-32h-32v-32h32v-32h-32V96h32V64h32v32h-32v32h32v32h-32v32h32v32h-32v32h22.1c5.7 0 10.7 4.1 11.8 9.7l17.3 87.7c6.4 32.4-18.4 62.6-51.4 62.6zm32.7-53c0 14.9-14.5 27-32.4 27S96 378 96 363c0-14.9 14.5-27 32.4-27s32.5 12.1 32.5 27zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"],
    "file-audio": [384, 512, [], "f1c7", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm-64 268c0 10.7-12.9 16-20.5 8.5L104 376H76c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h28l35.5-36.5c7.6-7.6 20.5-2.2 20.5 8.5v136zm33.2-47.6c9.1-9.3 9.1-24.1 0-33.4-22.1-22.8 12.2-56.2 34.4-33.5 27.2 27.9 27.2 72.4 0 100.4-21.8 22.3-56.9-10.4-34.4-33.5zm86-117.1c54.4 55.9 54.4 144.8 0 200.8-21.8 22.4-57-10.3-34.4-33.5 36.2-37.2 36.3-96.5 0-133.8-22.1-22.8 12.3-56.3 34.4-33.5zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"],
    "file-code": [384, 512, [], "f1c9", "M384 121.941V128H256V0h6.059c6.365 0 12.47 2.529 16.971 7.029l97.941 97.941A24.005 24.005 0 0 1 384 121.941zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zM123.206 400.505a5.4 5.4 0 0 1-7.633.246l-64.866-60.812a5.4 5.4 0 0 1 0-7.879l64.866-60.812a5.4 5.4 0 0 1 7.633.246l19.579 20.885a5.4 5.4 0 0 1-.372 7.747L101.65 336l40.763 35.874a5.4 5.4 0 0 1 .372 7.747l-19.579 20.884zm51.295 50.479l-27.453-7.97a5.402 5.402 0 0 1-3.681-6.692l61.44-211.626a5.402 5.402 0 0 1 6.692-3.681l27.452 7.97a5.4 5.4 0 0 1 3.68 6.692l-61.44 211.626a5.397 5.397 0 0 1-6.69 3.681zm160.792-111.045l-64.866 60.812a5.4 5.4 0 0 1-7.633-.246l-19.58-20.885a5.4 5.4 0 0 1 .372-7.747L284.35 336l-40.763-35.874a5.4 5.4 0 0 1-.372-7.747l19.58-20.885a5.4 5.4 0 0 1 7.633-.246l64.866 60.812a5.4 5.4 0 0 1-.001 7.879z"],
    "file-excel": [384, 512, [], "f1c3", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm60.1 106.5L224 336l60.1 93.5c5.1 8-.6 18.5-10.1 18.5h-34.9c-4.4 0-8.5-2.4-10.6-6.3C208.9 405.5 192 373 192 373c-6.4 14.8-10 20-36.6 68.8-2.1 3.9-6.1 6.3-10.5 6.3H110c-9.5 0-15.2-10.5-10.1-18.5l60.3-93.5-60.3-93.5c-5.2-8 .6-18.5 10.1-18.5h34.8c4.4 0 8.5 2.4 10.6 6.3 26.1 48.8 20 33.6 36.6 68.5 0 0 6.1-11.7 36.6-68.5 2.1-3.9 6.2-6.3 10.6-6.3H274c9.5-.1 15.2 10.4 10.1 18.4zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"],
    "file-image": [384, 512, [], "f1c5", "M384 121.941V128H256V0h6.059a24 24 0 0 1 16.97 7.029l97.941 97.941a24.002 24.002 0 0 1 7.03 16.971zM248 160c-13.2 0-24-10.8-24-24V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248zm-135.455 16c26.51 0 48 21.49 48 48s-21.49 48-48 48-48-21.49-48-48 21.491-48 48-48zm208 240h-256l.485-48.485L104.545 328c4.686-4.686 11.799-4.201 16.485.485L160.545 368 264.06 264.485c4.686-4.686 12.284-4.686 16.971 0L320.545 304v112z"],
    "file-pdf": [384, 512, [], "f1c1", "M181.9 256.1c-5-16-4.9-46.9-2-46.9 8.4 0 7.6 36.9 2 46.9zm-1.7 47.2c-7.7 20.2-17.3 43.3-28.4 62.7 18.3-7 39-17.2 62.9-21.9-12.7-9.6-24.9-23.4-34.5-40.8zM86.1 428.1c0 .8 13.2-5.4 34.9-40.2-6.7 6.3-29.1 24.5-34.9 40.2zM248 160h136v328c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V24C0 10.7 10.7 0 24 0h200v136c0 13.2 10.8 24 24 24zm-8 171.8c-20-12.2-33.3-29-42.7-53.8 4.5-18.5 11.6-46.6 6.2-64.2-4.7-29.4-42.4-26.5-47.8-6.8-5 18.3-.4 44.1 8.1 77-11.6 27.6-28.7 64.6-40.8 85.8-.1 0-.1.1-.2.1-27.1 13.9-73.6 44.5-54.5 68 5.6 6.9 16 10 21.5 10 17.9 0 35.7-18 61.1-61.8 25.8-8.5 54.1-19.1 79-23.2 21.7 11.8 47.1 19.5 64 19.5 29.2 0 31.2-32 19.7-43.4-13.9-13.6-54.3-9.7-73.6-7.2zM377 105L279 7c-4.5-4.5-10.6-7-17-7h-6v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zm-74.1 255.3c4.1-2.7-2.5-11.9-42.8-9 37.1 15.8 42.8 9 42.8 9z"],
    "file-powerpoint": [384, 512, [], "f1c4", "M193.7 271.2c8.8 0 15.5 2.7 20.3 8.1 9.6 10.9 9.8 32.7-.2 44.1-4.9 5.6-11.9 8.5-21.1 8.5h-26.9v-60.7h27.9zM377 105L279 7c-4.5-4.5-10.6-7-17-7h-6v128h128v-6.1c0-6.3-2.5-12.4-7-16.9zm-153 31V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm53 165.2c0 90.3-88.8 77.6-111.1 77.6V436c0 6.6-5.4 12-12 12h-30.8c-6.6 0-12-5.4-12-12V236.2c0-6.6 5.4-12 12-12h81c44.5 0 72.9 32.8 72.9 77z"],
    "file-video": [384, 512, [], "f1c8", "M384 121.941V128H256V0h6.059c6.365 0 12.47 2.529 16.971 7.029l97.941 97.941A24.005 24.005 0 0 1 384 121.941zM224 136V0H24C10.745 0 0 10.745 0 24v464c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V160H248c-13.2 0-24-10.8-24-24zm96 144.016v111.963c0 21.445-25.943 31.998-40.971 16.971L224 353.941V392c0 13.255-10.745 24-24 24H88c-13.255 0-24-10.745-24-24V280c0-13.255 10.745-24 24-24h112c13.255 0 24 10.745 24 24v38.059l55.029-55.013c15.011-15.01 40.971-4.491 40.971 16.97z"],
    "file-word": [384, 512, [], "f1c2", "M224 136V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zm57.1 120H305c7.7 0 13.4 7.1 11.7 14.7l-38 168c-1.2 5.5-6.1 9.3-11.7 9.3h-38c-5.5 0-10.3-3.8-11.6-9.1-25.8-103.5-20.8-81.2-25.6-110.5h-.5c-1.1 14.3-2.4 17.4-25.6 110.5-1.3 5.3-6.1 9.1-11.6 9.1H117c-5.6 0-10.5-3.9-11.7-9.4l-37.8-168c-1.7-7.5 4-14.6 11.7-14.6h24.5c5.7 0 10.7 4 11.8 9.7 15.6 78 20.1 109.5 21 122.2 1.6-10.2 7.3-32.7 29.4-122.7 1.3-5.4 6.1-9.1 11.7-9.1h29.1c5.6 0 10.4 3.8 11.7 9.2 24 100.4 28.8 124 29.6 129.4-.2-11.2-2.6-17.8 21.6-129.2 1-5.6 5.9-9.5 11.5-9.5zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z"],
    "film": [512, 512, [], "f008", "M488 64h-8v20c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12V64H96v20c0 6.6-5.4 12-12 12H44c-6.6 0-12-5.4-12-12V64h-8C10.7 64 0 74.7 0 88v336c0 13.3 10.7 24 24 24h8v-20c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v20h320v-20c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v20h8c13.3 0 24-10.7 24-24V88c0-13.3-10.7-24-24-24zM96 372c0 6.6-5.4 12-12 12H44c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-96c0 6.6-5.4 12-12 12H44c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-96c0 6.6-5.4 12-12 12H44c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm272 208c0 6.6-5.4 12-12 12H156c-6.6 0-12-5.4-12-12v-96c0-6.6 5.4-12 12-12h200c6.6 0 12 5.4 12 12v96zm0-168c0 6.6-5.4 12-12 12H156c-6.6 0-12-5.4-12-12v-96c0-6.6 5.4-12 12-12h200c6.6 0 12 5.4 12 12v96zm112 152c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-96c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40zm0-96c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v40z"],
    "filter": [512, 512, [], "f0b0", "M487.976 0H24.028C2.71 0-8.047 25.866 7.058 40.971L192 225.941V432c0 7.831 3.821 15.17 10.237 19.662l80 55.98C298.02 518.69 320 507.493 320 487.98V225.941l184.947-184.97C520.021 25.896 509.338 0 487.976 0z"],
    "fire": [384, 512, [], "f06d", "M216 23.858c0-23.802-30.653-32.765-44.149-13.038C48 191.851 224 200 224 288c0 35.629-29.114 64.458-64.85 63.994C123.98 351.538 96 322.22 96 287.046v-85.51c0-21.703-26.471-32.225-41.432-16.504C27.801 213.158 0 261.332 0 320c0 105.869 86.131 192 192 192s192-86.131 192-192c0-170.29-168-193.003-168-296.142z"],
    "fire-extinguisher": [448, 512, [], "f134", "M434.027 26.329l-168 28C254.693 56.218 256 67.8 256 72h-58.332C208.353 36.108 181.446 0 144 0c-39.435 0-66.368 39.676-52.228 76.203-52.039 13.051-75.381 54.213-90.049 90.884-4.923 12.307 1.063 26.274 13.37 31.197 12.317 4.926 26.279-1.075 31.196-13.37C75.058 112.99 106.964 120 168 120v27.076c-41.543 10.862-72 49.235-72 94.129V488c0 13.255 10.745 24 24 24h144c13.255 0 24-10.745 24-24V240c0-44.731-30.596-82.312-72-92.97V120h40c0 2.974-1.703 15.716 10.027 17.671l168 28C441.342 166.89 448 161.25 448 153.834V38.166c0-7.416-6.658-13.056-13.973-11.837zM144 72c-8.822 0-16-7.178-16-16s7.178-16 16-16 16 7.178 16 16-7.178 16-16 16z"],
    "first-aid": [576, 512, [], "f479", "M0 80v352c0 26.5 21.5 48 48 48h48V32H48C21.5 32 0 53.5 0 80zm128 400h320V32H128v448zm64-248c0-4.4 3.6-8 8-8h56v-56c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v56h56c4.4 0 8 3.6 8 8v48c0 4.4-3.6 8-8 8h-56v56c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-56h-56c-4.4 0-8-3.6-8-8v-48zM528 32h-48v448h48c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"],
    "flag": [512, 512, [], "f024", "M349.565 98.783C295.978 98.783 251.721 64 184.348 64c-24.955 0-47.309 4.384-68.045 12.013a55.947 55.947 0 0 0 3.586-23.562C118.117 24.015 94.806 1.206 66.338.048 34.345-1.254 8 24.296 8 56c0 19.026 9.497 35.825 24 45.945V488c0 13.255 10.745 24 24 24h16c13.255 0 24-10.745 24-24v-94.4c28.311-12.064 63.582-22.122 114.435-22.122 53.588 0 97.844 34.783 165.217 34.783 48.169 0 86.667-16.294 122.505-40.858C506.84 359.452 512 349.571 512 339.045v-243.1c0-23.393-24.269-38.87-45.485-29.016-34.338 15.948-76.454 31.854-116.95 31.854z"],
    "flag-checkered": [512, 512, [], "f11e", "M466.515 66.928C487.731 57.074 512 72.551 512 95.944v243.1c0 10.526-5.161 20.407-13.843 26.358-35.837 24.564-74.335 40.858-122.505 40.858-67.373 0-111.63-34.783-165.217-34.783-50.853 0-86.124 10.058-114.435 22.122V488c0 13.255-10.745 24-24 24H56c-13.255 0-24-10.745-24-24V101.945C17.497 91.825 8 75.026 8 56 8 24.296 34.345-1.254 66.338.048c28.468 1.158 51.779 23.968 53.551 52.404.52 8.342-.81 16.31-3.586 23.562C137.039 68.384 159.393 64 184.348 64c67.373 0 111.63 34.783 165.217 34.783 40.496 0 82.612-15.906 116.95-31.855zM96 134.63v70.49c29-10.67 51.18-17.83 73.6-20.91v-71.57c-23.5 2.17-40.44 9.79-73.6 21.99zm220.8 9.19c-26.417-4.672-49.886-13.979-73.6-21.34v67.42c24.175 6.706 47.566 16.444 73.6 22.31v-68.39zm-147.2 40.39v70.04c32.796-2.978 53.91-.635 73.6 3.8V189.9c-25.247-7.035-46.581-9.423-73.6-5.69zm73.6 142.23c26.338 4.652 49.732 13.927 73.6 21.34v-67.41c-24.277-6.746-47.54-16.45-73.6-22.32v68.39zM96 342.1c23.62-8.39 47.79-13.84 73.6-16.56v-71.29c-26.11 2.35-47.36 8.04-73.6 17.36v70.49zm368-221.6c-21.3 8.85-46.59 17.64-73.6 22.47v71.91c27.31-4.36 50.03-14.1 73.6-23.89V120.5zm0 209.96v-70.49c-22.19 14.2-48.78 22.61-73.6 26.02v71.58c25.07-2.38 48.49-11.04 73.6-27.11zM316.8 212.21v68.16c25.664 7.134 46.616 9.342 73.6 5.62v-71.11c-25.999 4.187-49.943 2.676-73.6-2.67z"],
    "flask": [448, 512, [], "f0c3", "M437.2 403.5L320 215V64h8c13.3 0 24-10.7 24-24V24c0-13.3-10.7-24-24-24H120c-13.3 0-24 10.7-24 24v16c0 13.3 10.7 24 24 24h8v151L10.8 403.5C-18.5 450.6 15.3 512 70.9 512h306.2c55.7 0 89.4-61.5 60.1-108.5zM137.9 320l48.2-77.6c3.7-5.2 5.8-11.6 5.8-18.4V64h64v160c0 6.9 2.2 13.2 5.8 18.4l48.2 77.6h-172z"],
    "folder": [512, 512, [], "f07b", "M464 128H272l-64-64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V176c0-26.51-21.49-48-48-48z"],
    "folder-open": [576, 512, [], "f07c", "M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z"],
    "font": [448, 512, [], "f031", "M152 416h-24.013l26.586-80.782H292.8L319.386 416H296c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h136c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16h-26.739L275.495 42.746A16 16 0 0 0 260.382 32h-72.766a16 16 0 0 0-15.113 10.746L42.739 416H16c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h136c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16zm64.353-271.778c4.348-15.216 6.61-28.156 7.586-34.644.839 6.521 2.939 19.476 7.727 34.706l41.335 124.006h-98.619l41.971-124.068z"],
    "football-ball": [496, 512, [], "f44e", "M481.5 60.3c-4.8-18.2-19.1-32.5-37.3-37.4C420.3 16.5 383 8.9 339.4 8L496 164.8c-.8-43.5-8.2-80.6-14.5-104.5zm-467 391.4c4.8 18.2 19.1 32.5 37.3 37.4 23.9 6.4 61.2 14 104.8 14.9L0 347.2c.8 43.5 8.2 80.6 14.5 104.5zM4.2 283.4L220.4 500c132.5-19.4 248.8-118.7 271.5-271.4L275.6 12C143.1 31.4 26.8 130.7 4.2 283.4zm317.3-123.6c3.1-3.1 8.2-3.1 11.3 0l11.3 11.3c3.1 3.1 3.1 8.2 0 11.3l-28.3 28.3 28.3 28.3c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0l-28.3-28.3-22.6 22.7 28.3 28.3c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0L248 278.6l-22.6 22.6 28.3 28.3c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0l-28.3-28.3-28.3 28.3c-3.1 3.1-8.2 3.1-11.3 0l-11.3-11.3c-3.1-3.1-3.1-8.2 0-11.3l28.3-28.3-28.3-28.2c-3.1-3.1-3.1-8.2 0-11.3l11.3-11.3c3.1-3.1 8.2-3.1 11.3 0l28.3 28.3 22.6-22.6-28.3-28.3c-3.1-3.1-3.1-8.2 0-11.3l11.3-11.3c3.1-3.1 8.2-3.1 11.3 0l28.3 28.3 22.6-22.6-28.3-28.3c-3.1-3.1-3.1-8.2 0-11.3l11.3-11.3c3.1-3.1 8.2-3.1 11.3 0l28.3 28.3 28.3-28.5z"],
    "forward": [512, 512, [], "f04e", "M500.5 231.4l-192-160C287.9 54.3 256 68.6 256 96v320c0 27.4 31.9 41.8 52.5 24.6l192-160c15.3-12.8 15.3-36.4 0-49.2zm-256 0l-192-160C31.9 54.3 0 68.6 0 96v320c0 27.4 31.9 41.8 52.5 24.6l192-160c15.3-12.8 15.3-36.4 0-49.2z"],
    "frown": [512, 512, [], "f119", "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zm-396-64c0 37.497 30.503 68 68 68s68-30.503 68-68-30.503-68-68-68-68 30.503-68 68zm160.5 0c0 37.221 30.279 67.5 67.5 67.5s67.5-30.279 67.5-67.5-30.279-67.5-67.5-67.5-67.5 30.279-67.5 67.5zm67.5-48a47.789 47.789 0 0 0-22.603 5.647h.015c10.916 0 19.765 8.849 19.765 19.765s-8.849 19.765-19.765 19.765-19.765-8.849-19.765-19.765v-.015A47.789 47.789 0 0 0 288 192c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48zm-160 0a47.789 47.789 0 0 0-22.603 5.647h.015c10.916 0 19.765 8.849 19.765 19.765s-8.849 19.765-19.765 19.765-19.765-8.849-19.765-19.765v-.015A47.789 47.789 0 0 0 128 192c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48zm192.551 212.66c-59.128-91.455-165.846-91.594-225.064 0-11.502 17.79 15.383 35.148 26.873 17.374 46.626-72.118 124.862-71.855 171.318 0 11.328 17.524 38.548.684 26.873-17.374z"],
    "futbol": [512, 512, [], "f1e3", "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zm-48 0l-.003-.282-26.064 22.741-62.679-58.5 16.454-84.355 34.303 3.072c-24.889-34.216-60.004-60.089-100.709-73.141l13.651 31.939L256 139l-74.953-41.525 13.651-31.939c-40.631 13.028-75.78 38.87-100.709 73.141l34.565-3.073 16.192 84.355-62.678 58.5-26.064-22.741-.003.282c0 43.015 13.497 83.952 38.472 117.991l7.704-33.897 85.138 10.447 36.301 77.826-29.902 17.786c40.202 13.122 84.29 13.148 124.572 0l-29.902-17.786 36.301-77.826 85.138-10.447 7.704 33.897C442.503 339.952 456 299.015 456 256zm-248.102 69.571l-29.894-91.312L256 177.732l77.996 56.527-29.622 91.312h-96.476z"],
    "gamepad": [640, 512, [], "f11b", "M480 96H160C71.6 96 0 167.6 0 256s71.6 160 160 160c44.8 0 85.2-18.4 114.2-48h91.5c29 29.6 69.5 48 114.2 48 88.4 0 160-71.6 160-160S568.4 96 480 96zM256 276c0 6.6-5.4 12-12 12h-52v52c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-52H76c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h52v-52c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h52c6.6 0 12 5.4 12 12v40zm184 68c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm80-80c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z"],
    "gavel": [512, 512, [], "f0e3", "M504.971 199.362l-22.627-22.627c-9.373-9.373-24.569-9.373-33.941 0l-5.657 5.657L329.608 69.255l5.657-5.657c9.373-9.373 9.373-24.569 0-33.941L312.638 7.029c-9.373-9.373-24.569-9.373-33.941 0L154.246 131.48c-9.373 9.373-9.373 24.569 0 33.941l22.627 22.627c9.373 9.373 24.569 9.373 33.941 0l5.657-5.657 39.598 39.598-81.04 81.04-5.657-5.657c-12.497-12.497-32.758-12.497-45.255 0L9.373 412.118c-12.497 12.497-12.497 32.758 0 45.255l45.255 45.255c12.497 12.497 32.758 12.497 45.255 0l114.745-114.745c12.497-12.497 12.497-32.758 0-45.255l-5.657-5.657 81.04-81.04 39.598 39.598-5.657 5.657c-9.373 9.373-9.373 24.569 0 33.941l22.627 22.627c9.373 9.373 24.569 9.373 33.941 0l124.451-124.451c9.372-9.372 9.372-24.568 0-33.941z"],
    "gem": [576, 512, [], "f3a5", "M485.5 0L576 160H474.9L405.7 0h79.8zm-128 0l69.2 160H149.3L218.5 0h139zm-267 0h79.8l-69.2 160H0L90.5 0zM0 192h100.7l123 251.7c1.5 3.1-2.7 5.9-5 3.3L0 192zm148.2 0h279.6l-137 318.2c-1 2.4-4.5 2.4-5.5 0L148.2 192zm204.1 251.7l123-251.7H576L357.3 446.9c-2.3 2.7-6.5-.1-5-3.2z"],
    "genderless": [288, 512, [], "f22d", "M144 176c44.1 0 80 35.9 80 80s-35.9 80-80 80-80-35.9-80-80 35.9-80 80-80m0-64C64.5 112 0 176.5 0 256s64.5 144 144 144 144-64.5 144-144-64.5-144-144-144z"],
    "gift": [512, 512, [], "f06b", "M488 192h-64.512C438.72 175.003 448 152.566 448 128c0-52.935-43.065-96-96-96-41.997 0-68.742 20.693-95.992 54.15C226.671 50.192 199.613 32 160 32c-52.935 0-96 43.065-96 96 0 24.566 9.28 47.003 24.512 64H24c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h8v112c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V320h8c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24zm-208-32c24-56 55.324-64 72-64 17.645 0 32 14.355 32 32s-14.355 32-32 32h-72zM160 96c16.676 0 48 8 72 64h-72c-17.645 0-32-14.355-32-32s14.355-32 32-32zm48 128h96v184c0 13.255-10.745 24-24 24h-48c-13.255 0-24-10.745-24-24V224z"],
    "glass-martini": [512, 512, [], "f000", "M507.3 27.3c10-10 2.9-27.3-11.3-27.3H16C1.8 0-5.4 17.2 4.7 27.3L216 238.6V472h-92c-15.5 0-28 12.5-28 28 0 6.6 5.4 12 12 12h296c6.6 0 12-5.4 12-12 0-15.5-12.5-28-28-28h-92V238.6L507.3 27.3z"],
    "globe": [512, 512, [], "f0ac", "M364.215 192h131.43c5.439 20.419 8.354 41.868 8.354 64s-2.915 43.581-8.354 64h-131.43c5.154-43.049 4.939-86.746 0-128zM185.214 352c10.678 53.68 33.173 112.514 70.125 151.992.221.001.44.008.661.008s.44-.008.661-.008c37.012-39.543 59.467-98.414 70.125-151.992H185.214zm174.13-192h125.385C452.802 84.024 384.128 27.305 300.95 12.075c30.238 43.12 48.821 96.332 58.394 147.925zm-27.35 32H180.006c-5.339 41.914-5.345 86.037 0 128h151.989c5.339-41.915 5.345-86.037-.001-128zM152.656 352H27.271c31.926 75.976 100.6 132.695 183.778 147.925-30.246-43.136-48.823-96.35-58.393-147.925zm206.688 0c-9.575 51.605-28.163 104.814-58.394 147.925 83.178-15.23 151.852-71.949 183.778-147.925H359.344zm-32.558-192c-10.678-53.68-33.174-112.514-70.125-151.992-.221 0-.44-.008-.661-.008s-.44.008-.661.008C218.327 47.551 195.872 106.422 185.214 160h141.572zM16.355 192C10.915 212.419 8 233.868 8 256s2.915 43.581 8.355 64h131.43c-4.939-41.254-5.154-84.951 0-128H16.355zm136.301-32c9.575-51.602 28.161-104.81 58.394-147.925C127.872 27.305 59.198 84.024 27.271 160h125.385z"],
    "golf-ball": [416, 512, [], "f450", "M96 416h224c0 17.7-14.3 32-32 32h-16c-17.7 0-32 14.3-32 32v20c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-20c0-17.7-14.3-32-32-32h-16c-17.7 0-32-14.3-32-32zm320-208c0 74.2-39 139.2-97.5 176h-221C39 347.2 0 282.2 0 208 0 93.1 93.1 0 208 0s208 93.1 208 208zm-180.1 43.9c18.3 0 33.1-14.8 33.1-33.1 0-14.4-9.3-26.3-22.1-30.9 9.6 26.8-15.6 51.3-41.9 41.9 4.6 12.8 16.5 22.1 30.9 22.1zm49.1 46.9c0-14.4-9.3-26.3-22.1-30.9 9.6 26.8-15.6 51.3-41.9 41.9 4.6 12.8 16.5 22.1 30.9 22.1 18.3 0 33.1-14.9 33.1-33.1zm64-64c0-14.4-9.3-26.3-22.1-30.9 9.6 26.8-15.6 51.3-41.9 41.9 4.6 12.8 16.5 22.1 30.9 22.1 18.3 0 33.1-14.9 33.1-33.1z"],
    "graduation-cap": [640, 512, [], "f19d", "M622.884 199.005l-275.817 85.1a96 96 0 0 1-54.134 0L92.398 222.232c-8.564 11.438-11.018 23.05-11.918 38.335C89.778 266.165 96 276.355 96 288c0 11.952-6.557 22.366-16.265 27.861l16.197 123.096c.63 4.786-3.1 9.043-7.932 9.043H40c-4.828 0-8.562-4.253-7.932-9.044L48.265 315.86C38.557 310.366 32 299.952 32 288c0-12.034 6.646-22.511 16.465-27.976.947-17.951 3.974-33.231 12.152-47.597l-43.502-13.422c-22.876-6.801-22.766-39.241 0-46.01l275.817-85.1a96 96 0 0 1 54.134 0l275.817 85.1c22.877 6.801 22.767 39.241.001 46.01zM356.503 314.682l-.207.064-.207.061a127.998 127.998 0 0 1-72.177 0l-.207-.061-.207-.064-150.914-46.57L120 352c0 35.346 89.543 64 200 64s200-28.654 200-64l-12.583-83.888-150.914 46.57z"],
    "h-square": [448, 512, [], "f0fd", "M448 80v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48zm-112 48h-32c-8.837 0-16 7.163-16 16v80H160v-80c0-8.837-7.163-16-16-16h-32c-8.837 0-16 7.163-16 16v224c0 8.837 7.163 16 16 16h32c8.837 0 16-7.163 16-16v-80h128v80c0 8.837 7.163 16 16 16h32c8.837 0 16-7.163 16-16V144c0-8.837-7.163-16-16-16z"],
    "hand-lizard": [576, 512, [], "f258", "M384 480h192V363.778a95.998 95.998 0 0 0-14.833-51.263L398.127 54.368A48 48 0 0 0 357.544 32H24C10.745 32 0 42.745 0 56v16c0 30.928 25.072 56 56 56h229.981c12.844 0 21.556 13.067 16.615 24.923l-21.41 51.385A32 32 0 0 1 251.648 224H128c-35.346 0-64 28.654-64 64v8c0 13.255 10.745 24 24 24h147.406a47.995 47.995 0 0 1 25.692 7.455l111.748 70.811A24.001 24.001 0 0 1 384 418.539V480z"],
    "hand-paper": [448, 512, [], "f256", "M408.781 128.007C386.356 127.578 368 146.36 368 168.79V256h-8V79.79c0-22.43-18.356-41.212-40.781-40.783C297.488 39.423 280 57.169 280 79v177h-8V40.79C272 18.36 253.644-.422 231.219.007 209.488.423 192 18.169 192 40v216h-8V80.79c0-22.43-18.356-41.212-40.781-40.783C121.488 40.423 104 58.169 104 80v235.992l-31.648-43.519c-12.993-17.866-38.009-21.817-55.877-8.823-17.865 12.994-21.815 38.01-8.822 55.877l125.601 172.705A48 48 0 0 0 172.073 512h197.59c22.274 0 41.622-15.324 46.724-37.006l26.508-112.66a192.011 192.011 0 0 0 5.104-43.975V168c.001-21.831-17.487-39.577-39.218-39.993z"],
    "hand-peace": [448, 512, [], "f25b", "M408 216c-22.092 0-40 17.909-40 40h-8v-32c0-22.091-17.908-40-40-40s-40 17.909-40 40v32h-8V48c0-26.51-21.49-48-48-48s-48 21.49-48 48v208h-13.572L92.688 78.449C82.994 53.774 55.134 41.63 30.461 51.324 5.787 61.017-6.356 88.877 3.337 113.551l74.765 190.342-31.09 24.872c-15.381 12.306-19.515 33.978-9.741 51.081l64 112A39.998 39.998 0 0 0 136 512h240c18.562 0 34.686-12.77 38.937-30.838l32-136A39.97 39.97 0 0 0 448 336v-80c0-22.091-17.908-40-40-40z"],
    "hand-point-down": [384, 512, [], "f0a7", "M91.826 467.2V317.966c-8.248 5.841-16.558 10.57-24.918 14.153C35.098 345.752-.014 322.222 0 288c.008-18.616 10.897-32.203 29.092-40 28.286-12.122 64.329-78.648 77.323-107.534 7.956-17.857 25.479-28.453 43.845-28.464l.001-.002h171.526c11.812 0 21.897 8.596 23.703 20.269 7.25 46.837 38.483 61.76 38.315 123.731-.007 2.724.195 13.254.195 16 0 50.654-22.122 81.574-71.263 72.6-9.297 18.597-39.486 30.738-62.315 16.45-21.177 24.645-53.896 22.639-70.944 6.299V467.2c0 24.15-20.201 44.8-43.826 44.8-23.283 0-43.826-21.35-43.826-44.8zM112 72V24c0-13.255 10.745-24 24-24h192c13.255 0 24 10.745 24 24v48c0 13.255-10.745 24-24 24H136c-13.255 0-24-10.745-24-24zm212-24c0-11.046-8.954-20-20-20s-20 8.954-20 20 8.954 20 20 20 20-8.954 20-20z"],
    "hand-point-left": [512, 512, [], "f0a5", "M44.8 155.826h149.234c-5.841-8.248-10.57-16.558-14.153-24.918C166.248 99.098 189.778 63.986 224 64c18.616.008 32.203 10.897 40 29.092 12.122 28.286 78.648 64.329 107.534 77.323 17.857 7.956 28.453 25.479 28.464 43.845l.002.001v171.526c0 11.812-8.596 21.897-20.269 23.703-46.837 7.25-61.76 38.483-123.731 38.315-2.724-.007-13.254.195-16 .195-50.654 0-81.574-22.122-72.6-71.263-18.597-9.297-30.738-39.486-16.45-62.315-24.645-21.177-22.639-53.896-6.299-70.944H44.8c-24.15 0-44.8-20.201-44.8-43.826 0-23.283 21.35-43.826 44.8-43.826zM440 176h48c13.255 0 24 10.745 24 24v192c0 13.255-10.745 24-24 24h-48c-13.255 0-24-10.745-24-24V200c0-13.255 10.745-24 24-24zm24 212c11.046 0 20-8.954 20-20s-8.954-20-20-20-20 8.954-20 20 8.954 20 20 20z"],
    "hand-point-right": [512, 512, [], "f0a4", "M512 199.652c0 23.625-20.65 43.826-44.8 43.826h-99.851c16.34 17.048 18.346 49.766-6.299 70.944 14.288 22.829 2.147 53.017-16.45 62.315C353.574 425.878 322.654 448 272 448c-2.746 0-13.276-.203-16-.195-61.971.168-76.894-31.065-123.731-38.315C120.596 407.683 112 397.599 112 385.786V214.261l.002-.001c.011-18.366 10.607-35.889 28.464-43.845 28.886-12.994 95.413-49.038 107.534-77.323 7.797-18.194 21.384-29.084 40-29.092 34.222-.014 57.752 35.098 44.119 66.908-3.583 8.359-8.312 16.67-14.153 24.918H467.2c23.45 0 44.8 20.543 44.8 43.826zM96 200v192c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V200c0-13.255 10.745-24 24-24h48c13.255 0 24 10.745 24 24zM68 368c0-11.046-8.954-20-20-20s-20 8.954-20 20 8.954 20 20 20 20-8.954 20-20z"],
    "hand-point-up": [384, 512, [], "f0a6", "M135.652 0c23.625 0 43.826 20.65 43.826 44.8v99.851c17.048-16.34 49.766-18.346 70.944 6.299 22.829-14.288 53.017-2.147 62.315 16.45C361.878 158.426 384 189.346 384 240c0 2.746-.203 13.276-.195 16 .168 61.971-31.065 76.894-38.315 123.731C343.683 391.404 333.599 400 321.786 400H150.261l-.001-.002c-18.366-.011-35.889-10.607-43.845-28.464C93.421 342.648 57.377 276.122 29.092 264 10.897 256.203.008 242.616 0 224c-.014-34.222 35.098-57.752 66.908-44.119 8.359 3.583 16.67 8.312 24.918 14.153V44.8c0-23.45 20.543-44.8 43.826-44.8zM136 416h192c13.255 0 24 10.745 24 24v48c0 13.255-10.745 24-24 24H136c-13.255 0-24-10.745-24-24v-48c0-13.255 10.745-24 24-24zm168 28c-11.046 0-20 8.954-20 20s8.954 20 20 20 20-8.954 20-20-8.954-20-20-20z"],
    "hand-pointer": [448, 512, [], "f25a", "M448 240v96c0 3.084-.356 6.159-1.063 9.162l-32 136C410.686 499.23 394.562 512 376 512H168a40.004 40.004 0 0 1-32.35-16.473l-127.997-176c-12.993-17.866-9.043-42.883 8.822-55.876 17.867-12.994 42.884-9.043 55.877 8.823L104 315.992V40c0-22.091 17.908-40 40-40s40 17.909 40 40v200h8v-40c0-22.091 17.908-40 40-40s40 17.909 40 40v40h8v-24c0-22.091 17.908-40 40-40s40 17.909 40 40v24h8c0-22.091 17.908-40 40-40s40 17.909 40 40zm-256 80h-8v96h8v-96zm88 0h-8v96h8v-96zm88 0h-8v96h8v-96z"],
    "hand-rock": [512, 512, [], "f255", "M512 128.79c0-26.322-20.861-48.344-47.18-48.783C437.935 79.558 416 101.217 416 128h-8V96.79c0-26.322-20.861-48.344-47.18-48.783C333.935 47.558 312 69.217 312 96v32h-8V80.79c0-26.322-20.861-48.344-47.18-48.783C229.935 31.558 208 53.217 208 80v48h-8V96.79c0-26.322-20.861-48.344-47.18-48.783C125.935 47.558 104 69.217 104 96v136l-8-7.111V176.79c0-26.322-20.861-48.344-47.18-48.783C21.935 127.558 0 149.217 0 176v66.445a95.998 95.998 0 0 0 32.221 71.751l111.668 99.261A47.999 47.999 0 0 1 160 449.333V456c0 13.255 10.745 24 24 24h240c13.255 0 24-10.745 24-24v-2.921a96.01 96.01 0 0 1 7.523-37.254l48.954-116.265A96.002 96.002 0 0 0 512 262.306V128.79z"],
    "hand-scissors": [512, 512, [], "f257", "M216 440c0-22.092 17.909-40 40-40v-8h-32c-22.091 0-40-17.908-40-40s17.909-40 40-40h32v-8H48c-26.51 0-48-21.49-48-48s21.49-48 48-48h208v-13.572l-177.551-69.74c-24.674-9.694-36.818-37.555-27.125-62.228 9.693-24.674 37.554-36.817 62.228-27.124l190.342 74.765 24.872-31.09c12.306-15.381 33.978-19.515 51.081-9.741l112 64A40.002 40.002 0 0 1 512 168v240c0 18.562-12.77 34.686-30.838 38.937l-136 32A39.982 39.982 0 0 1 336 480h-80c-22.091 0-40-17.908-40-40z"],
    "hand-spock": [512, 512, [], "f259", "M10.872 316.585c15.139-16.086 40.454-16.854 56.543-1.713L128 371.893v-79.405L88.995 120.865c-4.896-21.542 8.598-42.974 30.14-47.87 21.549-4.894 42.975 8.599 47.87 30.141L201.747 256h9.833L164.016 48.966c-4.946-21.531 8.498-42.994 30.028-47.94 21.532-4.95 42.994 8.498 47.94 30.028L293.664 256h15.105l48.425-193.702c5.357-21.432 27.075-34.462 48.507-29.104 21.432 5.358 34.463 27.075 29.104 48.507L391.231 256h11.08l30.768-129.265c5.117-21.491 26.685-34.768 48.177-29.647 21.491 5.117 34.765 26.686 29.647 48.177l-36.292 152.467A96.024 96.024 0 0 0 472 319.967v42.102a96.002 96.002 0 0 1-3.96 27.287l-26.174 88.287C435.825 498.022 417.101 512 395.846 512H179.172a48.002 48.002 0 0 1-32.898-13.046L12.585 373.128c-16.087-15.141-16.853-40.456-1.713-56.543z"],
    "handshake": [640, 512, [], "f2b5", "M72 112H24c-13.255 0-24 10.745-24 24v208c0 13.255 10.745 24 24 24h48c13.255 0 24-10.745 24-24V136c0-13.255-10.745-24-24-24zM48 340c-11.046 0-20-8.954-20-20s8.954-20 20-20 20 8.954 20 20-8.954 20-20 20zm568-228h-48c-13.255 0-24 10.745-24 24v208c0 13.255 10.745 24 24 24h48c13.255 0 24-10.745 24-24V136c0-13.255-10.745-24-24-24zm-24 228c-11.046 0-20-8.954-20-20s8.954-20 20-20 20 8.954 20 20-8.954 20-20 20zM485.94 92.67L528 140.74V320h-19.17c.56-14.96-4.38-28.98-14-39.71l-80.92-98.91c2.93-3.2 2.76-8.16-.38-11.16-2.82-2.7-7.08-2.92-10.14-.76-.42.3-60.35 62.93-60.35 62.93l-.2.21c-23.904 26.905-66.127 26.204-89.15-1.42-15.48-18.58-15.29-45.39.45-63.76l66.57-77.67C334.304 73.88 354.534 64 376.7 64h46.05a83.98 83.98 0 0 1 63.19 28.67zm-3.37 197.92c15.46 16.78 12.59 43.83-2.37 57.75-17.711 16.462-42.433 13.004-45.93 9.2 1.653 15.658-21.389 47.249-56.42 44.68-6.325 21.185-32.298 38.909-59.18 29.61-10.22 10.21-25.82 14.97-39.81 14.97-28.69 0-54.92-11.99-72.58-30.8L112 320V135.52l61.36-50.57A71.52 71.52 0 0 1 223.93 64h37.42c16.73 0 32.68 6.84 44.21 18.85l-63.57 74.16c-20.84 24.31-21.09 59.81-.59 84.42 29.375 35.247 83.007 35.853 113.31 1.92L402.82 193l79.75 97.59z"],
    "hashtag": [448, 512, [], "f292", "M440.667 182.109l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l14.623-81.891C377.123 38.754 371.468 32 363.997 32h-40.632a12 12 0 0 0-11.813 9.891L296.175 128H197.54l14.623-81.891C213.477 38.754 207.822 32 200.35 32h-40.632a12 12 0 0 0-11.813 9.891L132.528 128H53.432a12 12 0 0 0-11.813 9.891l-7.143 40C33.163 185.246 38.818 192 46.289 192h74.81L98.242 320H19.146a12 12 0 0 0-11.813 9.891l-7.143 40C-1.123 377.246 4.532 384 12.003 384h74.81L72.19 465.891C70.877 473.246 76.532 480 84.003 480h40.632a12 12 0 0 0 11.813-9.891L151.826 384h98.634l-14.623 81.891C234.523 473.246 240.178 480 247.65 480h40.632a12 12 0 0 0 11.813-9.891L315.472 384h79.096a12 12 0 0 0 11.813-9.891l7.143-40c1.313-7.355-4.342-14.109-11.813-14.109h-74.81l22.857-128h79.096a12 12 0 0 0 11.813-9.891zM261.889 320h-98.634l22.857-128h98.634l-22.857 128z"],
    "hdd": [576, 512, [], "f0a0", "M576 304v96c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48v-96c0-26.51 21.49-48 48-48h480c26.51 0 48 21.49 48 48zm-48-80a79.557 79.557 0 0 1 30.777 6.165L462.25 85.374A48.003 48.003 0 0 0 422.311 64H153.689a48 48 0 0 0-39.938 21.374L17.223 230.165A79.557 79.557 0 0 1 48 224h480zm-48 96c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32zm-96 0c-17.673 0-32 14.327-32 32s14.327 32 32 32 32-14.327 32-32-14.327-32-32-32z"],
    "heading": [512, 512, [], "f1dc", "M496 80V48c0-8.837-7.163-16-16-16H320c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h37.621v128H154.379V96H192c8.837 0 16-7.163 16-16V48c0-8.837-7.163-16-16-16H32c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h37.275v320H32c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h160c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16h-37.621V288H357.62v128H320c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h160c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16h-37.275V96H480c8.837 0 16-7.163 16-16z"],
    "headphones": [512, 512, [], "f025", "M256 32C114.52 32 0 146.496 0 288v48a32 32 0 0 0 17.689 28.622l14.383 7.191C34.083 431.903 83.421 480 144 480h24c13.255 0 24-10.745 24-24V280c0-13.255-10.745-24-24-24h-24c-31.342 0-59.671 12.879-80 33.627V288c0-105.869 86.131-192 192-192s192 86.131 192 192v1.627C427.671 268.879 399.342 256 368 256h-24c-13.255 0-24 10.745-24 24v176c0 13.255 10.745 24 24 24h24c60.579 0 109.917-48.098 111.928-108.187l14.382-7.191A32 32 0 0 0 512 336v-48c0-141.479-114.496-256-256-256z"],
    "heart": [576, 512, [], "f004", "M414.9 24C361.8 24 312 65.7 288 89.3 264 65.7 214.2 24 161.1 24 70.3 24 16 76.9 16 165.5c0 72.6 66.8 133.3 69.2 135.4l187 180.8c8.8 8.5 22.8 8.5 31.6 0l186.7-180.2c2.7-2.7 69.5-63.5 69.5-136C560 76.9 505.7 24 414.9 24z"],
    "heartbeat": [512, 512, [], "f21e", "M320.2 243.8l-49.7 99.4c-6 12.1-23.4 11.7-28.9-.6l-56.9-126.3-30 71.7H60.6l182.5 186.5c7.1 7.3 18.6 7.3 25.7 0L451.4 288H342.3l-22.1-44.2zM473.7 73.9l-2.4-2.5c-51.5-52.6-135.8-52.6-187.4 0L256 100l-27.9-28.5c-51.5-52.7-135.9-52.7-187.4 0l-2.4 2.4C-10.4 123.7-12.5 203 31 256h102.4l35.9-86.2c5.4-12.9 23.6-13.2 29.4-.4l58.2 129.3 49-97.9c5.9-11.8 22.7-11.8 28.6 0l27.6 55.2H481c43.5-53 41.4-132.3-7.3-182.1z"],
    "history": [512, 512, [], "f1da", "M504 255.531c.253 136.64-111.18 248.372-247.82 248.468-59.015.042-113.223-20.53-155.822-54.911-11.077-8.94-11.905-25.541-1.839-35.607l11.267-11.267c8.609-8.609 22.353-9.551 31.891-1.984C173.062 425.135 212.781 440 256 440c101.705 0 184-82.311 184-184 0-101.705-82.311-184-184-184-48.814 0-93.149 18.969-126.068 49.932l50.754 50.754c10.08 10.08 2.941 27.314-11.313 27.314H24c-8.837 0-16-7.163-16-16V38.627c0-14.254 17.234-21.393 27.314-11.314l49.372 49.372C129.209 34.136 189.552 8 256 8c136.81 0 247.747 110.78 248 247.531zm-180.912 78.784l9.823-12.63c8.138-10.463 6.253-25.542-4.21-33.679L288 256.349V152c0-13.255-10.745-24-24-24h-16c-13.255 0-24 10.745-24 24v135.651l65.409 50.874c10.463 8.137 25.541 6.253 33.679-4.21z"],
    "hockey-puck": [512, 512, [], "f453", "M0 160c0-53 114.6-96 256-96s256 43 256 96-114.6 96-256 96S0 213 0 160zm0 82.2V352c0 53 114.6 96 256 96s256-43 256-96V242.2c-113.4 82.3-398.5 82.4-512 0z"],
    "home": [576, 512, [], "f015", "M488 312.7V456c0 13.3-10.7 24-24 24H348c-6.6 0-12-5.4-12-12V356c0-6.6-5.4-12-12-12h-72c-6.6 0-12 5.4-12 12v112c0 6.6-5.4 12-12 12H112c-13.3 0-24-10.7-24-24V312.7c0-3.6 1.6-7 4.4-9.3l188-154.8c4.4-3.6 10.8-3.6 15.3 0l188 154.8c2.7 2.3 4.3 5.7 4.3 9.3zm83.6-60.9L488 182.9V44.4c0-6.6-5.4-12-12-12h-56c-6.6 0-12 5.4-12 12V117l-89.5-73.7c-17.7-14.6-43.3-14.6-61 0L4.4 251.8c-5.1 4.2-5.8 11.8-1.6 16.9l25.5 31c4.2 5.1 11.8 5.8 16.9 1.6l235.2-193.7c4.4-3.6 10.8-3.6 15.3 0l235.2 193.7c5.1 4.2 12.7 3.5 16.9-1.6l25.5-31c4.2-5.2 3.4-12.7-1.7-16.9z"],
    "hospital": [448, 512, [], "f0f8", "M448 492v20H0v-20c0-6.627 5.373-12 12-12h20V120c0-13.255 10.745-24 24-24h88V24c0-13.255 10.745-24 24-24h112c13.255 0 24 10.745 24 24v72h88c13.255 0 24 10.745 24 24v360h20c6.627 0 12 5.373 12 12zM308 192h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12zm-168 64h40c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12zm104 128h-40c-6.627 0-12 5.373-12 12v84h64v-84c0-6.627-5.373-12-12-12zm64-96h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12zm-116 12c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40zM182 96h26v26a6 6 0 0 0 6 6h20a6 6 0 0 0 6-6V96h26a6 6 0 0 0 6-6V70a6 6 0 0 0-6-6h-26V38a6 6 0 0 0-6-6h-20a6 6 0 0 0-6 6v26h-26a6 6 0 0 0-6 6v20a6 6 0 0 0 6 6z"],
    "hospital-symbol": [512, 512, [], "f47e", "M256 0C114.6 0 0 114.6 0 256s114.6 256 256 256 256-114.6 256-256S397.4 0 256 0zm112 376c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8v-88h-96v88c0 4.4-3.6 8-8 8h-48c-4.4 0-8-3.6-8-8V136c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v88h96v-88c0-4.4 3.6-8 8-8h48c4.4 0 8 3.6 8 8v240z"],
    "hourglass": [384, 512, [], "f254", "M360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64z"],
    "hourglass-end": [384, 512, [], "f253", "M360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64zM192 208c-57.787 0-104-66.518-104-144h208c0 77.945-46.51 144-104 144z"],
    "hourglass-half": [384, 512, [], "f252", "M360 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24zm-75.078 384H99.08c17.059-46.797 52.096-80 92.92-80 40.821 0 75.862 33.196 92.922 80zm.019-256H99.078C91.988 108.548 88 86.748 88 64h208c0 22.805-3.987 44.587-11.059 64z"],
    "hourglass-start": [384, 512, [], "f251", "M360 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24 0 90.965 51.016 167.734 120.842 192C75.016 280.266 24 357.035 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24 0-90.965-51.016-167.734-120.842-192C308.984 231.734 360 154.965 360 64c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24zm-64 448H88c0-77.458 46.204-144 104-144 57.786 0 104 66.517 104 144z"],
    "i-cursor": [256, 512, [], "f246", "M256 52.048V12.065C256 5.496 250.726.148 244.158.066 211.621-.344 166.469.011 128 37.959 90.266.736 46.979-.114 11.913.114 5.318.157 0 5.519 0 12.114v39.645c0 6.687 5.458 12.078 12.145 11.998C38.111 63.447 96 67.243 96 112.182V224H60c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h36v112c0 44.932-56.075 48.031-83.95 47.959C5.404 447.942 0 453.306 0 459.952v39.983c0 6.569 5.274 11.917 11.842 11.999 32.537.409 77.689.054 116.158-37.894 37.734 37.223 81.021 38.073 116.087 37.845 6.595-.043 11.913-5.405 11.913-12V460.24c0-6.687-5.458-12.078-12.145-11.998C217.889 448.553 160 444.939 160 400V288h36c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-36V112.182c0-44.932 56.075-48.213 83.95-48.142 6.646.018 12.05-5.346 12.05-11.992z"],
    "id-badge": [384, 512, [], "f2c1", "M336 0H48C21.49 0 0 21.49 0 48v416c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48V48c0-26.51-21.49-48-48-48zM128 44c0-6.627 5.373-12 12-12h104c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12H140c-6.627 0-12-5.373-12-12v-8zm64 116c44.183 0 80 35.817 80 80s-35.817 80-80 80-80-35.817-80-80 35.817-80 80-80zm128 232c0 13.255-10.745 24-24 24H88c-13.255 0-24-10.745-24-24v-18.523c0-22.026 14.99-41.225 36.358-46.567l35.656-8.914c29.101 20.932 74.509 26.945 111.97 0l35.656 8.914c21.37 5.342 36.36 24.542 36.36 46.567V392z"],
    "id-card": [512, 512, [], "f2c2", "M464 64H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48zM256 350c0 9.941-8.059 18-18 18H82c-9.941 0-18-8.059-18-18v-13.892c0-16.519 11.243-30.919 27.269-34.925l26.742-6.686c21.826 15.699 55.882 20.209 83.978 0l26.743 6.686C244.757 305.189 256 319.589 256 336.108V350zM100 236c0-33.137 26.863-60 60-60s60 26.863 60 60-26.863 60-60 60-60-26.863-60-60zm348 104c0 6.627-5.373 12-12 12H300c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h136c6.627 0 12 5.373 12 12v8zm0-64c0 6.627-5.373 12-12 12H300c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h136c6.627 0 12 5.373 12 12v8zm0-64c0 6.627-5.373 12-12 12H300c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h136c6.627 0 12 5.373 12 12v8zm32-96c0 6.627-5.373 12-12 12H44c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h424c6.627 0 12 5.373 12 12v8z"],
    "image": [512, 512, [], "f03e", "M464 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM112 120c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56zM64 384h384V272l-87.515-87.515c-4.686-4.686-12.284-4.686-16.971 0L208 320l-55.515-55.515c-4.686-4.686-12.284-4.686-16.971 0L64 336v48z"],
    "images": [576, 512, [], "f302", "M480 416v16c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V176c0-26.51 21.49-48 48-48h16v208c0 44.112 35.888 80 80 80h336zm96-80V80c0-26.51-21.49-48-48-48H144c-26.51 0-48 21.49-48 48v256c0 26.51 21.49 48 48 48h384c26.51 0 48-21.49 48-48zM256 128c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-96 144l55.515-55.515c4.686-4.686 12.284-4.686 16.971 0L272 256l135.515-135.515c4.686-4.686 12.284-4.686 16.971 0L512 208v112H160v-48z"],
    "inbox": [576, 512, [], "f01c", "M567.938 243.908L462.25 85.374A48.003 48.003 0 0 0 422.311 64H153.689a48 48 0 0 0-39.938 21.374L8.062 243.908A47.994 47.994 0 0 0 0 270.533V400c0 26.51 21.49 48 48 48h480c26.51 0 48-21.49 48-48V270.533a47.994 47.994 0 0 0-8.062-26.625zM162.252 128h251.497l85.333 128H376l-32 64H232l-32-64H76.918l85.334-128z"],
    "indent": [448, 512, [], "f03c", "M0 84V44c0-8.837 7.163-16 16-16h416c8.837 0 16 7.163 16 16v40c0 8.837-7.163 16-16 16H16c-8.837 0-16-7.163-16-16zm176 144h256c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H176c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zM16 484h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm160-128h256c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H176c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm-52.687-111.313l-96-95.984C17.266 138.652 0 145.776 0 160.016v191.975c0 14.329 17.325 21.304 27.313 11.313l96-95.992c6.249-6.247 6.249-16.377 0-22.625z"],
    "industry": [512, 512, [], "f275", "M475.115 163.781L336 252.309v-68.28c0-18.916-20.931-30.399-36.885-20.248L160 252.309V56c0-13.255-10.745-24-24-24H24C10.745 32 0 42.745 0 56v400c0 13.255 10.745 24 24 24h464c13.255 0 24-10.745 24-24V184.029c0-18.917-20.931-30.399-36.885-20.248z"],
    "info": [192, 512, [], "f129", "M20 424.229h20V279.771H20c-11.046 0-20-8.954-20-20V212c0-11.046 8.954-20 20-20h112c11.046 0 20 8.954 20 20v212.229h20c11.046 0 20 8.954 20 20V492c0 11.046-8.954 20-20 20H20c-11.046 0-20-8.954-20-20v-47.771c0-11.046 8.954-20 20-20zM96 0C56.235 0 24 32.235 24 72s32.235 72 72 72 72-32.235 72-72S135.764 0 96 0z"],
    "info-circle": [512, 512, [], "f05a", "M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z"],
    "italic": [320, 512, [], "f033", "M204.758 416h-33.849l62.092-320h40.725a16 16 0 0 0 15.704-12.937l6.242-32C297.599 41.184 290.034 32 279.968 32H120.235a16 16 0 0 0-15.704 12.937l-6.242 32C96.362 86.816 103.927 96 113.993 96h33.846l-62.09 320H46.278a16 16 0 0 0-15.704 12.935l-6.245 32C22.402 470.815 29.967 480 40.034 480h158.479a16 16 0 0 0 15.704-12.935l6.245-32c1.927-9.88-5.638-19.065-15.704-19.065z"],
    "key": [512, 512, [], "f084", "M512 176.001C512 273.203 433.202 352 336 352c-11.22 0-22.19-1.062-32.827-3.069l-24.012 27.014A23.999 23.999 0 0 1 261.223 384H224v40c0 13.255-10.745 24-24 24h-40v40c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24v-78.059c0-6.365 2.529-12.47 7.029-16.971l161.802-161.802C163.108 213.814 160 195.271 160 176 160 78.798 238.797.001 335.999 0 433.488-.001 512 78.511 512 176.001zM336 128c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48-48 21.49-48 48z"],
    "keyboard": [576, 512, [], "f11c", "M528 448H48c-26.51 0-48-21.49-48-48V112c0-26.51 21.49-48 48-48h480c26.51 0 48 21.49 48 48v288c0 26.51-21.49 48-48 48zM128 180v-40c0-6.627-5.373-12-12-12H76c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm-336 96v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm-336 96v-40c0-6.627-5.373-12-12-12H76c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm288 0v-40c0-6.627-5.373-12-12-12H172c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h232c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12z"],
    "language": [640, 512, [], "f1ab", "M304 416H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h280v320zm-120.676-72.622A12 12 0 0 0 194.839 352h22.863c8.22 0 14.007-8.078 11.362-15.861L171.61 167.085a12 12 0 0 0-11.362-8.139h-32.489a12.001 12.001 0 0 0-11.362 8.139L58.942 336.139C56.297 343.922 62.084 352 70.304 352h22.805a12 12 0 0 0 11.535-8.693l9.118-31.807h60.211l9.351 31.878zm-39.051-140.42s4.32 21.061 7.83 33.21l10.8 37.531h-38.07l11.07-37.531c3.51-12.15 7.83-33.21 7.83-33.21h.54zM616 416H336V96h280c13.255 0 24 10.745 24 24v272c0 13.255-10.745 24-24 24zm-36-228h-64v-16c0-6.627-5.373-12-12-12h-16c-6.627 0-12 5.373-12 12v16h-64c-6.627 0-12 5.373-12 12v16c0 6.627 5.373 12 12 12h114.106c-6.263 14.299-16.518 28.972-30.023 43.206-6.56-6.898-12.397-13.91-17.365-20.933-3.639-5.144-10.585-6.675-15.995-3.446l-7.28 4.346-6.498 3.879c-5.956 3.556-7.693 11.421-3.735 17.117 6.065 8.729 13.098 17.336 20.984 25.726-8.122 6.226-16.841 12.244-26.103 17.964-5.521 3.41-7.381 10.556-4.162 16.19l7.941 13.896c3.362 5.883 10.935 7.826 16.706 4.276 12.732-7.831 24.571-16.175 35.443-24.891 10.917 8.761 22.766 17.102 35.396 24.881 5.774 3.556 13.353 1.618 16.717-4.27l7.944-13.903c3.213-5.623 1.37-12.76-4.135-16.171a312.737 312.737 0 0 1-26.06-18.019c21.024-22.425 35.768-46.289 42.713-69.85H580c6.627 0 12-5.373 12-12v-16c0-6.625-5.373-11.998-12-11.998z"],
    "laptop": [640, 512, [], "f109", "M512 64v256H128V64h384m16-64H112C85.5 0 64 21.5 64 48v288c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zm100 416H389.5c-3 0-5.5 2.1-5.9 5.1C381.2 436.3 368 448 352 448h-64c-16 0-29.2-11.7-31.6-26.9-.5-2.9-3-5.1-5.9-5.1H12c-6.6 0-12 5.4-12 12v36c0 26.5 21.5 48 48 48h544c26.5 0 48-21.5 48-48v-36c0-6.6-5.4-12-12-12z"],
    "leaf": [576, 512, [], "f06c", "M395.4 420.8c-43.4 21.6-91.9 34.4-140.8 34.4-82.2 0-151.1-40.1-151.1-40.1-16.1 0-35.4 64.9-63.3 64.9-27 0-40.2-24-40.2-38.5 0-33.1 63.6-58.9 63.6-77.3 0 0-12.5-21.2-12.5-59.2 0-101.2 81.3-173.4 172.6-203.3 65.9-21.6 206 3.5 250.7-38.5C492.1 47 500.8 32 527.8 32c36.3 0 48.2 93.2 48.2 120.3 0 110.9-54.5 206.5-180.6 268.5zm-254.3-75.6c63.5-89.9 144.5-128.8 257.7-120 8.8.7 16.5-5.9 17.2-14.7.7-8.8-5.9-16.5-14.7-17.2-124-9.6-215.9 33.9-286.3 133.5-5.1 7.2-3.4 17.2 3.8 22.3 7.2 5.1 17.2 3.4 22.3-3.9z"],
    "lemon": [512, 512, [], "f094", "M489.038 22.963C465.944-.13 434.648-5.93 413.947 6.129c-58.906 34.312-181.25-53.077-321.073 86.746S40.441 355.041 6.129 413.945c-12.059 20.702-6.26 51.999 16.833 75.093 23.095 23.095 54.392 28.891 75.095 16.832 58.901-34.31 181.246 53.079 321.068-86.743S471.56 156.96 505.871 98.056c12.059-20.702 6.261-51.999-16.833-75.093zM243.881 95.522c-58.189 14.547-133.808 90.155-148.358 148.358-1.817 7.27-8.342 12.124-15.511 12.124-1.284 0-2.59-.156-3.893-.481-8.572-2.144-13.784-10.83-11.642-19.403C81.901 166.427 166.316 81.93 236.119 64.478c8.575-2.143 17.261 3.069 19.403 11.642s-3.069 17.259-11.641 19.402z"],
    "level-down-alt": [320, 512, [], "f3be", "M313.553 392.331L209.587 504.334c-9.485 10.214-25.676 10.229-35.174 0L70.438 392.331C56.232 377.031 67.062 352 88.025 352H152V80H68.024a11.996 11.996 0 0 1-8.485-3.515l-56-56C-4.021 12.926 1.333 0 12.024 0H208c13.255 0 24 10.745 24 24v328h63.966c20.878 0 31.851 24.969 17.587 40.331z"],
    "level-up-alt": [320, 512, [], "f3bf", "M313.553 119.669L209.587 7.666c-9.485-10.214-25.676-10.229-35.174 0L70.438 119.669C56.232 134.969 67.062 160 88.025 160H152v272H68.024a11.996 11.996 0 0 0-8.485 3.515l-56 56C-4.021 499.074 1.333 512 12.024 512H208c13.255 0 24-10.745 24-24V160h63.966c20.878 0 31.851-24.969 17.587-40.331z"],
    "life-ring": [512, 512, [], "f1cd", "M256 8C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm173.696 119.559l-63.399 63.399c-10.987-18.559-26.67-34.252-45.255-45.255l63.399-63.399a218.396 218.396 0 0 1 45.255 45.255zM256 352c-53.019 0-96-42.981-96-96s42.981-96 96-96 96 42.981 96 96-42.981 96-96 96zM127.559 82.304l63.399 63.399c-18.559 10.987-34.252 26.67-45.255 45.255l-63.399-63.399a218.372 218.372 0 0 1 45.255-45.255zM82.304 384.441l63.399-63.399c10.987 18.559 26.67 34.252 45.255 45.255l-63.399 63.399a218.396 218.396 0 0 1-45.255-45.255zm302.137 45.255l-63.399-63.399c18.559-10.987 34.252-26.67 45.255-45.255l63.399 63.399a218.403 218.403 0 0 1-45.255 45.255z"],
    "lightbulb": [384, 512, [], "f0eb", "M272 428v28c0 10.449-6.68 19.334-16 22.629V488c0 13.255-10.745 24-24 24h-80c-13.255 0-24-10.745-24-24v-9.371c-9.32-3.295-16-12.18-16-22.629v-28c0-6.627 5.373-12 12-12h136c6.627 0 12 5.373 12 12zm-143.107-44c-9.907 0-18.826-6.078-22.376-15.327C67.697 267.541 16 277.731 16 176 16 78.803 94.805 0 192 0s176 78.803 176 176c0 101.731-51.697 91.541-90.516 192.673-3.55 9.249-12.47 15.327-22.376 15.327H128.893zM112 176c0-44.112 35.888-80 80-80 8.837 0 16-7.164 16-16s-7.163-16-16-16c-61.757 0-112 50.243-112 112 0 8.836 7.164 16 16 16s16-7.164 16-16z"],
    "link": [512, 512, [], "f0c1", "M326.612 185.391c59.747 59.809 58.927 155.698.36 214.59-.11.12-.24.25-.36.37l-67.2 67.2c-59.27 59.27-155.699 59.262-214.96 0-59.27-59.26-59.27-155.7 0-214.96l37.106-37.106c9.84-9.84 26.786-3.3 27.294 10.606.648 17.722 3.826 35.527 9.69 52.721 1.986 5.822.567 12.262-3.783 16.612l-13.087 13.087c-28.026 28.026-28.905 73.66-1.155 101.96 28.024 28.579 74.086 28.749 102.325.51l67.2-67.19c28.191-28.191 28.073-73.757 0-101.83-3.701-3.694-7.429-6.564-10.341-8.569a16.037 16.037 0 0 1-6.947-12.606c-.396-10.567 3.348-21.456 11.698-29.806l21.054-21.055c5.521-5.521 14.182-6.199 20.584-1.731a152.482 152.482 0 0 1 20.522 17.197zM467.547 44.449c-59.261-59.262-155.69-59.27-214.96 0l-67.2 67.2c-.12.12-.25.25-.36.37-58.566 58.892-59.387 154.781.36 214.59a152.454 152.454 0 0 0 20.521 17.196c6.402 4.468 15.064 3.789 20.584-1.731l21.054-21.055c8.35-8.35 12.094-19.239 11.698-29.806a16.037 16.037 0 0 0-6.947-12.606c-2.912-2.005-6.64-4.875-10.341-8.569-28.073-28.073-28.191-73.639 0-101.83l67.2-67.19c28.239-28.239 74.3-28.069 102.325.51 27.75 28.3 26.872 73.934-1.155 101.96l-13.087 13.087c-4.35 4.35-5.769 10.79-3.783 16.612 5.864 17.194 9.042 34.999 9.69 52.721.509 13.906 17.454 20.446 27.294 10.606l37.106-37.106c59.271-59.259 59.271-155.699.001-214.959z"],
    "lira-sign": [384, 512, [], "f195", "M371.994 256h-48.019C317.64 256 312 260.912 312 267.246 312 368 230.179 416 144 416V256.781l134.603-29.912A12 12 0 0 0 288 215.155v-40.976c0-7.677-7.109-13.38-14.603-11.714L144 191.219V160.78l134.603-29.912A12 12 0 0 0 288 119.154V78.179c0-7.677-7.109-13.38-14.603-11.714L144 95.219V44c0-6.627-5.373-12-12-12H76c-6.627 0-12 5.373-12 12v68.997L9.397 125.131A12 12 0 0 0 0 136.845v40.976c0 7.677 7.109 13.38 14.603 11.714L64 178.558v30.439L9.397 221.131A12 12 0 0 0 0 232.845v40.976c0 7.677 7.109 13.38 14.603 11.714L64 274.558V468c0 6.627 5.373 12 12 12h79.583c134.091 0 223.255-77.834 228.408-211.592.261-6.782-5.211-12.408-11.997-12.408z"],
    "list": [512, 512, [], "f03a", "M128 116V76c0-8.837 7.163-16 16-16h352c8.837 0 16 7.163 16 16v40c0 8.837-7.163 16-16 16H144c-8.837 0-16-7.163-16-16zm16 176h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zM16 144h64c8.837 0 16-7.163 16-16V64c0-8.837-7.163-16-16-16H16C7.163 48 0 55.163 0 64v64c0 8.837 7.163 16 16 16zm0 160h64c8.837 0 16-7.163 16-16v-64c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v64c0 8.837 7.163 16 16 16zm0 160h64c8.837 0 16-7.163 16-16v-64c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v64c0 8.837 7.163 16 16 16z"],
    "list-alt": [512, 512, [], "f022", "M464 480H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h416c26.51 0 48 21.49 48 48v352c0 26.51-21.49 48-48 48zM128 120c-22.091 0-40 17.909-40 40s17.909 40 40 40 40-17.909 40-40-17.909-40-40-40zm0 96c-22.091 0-40 17.909-40 40s17.909 40 40 40 40-17.909 40-40-17.909-40-40-40zm0 96c-22.091 0-40 17.909-40 40s17.909 40 40 40 40-17.909 40-40-17.909-40-40-40zm288-136v-32c0-6.627-5.373-12-12-12H204c-6.627 0-12 5.373-12 12v32c0 6.627 5.373 12 12 12h200c6.627 0 12-5.373 12-12zm0 96v-32c0-6.627-5.373-12-12-12H204c-6.627 0-12 5.373-12 12v32c0 6.627 5.373 12 12 12h200c6.627 0 12-5.373 12-12zm0 96v-32c0-6.627-5.373-12-12-12H204c-6.627 0-12 5.373-12 12v32c0 6.627 5.373 12 12 12h200c6.627 0 12-5.373 12-12z"],
    "list-ol": [512, 512, [], "f0cb", "M3.263 139.527c0-7.477 3.917-11.572 11.573-11.572h15.131V88.078c0-5.163.534-10.503.534-10.503h-.356s-1.779 2.67-2.848 3.738c-4.451 4.273-10.504 4.451-15.666-1.068l-5.518-6.231c-5.342-5.341-4.984-11.216.534-16.379l21.72-19.938C32.815 33.602 36.732 32 42.785 32H54.89c7.656 0 11.749 3.916 11.749 11.572v84.384h15.488c7.655 0 11.572 4.094 11.572 11.572v8.901c0 7.477-3.917 11.572-11.572 11.572H14.836c-7.656 0-11.573-4.095-11.573-11.572v-8.902zM2.211 304.591c0-47.278 50.955-56.383 50.955-69.165 0-7.18-5.954-8.755-9.28-8.755-3.153 0-6.479 1.051-9.455 3.852-5.079 4.903-10.507 7.004-16.111 2.451l-8.579-6.829c-5.779-4.553-7.18-9.805-2.803-15.409C13.592 201.981 26.025 192 47.387 192c19.437 0 44.476 10.506 44.476 39.573 0 38.347-46.753 46.402-48.679 56.909h39.049c7.529 0 11.557 4.027 11.557 11.382v8.755c0 7.354-4.028 11.382-11.557 11.382h-67.94c-7.005 0-12.083-4.028-12.083-11.382v-4.028zM5.654 454.61l5.603-9.28c3.853-6.654 9.105-7.004 15.584-3.152 4.903 2.101 9.63 3.152 14.359 3.152 10.155 0 14.358-3.502 14.358-8.23 0-6.654-5.604-9.106-15.934-9.106h-4.728c-5.954 0-9.28-2.101-12.258-7.88l-1.05-1.926c-2.451-4.728-1.226-9.806 2.801-14.884l5.604-7.004c6.829-8.405 12.257-13.483 12.257-13.483v-.35s-4.203 1.051-12.608 1.051H16.685c-7.53 0-11.383-4.028-11.383-11.382v-8.755c0-7.53 3.853-11.382 11.383-11.382h58.484c7.529 0 11.382 4.027 11.382 11.382v3.327c0 5.778-1.401 9.806-5.079 14.183l-17.509 20.137c19.611 5.078 28.716 20.487 28.716 34.845 0 21.363-14.358 44.126-48.503 44.126-16.636 0-28.192-4.728-35.896-9.455-5.779-4.202-6.304-9.805-2.626-15.934zM144 132h352c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"],
    "list-ul": [512, 512, [], "f0ca", "M96 96c0 26.51-21.49 48-48 48S0 122.51 0 96s21.49-48 48-48 48 21.49 48 48zM48 208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm0 160c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm96-236h352c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h352c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H144c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"],
    "location-arrow": [512, 512, [], "f124", "M443.683 4.529L27.818 196.418C-18.702 217.889-3.39 288 47.933 288H224v175.993c0 51.727 70.161 66.526 91.582 20.115L507.38 68.225c18.905-40.961-23.752-82.133-63.697-63.696z"],
    "lock": [448, 512, [], "f023", "M400 224h-24v-72C376 68.2 307.8 0 224 0S72 68.2 72 152v72H48c-26.5 0-48 21.5-48 48v192c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V272c0-26.5-21.5-48-48-48zm-104 0H152v-72c0-39.7 32.3-72 72-72s72 32.3 72 72v72z"],
    "lock-open": [576, 512, [], "f3c1", "M423.5 0C339.5.3 272 69.5 272 153.5V224H48c-26.5 0-48 21.5-48 48v192c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V272c0-26.5-21.5-48-48-48h-48v-71.1c0-39.6 31.7-72.5 71.3-72.9 40-.4 72.7 32.1 72.7 72v80c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24v-80C576 68 507.5-.3 423.5 0z"],
    "long-arrow-alt-down": [256, 512, [], "f309", "M168 345.941V44c0-6.627-5.373-12-12-12h-56c-6.627 0-12 5.373-12 12v301.941H41.941c-21.382 0-32.09 25.851-16.971 40.971l86.059 86.059c9.373 9.373 24.569 9.373 33.941 0l86.059-86.059c15.119-15.119 4.411-40.971-16.971-40.971H168z"],
    "long-arrow-alt-left": [448, 512, [], "f30a", "M134.059 296H436c6.627 0 12-5.373 12-12v-56c0-6.627-5.373-12-12-12H134.059v-46.059c0-21.382-25.851-32.09-40.971-16.971L7.029 239.029c-9.373 9.373-9.373 24.569 0 33.941l86.059 86.059c15.119 15.119 40.971 4.411 40.971-16.971V296z"],
    "long-arrow-alt-right": [448, 512, [], "f30b", "M313.941 216H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h301.941v46.059c0 21.382 25.851 32.09 40.971 16.971l86.059-86.059c9.373-9.373 9.373-24.569 0-33.941l-86.059-86.059c-15.119-15.119-40.971-4.411-40.971 16.971V216z"],
    "long-arrow-alt-up": [256, 512, [], "f30c", "M88 166.059V468c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12V166.059h46.059c21.382 0 32.09-25.851 16.971-40.971l-86.059-86.059c-9.373-9.373-24.569-9.373-33.941 0l-86.059 86.059c-15.119 15.119-4.411 40.971 16.971 40.971H88z"],
    "low-vision": [576, 512, [], "f2a8", "M569.344 231.631C512.96 135.949 407.81 72 288 72c-28.468 0-56.102 3.619-82.451 10.409L152.778 10.24c-7.601-10.858-22.564-13.5-33.423-5.9l-13.114 9.178c-10.86 7.601-13.502 22.566-5.9 33.426l43.131 58.395C89.449 131.73 40.228 174.683 6.682 231.581c-.01.017-.023.033-.034.05-8.765 14.875-8.964 33.528 0 48.739 38.5 65.332 99.742 115.862 172.859 141.349L55.316 244.302A272.194 272.194 0 0 1 83.61 208.39l119.4 170.58h.01l40.63 58.04a330.055 330.055 0 0 0 78.94 1.17l-189.98-271.4a277.628 277.628 0 0 1 38.777-21.563l251.836 356.544c7.601 10.858 22.564 13.499 33.423 5.9l13.114-9.178c10.86-7.601 13.502-22.567 5.9-33.426l-43.12-58.377-.007-.009c57.161-27.978 104.835-72.04 136.81-126.301a47.938 47.938 0 0 0 .001-48.739zM390.026 345.94l-19.066-27.23c24.682-32.567 27.711-76.353 8.8-111.68v.03c0 23.65-19.17 42.82-42.82 42.82-23.828 0-42.82-19.349-42.82-42.82 0-23.65 19.17-42.82 42.82-42.82h.03c-24.75-13.249-53.522-15.643-79.51-7.68l-19.068-27.237C253.758 123.306 270.488 120 288 120c75.162 0 136 60.826 136 136 0 34.504-12.833 65.975-33.974 89.94z"],
    "magic": [512, 512, [], "f0d0", "M101.1 505L7 410.9c-9.4-9.4-9.4-24.6 0-33.9L377 7c9.4-9.4 24.6-9.4 33.9 0l94.1 94.1c9.4 9.4 9.4 24.6 0 33.9L135 505c-9.3 9.3-24.5 9.3-33.9 0zM304 159.2l48.8 48.8 89.9-89.9-48.8-48.8-89.9 89.9zM138.9 39.3l-11.7 23.8-26.2 3.8c-4.7.7-6.6 6.5-3.2 9.8l19 18.5-4.5 26.1c-.8 4.7 4.1 8.3 8.3 6.1L144 115l23.4 12.3c4.2 2.2 9.1-1.4 8.3-6.1l-4.5-26.1 19-18.5c3.4-3.3 1.5-9.1-3.2-9.8L160.8 63l-11.7-23.8c-2-4.1-8.1-4.1-10.2.1zm97.7-20.7l-7.8 15.8-17.5 2.6c-3.1.5-4.4 4.3-2.1 6.5l12.6 12.3-3 17.4c-.5 3.1 2.8 5.5 5.6 4L240 69l15.6 8.2c2.8 1.5 6.1-.9 5.6-4l-3-17.4 12.6-12.3c2.3-2.2 1-6.1-2.1-6.5l-17.5-2.5-7.8-15.8c-1.4-3-5.4-3-6.8-.1zm-192 0l-7.8 15.8L19.3 37c-3.1.5-4.4 4.3-2.1 6.5l12.6 12.3-3 17.4c-.5 3.1 2.8 5.5 5.6 4L48 69l15.6 8.2c2.8 1.5 6.1-.9 5.6-4l-3-17.4 12.6-12.3c2.3-2.2 1-6.1-2.1-6.5l-17.5-2.5-7.8-15.8c-1.4-3-5.4-3-6.8-.1zm416 223.5l-7.8 15.8-17.5 2.5c-3.1.5-4.4 4.3-2.1 6.5l12.6 12.3-3 17.4c-.5 3.1 2.8 5.5 5.6 4l15.6-8.2 15.6 8.2c2.8 1.5 6.1-.9 5.6-4l-3-17.4 12.6-12.3c2.3-2.2 1-6.1-2.1-6.5l-17.5-2.5-7.8-15.8c-1.4-2.8-5.4-2.8-6.8 0z"],
    "magnet": [512, 512, [], "f076", "M164.1 160H12c-6.6 0-12-5.4-12-12V68c0-19.9 16.1-36 36-36h104c19.9 0 36 16.1 36 36v80c.1 6.6-5.3 12-11.9 12zm348-12V67.9c0-19.9-16.1-36-36-36h-104c-19.9 0-36 16.1-36 36v80c0 6.6 5.4 12 12 12h152c6.6.1 12-5.3 12-11.9zm-164 44c-6.6 0-12 5.4-12 12v52c0 128.1-160 127.9-160 0v-52c0-6.6-5.4-12-12-12h-152c-6.7 0-12 5.4-12 12.1.1 21.4.6 40.3 0 53.3C.1 408 136.3 504 256.9 504 377.5 504 512 408 512 257.3c-.6-12.8-.2-33 0-53.2 0-6.7-5.3-12.1-12-12.1H348.1z"],
    "male": [192, 512, [], "f183", "M96 0c35.346 0 64 28.654 64 64s-28.654 64-64 64-64-28.654-64-64S60.654 0 96 0m48 144h-11.36c-22.711 10.443-49.59 10.894-73.28 0H48c-26.51 0-48 21.49-48 48v136c0 13.255 10.745 24 24 24h16v136c0 13.255 10.745 24 24 24h64c13.255 0 24-10.745 24-24V352h16c13.255 0 24-10.745 24-24V192c0-26.51-21.49-48-48-48z"],
    "map": [576, 512, [], "f279", "M576 56.015v335.97a23.998 23.998 0 0 1-13.267 21.466l-128 64C418.948 485.344 400 473.992 400 455.985v-335.97a23.998 23.998 0 0 1 13.267-21.466l128-64C557.052 26.656 576 38.008 576 56.015zm-206.253 42.07l-144-64c-15.751-7-33.747 4.461-33.747 21.932v335.967a24 24 0 0 0 14.253 21.931l144 64c15.751 7 33.747-4.461 33.747-21.931V120.017a24 24 0 0 0-14.253-21.932zm-228.48-63.536l-128 63.985A23.998 23.998 0 0 0 0 120v335.985c0 18.007 18.948 29.359 34.733 21.466l128-63.985A23.998 23.998 0 0 0 176 392V56.015c0-18.007-18.948-29.359-34.733-21.466z"],
    "map-marker": [384, 512, [], "f041", "M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0z"],
    "map-marker-alt": [384, 512, [], "f3c5", "M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z"],
    "map-pin": [320, 512, [], "f276", "M192 300.813v172.82l-22.015 33.023c-4.75 7.125-15.219 7.125-19.969 0L128 473.633v-172.82a162.221 162.221 0 0 0 64 0zM160 0c79.529 0 144 64.471 144 144s-64.471 144-144 144S16 223.529 16 144 80.471 0 160 0M80 136c0-39.701 32.299-72 72-72a8 8 0 0 0 0-16c-48.523 0-88 39.477-88 88a8 8 0 0 0 16 0z"],
    "map-signs": [512, 512, [], "f277", "M487.515 104.485L439.03 152.97a23.998 23.998 0 0 1-16.97 7.029H56c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h160v-8c0-13.255 10.745-24 24-24h32c13.255 0 24 10.745 24 24v8h126.059a24 24 0 0 1 16.97 7.029l48.485 48.485c4.687 4.687 4.687 12.285.001 16.971zM216 368v120c0 13.255 10.745 24 24 24h32c13.255 0 24-10.745 24-24V368h-80zm240-144H296v-48h-80v48H89.941a24 24 0 0 0-16.97 7.029l-48.485 48.485c-4.686 4.686-4.686 12.284 0 16.971l48.485 48.485a23.998 23.998 0 0 0 16.97 7.029H456c13.255 0 24-10.745 24-24v-80C480 234.745 469.255 224 456 224z"],
    "mars": [384, 512, [], "f222", "M372 64h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-80.7 80.7c-22.2-14-48.5-22.1-76.7-22.1C64.5 160 0 224.5 0 304s64.5 144 144 144 144-64.5 144-144c0-28.2-8.1-54.5-22.1-76.7l80.7-80.7 16.9 16.9c7.6 7.6 20.5 2.2 20.5-8.5V76c0-6.6-5.4-12-12-12zM144 384c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"],
    "mars-double": [512, 512, [], "f227", "M340 0h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-48.7 48.7C198.5 72.1 172.2 64 144 64 64.5 64 0 128.5 0 208s64.5 144 144 144 144-64.5 144-144c0-28.2-8.1-54.5-22.1-76.7l48.7-48.7 16.9 16.9c2.4 2.4 5.5 3.5 8.4 3.5 6.2 0 12.1-4.8 12.1-12V12c0-6.6-5.4-12-12-12zM144 288c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80zm356-128.1h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-48.7 48.7c-18.2-11.4-39-18.9-61.5-21.3-2.1 21.8-8.2 43.3-18.4 63.3 1.1 0 2.2-.1 3.2-.1 44.1 0 80 35.9 80 80s-35.9 80-80 80-80-35.9-80-80c0-1.1 0-2.2.1-3.2-20 10.2-41.5 16.4-63.3 18.4C168.4 455.6 229.6 512 304 512c79.5 0 144-64.5 144-144 0-28.2-8.1-54.5-22.1-76.7l48.7-48.7 16.9 16.9c2.4 2.4 5.4 3.5 8.4 3.5 6.2 0 12.1-4.8 12.1-12v-79c0-6.7-5.4-12.1-12-12.1z"],
    "mars-stroke": [384, 512, [], "f229", "M372 64h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-17.5 17.5-14.1-14.1c-4.7-4.7-12.3-4.7-17 0L224.5 133c-4.7 4.7-4.7 12.3 0 17l14.1 14.1-18 18c-22.2-14-48.5-22.1-76.7-22.1C64.5 160 0 224.5 0 304s64.5 144 144 144 144-64.5 144-144c0-28.2-8.1-54.5-22.1-76.7l18-18 14.1 14.1c4.7 4.7 12.3 4.7 17 0l28.3-28.3c4.7-4.7 4.7-12.3 0-17L329.2 164l17.5-17.5 16.9 16.9c7.6 7.6 20.5 2.2 20.5-8.5V76c-.1-6.6-5.5-12-12.1-12zM144 384c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"],
    "mars-stroke-h": [480, 512, [], "f22b", "M476.2 247.5l-55.9-55.9c-7.6-7.6-20.5-2.2-20.5 8.5V224H376v-20c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v20h-27.6c-5.8-25.6-18.7-49.9-38.6-69.8C189.6 98 98.4 98 42.2 154.2c-56.2 56.2-56.2 147.4 0 203.6 56.2 56.2 147.4 56.2 203.6 0 19.9-19.9 32.8-44.2 38.6-69.8H312v20c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-20h23.9v23.9c0 10.7 12.9 16 20.5 8.5l55.9-55.9c4.6-4.7 4.6-12.3-.1-17zm-275.6 65.1c-31.2 31.2-81.9 31.2-113.1 0-31.2-31.2-31.2-81.9 0-113.1 31.2-31.2 81.9-31.2 113.1 0 31.2 31.1 31.2 81.9 0 113.1z"],
    "mars-stroke-v": [288, 512, [], "f22a", "M245.8 234.2c-19.9-19.9-44.2-32.8-69.8-38.6v-25.4h20c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-20V81.4h23.9c10.7 0 16-12.9 8.5-20.5L152.5 5.1c-4.7-4.7-12.3-4.7-17 0L79.6 61c-7.6 7.6-2.2 20.5 8.5 20.5H112v24.7H92c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h20v25.4c-25.6 5.8-49.9 18.7-69.8 38.6-56.2 56.2-56.2 147.4 0 203.6 56.2 56.2 147.4 56.2 203.6 0 56.3-56.2 56.3-147.4 0-203.6zm-45.2 158.4c-31.2 31.2-81.9 31.2-113.1 0-31.2-31.2-31.2-81.9 0-113.1 31.2-31.2 81.9-31.2 113.1 0 31.2 31.1 31.2 81.9 0 113.1z"],
    "medkit": [512, 512, [], "f0fa", "M96 480h320V128h-32V80c0-26.51-21.49-48-48-48H176c-26.51 0-48 21.49-48 48v48H96v352zm96-384h128v32H192V96zm320 80v256c0 26.51-21.49 48-48 48h-16V128h16c26.51 0 48 21.49 48 48zM64 480H48c-26.51 0-48-21.49-48-48V176c0-26.51 21.49-48 48-48h16v352zm288-208v32c0 8.837-7.163 16-16 16h-48v48c0 8.837-7.163 16-16 16h-32c-8.837 0-16-7.163-16-16v-48h-48c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h48v-48c0-8.837 7.163-16 16-16h32c8.837 0 16 7.163 16 16v48h48c8.837 0 16 7.163 16 16z"],
    "meh": [512, 512, [], "f11a", "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zm-396-64c0 37.497 30.503 68 68 68s68-30.503 68-68-30.503-68-68-68-68 30.503-68 68zm160.5 0c0 37.221 30.279 67.5 67.5 67.5s67.5-30.279 67.5-67.5-30.279-67.5-67.5-67.5-67.5 30.279-67.5 67.5zm67.5-48a47.789 47.789 0 0 0-22.603 5.647h.015c10.916 0 19.765 8.849 19.765 19.765s-8.849 19.765-19.765 19.765-19.765-8.849-19.765-19.765v-.015A47.789 47.789 0 0 0 288 192c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48zm-160 0a47.789 47.789 0 0 0-22.603 5.647h.015c10.916 0 19.765 8.849 19.765 19.765s-8.849 19.765-19.765 19.765-19.765-8.849-19.765-19.765v-.015A47.789 47.789 0 0 0 128 192c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48zm160 208H176c-21.178 0-21.169 32 0 32h160c21.178 0 21.169-32 0-32z"],
    "mercury": [288, 512, [], "f223", "M288 208c0-44.2-19.9-83.7-51.2-110.1 2.5-1.8 4.9-3.8 7.2-5.8 24.7-21.2 39.8-48.8 43.2-78.8.9-7.1-4.7-13.3-11.9-13.3h-40.5C229 0 224.1 4.1 223 9.8c-2.4 12.5-9.6 24.3-20.7 33.8C187 56.8 166.3 64 144 64s-43-7.2-58.4-20.4C74.5 34.1 67.4 22.3 64.9 9.8 63.8 4.1 58.9 0 53.2 0H12.7C5.5 0-.1 6.2.8 13.3 4.2 43.4 19.2 71 44 92.2c2.3 2 4.7 3.9 7.2 5.8C19.9 124.3 0 163.8 0 208c0 68.5 47.9 125.9 112 140.4V400H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v36c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-36h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-51.6c64.1-14.5 112-71.9 112-140.4zm-224 0c0-44.1 35.9-80 80-80s80 35.9 80 80-35.9 80-80 80-80-35.9-80-80z"],
    "microchip": [512, 512, [], "f2db", "M416 48v416c0 26.51-21.49 48-48 48H144c-26.51 0-48-21.49-48-48V48c0-26.51 21.49-48 48-48h224c26.51 0 48 21.49 48 48zm96 58v12a6 6 0 0 1-6 6h-18v6a6 6 0 0 1-6 6h-42V88h42a6 6 0 0 1 6 6v6h18a6 6 0 0 1 6 6zm0 96v12a6 6 0 0 1-6 6h-18v6a6 6 0 0 1-6 6h-42v-48h42a6 6 0 0 1 6 6v6h18a6 6 0 0 1 6 6zm0 96v12a6 6 0 0 1-6 6h-18v6a6 6 0 0 1-6 6h-42v-48h42a6 6 0 0 1 6 6v6h18a6 6 0 0 1 6 6zm0 96v12a6 6 0 0 1-6 6h-18v6a6 6 0 0 1-6 6h-42v-48h42a6 6 0 0 1 6 6v6h18a6 6 0 0 1 6 6zM30 376h42v48H30a6 6 0 0 1-6-6v-6H6a6 6 0 0 1-6-6v-12a6 6 0 0 1 6-6h18v-6a6 6 0 0 1 6-6zm0-96h42v48H30a6 6 0 0 1-6-6v-6H6a6 6 0 0 1-6-6v-12a6 6 0 0 1 6-6h18v-6a6 6 0 0 1 6-6zm0-96h42v48H30a6 6 0 0 1-6-6v-6H6a6 6 0 0 1-6-6v-12a6 6 0 0 1 6-6h18v-6a6 6 0 0 1 6-6zm0-96h42v48H30a6 6 0 0 1-6-6v-6H6a6 6 0 0 1-6-6v-12a6 6 0 0 1 6-6h18v-6a6 6 0 0 1 6-6z"],
    "microphone": [384, 512, [], "f130", "M96 256V96c0-53.019 42.981-96 96-96s96 42.981 96 96v160c0 53.019-42.981 96-96 96s-96-42.981-96-96zm252-56h-24c-6.627 0-12 5.373-12 12v42.68c0 66.217-53.082 120.938-119.298 121.318C126.213 376.38 72 322.402 72 256v-44c0-6.627-5.373-12-12-12H36c-6.627 0-12 5.373-12 12v44c0 84.488 62.693 154.597 144 166.278V468h-68c-6.627 0-12 5.373-12 12v20c0 6.627 5.373 12 12 12h184c6.627 0 12-5.373 12-12v-20c0-6.627-5.373-12-12-12h-68v-45.722c81.307-11.681 144-81.79 144-166.278v-44c0-6.627-5.373-12-12-12z"],
    "microphone-slash": [512, 512, [], "f131", "M421.45 285.195L376 239.746V212c0-6.627 5.373-12 12-12h24c6.627 0 12 5.373 12 12v44c0 9.957-.881 19.71-2.55 29.195zM352 96c0-53.019-42.981-96-96-96-32.574 0-61.354 16.227-78.71 41.035L352 215.746V96zm152.971 363.716L52.284 7.029c-9.373-9.373-24.569-9.373-33.941 0L7.029 18.343c-9.372 9.373-9.372 24.568 0 33.941L160 205.254v49.577c0 53.089 43.436 97.452 96.524 97.167 14.626-.078 28.471-3.44 40.854-9.366l17.746 17.746c-17.529 9.971-37.794 15.666-59.372 15.622C189.355 375.864 136 321.053 136 254.656V212c0-6.627-5.373-12-12-12h-24c-6.627 0-12 5.373-12 12v44c0 84.488 62.693 154.597 144 166.278V468h-68c-6.627 0-12 5.373-12 12v20c0 6.627 5.373 12 12 12h184c6.627 0 12-5.373 12-12v-20c0-6.627-5.373-12-12-12h-68v-45.722c25.625-3.682 49.396-13.172 69.942-27.083L459.717 504.97c9.373 9.373 24.569 9.373 33.941 0l11.313-11.313c9.372-9.373 9.372-24.568 0-33.941z"],
    "minus": [448, 512, [], "f068", "M424 318.2c13.3 0 24-10.7 24-24v-76.4c0-13.3-10.7-24-24-24H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h400z"],
    "minus-circle": [512, 512, [], "f056", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zM124 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H124z"],
    "minus-square": [448, 512, [], "f146", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zM92 296c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h264c6.6 0 12 5.4 12 12v56c0 6.6-5.4 12-12 12H92z"],
    "mobile": [320, 512, [], "f10b", "M272 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h224c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM160 480c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"],
    "mobile-alt": [320, 512, [], "f3cd", "M272 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h224c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM160 480c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm112-108c0 6.6-5.4 12-12 12H60c-6.6 0-12-5.4-12-12V60c0-6.6 5.4-12 12-12h200c6.6 0 12 5.4 12 12v312z"],
    "money-bill-alt": [640, 512, [], "f3d1", "M640 120v272c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h592c13.255 0 24 10.745 24 24zM96 384c0-35.346-28.654-64-64-64v64h64zm0-256H32v64c35.346 0 64-28.654 64-64zm304 128c0-53.021-35.816-96-80-96s-80 42.979-80 96c0 53.012 35.814 96 80 96 44.167 0 80-42.969 80-96zm208 64c-35.346 0-64 28.654-64 64h64v-64zm0-192h-64c0 35.346 28.654 64 64 64v-64zM277.563 299.527c0-7.477 3.917-11.572 11.573-11.572h15.131v-39.878c0-5.163.534-10.503.534-10.503h-.356s-1.779 2.67-2.848 3.738c-4.451 4.273-10.504 4.451-15.666-1.068l-5.518-6.231c-5.342-5.341-4.984-11.216.534-16.379l21.72-19.939c4.449-4.095 8.366-5.697 14.42-5.697h12.105c7.656 0 11.749 3.916 11.749 11.572v84.384h15.488c7.655 0 11.572 4.094 11.572 11.572v8.901c0 7.477-3.917 11.572-11.572 11.572h-67.293c-7.656 0-11.573-4.095-11.573-11.572v-8.9z"],
    "moon": [512, 512, [], "f186", "M283.211 512c78.962 0 151.079-35.925 198.857-94.792 7.068-8.708-.639-21.43-11.562-19.35-124.203 23.654-238.262-71.576-238.262-196.954 0-72.222 38.662-138.635 101.498-174.394 9.686-5.512 7.25-20.197-3.756-22.23A258.156 258.156 0 0 0 283.211 0c-141.309 0-256 114.511-256 256 0 141.309 114.511 256 256 256z"],
    "motorcycle": [640, 512, [], "f21c", "M512.949 192.003c-14.862-.108-29.14 2.322-42.434 6.874L437.589 144H520c13.255 0 24-10.745 24-24V88c0-13.255-10.745-24-24-24h-45.311a24 24 0 0 0-17.839 7.945l-37.496 41.663-22.774-37.956A24 24 0 0 0 376 64h-80c-8.837 0-16 7.163-16 16v16c0 8.837 7.163 16 16 16h66.411l19.2 32H227.904c-17.727-23.073-44.924-40-99.904-40H72.54c-13.455 0-24.791 11.011-24.536 24.464C48.252 141.505 58.9 152 72 152h56c24.504 0 38.686 10.919 47.787 24.769l-11.291 20.529c-13.006-3.865-26.871-5.736-41.251-5.21C55.857 194.549 1.565 249.605.034 317.021-1.603 389.076 56.317 448 128 448c59.642 0 109.744-40.794 123.953-96h84.236c13.673 0 24.589-11.421 23.976-25.077-2.118-47.12 17.522-93.665 56.185-125.026l12.485 20.808c-27.646 23.654-45.097 58.88-44.831 98.179.47 69.556 57.203 126.452 126.758 127.11 71.629.678 129.839-57.487 129.234-129.099-.588-69.591-57.455-126.386-127.047-126.892zM128 400c-44.112 0-80-35.888-80-80s35.888-80 80-80c4.242 0 8.405.341 12.469.982L98.97 316.434C90.187 332.407 101.762 352 120 352h81.297c-12.37 28.225-40.56 48-73.297 48zm388.351-.116C470.272 402.337 432 365.554 432 320c0-21.363 8.434-40.781 22.125-55.144l49.412 82.352c4.546 7.577 14.375 10.034 21.952 5.488l13.72-8.232c7.577-4.546 10.034-14.375 5.488-21.952l-48.556-80.927A80.005 80.005 0 0 1 512 240c45.554 0 82.338 38.273 79.884 84.352-2.16 40.558-34.974 73.372-75.533 75.532z"],
    "mouse-pointer": [320, 512, [], "f245", "M302.189 329.126H196.105l55.831 135.993c3.889 9.428-.555 19.999-9.444 23.999l-49.165 21.427c-9.165 4-19.443-.571-23.332-9.714l-53.053-129.136-86.664 89.138C18.729 472.71 0 463.554 0 447.977V18.299C0 1.899 19.921-6.096 30.277 5.443l284.412 292.542c11.472 11.179 3.007 31.141-12.5 31.141z"],
    "music": [512, 512, [], "f001", "M470.4 1.5l-304 96C153.1 101.7 144 114 144 128v264.6c-14.1-5.4-30.5-8.6-48-8.6-53 0-96 28.7-96 64s43 64 96 64 96-28.7 96-64V220.5l272-85.9v194c-14.1-5.4-30.5-8.6-48-8.6-53 0-96 28.7-96 64s43 64 96 64 96-28.7 96-64V32c0-21.7-21.1-37-41.6-30.5z"],
    "neuter": [288, 512, [], "f22c", "M288 176c0-79.5-64.5-144-144-144S0 96.5 0 176c0 68.5 47.9 125.9 112 140.4V468c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V316.4c64.1-14.5 112-71.9 112-140.4zm-144 80c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"],
    "newspaper": [576, 512, [], "f1ea", "M552 64H88c-13.255 0-24 10.745-24 24v8H24c-13.255 0-24 10.745-24 24v272c0 30.928 25.072 56 56 56h472c26.51 0 48-21.49 48-48V88c0-13.255-10.745-24-24-24zM56 400a8 8 0 0 1-8-8V144h16v248a8 8 0 0 1-8 8zm236-16H140c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm208 0H348c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm-208-96H140c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm208 0H348c-6.627 0-12-5.373-12-12v-8c0-6.627 5.373-12 12-12h152c6.627 0 12 5.373 12 12v8c0 6.627-5.373 12-12 12zm0-96H140c-6.627 0-12-5.373-12-12v-40c0-6.627 5.373-12 12-12h360c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12z"],
    "object-group": [512, 512, [], "f247", "M480 128V96h20c6.627 0 12-5.373 12-12V44c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v20H64V44c0-6.627-5.373-12-12-12H12C5.373 32 0 37.373 0 44v40c0 6.627 5.373 12 12 12h20v320H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-20h384v20c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-20V128zM96 276V140c0-6.627 5.373-12 12-12h168c6.627 0 12 5.373 12 12v136c0 6.627-5.373 12-12 12H108c-6.627 0-12-5.373-12-12zm320 96c0 6.627-5.373 12-12 12H236c-6.627 0-12-5.373-12-12v-52h72c13.255 0 24-10.745 24-24v-72h84c6.627 0 12 5.373 12 12v136z"],
    "object-ungroup": [576, 512, [], "f248", "M64 320v26a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6v-52a6 6 0 0 1 6-6h26V96H6a6 6 0 0 1-6-6V38a6 6 0 0 1 6-6h52a6 6 0 0 1 6 6v26h288V38a6 6 0 0 1 6-6h52a6 6 0 0 1 6 6v52a6 6 0 0 1-6 6h-26v192h26a6 6 0 0 1 6 6v52a6 6 0 0 1-6 6h-52a6 6 0 0 1-6-6v-26H64zm480-64v-32h26a6 6 0 0 0 6-6v-52a6 6 0 0 0-6-6h-52a6 6 0 0 0-6 6v26H408v72h8c13.255 0 24 10.745 24 24v64c0 13.255-10.745 24-24 24h-64c-13.255 0-24-10.745-24-24v-8H192v72h-26a6 6 0 0 0-6 6v52a6 6 0 0 0 6 6h52a6 6 0 0 0 6-6v-26h288v26a6 6 0 0 0 6 6h52a6 6 0 0 0 6-6v-52a6 6 0 0 0-6-6h-26V256z"],
    "outdent": [448, 512, [], "f03b", "M0 84V44c0-8.837 7.163-16 16-16h416c8.837 0 16 7.163 16 16v40c0 8.837-7.163 16-16 16H16c-8.837 0-16-7.163-16-16zm208 144h224c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H208c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zM16 484h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm192-128h224c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H208c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zM4.687 267.313l96 95.984C110.734 373.348 128 366.224 128 351.984V160.008c0-14.329-17.325-21.304-27.313-11.313l-96 95.992c-6.249 6.248-6.249 16.378 0 22.626z"],
    "paint-brush": [512, 512, [], "f1fc", "M269.9 364.6c1.4 6.4 2.1 13 2.1 19.7 0 81.2-54.2 127.7-134.8 127.7C41.5 512 0 435.1 0 347.6c10.4 7.1 46.9 36.5 58.7 36.5 7 0 13-4 15.5-10.6 23.6-62.2 66.5-76.5 112.9-77.4 15.6 33.8 46.1 59.6 82.8 68.5zM460.6 0c-14.4 0-27.9 6.4-38.2 15.7C228.2 190 208 194.1 208 245.4c0 48.8 40.5 90.6 90.2 90.6 59 0 93.2-43.4 200.6-244.8 7-13.7 13.2-28.5 13.2-43.9C512 19.7 487.3 0 460.6 0z"],
    "pallet": [640, 512, [], "f482", "M144 256h352c8.8 0 16-7.2 16-16V16c0-8.8-7.2-16-16-16H384v128l-64-32-64 32V0H144c-8.8 0-16 7.2-16 16v224c0 8.8 7.2 16 16 16zm480 128c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h48v64H16c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h608c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16h-48v-64h48zm-336 64H128v-64h160v64zm224 0H352v-64h160v64z"],
    "paper-plane": [512, 512, [], "f1d8", "M476 3.2L12.5 270.6c-18.1 10.4-15.8 35.6 2.2 43.2L121 358.4l287.3-253.2c5.5-4.9 13.3 2.6 8.6 8.3L176 407v80.5c0 23.6 28.5 32.9 42.5 15.8L282 426l124.6 52.2c14.2 6 30.4-2.9 33-18.2l72-432C515 7.8 493.3-6.8 476 3.2z"],
    "paperclip": [448, 512, [], "f0c6", "M43.246 466.142c-58.43-60.289-57.341-157.511 1.386-217.581L254.392 34c44.316-45.332 116.351-45.336 160.671 0 43.89 44.894 43.943 117.329 0 162.276L232.214 383.128c-29.855 30.537-78.633 30.111-107.982-.998-28.275-29.97-27.368-77.473 1.452-106.953l143.743-146.835c6.182-6.314 16.312-6.422 22.626-.241l22.861 22.379c6.315 6.182 6.422 16.312.241 22.626L171.427 319.927c-4.932 5.045-5.236 13.428-.648 18.292 4.372 4.634 11.245 4.711 15.688.165l182.849-186.851c19.613-20.062 19.613-52.725-.011-72.798-19.189-19.627-49.957-19.637-69.154 0L90.39 293.295c-34.763 35.56-35.299 93.12-1.191 128.313 34.01 35.093 88.985 35.137 123.058.286l172.06-175.999c6.177-6.319 16.307-6.433 22.626-.256l22.877 22.364c6.319 6.177 6.434 16.307.256 22.626l-172.06 175.998c-59.576 60.938-155.943 60.216-214.77-.485z"],
    "paragraph": [448, 512, [], "f1dd", "M408 32H177.531C88.948 32 16.045 103.335 16 191.918 15.956 280.321 87.607 352 176 352v104c0 13.255 10.745 24 24 24h32c13.255 0 24-10.745 24-24V112h32v344c0 13.255 10.745 24 24 24h32c13.255 0 24-10.745 24-24V112h40c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24z"],
    "paste": [448, 512, [], "f0ea", "M128 184c0-30.879 25.122-56 56-56h136V56c0-13.255-10.745-24-24-24h-80.61C204.306 12.89 183.637 0 160 0s-44.306 12.89-55.39 32H24C10.745 32 0 42.745 0 56v336c0 13.255 10.745 24 24 24h104V184zm32-144c13.255 0 24 10.745 24 24s-10.745 24-24 24-24-10.745-24-24 10.745-24 24-24zm184 248h104v200c0 13.255-10.745 24-24 24H184c-13.255 0-24-10.745-24-24V184c0-13.255 10.745-24 24-24h136v104c0 13.2 10.8 24 24 24zm104-38.059V256h-96v-96h6.059a24 24 0 0 1 16.97 7.029l65.941 65.941a24.002 24.002 0 0 1 7.03 16.971z"],
    "pause": [448, 512, [], "f04c", "M144 479H48c-26.5 0-48-21.5-48-48V79c0-26.5 21.5-48 48-48h96c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zm304-48V79c0-26.5-21.5-48-48-48h-96c-26.5 0-48 21.5-48 48v352c0 26.5 21.5 48 48 48h96c26.5 0 48-21.5 48-48z"],
    "pause-circle": [512, 512, [], "f28b", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm-16 328c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h48c8.8 0 16 7.2 16 16v160zm112 0c0 8.8-7.2 16-16 16h-48c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h48c8.8 0 16 7.2 16 16v160z"],
    "paw": [512, 512, [], "f1b0", "M85.231 330.958C36 330.958 0 273.792 0 231.5c0-28.292 16-58.042 49.538-58.042 49.231 0 85.231 57.458 85.231 99.75 0 28.292-15.692 57.75-49.538 57.75zm348 106.167c0 37.042-32 42.875-63.385 42.875-41.231 0-74.462-26.25-113.846-26.25-41.231 0-76.308 25.958-120.923 25.958-29.847 0-56.308-9.625-56.308-42.583C78.769 368 180.616 265.333 256 265.333s177.231 102.959 177.231 171.792zM182.462 203.792c-49.847 0-80-59.5-80-100.333C102.462 70.792 120.308 32 160 32c50.154 0 80 59.5 80 100.333 0 32.667-17.846 71.459-57.538 71.459zM272 132.333C272 91.5 301.846 32 352 32c39.692 0 57.539 38.792 57.539 71.458 0 40.833-30.154 100.333-80.001 100.333C289.846 203.792 272 165 272 132.333zM512 231.5c0 42.292-36 99.458-85.231 99.458-33.847 0-49.538-29.458-49.538-57.75 0-42.291 35.999-99.75 85.231-99.75C496 173.458 512 203.208 512 231.5z"],
    "pen-square": [448, 512, [], "f14b", "M400 480H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48v352c0 26.5-21.5 48-48 48zM238.1 177.9L102.4 313.6l-6.3 57.1c-.8 7.6 5.6 14.1 13.3 13.3l57.1-6.3L302.2 242c2.3-2.3 2.3-6.1 0-8.5L246.7 178c-2.5-2.4-6.3-2.4-8.6-.1zM345 165.1L314.9 135c-9.4-9.4-24.6-9.4-33.9 0l-23.1 23.1c-2.3 2.3-2.3 6.1 0 8.5l55.5 55.5c2.3 2.3 6.1 2.3 8.5 0L345 199c9.3-9.3 9.3-24.5 0-33.9z"],
    "pencil-alt": [512, 512, [], "f303", "M497.9 142.1l-46.1 46.1c-4.7 4.7-12.3 4.7-17 0l-111-111c-4.7-4.7-4.7-12.3 0-17l46.1-46.1c18.7-18.7 49.1-18.7 67.9 0l60.1 60.1c18.8 18.7 18.8 49.1 0 67.9zM284.2 99.8L21.6 362.4.4 483.9c-2.9 16.4 11.4 30.6 27.8 27.8l121.5-21.3 262.6-262.6c4.7-4.7 4.7-12.3 0-17l-111-111c-4.8-4.7-12.4-4.7-17.1 0zM124.1 339.9c-5.5-5.5-5.5-14.3 0-19.8l154-154c5.5-5.5 14.3-5.5 19.8 0s5.5 14.3 0 19.8l-154 154c-5.5 5.5-14.3 5.5-19.8 0zM88 424h48v36.3l-64.5 11.3-31.1-31.1L51.7 376H88v48z"],
    "percent": [448, 512, [], "f295", "M112 224c61.9 0 112-50.1 112-112S173.9 0 112 0 0 50.1 0 112s50.1 112 112 112zm0-160c26.5 0 48 21.5 48 48s-21.5 48-48 48-48-21.5-48-48 21.5-48 48-48zm224 224c-61.9 0-112 50.1-112 112s50.1 112 112 112 112-50.1 112-112-50.1-112-112-112zm0 160c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zM392.3.2l31.6-.1c19.4-.1 30.9 21.8 19.7 37.8L77.4 501.6a23.95 23.95 0 0 1-19.6 10.2l-33.4.1c-19.5 0-30.9-21.9-19.7-37.8l368-463.7C377.2 4 384.5.2 392.3.2z"],
    "phone": [512, 512, [], "f095", "M493.397 24.615l-104-23.997c-11.314-2.611-22.879 3.252-27.456 13.931l-48 111.997a24 24 0 0 0 6.862 28.029l60.617 49.596c-35.973 76.675-98.938 140.508-177.249 177.248l-49.596-60.616a24 24 0 0 0-28.029-6.862l-111.997 48C3.873 366.516-1.994 378.08.618 389.397l23.997 104C27.109 504.204 36.748 512 48 512c256.087 0 464-207.532 464-464 0-11.176-7.714-20.873-18.603-23.385z"],
    "phone-square": [448, 512, [], "f098", "M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM94 416c-7.033 0-13.057-4.873-14.616-11.627l-14.998-65a15 15 0 0 1 8.707-17.16l69.998-29.999a15 15 0 0 1 17.518 4.289l30.997 37.885c48.944-22.963 88.297-62.858 110.781-110.78l-37.886-30.997a15.001 15.001 0 0 1-4.289-17.518l30-69.998a15 15 0 0 1 17.16-8.707l65 14.998A14.997 14.997 0 0 1 384 126c0 160.292-129.945 290-290 290z"],
    "phone-volume": [384, 512, [], "f2a0", "M97.333 506.966c-129.874-129.874-129.681-340.252 0-469.933 5.698-5.698 14.527-6.632 21.263-2.422l64.817 40.513a17.187 17.187 0 0 1 6.849 20.958l-32.408 81.021a17.188 17.188 0 0 1-17.669 10.719l-55.81-5.58c-21.051 58.261-20.612 122.471 0 179.515l55.811-5.581a17.188 17.188 0 0 1 17.669 10.719l32.408 81.022a17.188 17.188 0 0 1-6.849 20.958l-64.817 40.513a17.19 17.19 0 0 1-21.264-2.422zM247.126 95.473c11.832 20.047 11.832 45.008 0 65.055-3.95 6.693-13.108 7.959-18.718 2.581l-5.975-5.726c-3.911-3.748-4.793-9.622-2.261-14.41a32.063 32.063 0 0 0 0-29.945c-2.533-4.788-1.65-10.662 2.261-14.41l5.975-5.726c5.61-5.378 14.768-4.112 18.718 2.581zm91.787-91.187c60.14 71.604 60.092 175.882 0 247.428-4.474 5.327-12.53 5.746-17.552.933l-5.798-5.557c-4.56-4.371-4.977-11.529-.93-16.379 49.687-59.538 49.646-145.933 0-205.422-4.047-4.85-3.631-12.008.93-16.379l5.798-5.557c5.022-4.813 13.078-4.394 17.552.933zm-45.972 44.941c36.05 46.322 36.108 111.149 0 157.546-4.39 5.641-12.697 6.251-17.856 1.304l-5.818-5.579c-4.4-4.219-4.998-11.095-1.285-15.931 26.536-34.564 26.534-82.572 0-117.134-3.713-4.836-3.115-11.711 1.285-15.931l5.818-5.579c5.159-4.947 13.466-4.337 17.856 1.304z"],
    "pills": [576, 512, [], "f484", "M112 32C50.1 32 0 82.1 0 144v224c0 61.9 50.1 112 112 112s112-50.1 112-112V144c0-61.9-50.1-112-112-112zm48 224H64V144c0-26.5 21.5-48 48-48s48 21.5 48 48v112zm139.7-29.7c-3.5-3.5-9.4-3.1-12.3.8-45.3 62.5-40.4 150.1 15.9 206.4 56.3 56.3 143.9 61.2 206.4 15.9 4-2.9 4.3-8.8.8-12.3L299.7 226.3zm229.8-19c-56.3-56.3-143.9-61.2-206.4-15.9-4 2.9-4.3 8.8-.8 12.3l210.8 210.8c3.5 3.5 9.4 3.1 12.3-.8 45.3-62.6 40.5-150.1-15.9-206.4z"],
    "plane": [576, 512, [], "f072", "M472 200H360.211L256.013 5.711A12 12 0 0 0 245.793 0h-57.787c-7.85 0-13.586 7.413-11.616 15.011L209.624 200H99.766l-34.904-58.174A12 12 0 0 0 54.572 136H12.004c-7.572 0-13.252 6.928-11.767 14.353l21.129 105.648L.237 361.646c-1.485 7.426 4.195 14.354 11.768 14.353l42.568-.002c4.215 0 8.121-2.212 10.289-5.826L99.766 312h109.858L176.39 496.989c-1.97 7.599 3.766 15.011 11.616 15.011h57.787a12 12 0 0 0 10.22-5.711L360.212 312H472c57.438 0 104-25.072 104-56s-46.562-56-104-56z"],
    "play": [448, 512, [], "f04b", "M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"],
    "play-circle": [512, 512, [], "f144", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm115.7 272l-176 101c-15.8 8.8-35.7-2.5-35.7-21V152c0-18.4 19.8-29.8 35.7-21l176 107c16.4 9.2 16.4 32.9 0 42z"],
    "plug": [384, 512, [], "f1e6", "M256 144V32c0-17.673 14.327-32 32-32s32 14.327 32 32v112h-64zm112 16H16c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16h16v32c0 77.406 54.969 141.971 128 156.796V512h64v-99.204c73.031-14.825 128-79.39 128-156.796v-32h16c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16zm-240-16V32c0-17.673-14.327-32-32-32S64 14.327 64 32v112h64z"],
    "plus": [448, 512, [], "f067", "M448 294.2v-76.4c0-13.3-10.7-24-24-24H286.2V56c0-13.3-10.7-24-24-24h-76.4c-13.3 0-24 10.7-24 24v137.8H24c-13.3 0-24 10.7-24 24v76.4c0 13.3 10.7 24 24 24h137.8V456c0 13.3 10.7 24 24 24h76.4c13.3 0 24-10.7 24-24V318.2H424c13.3 0 24-10.7 24-24z"],
    "plus-circle": [512, 512, [], "f055", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm144 276c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92h-92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"],
    "plus-square": [448, 512, [], "f0fe", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-32 252c0 6.6-5.4 12-12 12h-92v92c0 6.6-5.4 12-12 12h-56c-6.6 0-12-5.4-12-12v-92H92c-6.6 0-12-5.4-12-12v-56c0-6.6 5.4-12 12-12h92v-92c0-6.6 5.4-12 12-12h56c6.6 0 12 5.4 12 12v92h92c6.6 0 12 5.4 12 12v56z"],
    "podcast": [448, 512, [], "f2ce", "M267.429 488.563C262.286 507.573 242.858 512 224 512c-18.857 0-38.286-4.427-43.428-23.437C172.927 460.134 160 388.898 160 355.75c0-35.156 31.142-43.75 64-43.75s64 8.594 64 43.75c0 32.949-12.871 104.179-20.571 132.813zM156.867 288.554c-18.693-18.308-29.958-44.173-28.784-72.599 2.054-49.724 42.395-89.956 92.124-91.881C274.862 121.958 320 165.807 320 220c0 26.827-11.064 51.116-28.866 68.552-2.675 2.62-2.401 6.986.628 9.187 9.312 6.765 16.46 15.343 21.234 25.363 1.741 3.654 6.497 4.66 9.449 1.891 28.826-27.043 46.553-65.783 45.511-108.565-1.855-76.206-63.595-138.208-139.793-140.369C146.869 73.753 80 139.215 80 220c0 41.361 17.532 78.7 45.55 104.989 2.953 2.771 7.711 1.77 9.453-1.887 4.774-10.021 11.923-18.598 21.235-25.363 3.029-2.2 3.304-6.566.629-9.185zM224 0C100.204 0 0 100.185 0 224c0 89.992 52.602 165.647 125.739 201.408 4.333 2.118 9.267-1.544 8.535-6.31-2.382-15.512-4.342-30.946-5.406-44.339-.146-1.836-1.149-3.486-2.678-4.512-47.4-31.806-78.564-86.016-78.187-147.347.592-96.237 79.29-174.648 175.529-174.899C320.793 47.747 400 126.797 400 224c0 61.932-32.158 116.49-80.65 147.867-.999 14.037-3.069 30.588-5.624 47.23-.732 4.767 4.203 8.429 8.535 6.31C395.227 389.727 448 314.187 448 224 448 100.205 347.815 0 224 0zm0 160c-35.346 0-64 28.654-64 64s28.654 64 64 64 64-28.654 64-64-28.654-64-64-64z"],
    "pound-sign": [320, 512, [], "f154", "M308 352h-45.495c-6.627 0-12 5.373-12 12v50.848H128V288h84c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-84v-63.556c0-32.266 24.562-57.086 61.792-57.086 23.658 0 45.878 11.505 57.652 18.849 5.151 3.213 11.888 2.051 15.688-2.685l28.493-35.513c4.233-5.276 3.279-13.005-2.119-17.081C273.124 54.56 236.576 32 187.931 32 106.026 32 48 84.742 48 157.961V224H20c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h28v128H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h296c6.627 0 12-5.373 12-12V364c0-6.627-5.373-12-12-12z"],
    "power-off": [512, 512, [], "f011", "M400 54.1c63 45 104 118.6 104 201.9 0 136.8-110.8 247.7-247.5 248C120 504.3 8.2 393 8 256.4 7.9 173.1 48.9 99.3 111.8 54.2c11.7-8.3 28-4.8 35 7.7L162.6 90c5.9 10.5 3.1 23.8-6.6 31-41.5 30.8-68 79.6-68 134.9-.1 92.3 74.5 168.1 168 168.1 91.6 0 168.6-74.2 168-169.1-.3-51.8-24.7-101.8-68.1-134-9.7-7.2-12.4-20.5-6.5-30.9l15.8-28.1c7-12.4 23.2-16.1 34.8-7.8zM296 264V24c0-13.3-10.7-24-24-24h-32c-13.3 0-24 10.7-24 24v240c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24z"],
    "print": [512, 512, [], "f02f", "M464 192h-16V81.941a24 24 0 0 0-7.029-16.97L383.029 7.029A24 24 0 0 0 366.059 0H88C74.745 0 64 10.745 64 24v168H48c-26.51 0-48 21.49-48 48v132c0 6.627 5.373 12 12 12h52v104c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V384h52c6.627 0 12-5.373 12-12V240c0-26.51-21.49-48-48-48zm-80 256H128v-96h256v96zM128 224V64h192v40c0 13.2 10.8 24 24 24h40v96H128zm304 72c-13.254 0-24-10.746-24-24s10.746-24 24-24 24 10.746 24 24-10.746 24-24 24z"],
    "puzzle-piece": [576, 512, [], "f12e", "M519.442 288.651c-41.519 0-59.5 31.593-82.058 31.593C377.409 320.244 432 144 432 144s-196.288 80-196.288-3.297c0-35.827 36.288-46.25 36.288-85.985C272 19.216 243.885 0 210.539 0c-34.654 0-66.366 18.891-66.366 56.346 0 41.364 31.711 59.277 31.711 81.75C175.885 207.719 0 166.758 0 166.758v333.237s178.635 41.047 178.635-28.662c0-22.473-40-40.107-40-81.471 0-37.456 29.25-56.346 63.577-56.346 33.673 0 61.788 19.216 61.788 54.717 0 39.735-36.288 50.158-36.288 85.985 0 60.803 129.675 25.73 181.23 25.73 0 0-34.725-120.101 25.827-120.101 35.962 0 46.423 36.152 86.308 36.152C556.712 416 576 387.99 576 354.443c0-34.199-18.962-65.792-56.558-65.792z"],
    "qrcode": [448, 512, [], "f029", "M0 224h192V32H0v192zM64 96h64v64H64V96zm192-64v192h192V32H256zm128 128h-64V96h64v64zM0 480h192V288H0v192zm64-128h64v64H64v-64zm352-64h32v128h-96v-32h-32v96h-64V288h96v32h64v-32zm0 160h32v32h-32v-32zm-64 0h32v32h-32v-32z"],
    "question": [384, 512, [], "f128", "M202.021 0C122.202 0 70.503 32.703 29.914 91.026c-7.363 10.58-5.093 25.086 5.178 32.874l43.138 32.709c10.373 7.865 25.132 6.026 33.253-4.148 25.049-31.381 43.63-49.449 82.757-49.449 30.764 0 68.816 19.799 68.816 49.631 0 22.552-18.617 34.134-48.993 51.164-35.423 19.86-82.299 44.576-82.299 106.405V320c0 13.255 10.745 24 24 24h72.471c13.255 0 24-10.745 24-24v-5.773c0-42.86 125.268-44.645 125.268-160.627C377.504 66.256 286.902 0 202.021 0zM192 373.459c-38.196 0-69.271 31.075-69.271 69.271 0 38.195 31.075 69.27 69.271 69.27s69.271-31.075 69.271-69.271-31.075-69.27-69.271-69.27z"],
    "question-circle": [512, 512, [], "f059", "M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zM262.655 90c-54.497 0-89.255 22.957-116.549 63.758-3.536 5.286-2.353 12.415 2.715 16.258l34.699 26.31c5.205 3.947 12.621 3.008 16.665-2.122 17.864-22.658 30.113-35.797 57.303-35.797 20.429 0 45.698 13.148 45.698 32.958 0 14.976-12.363 22.667-32.534 33.976C247.128 238.528 216 254.941 216 296v4c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-1.333c0-28.462 83.186-29.647 83.186-106.667 0-58.002-60.165-102-116.531-102zM256 338c-25.365 0-46 20.635-46 46 0 25.364 20.635 46 46 46s46-20.636 46-46c0-25.365-20.635-46-46-46z"],
    "quidditch": [640, 512, [], "f458", "M256.5 216.8L343.2 326s-16.6 102.4-76.6 150.1C206.7 523.8 0 510.2 0 510.2s3.8-23.1 11-55.4l94.6-112.2c4-4.7-.9-11.6-6.6-9.5l-60.4 22.1c14.4-41.7 32.7-80 54.6-97.5 59.9-47.8 163.3-40.9 163.3-40.9zm238 135c-44 0-79.8 35.8-79.8 79.9 0 44.1 35.7 79.9 79.8 79.9 44.1 0 79.8-35.8 79.8-79.9 0-44.2-35.8-79.9-79.8-79.9zM636.5 31L616.7 6c-5.5-6.9-15.5-8-22.4-2.6L361.8 181.3l-34.1-43c-5.1-6.4-15.1-5.2-18.6 2.2l-25.3 54.6 86.7 109.2 58.8-12.4c8-1.7 11.4-11.2 6.3-17.6l-34.1-42.9L634 53.5c6.9-5.5 8-15.6 2.5-22.5z"],
    "quote-left": [512, 512, [], "f10d", "M0 432V304C0 166.982 63.772 67.676 193.827 32.828 209.052 28.748 224 40.265 224 56.027v33.895c0 10.057-6.228 19.133-15.687 22.55C142.316 136.312 104 181.946 104 256h72c26.51 0 48 21.49 48 48v128c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48zm336 48h128c26.51 0 48-21.49 48-48V304c0-26.51-21.49-48-48-48h-72c0-74.054 38.316-119.688 104.313-143.528C505.772 109.055 512 99.979 512 89.922V56.027c0-15.762-14.948-27.279-30.173-23.199C351.772 67.676 288 166.982 288 304v128c0 26.51 21.49 48 48 48z"],
    "quote-right": [512, 512, [], "f10e", "M512 80v128c0 137.018-63.772 236.324-193.827 271.172-15.225 4.08-30.173-7.437-30.173-23.199v-33.895c0-10.057 6.228-19.133 15.687-22.55C369.684 375.688 408 330.054 408 256h-72c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h128c26.51 0 48 21.49 48 48zM176 32H48C21.49 32 0 53.49 0 80v128c0 26.51 21.49 48 48 48h72c0 74.054-38.316 119.688-104.313 143.528C6.228 402.945 0 412.021 0 422.078v33.895c0 15.762 14.948 27.279 30.173 23.199C160.228 444.324 224 345.018 224 208V80c0-26.51-21.49-48-48-48z"],
    "random": [512, 512, [], "f074", "M504.971 359.029c9.373 9.373 9.373 24.569 0 33.941l-80 79.984c-15.01 15.01-40.971 4.49-40.971-16.971V416h-58.785a12.004 12.004 0 0 1-8.773-3.812l-70.556-75.596 53.333-57.143L352 336h32v-39.981c0-21.438 25.943-31.998 40.971-16.971l80 79.981zM12 176h84l52.781 56.551 53.333-57.143-70.556-75.596A11.999 11.999 0 0 0 122.785 96H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12zm372 0v39.984c0 21.46 25.961 31.98 40.971 16.971l80-79.984c9.373-9.373 9.373-24.569 0-33.941l-80-79.981C409.943 24.021 384 34.582 384 56.019V96h-58.785a12.004 12.004 0 0 0-8.773 3.812L96 336H12c-6.627 0-12 5.373-12 12v56c0 6.627 5.373 12 12 12h110.785c3.326 0 6.503-1.381 8.773-3.812L352 176h32z"],
    "recycle": [512, 512, [], "f1b8", "M184.561 261.903c3.232 13.997-12.123 24.635-24.068 17.168l-40.736-25.455-50.867 81.402C55.606 356.273 70.96 384 96.012 384H148c6.627 0 12 5.373 12 12v40c0 6.627-5.373 12-12 12H96.115c-75.334 0-121.302-83.048-81.408-146.88l50.822-81.388-40.725-25.448c-12.081-7.547-8.966-25.961 4.879-29.158l110.237-25.45c8.611-1.988 17.201 3.381 19.189 11.99l25.452 110.237zm98.561-182.915l41.289 66.076-40.74 25.457c-12.051 7.528-9 25.953 4.879 29.158l110.237 25.45c8.672 1.999 17.215-3.438 19.189-11.99l25.45-110.237c3.197-13.844-11.99-24.719-24.068-17.168l-40.687 25.424-41.263-66.082c-37.521-60.033-125.209-60.171-162.816 0l-17.963 28.766c-3.51 5.62-1.8 13.021 3.82 16.533l33.919 21.195c5.62 3.512 13.024 1.803 16.536-3.817l17.961-28.743c12.712-20.341 41.973-19.676 54.257-.022zM497.288 301.12l-27.515-44.065c-3.511-5.623-10.916-7.334-16.538-3.821l-33.861 21.159c-5.62 3.512-7.33 10.915-3.818 16.536l27.564 44.112c13.257 21.211-2.057 48.96-27.136 48.96H320V336.02c0-14.213-17.242-21.383-27.313-11.313l-80 79.981c-6.249 6.248-6.249 16.379 0 22.627l80 79.989C302.689 517.308 320 510.3 320 495.989V448h95.88c75.274 0 121.335-82.997 81.408-146.88z"],
    "redo": [512, 512, [], "f01e", "M500.333 0h-47.411c-6.853 0-12.314 5.729-11.986 12.574l3.966 82.759C399.416 41.899 331.672 8 256.001 8 119.34 8 7.899 119.526 8 256.187 8.101 393.068 119.096 504 256 504c63.926 0 122.202-24.187 166.178-63.908 5.113-4.618 5.354-12.561.482-17.433l-33.971-33.971c-4.466-4.466-11.64-4.717-16.38-.543C341.308 415.448 300.606 432 256 432c-97.267 0-176-78.716-176-176 0-97.267 78.716-176 176-176 60.892 0 114.506 30.858 146.099 77.8l-101.525-4.865c-6.845-.328-12.574 5.133-12.574 11.986v47.411c0 6.627 5.373 12 12 12h200.333c6.627 0 12-5.373 12-12V12c0-6.627-5.373-12-12-12z"],
    "redo-alt": [512, 512, [], "f2f9", "M256.455 8c66.269.119 126.437 26.233 170.859 68.685l35.715-35.715C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.75c-30.864-28.899-70.801-44.907-113.23-45.273-92.398-.798-170.283 73.977-169.484 169.442C88.764 348.009 162.184 424 256 424c41.127 0 79.997-14.678 110.629-41.556 4.743-4.161 11.906-3.908 16.368.553l39.662 39.662c4.872 4.872 4.631 12.815-.482 17.433C378.202 479.813 319.926 504 256 504 119.034 504 8.001 392.967 8 256.002 7.999 119.193 119.646 7.755 256.455 8z"],
    "registered": [512, 512, [], "f25d", "M285.363 207.475c0 18.6-9.831 28.431-28.431 28.431h-29.876v-56.14h23.378c28.668 0 34.929 8.773 34.929 27.709zM504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM363.411 360.414c-46.729-84.825-43.299-78.636-44.702-80.98 23.432-15.172 37.945-42.979 37.945-74.486 0-54.244-31.5-89.252-105.498-89.252h-70.667c-13.255 0-24 10.745-24 24V372c0 13.255 10.745 24 24 24h22.567c13.255 0 24-10.745 24-24v-71.663h25.556l44.129 82.937a24.001 24.001 0 0 0 21.188 12.727h24.464c18.261-.001 29.829-19.591 21.018-35.587z"],
    "reply": [512, 512, [], "f3e5", "M8.309 189.836L184.313 37.851C199.719 24.546 224 35.347 224 56.015v80.053c160.629 1.839 288 34.032 288 186.258 0 61.441-39.581 122.309-83.333 154.132-13.653 9.931-33.111-2.533-28.077-18.631 45.344-145.012-21.507-183.51-176.59-185.742V360c0 20.7-24.3 31.453-39.687 18.164l-176.004-152c-11.071-9.562-11.086-26.753 0-36.328z"],
    "reply-all": [576, 512, [], "f122", "M136.309 189.836L312.313 37.851C327.72 24.546 352 35.348 352 56.015v82.763c129.182 10.231 224 52.212 224 183.548 0 61.441-39.582 122.309-83.333 154.132-13.653 9.931-33.111-2.533-28.077-18.631 38.512-123.162-3.922-169.482-112.59-182.015v84.175c0 20.701-24.3 31.453-39.687 18.164L136.309 226.164c-11.071-9.561-11.086-26.753 0-36.328zm-128 36.328L184.313 378.15C199.7 391.439 224 380.687 224 359.986v-15.818l-108.606-93.785A55.96 55.96 0 0 1 96 207.998a55.953 55.953 0 0 1 19.393-42.38L224 71.832V56.015c0-20.667-24.28-31.469-39.687-18.164L8.309 189.836c-11.086 9.575-11.071 26.767 0 36.328z"],
    "retweet": [640, 512, [], "f079", "M629.657 343.598L528.971 444.284c-9.373 9.372-24.568 9.372-33.941 0L394.343 343.598c-9.373-9.373-9.373-24.569 0-33.941l10.823-10.823c9.562-9.562 25.133-9.34 34.419.492L480 342.118V160H292.451a24.005 24.005 0 0 1-16.971-7.029l-16-16C244.361 121.851 255.069 96 276.451 96H520c13.255 0 24 10.745 24 24v222.118l40.416-42.792c9.285-9.831 24.856-10.054 34.419-.492l10.823 10.823c9.372 9.372 9.372 24.569-.001 33.941zm-265.138 15.431A23.999 23.999 0 0 0 347.548 352H160V169.881l40.416 42.792c9.286 9.831 24.856 10.054 34.419.491l10.822-10.822c9.373-9.373 9.373-24.569 0-33.941L144.971 67.716c-9.373-9.373-24.569-9.373-33.941 0L10.343 168.402c-9.373 9.373-9.373 24.569 0 33.941l10.822 10.822c9.562 9.562 25.133 9.34 34.419-.491L96 169.881V392c0 13.255 10.745 24 24 24h243.549c21.382 0 32.09-25.851 16.971-40.971l-16.001-16z"],
    "road": [576, 512, [], "f018", "M567.3 383.6L429.9 78.2C426 69.5 417.4 64 408 64h-96.1l1.9 18.8c.7 7.1-4.8 13.2-11.9 13.2H274c-7.1 0-12.7-6.2-11.9-13.2L264 64h-96c-9.4 0-18 5.5-21.9 14.2L8.7 383.6C3.2 395.8 0 409.6 0 424c0 13.3 10.7 24 24 24h213.6c-7.1 0-12.7-6.2-11.9-13.2l10.8-104c.6-6.1 5.8-10.8 11.9-10.8h79.2c6.1 0 11.3 4.6 11.9 10.8l10.8 104c.7 7.1-4.8 13.2-11.9 13.2H552c13.2 0 24-10.7 24-24 0-13.9-3-27.7-8.7-40.4zM254.7 154.8l3.3-32c.6-6.1 5.8-10.8 11.9-10.8h36.2c6.1 0 11.3 4.6 11.9 10.8l3.3 32c.7 7.1-4.8 13.2-11.9 13.2h-42.8c-7.1 0-12.7-6.2-11.9-13.2zM321.8 288h-67.6c-7.1 0-12.7-6.2-11.9-13.2l7.4-72c.6-6.1 5.8-10.8 11.9-10.8h52.7c6.1 0 11.3 4.6 11.9 10.8l7.4 72c.9 7-4.7 13.2-11.8 13.2z"],
    "rocket": [512, 512, [], "f135", "M505.1 19.1C503.8 13 499 8.2 492.9 6.9 460.7 0 435.5 0 410.4 0 307.2 0 245.3 55.2 199.1 128H94.9c-18.2 0-34.8 10.3-42.9 26.5L2.6 253.3c-8 16 3.6 34.7 21.5 34.7h95.1c-5.9 12.8-11.9 25.5-18 37.7-3.1 6.2-1.9 13.6 3 18.5l63.6 63.6c4.9 4.9 12.3 6.1 18.5 3 12.2-6.1 24.9-12 37.7-17.9V488c0 17.8 18.8 29.4 34.7 21.5l98.7-49.4c16.3-8.1 26.5-24.8 26.5-42.9V312.8c72.6-46.3 128-108.4 128-211.1.1-25.2.1-50.4-6.8-82.6zM400 160c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z"],
    "rss": [448, 512, [], "f09e", "M128.081 415.959c0 35.369-28.672 64.041-64.041 64.041S0 451.328 0 415.959s28.672-64.041 64.041-64.041 64.04 28.673 64.04 64.041zm175.66 47.25c-8.354-154.6-132.185-278.587-286.95-286.95C7.656 175.765 0 183.105 0 192.253v48.069c0 8.415 6.49 15.472 14.887 16.018 111.832 7.284 201.473 96.702 208.772 208.772.547 8.397 7.604 14.887 16.018 14.887h48.069c9.149.001 16.489-7.655 15.995-16.79zm144.249.288C439.596 229.677 251.465 40.445 16.503 32.01 7.473 31.686 0 38.981 0 48.016v48.068c0 8.625 6.835 15.645 15.453 15.999 191.179 7.839 344.627 161.316 352.465 352.465.353 8.618 7.373 15.453 15.999 15.453h48.068c9.034-.001 16.329-7.474 16.005-16.504z"],
    "rss-square": [448, 512, [], "f143", "M400 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM112 416c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm157.533 0h-34.335c-6.011 0-11.051-4.636-11.442-10.634-5.214-80.05-69.243-143.92-149.123-149.123-5.997-.39-10.633-5.431-10.633-11.441v-34.335c0-6.535 5.468-11.777 11.994-11.425 110.546 5.974 198.997 94.536 204.964 204.964.352 6.526-4.89 11.994-11.425 11.994zm103.027 0h-34.334c-6.161 0-11.175-4.882-11.427-11.038-5.598-136.535-115.204-246.161-251.76-251.76C68.882 152.949 64 147.935 64 141.774V107.44c0-6.454 5.338-11.664 11.787-11.432 167.83 6.025 302.21 141.191 308.205 308.205.232 6.449-4.978 11.787-11.432 11.787z"],
    "ruble-sign": [384, 512, [], "f158", "M239.36 320C324.48 320 384 260.542 384 175.071S324.48 32 239.36 32H76c-6.627 0-12 5.373-12 12v206.632H12c-6.627 0-12 5.373-12 12V308c0 6.627 5.373 12 12 12h52v32H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h52v52c0 6.627 5.373 12 12 12h58.56c6.627 0 12-5.373 12-12v-52H308c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12H146.56v-32h92.8zm-92.8-219.252h78.72c46.72 0 74.88 29.11 74.88 74.323 0 45.832-28.16 75.561-76.16 75.561h-77.44V100.748z"],
    "rupee-sign": [320, 512, [], "f156", "M308 96c6.627 0 12-5.373 12-12V44c0-6.627-5.373-12-12-12H12C5.373 32 0 37.373 0 44v44.748c0 6.627 5.373 12 12 12h85.28c27.308 0 48.261 9.958 60.97 27.252H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h158.757c-6.217 36.086-32.961 58.632-74.757 58.632H12c-6.627 0-12 5.373-12 12v53.012c0 3.349 1.4 6.546 3.861 8.818l165.052 152.356a12.001 12.001 0 0 0 8.139 3.182h82.562c10.924 0 16.166-13.408 8.139-20.818L116.871 319.906c76.499-2.34 131.144-53.395 138.318-127.906H308c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-58.69c-3.486-11.541-8.28-22.246-14.252-32H308z"],
    "save": [448, 512, [], "f0c7", "M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"],
    "search": [512, 512, [], "f002", "M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"],
    "search-minus": [512, 512, [], "f010", "M304 192v32c0 6.6-5.4 12-12 12H124c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h168c6.6 0 12 5.4 12 12zm201 284.7L476.7 505c-9.4 9.4-24.6 9.4-33.9 0L343 405.3c-4.5-4.5-7-10.6-7-17V372c-35.3 27.6-79.7 44-128 44C93.1 416 0 322.9 0 208S93.1 0 208 0s208 93.1 208 208c0 48.3-16.4 92.7-44 128h16.3c6.4 0 12.5 2.5 17 7l99.7 99.7c9.3 9.4 9.3 24.6 0 34zM344 208c0-75.2-60.8-136-136-136S72 132.8 72 208s60.8 136 136 136 136-60.8 136-136z"],
    "search-plus": [512, 512, [], "f00e", "M304 192v32c0 6.6-5.4 12-12 12h-56v56c0 6.6-5.4 12-12 12h-32c-6.6 0-12-5.4-12-12v-56h-56c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h56v-56c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v56h56c6.6 0 12 5.4 12 12zm201 284.7L476.7 505c-9.4 9.4-24.6 9.4-33.9 0L343 405.3c-4.5-4.5-7-10.6-7-17V372c-35.3 27.6-79.7 44-128 44C93.1 416 0 322.9 0 208S93.1 0 208 0s208 93.1 208 208c0 48.3-16.4 92.7-44 128h16.3c6.4 0 12.5 2.5 17 7l99.7 99.7c9.3 9.4 9.3 24.6 0 34zM344 208c0-75.2-60.8-136-136-136S72 132.8 72 208s60.8 136 136 136 136-60.8 136-136z"],
    "server": [512, 512, [], "f233", "M480 160H32c-17.673 0-32-14.327-32-32V64c0-17.673 14.327-32 32-32h448c17.673 0 32 14.327 32 32v64c0 17.673-14.327 32-32 32zm-48-88c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm-64 0c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm112 248H32c-17.673 0-32-14.327-32-32v-64c0-17.673 14.327-32 32-32h448c17.673 0 32 14.327 32 32v64c0 17.673-14.327 32-32 32zm-48-88c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm-64 0c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm112 248H32c-17.673 0-32-14.327-32-32v-64c0-17.673 14.327-32 32-32h448c17.673 0 32 14.327 32 32v64c0 17.673-14.327 32-32 32zm-48-88c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24zm-64 0c-13.255 0-24 10.745-24 24s10.745 24 24 24 24-10.745 24-24-10.745-24-24-24z"],
    "share": [512, 512, [], "f064", "M503.691 189.836L327.687 37.851C312.281 24.546 288 35.347 288 56.015v80.053C127.371 137.907 0 170.1 0 322.326c0 61.441 39.581 122.309 83.333 154.132 13.653 9.931 33.111-2.533 28.077-18.631C66.066 312.814 132.917 274.316 288 272.085V360c0 20.7 24.3 31.453 39.687 18.164l176.004-152c11.071-9.562 11.086-26.753 0-36.328z"],
    "share-alt": [448, 512, [], "f1e0", "M352 320c-22.608 0-43.387 7.819-59.79 20.895l-102.486-64.054a96.551 96.551 0 0 0 0-41.683l102.486-64.054C308.613 184.181 329.392 192 352 192c53.019 0 96-42.981 96-96S405.019 0 352 0s-96 42.981-96 96c0 7.158.79 14.13 2.276 20.841L155.79 180.895C139.387 167.819 118.608 160 96 160c-53.019 0-96 42.981-96 96s42.981 96 96 96c22.608 0 43.387-7.819 59.79-20.895l102.486 64.054A96.301 96.301 0 0 0 256 416c0 53.019 42.981 96 96 96s96-42.981 96-96-42.981-96-96-96z"],
    "share-alt-square": [448, 512, [], "f1e1", "M448 80v352c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48V80c0-26.51 21.49-48 48-48h352c26.51 0 48 21.49 48 48zM304 296c-14.562 0-27.823 5.561-37.783 14.671l-67.958-40.775a56.339 56.339 0 0 0 0-27.793l67.958-40.775C276.177 210.439 289.438 216 304 216c30.928 0 56-25.072 56-56s-25.072-56-56-56-56 25.072-56 56c0 4.797.605 9.453 1.74 13.897l-67.958 40.775C171.823 205.561 158.562 200 144 200c-30.928 0-56 25.072-56 56s25.072 56 56 56c14.562 0 27.823-5.561 37.783-14.671l67.958 40.775a56.088 56.088 0 0 0-1.74 13.897c0 30.928 25.072 56 56 56s56-25.072 56-56C360 321.072 334.928 296 304 296z"],
    "share-square": [576, 512, [], "f14d", "M568.482 177.448L424.479 313.433C409.3 327.768 384 317.14 384 295.985v-71.963c-144.575.97-205.566 35.113-164.775 171.353 4.483 14.973-12.846 26.567-25.006 17.33C155.252 383.105 120 326.488 120 269.339c0-143.937 117.599-172.5 264-173.312V24.012c0-21.174 25.317-31.768 40.479-17.448l144.003 135.988c10.02 9.463 10.028 25.425 0 34.896zM384 379.128V448H64V128h50.916a11.99 11.99 0 0 0 8.648-3.693c14.953-15.568 32.237-27.89 51.014-37.676C185.708 80.83 181.584 64 169.033 64H48C21.49 64 0 85.49 0 112v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48v-88.806c0-8.288-8.197-14.066-16.011-11.302a71.83 71.83 0 0 1-34.189 3.377c-7.27-1.046-13.8 4.514-13.8 11.859z"],
    "shekel-sign": [448, 512, [], "f20b", "M170.12 96H80v372c0 6.627-5.373 12-12 12H12c-6.627 0-12-5.373-12-12V44c0-6.627 5.373-12 12-12h168.36C265.48 32 325 89.6 325 175.071V359c0 6.627-5.373 12-12 12h-44c-13.255 0-24-10.745-24-24V170.323C245 125.11 216.839 96 170.12 96zM436 32h-56c-6.627 0-12 5.373-12 12v372h-90.12c-46.72 0-74.88-29.11-74.88-74.323V165c0-13.255-10.745-24-24-24h-44c-6.627 0-12 5.373-12 12v183.929C123 422.4 182.52 480 267.64 480H436c6.627 0 12-5.373 12-12V44c0-6.627-5.373-12-12-12z"],
    "shield-alt": [512, 512, [], "f3ed", "M496 128c0 221.282-135.934 344.645-221.539 380.308a48 48 0 0 1-36.923 0C130.495 463.713 16 326.487 16 128a48 48 0 0 1 29.539-44.308l192-80a48 48 0 0 1 36.923 0l192 80A48 48 0 0 1 496 128zM256 446.313l.066.034c93.735-46.689 172.497-156.308 175.817-307.729L256 65.333v380.98z"],
    "ship": [640, 512, [], "f21a", "M496.616 372.639l70.012-70.012c16.899-16.9 9.942-45.771-12.836-53.092L512 236.102V96c0-17.673-14.327-32-32-32h-64V24c0-13.255-10.745-24-24-24H248c-13.255 0-24 10.745-24 24v40h-64c-17.673 0-32 14.327-32 32v140.102l-41.792 13.433c-22.753 7.313-29.754 36.173-12.836 53.092l70.012 70.012C125.828 416.287 85.587 448 24 448c-13.255 0-24 10.745-24 24v16c0 13.255 10.745 24 24 24 61.023 0 107.499-20.61 143.258-59.396C181.677 487.432 216.021 512 256 512h128c39.979 0 74.323-24.568 88.742-59.396C508.495 491.384 554.968 512 616 512c13.255 0 24-10.745 24-24v-16c0-13.255-10.745-24-24-24-60.817 0-101.542-31.001-119.384-75.361zM192 128h256v87.531l-118.208-37.995a31.995 31.995 0 0 0-19.584 0L192 215.531V128z"],
    "shipping-fast": [640, 512, [], "f48b", "M624 352h-16V243.9c0-12.7-5.1-24.9-14.1-33.9L494 110.1c-9-9-21.2-14.1-33.9-14.1H416V48c0-26.5-21.5-48-48-48H112C85.5 0 64 21.5 64 48v48H8c-4.4 0-8 3.6-8 8v16c0 4.4 3.6 8 8 8h272c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H40c-4.4 0-8 3.6-8 8v16c0 4.4 3.6 8 8 8h208c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H8c-4.4 0-8 3.6-8 8v16c0 4.4 3.6 8 8 8h208c4.4 0 8 3.6 8 8v16c0 4.4-3.6 8-8 8H64v128c0 53 43 96 96 96s96-43 96-96h128c0 53 43 96 96 96s96-43 96-96h48c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zM160 464c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm320 0c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm80-208H416V144h44.1l99.9 99.9V256z"],
    "shopping-bag": [448, 512, [], "f290", "M352 160v-32C352 57.42 294.579 0 224 0 153.42 0 96 57.42 96 128v32H0v272c0 44.183 35.817 80 80 80h288c44.183 0 80-35.817 80-80V160h-96zm-192-32c0-35.29 28.71-64 64-64s64 28.71 64 64v32H160v-32zm160 120c-13.255 0-24-10.745-24-24s10.745-24 24-24 24 10.745 24 24-10.745 24-24 24zm-192 0c-13.255 0-24-10.745-24-24s10.745-24 24-24 24 10.745 24 24-10.745 24-24 24z"],
    "shopping-basket": [576, 512, [], "f291", "M576 216v16c0 13.255-10.745 24-24 24h-8l-26.113 182.788C514.509 462.435 494.257 480 470.37 480H105.63c-23.887 0-44.139-17.565-47.518-41.212L32 256h-8c-13.255 0-24-10.745-24-24v-16c0-13.255 10.745-24 24-24h67.341l106.78-146.821c10.395-14.292 30.407-17.453 44.701-7.058 14.293 10.395 17.453 30.408 7.058 44.701L170.477 192h235.046L326.12 82.821c-10.395-14.292-7.234-34.306 7.059-44.701 14.291-10.395 34.306-7.235 44.701 7.058L484.659 192H552c13.255 0 24 10.745 24 24zM312 392V280c0-13.255-10.745-24-24-24s-24 10.745-24 24v112c0 13.255 10.745 24 24 24s24-10.745 24-24zm112 0V280c0-13.255-10.745-24-24-24s-24 10.745-24 24v112c0 13.255 10.745 24 24 24s24-10.745 24-24zm-224 0V280c0-13.255-10.745-24-24-24s-24 10.745-24 24v112c0 13.255 10.745 24 24 24s24-10.745 24-24z"],
    "shopping-cart": [576, 512, [], "f07a", "M528.12 301.319l47.273-208C578.806 78.301 567.391 64 551.99 64H159.208l-9.166-44.81C147.758 8.021 137.93 0 126.529 0H24C10.745 0 0 10.745 0 24v16c0 13.255 10.745 24 24 24h69.883l70.248 343.435C147.325 417.1 136 435.222 136 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-15.674-6.447-29.835-16.824-40h209.647C430.447 426.165 424 440.326 424 456c0 30.928 25.072 56 56 56s56-25.072 56-56c0-22.172-12.888-41.332-31.579-50.405l5.517-24.276c3.413-15.018-8.002-29.319-23.403-29.319H218.117l-6.545-32h293.145c11.206 0 20.92-7.754 23.403-18.681z"],
    "shower": [512, 512, [], "f2cc", "M389.66 135.6L231.6 293.66c-9.37 9.37-24.57 9.37-33.94 0l-11.32-11.32c-9.37-9.37-9.37-24.57 0-33.94l.11-.11c-34.03-40.21-35.16-98.94-3.39-140.38-11.97-7.55-26.14-11.91-41.3-11.91C98.88 96 64 130.88 64 173.76V480H0V173.76C0 95.59 63.59 32 141.76 32c36.93 0 70.61 14.2 95.86 37.42 35.9-11.51 76.5-4.5 106.67 21.03l.11-.11c9.37-9.37 24.57-9.37 33.94 0l11.32 11.32c9.37 9.37 9.37 24.57 0 33.94zM384 208c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16zm32 0c0-8.837 7.163-16 16-16s16 7.163 16 16-7.163 16-16 16-16-7.163-16-16zm96 0c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16zm-160 32c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16zm48-16c8.837 0 16 7.163 16 16s-7.163 16-16 16-16-7.163-16-16 7.163-16 16-16zm80 16c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16zm-160 32c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16zm32 0c0-8.837 7.163-16 16-16s16 7.163 16 16-7.163 16-16 16-16-7.163-16-16zm96 0c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16zm-128 32c0-8.837 7.163-16 16-16s16 7.163 16 16-7.163 16-16 16-16-7.163-16-16zm96 0c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16zm-96 32c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16zm64 0c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16zm-32 32c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16zm-32 32c0 8.837-7.163 16-16 16s-16-7.163-16-16 7.163-16 16-16 16 7.163 16 16z"],
    "sign-in-alt": [512, 512, [], "f2f6", "M416 448h-84c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h84c17.7 0 32-14.3 32-32V160c0-17.7-14.3-32-32-32h-84c-6.6 0-12-5.4-12-12V76c0-6.6 5.4-12 12-12h84c53 0 96 43 96 96v192c0 53-43 96-96 96zm-47-201L201 79c-15-15-41-4.5-41 17v96H24c-13.3 0-24 10.7-24 24v96c0 13.3 10.7 24 24 24h136v96c0 21.5 26 32 41 17l168-168c9.3-9.4 9.3-24.6 0-34z"],
    "sign-language": [448, 512, [], "f2a7", "M91.434 483.987c-.307-16.018 13.109-29.129 29.13-29.129h62.293v-5.714H56.993c-16.021 0-29.437-13.111-29.13-29.129C28.16 404.491 40.835 392 56.428 392h126.429v-5.714H29.136c-16.021 0-29.437-13.111-29.13-29.129.297-15.522 12.973-28.013 28.566-28.013h154.286v-5.714H57.707c-16.021 0-29.437-13.111-29.13-29.129.297-15.522 12.973-28.013 28.566-28.013h168.566l-31.085-22.606c-12.762-9.281-15.583-27.149-6.302-39.912 9.281-12.761 27.15-15.582 39.912-6.302l123.361 89.715a34.287 34.287 0 0 1 14.12 27.728v141.136c0 15.91-10.946 29.73-26.433 33.374l-80.471 18.934a137.16 137.16 0 0 1-31.411 3.646H120c-15.593-.001-28.269-12.492-28.566-28.014zm73.249-225.701h36.423l-11.187-8.136c-18.579-13.511-20.313-40.887-3.17-56.536l-13.004-16.7c-9.843-12.641-28.43-15.171-40.88-5.088-12.065 9.771-14.133 27.447-4.553 39.75l36.371 46.71zm283.298-2.103l-5.003-152.452c-.518-15.771-13.722-28.136-29.493-27.619-15.773.518-28.137 13.722-27.619 29.493l1.262 38.415L283.565 11.019c-9.58-12.303-27.223-14.63-39.653-5.328-12.827 9.599-14.929 28.24-5.086 40.881l76.889 98.745-4.509 3.511-94.79-121.734c-9.58-12.303-27.223-14.63-39.653-5.328-12.827 9.599-14.929 28.24-5.086 40.881l94.443 121.288-4.509 3.511-77.675-99.754c-9.58-12.303-27.223-14.63-39.653-5.328-12.827 9.599-14.929 28.24-5.086 40.881l52.053 66.849c12.497-8.257 29.055-8.285 41.69.904l123.36 89.714c10.904 7.93 17.415 20.715 17.415 34.198v16.999l61.064-47.549a34.285 34.285 0 0 0 13.202-28.177z"],
    "sign-out-alt": [512, 512, [], "f2f5", "M497 273L329 441c-15 15-41 4.5-41-17v-96H152c-13.3 0-24-10.7-24-24v-96c0-13.3 10.7-24 24-24h136V88c0-21.4 25.9-32 41-17l168 168c9.3 9.4 9.3 24.6 0 34zM192 436v-40c0-6.6-5.4-12-12-12H96c-17.7 0-32-14.3-32-32V160c0-17.7 14.3-32 32-32h84c6.6 0 12-5.4 12-12V76c0-6.6-5.4-12-12-12H96c-53 0-96 43-96 96v192c0 53 43 96 96 96h84c6.6 0 12-5.4 12-12z"],
    "signal": [640, 512, [], "f012", "M36 384h56c6.6 0 12 5.4 12 12v104c0 6.6-5.4 12-12 12H36c-6.6 0-12-5.4-12-12V396c0-6.6 5.4-12 12-12zm116-36v152c0 6.6 5.4 12 12 12h56c6.6 0 12-5.4 12-12V348c0-6.6-5.4-12-12-12h-56c-6.6 0-12 5.4-12 12zm128-80v232c0 6.6 5.4 12 12 12h56c6.6 0 12-5.4 12-12V268c0-6.6-5.4-12-12-12h-56c-6.6 0-12 5.4-12 12zm128-112v344c0 6.6 5.4 12 12 12h56c6.6 0 12-5.4 12-12V156c0-6.6-5.4-12-12-12h-56c-6.6 0-12 5.4-12 12zM536 12v488c0 6.6 5.4 12 12 12h56c6.6 0 12-5.4 12-12V12c0-6.6-5.4-12-12-12h-56c-6.6 0-12 5.4-12 12z"],
    "sitemap": [640, 512, [], "f0e8", "M616 320h-48v-48c0-22.056-17.944-40-40-40H344v-40h48c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24H248c-13.255 0-24 10.745-24 24v144c0 13.255 10.745 24 24 24h48v40H112c-22.056 0-40 17.944-40 40v48H24c-13.255 0-24 10.745-24 24v144c0 13.255 10.745 24 24 24h144c13.255 0 24-10.745 24-24V344c0-13.255-10.745-24-24-24h-48v-40h176v40h-48c-13.255 0-24 10.745-24 24v144c0 13.255 10.745 24 24 24h144c13.255 0 24-10.745 24-24V344c0-13.255-10.745-24-24-24h-48v-40h176v40h-48c-13.255 0-24 10.745-24 24v144c0 13.255 10.745 24 24 24h144c13.255 0 24-10.745 24-24V344c0-13.255-10.745-24-24-24z"],
    "sliders-h": [576, 512, [], "f1de", "M576 80v40c0 6.6-5.4 12-12 12H160v8c0 13.3-10.7 24-24 24h-16c-13.3 0-24-10.7-24-24v-8H12c-6.6 0-12-5.4-12-12V80c0-6.6 5.4-12 12-12h84v-8c0-13.3 10.7-24 24-24h16c13.3 0 24 10.7 24 24v8h404c6.6 0 12 5.4 12 12zm-12 148h-84v-8c0-13.3-10.7-24-24-24h-16c-13.3 0-24 10.7-24 24v8H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h404v8c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24v-8h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12zm0 160H288v-8c0-13.3-10.7-24-24-24h-16c-13.3 0-24 10.7-24 24v8H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h212v8c0 13.3 10.7 24 24 24h16c13.3 0 24-10.7 24-24v-8h276c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12z"],
    "smile": [512, 512, [], "f118", "M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zm-122.526 75.34c11.479-17.755-15.349-35.194-26.873-17.374-53.418 82.627-143.71 82.681-197.164 0-11.502-17.79-38.364-.401-26.873 17.374 66.014 102.107 184.795 102.265 250.91 0zM108 192c0 37.497 30.503 68 68 68s68-30.503 68-68-30.503-68-68-68-68 30.503-68 68zm160.5 0c0 37.221 30.279 67.5 67.5 67.5s67.5-30.279 67.5-67.5-30.279-67.5-67.5-67.5-67.5 30.279-67.5 67.5zm67.5-48a47.789 47.789 0 0 0-22.603 5.647h.015c10.916 0 19.765 8.849 19.765 19.765s-8.849 19.765-19.765 19.765-19.765-8.849-19.765-19.765v-.015A47.789 47.789 0 0 0 288 192c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48zm-160 0a47.789 47.789 0 0 0-22.603 5.647h.015c10.916 0 19.765 8.849 19.765 19.765s-8.849 19.765-19.765 19.765-19.765-8.849-19.765-19.765v-.015A47.789 47.789 0 0 0 128 192c0 26.51 21.49 48 48 48s48-21.49 48-48-21.49-48-48-48z"],
    "snowflake": [448, 512, [], "f2dc", "M444.816 301.639a24.12 24.12 0 0 0 2.661-16.978c-2.725-12.966-15.339-21.245-28.174-18.492l-87.407 25.046L264 256l67.896-35.215 87.407 25.046c12.835 2.753 25.449-5.526 28.174-18.492 2.725-12.966-5.471-25.708-18.305-28.461l-47.477-7.137 53.077-30.956c11.363-6.627 15.257-21.306 8.696-32.785-6.561-11.479-21.091-15.412-32.454-8.785l-53.077 30.956 17.621-45.104c4.057-12.606-2.768-26.146-15.247-30.245-12.478-4.099-25.883 2.797-29.94 15.402l-22.232 88.99-60.38 35.215V144l65.175-63.945c8.778-9.852 7.987-25.027-1.766-33.894-9.753-8.867-24.775-8.068-33.552 1.784l-29.857 37.967V24c0-13.255-10.637-24-23.758-24s-23.758 10.745-23.758 24v61.912l-29.857-37.967c-8.779-9.852-23.799-10.652-33.552-1.784-9.753 8.867-10.543 24.042-1.766 33.894L200.242 144v70.431l-60.38-35.215-22.232-88.99c-4.057-12.605-17.462-19.501-29.94-15.402-12.478 4.099-19.304 17.64-15.247 30.245l17.62 45.104-53.077-30.956c-11.363-6.627-25.893-2.694-32.454 8.785s-2.667 26.157 8.696 32.785l53.077 30.956-47.477 7.137C5.993 201.634-2.203 214.375.523 227.341c2.725 12.965 15.339 21.245 28.174 18.492l87.407-25.046L184 256l-67.896 35.215-87.406-25.045c-12.835-2.753-25.449 5.526-28.174 18.492-2.725 12.967 5.47 25.708 18.305 28.461l47.477 7.137-53.077 30.956C1.866 357.843-2.027 372.521 4.533 384s21.091 15.412 32.454 8.785l53.077-30.956-17.62 45.104a24.157 24.157 0 0 0 2.022 19.428c2.831 4.953 7.416 8.909 13.224 10.816 12.478 4.099 25.883-2.797 29.94-15.402l22.232-88.99 60.38-35.215V368l-65.175 63.945c-8.778 9.852-7.987 25.027 1.766 33.894 9.754 8.868 24.774 8.068 33.552-1.784l29.857-37.967V488c0 13.255 10.637 24 23.758 24s23.758-10.745 23.758-24v-61.912l29.857 37.967A23.59 23.59 0 0 0 295.282 472a23.534 23.534 0 0 0 15.885-6.161c9.753-8.867 10.544-24.042 1.766-33.894L247.758 368v-70.431l60.38 35.215 22.232 88.99c4.057 12.605 17.462 19.501 29.94 15.402 12.479-4.099 19.304-17.64 15.247-30.245l-17.621-45.104 53.077 30.956c11.363 6.627 25.893 2.694 32.454-8.785s2.667-26.157-8.696-32.785l-53.077-30.956 47.477-7.137c6.86-1.469 12.394-5.793 15.645-11.481z"],
    "sort": [320, 512, [], "f0dc", "M41 288h238c21.4 0 32.1 25.9 17 41L177 448c-9.4 9.4-24.6 9.4-33.9 0L24 329c-15.1-15.1-4.4-41 17-41zm255-105L177 64c-9.4-9.4-24.6-9.4-33.9 0L24 183c-15.1 15.1-4.4 41 17 41h238c21.4 0 32.1-25.9 17-41z"],
    "sort-alpha-down": [448, 512, [], "f15d", "M187.298 395.314l-79.984 80.002c-6.248 6.247-16.383 6.245-22.627 0L4.705 395.314C-5.365 385.244 1.807 368 16.019 368H64V48c0-8.837 7.163-16 16-16h32c8.837 0 16 7.163 16 16v320h47.984c14.241 0 21.363 17.264 11.314 27.314zm119.075-180.007A12 12 0 0 1 294.838 224h-35.717c-8.22 0-14.007-8.078-11.362-15.861l57.096-168A12 12 0 0 1 316.217 32h39.566c5.139 0 9.708 3.273 11.362 8.139l57.096 168C426.886 215.922 421.1 224 412.879 224h-35.735a12 12 0 0 1-11.515-8.622l-8.301-28.299h-42.863l-8.092 28.228zm22.857-78.697h13.367l-6.6-22.937-6.767 22.937zm12.575 287.323l67.451-95.698a12 12 0 0 0 2.192-6.913V300c0-6.627-5.373-12-12-12H274.522c-6.627 0-12 5.373-12 12v28.93c0 6.627 5.373 12 12 12h56.469c-.739.991-1.497 2.036-2.27 3.133l-67.203 95.205a12.001 12.001 0 0 0-2.196 6.92V468c0 6.627 5.373 12 12 12h129.355c6.627 0 12-5.373 12-12v-28.93c0-6.627-5.373-12-12-12h-61.146c.74-.993 1.5-2.039 2.274-3.137z"],
    "sort-alpha-up": [448, 512, [], "f15e", "M4.702 116.686l79.984-80.002c6.248-6.247 16.383-6.245 22.627 0l79.981 80.002c10.07 10.07 2.899 27.314-11.314 27.314H128v320c0 8.837-7.163 16-16 16H80c-8.837 0-16-7.163-16-16V144H16.016c-14.241 0-21.363-17.264-11.314-27.314zm301.671 98.621A12 12 0 0 1 294.838 224h-35.717c-8.22 0-14.007-8.078-11.362-15.861l57.096-168A12 12 0 0 1 316.217 32h39.566c5.139 0 9.708 3.273 11.362 8.139l57.096 168C426.886 215.922 421.1 224 412.879 224h-35.735a12 12 0 0 1-11.515-8.622l-8.301-28.299h-42.863l-8.092 28.228zm22.857-78.697h13.367l-6.6-22.937-6.767 22.937zm12.575 287.323l67.451-95.698a12 12 0 0 0 2.192-6.913V300c0-6.627-5.373-12-12-12H274.522c-6.627 0-12 5.373-12 12v28.93c0 6.627 5.373 12 12 12h56.469c-.739.991-1.497 2.036-2.27 3.133l-67.203 95.205a12.001 12.001 0 0 0-2.196 6.92V468c0 6.627 5.373 12 12 12h129.355c6.627 0 12-5.373 12-12v-28.93c0-6.627-5.373-12-12-12h-61.146c.74-.993 1.5-2.039 2.274-3.137z"],
    "sort-amount-down": [512, 512, [], "f160", "M187.298 395.314l-79.984 80.002c-6.248 6.247-16.383 6.245-22.627 0L4.705 395.314C-5.365 385.244 1.807 368 16.019 368H64V48c0-8.837 7.163-16 16-16h32c8.837 0 16 7.163 16 16v320h47.984c14.241 0 21.363 17.264 11.314 27.314zM240 96h256c8.837 0 16-7.163 16-16V48c0-8.837-7.163-16-16-16H240c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16zm-16 112v-32c0-8.837 7.163-16 16-16h192c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16H240c-8.837 0-16-7.163-16-16zm0 256v-32c0-8.837 7.163-16 16-16h64c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16h-64c-8.837 0-16-7.163-16-16zm0-128v-32c0-8.837 7.163-16 16-16h128c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16H240c-8.837 0-16-7.163-16-16z"],
    "sort-amount-up": [512, 512, [], "f161", "M4.702 116.686l79.984-80.002c6.248-6.247 16.383-6.245 22.627 0l79.981 80.002c10.07 10.07 2.899 27.314-11.314 27.314H128v320c0 8.837-7.163 16-16 16H80c-8.837 0-16-7.163-16-16V144H16.016c-14.241 0-21.363-17.264-11.314-27.314zM240 96h256c8.837 0 16-7.163 16-16V48c0-8.837-7.163-16-16-16H240c-8.837 0-16 7.163-16 16v32c0 8.837 7.163 16 16 16zm-16 112v-32c0-8.837 7.163-16 16-16h192c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16H240c-8.837 0-16-7.163-16-16zm0 256v-32c0-8.837 7.163-16 16-16h64c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16h-64c-8.837 0-16-7.163-16-16zm0-128v-32c0-8.837 7.163-16 16-16h128c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16H240c-8.837 0-16-7.163-16-16z"],
    "sort-down": [320, 512, [], "f0dd", "M41 288h238c21.4 0 32.1 25.9 17 41L177 448c-9.4 9.4-24.6 9.4-33.9 0L24 329c-15.1-15.1-4.4-41 17-41z"],
    "sort-numeric-down": [448, 512, [], "f162", "M308.811 113.787l-19.448-20.795c-4.522-4.836-4.274-12.421.556-16.95l43.443-40.741a11.999 11.999 0 0 1 8.209-3.247h31.591c6.627 0 12 5.373 12 12v127.07h25.66c6.627 0 12 5.373 12 12v28.93c0 6.627-5.373 12-12 12H301.649c-6.627 0-12-5.373-12-12v-28.93c0-6.627 5.373-12 12-12h25.414v-57.938c-7.254 6.58-14.211 4.921-18.252.601zm-30.57 238.569c0-32.653 23.865-67.356 68.094-67.356 38.253 0 79.424 28.861 79.424 92.228 0 51.276-32.237 105.772-91.983 105.772-17.836 0-30.546-3.557-38.548-6.781-5.79-2.333-8.789-8.746-6.922-14.703l9.237-29.48c2.035-6.496 9.049-9.983 15.467-7.716 13.029 4.602 27.878 5.275 38.103-4.138-38.742 5.072-72.872-25.36-72.872-67.826zm92.273 19.338c0-22.285-15.302-36.505-25.835-36.505-8.642 0-13.164 7.965-13.164 15.832 0 5.669 1.815 24.168 25.168 24.168 9.973 0 13.377-2.154 13.744-2.731.021-.046.087-.291.087-.764zM175.984 368H128V48c0-8.837-7.163-16-16-16H80c-8.837 0-16 7.163-16 16v320H16.019c-14.212 0-21.384 17.244-11.314 27.314l79.981 80.002c6.245 6.245 16.38 6.247 22.627 0l79.984-80.002c10.05-10.05 2.928-27.314-11.313-27.314z"],
    "sort-numeric-up": [448, 512, [], "f163", "M308.811 113.787l-19.448-20.795c-4.522-4.836-4.274-12.421.556-16.95l43.443-40.741a11.999 11.999 0 0 1 8.209-3.247h31.591c6.627 0 12 5.373 12 12v127.07h25.66c6.627 0 12 5.373 12 12v28.93c0 6.627-5.373 12-12 12H301.649c-6.627 0-12-5.373-12-12v-28.93c0-6.627 5.373-12 12-12h25.414v-57.938c-7.254 6.58-14.211 4.921-18.252.601zm-30.57 238.569c0-32.653 23.865-67.356 68.094-67.356 38.253 0 79.424 28.861 79.424 92.228 0 51.276-32.237 105.772-91.983 105.772-17.836 0-30.546-3.557-38.548-6.781-5.79-2.333-8.789-8.746-6.922-14.703l9.237-29.48c2.035-6.496 9.049-9.983 15.467-7.716 13.029 4.602 27.878 5.275 38.103-4.138-38.742 5.072-72.872-25.36-72.872-67.826zm92.273 19.338c0-22.285-15.302-36.505-25.835-36.505-8.642 0-13.164 7.965-13.164 15.832 0 5.669 1.815 24.168 25.168 24.168 9.973 0 13.377-2.154 13.744-2.731.021-.046.087-.291.087-.764zM16.016 144H64v320c0 8.837 7.163 16 16 16h32c8.837 0 16-7.163 16-16V144h47.981c14.212 0 21.384-17.244 11.314-27.314l-79.981-80.002c-6.245-6.245-16.38-6.247-22.627 0L4.702 116.686C-5.347 126.736 1.775 144 16.016 144z"],
    "sort-up": [320, 512, [], "f0de", "M279 224H41c-21.4 0-32.1-25.9-17-41L143 64c9.4-9.4 24.6-9.4 33.9 0l119 119c15.2 15.1 4.5 41-16.9 41z"],
    "space-shuttle": [640, 512, [], "f197", "M592.604 208.244C559.735 192.836 515.777 184 472 184H186.327c-4.952-6.555-10.585-11.978-16.72-16H376C229.157 137.747 219.403 32 96.003 32H96v128H80V32c-26.51 0-48 28.654-48 64v64c-23.197 0-32 10.032-32 24v40c0 13.983 8.819 24 32 24v16c-23.197 0-32 10.032-32 24v40c0 13.983 8.819 24 32 24v64c0 35.346 21.49 64 48 64V352h16v128h.003c123.4 0 133.154-105.747 279.997-136H169.606c6.135-4.022 11.768-9.445 16.72-16H472c43.777 0 87.735-8.836 120.604-24.244C622.282 289.845 640 271.992 640 256s-17.718-33.845-47.396-47.756zM488 296a8 8 0 0 1-8-8v-64a8 8 0 0 1 8-8c31.909 0 31.942 80 0 80z"],
    "spinner": [512, 512, [], "f110", "M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z"],
    "square": [448, 512, [], "f0c8", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"],
    "square-full": [512, 512, [], "f45c", "M512 512H0V0h512v512z"],
    "star": [576, 512, [], "f005", "M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z"],
    "star-half": [576, 512, [], "f089", "M288 0c-11.4 0-22.8 5.9-28.7 17.8L194 150.2 47.9 171.4c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.1 23 46 46.4 33.7L288 439.6V0z"],
    "step-backward": [448, 512, [], "f048", "M64 468V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12v176.4l195.5-181C352.1 22.3 384 36.6 384 64v384c0 27.4-31.9 41.7-52.5 24.6L136 292.7V468c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12z"],
    "step-forward": [448, 512, [], "f051", "M384 44v424c0 6.6-5.4 12-12 12h-48c-6.6 0-12-5.4-12-12V291.6l-195.5 181C95.9 489.7 64 475.4 64 448V64c0-27.4 31.9-41.7 52.5-24.6L312 219.3V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12z"],
    "stethoscope": [512, 512, [], "f0f1", "M447.1 112c-34.2.5-62.3 28.4-63 62.6-.5 24.3 12.5 45.6 32 56.8V344c0 57.3-50.2 104-112 104-60 0-109.2-44.1-111.9-99.2C265 333.8 320 269.2 320 192V36.6c0-11.4-8.1-21.3-19.3-23.5L237.8.5c-13-2.6-25.6 5.8-28.2 18.8L206.4 35c-2.6 13 5.8 25.6 18.8 28.2l30.7 6.1v121.4c0 52.9-42.2 96.7-95.1 97.2-53.4.5-96.9-42.7-96.9-96V69.4l30.7-6.1c13-2.6 21.4-15.2 18.8-28.2l-3.1-15.7C107.7 6.4 95.1-2 82.1.6L19.3 13C8.1 15.3 0 25.1 0 36.6V192c0 77.3 55.1 142 128.1 156.8C130.7 439.2 208.6 512 304 512c97 0 176-75.4 176-168V231.4c19.1-11.1 32-31.7 32-55.4 0-35.7-29.2-64.5-64.9-64zm.9 80c-8.8 0-16-7.2-16-16s7.2-16 16-16 16 7.2 16 16-7.2 16-16 16z"],
    "sticky-note": [448, 512, [], "f249", "M312 320h136V56c0-13.3-10.7-24-24-24H24C10.7 32 0 42.7 0 56v400c0 13.3 10.7 24 24 24h264V344c0-13.2 10.8-24 24-24zm129 55l-98 98c-4.5 4.5-10.6 7-17 7h-6V352h128v6.1c0 6.3-2.5 12.4-7 16.9z"],
    "stop": [448, 512, [], "f04d", "M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"],
    "stop-circle": [512, 512, [], "f28d", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm96 328c0 8.8-7.2 16-16 16H176c-8.8 0-16-7.2-16-16V176c0-8.8 7.2-16 16-16h160c8.8 0 16 7.2 16 16v160z"],
    "stopwatch": [448, 512, [], "f2f2", "M432 304c0 114.9-93.1 208-208 208S16 418.9 16 304c0-104 76.3-190.2 176-205.5V64h-28c-6.6 0-12-5.4-12-12V12c0-6.6 5.4-12 12-12h120c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-28v34.5c37.5 5.8 71.7 21.6 99.7 44.6l27.5-27.5c4.7-4.7 12.3-4.7 17 0l28.3 28.3c4.7 4.7 4.7 12.3 0 17l-29.4 29.4-.6.6C419.7 223.3 432 262.2 432 304zm-176 36V188.5c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12V340c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z"],
    "street-view": [512, 512, [], "f21d", "M192 64c0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64s-64-28.654-64-64zm112 80h-11.36c-22.711 10.443-49.59 10.894-73.28 0H208c-26.51 0-48 21.49-48 48v104c0 13.255 10.745 24 24 24h16v104c0 13.255 10.745 24 24 24h64c13.255 0 24-10.745 24-24V320h16c13.255 0 24-10.745 24-24V192c0-26.51-21.49-48-48-48zm85.642 189.152a72.503 72.503 0 0 1-29.01 27.009C391.133 365.251 480 385.854 480 416c0 46.304-167.656 64-224 64-70.303 0-224-20.859-224-64 0-30.123 88.361-50.665 119.367-55.839a72.516 72.516 0 0 1-29.01-27.009C74.959 343.395 0 367.599 0 416c0 77.111 178.658 96 256 96 77.249 0 256-18.865 256-96 0-48.403-74.967-72.606-122.358-82.848z"],
    "strikethrough": [512, 512, [], "f0cc", "M496 288H16c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h480c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16zm-214.666 16c27.258 12.937 46.524 28.683 46.524 56.243 0 33.108-28.977 53.676-75.621 53.676-32.325 0-76.874-12.08-76.874-44.271V368c0-8.837-7.164-16-16-16H113.75c-8.836 0-16 7.163-16 16v19.204c0 66.845 77.717 101.82 154.487 101.82 88.578 0 162.013-45.438 162.013-134.424 0-19.815-3.618-36.417-10.143-50.6H281.334zm-30.952-96c-32.422-13.505-56.836-28.946-56.836-59.683 0-33.92 30.901-47.406 64.962-47.406 42.647 0 64.962 16.593 64.962 32.985V136c0 8.837 7.164 16 16 16h45.613c8.836 0 16-7.163 16-16v-30.318c0-52.438-71.725-79.875-142.575-79.875-85.203 0-150.726 40.972-150.726 125.646 0 22.71 4.665 41.176 12.777 56.547h129.823z"],
    "subscript": [512, 512, [], "f12c", "M395.198 416c3.461-10.526 18.796-21.28 36.265-32.425 16.625-10.605 35.467-22.626 50.341-38.862 17.458-19.054 25.944-40.175 25.944-64.567 0-60.562-50.702-88.146-97.81-88.146-42.491 0-76.378 22.016-94.432 50.447-4.654 7.329-2.592 17.036 4.623 21.865l30.328 20.296c7.032 4.706 16.46 3.084 21.63-3.614 8.022-10.394 18.818-18.225 31.667-18.225 19.387 0 26.266 12.901 26.266 23.948 0 36.159-119.437 57.023-119.437 160.024 0 6.654.561 13.014 1.415 19.331 1.076 7.964 7.834 13.928 15.87 13.928H496c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16H395.198zM272 256c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16h-62.399a16 16 0 0 1-13.541-7.478l-45.701-72.615c-2.297-3.352-4.422-6.969-6.195-10.209-1.65 3.244-3.647 6.937-5.874 10.582l-44.712 72.147a15.999 15.999 0 0 1-13.6 7.572H16c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h26.325l56.552-82.709L46.111 96H16C7.163 96 0 88.837 0 80V48c0-8.837 7.163-16 16-16h68.806a16 16 0 0 1 13.645 7.644l39.882 65.126c2.072 3.523 4.053 7.171 5.727 10.37 1.777-3.244 3.92-6.954 6.237-10.537l40.332-65.035A15.999 15.999 0 0 1 204.226 32H272c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16h-27.979l-52.69 75.671L249.974 256H272z"],
    "subway": [448, 512, [], "f239", "M448 96v256c0 51.815-61.624 96-130.022 96l62.98 49.721C386.905 502.417 383.562 512 376 512H72c-7.578 0-10.892-9.594-4.957-14.279L130.022 448C61.82 448 0 403.954 0 352V96C0 42.981 64 0 128 0h192c65 0 128 42.981 128 96zM200 232V120c0-13.255-10.745-24-24-24H72c-13.255 0-24 10.745-24 24v112c0 13.255 10.745 24 24 24h104c13.255 0 24-10.745 24-24zm200 0V120c0-13.255-10.745-24-24-24H272c-13.255 0-24 10.745-24 24v112c0 13.255 10.745 24 24 24h104c13.255 0 24-10.745 24-24zm-48 56c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm-256 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48z"],
    "suitcase": [512, 512, [], "f0f2", "M96 480h320V128h-32V80c0-26.51-21.49-48-48-48H176c-26.51 0-48 21.49-48 48v48H96v352zm96-384h128v32H192V96zm320 80v256c0 26.51-21.49 48-48 48h-16V128h16c26.51 0 48 21.49 48 48zM64 480H48c-26.51 0-48-21.49-48-48V176c0-26.51 21.49-48 48-48h16v352z"],
    "sun": [512, 512, [], "f185", "M274.835 12.646l25.516 62.393c4.213 10.301 16.671 14.349 26.134 8.492l57.316-35.479c15.49-9.588 34.808 4.447 30.475 22.142l-16.03 65.475c-2.647 10.81 5.053 21.408 16.152 22.231l67.224 4.987c18.167 1.348 25.546 24.057 11.641 35.826L441.81 242.26c-8.495 7.19-8.495 20.289 0 27.479l51.454 43.548c13.906 11.769 6.527 34.478-11.641 35.826l-67.224 4.987c-11.099.823-18.799 11.421-16.152 22.231l16.03 65.475c4.332 17.695-14.986 31.73-30.475 22.142l-57.316-35.479c-9.463-5.858-21.922-1.81-26.134 8.492l-25.516 62.393c-6.896 16.862-30.774 16.862-37.67 0l-25.516-62.393c-4.213-10.301-16.671-14.349-26.134-8.492l-57.317 35.479c-15.49 9.588-34.808-4.447-30.475-22.142l16.03-65.475c2.647-10.81-5.053-21.408-16.152-22.231l-67.224-4.987c-18.167-1.348-25.546-24.057-11.641-35.826L70.19 269.74c8.495-7.19 8.495-20.289 0-27.479l-51.454-43.548c-13.906-11.769-6.527-34.478 11.641-35.826l67.224-4.987c11.099-.823 18.799-11.421 16.152-22.231l-16.03-65.475c-4.332-17.695 14.986-31.73 30.475-22.142l57.317 35.479c9.463 5.858 21.921 1.81 26.134-8.492l25.516-62.393c6.896-16.861 30.774-16.861 37.67 0zM392 256c0-74.991-61.01-136-136-136-74.991 0-136 61.009-136 136s61.009 136 136 136c74.99 0 136-61.009 136-136zm-32 0c0 57.346-46.654 104-104 104s-104-46.654-104-104 46.654-104 104-104 104 46.654 104 104z"],
    "superscript": [512, 512, [], "f12b", "M395.198 256c3.461-10.526 18.796-21.28 36.265-32.425 16.625-10.605 35.467-22.626 50.341-38.862 17.458-19.054 25.944-40.175 25.944-64.567 0-60.562-50.702-88.146-97.81-88.146-42.491 0-76.378 22.016-94.432 50.447-4.654 7.329-2.592 17.036 4.623 21.865l30.328 20.296c7.032 4.706 16.46 3.084 21.63-3.614 8.022-10.394 18.818-18.225 31.667-18.225 19.387 0 26.266 12.901 26.266 23.948 0 36.159-119.437 57.023-119.437 160.024 0 6.654.561 13.014 1.415 19.331 1.076 7.964 7.834 13.928 15.87 13.928H496c8.837 0 16-7.163 16-16v-32c0-8.837-7.163-16-16-16H395.198zM272 416c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16h-62.399a16 16 0 0 1-13.541-7.478l-45.701-72.615c-2.297-3.352-4.422-6.969-6.195-10.209-1.65 3.244-3.647 6.937-5.874 10.582l-44.712 72.147a15.999 15.999 0 0 1-13.6 7.572H16c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h26.325l56.552-82.709L46.111 256H16c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h68.806a16 16 0 0 1 13.645 7.644l39.882 65.126c2.072 3.523 4.053 7.171 5.727 10.37 1.777-3.244 3.92-6.954 6.237-10.537l40.332-65.035a16 16 0 0 1 13.598-7.567H272c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16h-27.979l-52.69 75.671L249.974 416H272z"],
    "sync": [512, 512, [], "f021", "M440.935 12.574l3.966 82.766C399.416 41.904 331.674 8 256 8 134.813 8 33.933 94.924 12.296 209.824 10.908 217.193 16.604 224 24.103 224h49.084c5.57 0 10.377-3.842 11.676-9.259C103.407 137.408 172.931 80 256 80c60.893 0 114.512 30.856 146.104 77.801l-101.53-4.865c-6.845-.328-12.574 5.133-12.574 11.986v47.411c0 6.627 5.373 12 12 12h200.333c6.627 0 12-5.373 12-12V12c0-6.627-5.373-12-12-12h-47.411c-6.853 0-12.315 5.729-11.987 12.574zM256 432c-60.895 0-114.517-30.858-146.109-77.805l101.868 4.871c6.845.327 12.573-5.134 12.573-11.986v-47.412c0-6.627-5.373-12-12-12H12c-6.627 0-12 5.373-12 12V500c0 6.627 5.373 12 12 12h47.385c6.863 0 12.328-5.745 11.985-12.599l-4.129-82.575C112.725 470.166 180.405 504 256 504c121.187 0 222.067-86.924 243.704-201.824 1.388-7.369-4.308-14.176-11.807-14.176h-49.084c-5.57 0-10.377 3.842-11.676 9.259C408.593 374.592 339.069 432 256 432z"],
    "sync-alt": [512, 512, [], "f2f1", "M370.72 133.28C339.458 104.008 298.888 87.962 255.848 88c-77.458.068-144.328 53.178-162.791 126.85-1.344 5.363-6.122 9.15-11.651 9.15H24.103c-7.498 0-13.194-6.807-11.807-14.176C33.933 94.924 134.813 8 256 8c66.448 0 126.791 26.136 171.315 68.685L463.03 40.97C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.749zM32 296h134.059c21.382 0 32.09 25.851 16.971 40.971l-41.75 41.75c31.262 29.273 71.835 45.319 114.876 45.28 77.418-.07 144.315-53.144 162.787-126.849 1.344-5.363 6.122-9.15 11.651-9.15h57.304c7.498 0 13.194 6.807 11.807 14.176C478.067 417.076 377.187 504 256 504c-66.448 0-126.791-26.136-171.315-68.685L48.97 471.03C33.851 486.149 8 475.441 8 454.059V320c0-13.255 10.745-24 24-24z"],
    "syringe": [512, 512, [], "f48e", "M201.5 174.8l55.7 55.8c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0l-55.7-55.8-45.3 45.3 55.8 55.8c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0L111 265.2l-26.4 26.4c-17.3 17.3-25.6 41.1-23 65.4l7.1 63.6L2.3 487c-3.1 3.1-3.1 8.2 0 11.3l11.3 11.3c3.1 3.1 8.2 3.1 11.3 0l66.3-66.3 63.6 7.1c23.9 2.6 47.9-5.4 65.4-23l181.9-181.9-135.7-135.7-64.9 65zm308.2-93.3L430.5 2.3c-3.1-3.1-8.2-3.1-11.3 0l-11.3 11.3c-3.1 3.1-3.1 8.2 0 11.3l28.3 28.3-45.3 45.3-56.6-56.6-17-17c-3.1-3.1-8.2-3.1-11.3 0l-33.9 33.9c-3.1 3.1-3.1 8.2 0 11.3l17 17L424.8 223l17 17c3.1 3.1 8.2 3.1 11.3 0l33.9-34c3.1-3.1 3.1-8.2 0-11.3l-73.5-73.5 45.3-45.3 28.3 28.3c3.1 3.1 8.2 3.1 11.3 0l11.3-11.3c3.1-3.2 3.1-8.2 0-11.4z"],
    "table": [512, 512, [], "f0ce", "M464 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48V80c0-26.51-21.49-48-48-48zM224 416H64v-96h160v96zm0-160H64v-96h160v96zm224 160H288v-96h160v96zm0-160H288v-96h160v96z"],
    "table-tennis": [512, 512, [], "f45d", "M496.2 296.5C527.7 218.7 512 126.2 449 63.1 365.1-21 229-21 145.1 63.1l-56 56.1 211.5 211.5c46.1-62.1 131.5-77.4 195.6-34.2zm-217.9 79.7L57.9 155.9c-27.3 45.3-21.7 105 17.3 144.1l34.5 34.6L6.7 424c-8.6 7.5-9.1 20.7-1 28.8l53.4 53.5c8 8.1 21.2 7.6 28.7-1L177.1 402l35.7 35.7c19.7 19.7 44.6 30.5 70.3 33.3-7.1-17-11-35.6-11-55.1-.1-13.8 2.5-27 6.2-39.7zM416 320c-53 0-96 43-96 96s43 96 96 96 96-43 96-96-43-96-96-96z"],
    "tablet": [448, 512, [], "f10a", "M400 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM224 480c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z"],
    "tablet-alt": [448, 512, [], "f3fa", "M400 0H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zM224 480c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm176-108c0 6.6-5.4 12-12 12H60c-6.6 0-12-5.4-12-12V60c0-6.6 5.4-12 12-12h328c6.6 0 12 5.4 12 12v312z"],
    "tachometer-alt": [576, 512, [], "f3fd", "M75.694 480a48.02 48.02 0 0 1-42.448-25.571C12.023 414.3 0 368.556 0 320 0 160.942 128.942 32 288 32s288 128.942 288 288c0 48.556-12.023 94.3-33.246 134.429A48.018 48.018 0 0 1 500.306 480H75.694zM512 288c-17.673 0-32 14.327-32 32 0 17.673 14.327 32 32 32s32-14.327 32-32c0-17.673-14.327-32-32-32zM288 128c17.673 0 32-14.327 32-32 0-17.673-14.327-32-32-32s-32 14.327-32 32c0 17.673 14.327 32 32 32zM64 288c-17.673 0-32 14.327-32 32 0 17.673 14.327 32 32 32s32-14.327 32-32c0-17.673-14.327-32-32-32zm65.608-158.392c-17.673 0-32 14.327-32 32 0 17.673 14.327 32 32 32s32-14.327 32-32c0-17.673-14.327-32-32-32zm316.784 0c-17.673 0-32 14.327-32 32 0 17.673 14.327 32 32 32s32-14.327 32-32c0-17.673-14.327-32-32-32zm-87.078 31.534c-12.627-4.04-26.133 2.92-30.173 15.544l-45.923 143.511C250.108 322.645 224 350.264 224 384c0 35.346 28.654 64 64 64 35.346 0 64-28.654 64-64 0-19.773-8.971-37.447-23.061-49.187l45.919-143.498c4.039-12.625-2.92-26.133-15.544-30.173z"],
    "tag": [512, 512, [], "f02b", "M0 252.118V48C0 21.49 21.49 0 48 0h204.118a48 48 0 0 1 33.941 14.059l211.882 211.882c18.745 18.745 18.745 49.137 0 67.882L293.823 497.941c-18.745 18.745-49.137 18.745-67.882 0L14.059 286.059A48 48 0 0 1 0 252.118zM112 64c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48z"],
    "tags": [640, 512, [], "f02c", "M497.941 225.941L286.059 14.059A48 48 0 0 0 252.118 0H48C21.49 0 0 21.49 0 48v204.118a48 48 0 0 0 14.059 33.941l211.882 211.882c18.744 18.745 49.136 18.746 67.882 0l204.118-204.118c18.745-18.745 18.745-49.137 0-67.882zM112 160c-26.51 0-48-21.49-48-48s21.49-48 48-48 48 21.49 48 48-21.49 48-48 48zm513.941 133.823L421.823 497.941c-18.745 18.745-49.137 18.745-67.882 0l-.36-.36L527.64 323.522c16.999-16.999 26.36-39.6 26.36-63.64s-9.362-46.641-26.36-63.64L331.397 0h48.721a48 48 0 0 1 33.941 14.059l211.882 211.882c18.745 18.745 18.745 49.137 0 67.882z"],
    "tasks": [512, 512, [], "f0ae", "M208 132h288c8.8 0 16-7.2 16-16V76c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16zm0 160h288c8.8 0 16-7.2 16-16v-40c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16zm0 160h288c8.8 0 16-7.2 16-16v-40c0-8.8-7.2-16-16-16H208c-8.8 0-16 7.2-16 16v40c0 8.8 7.2 16 16 16zM64 368c-26.5 0-48.6 21.5-48.6 48s22.1 48 48.6 48 48-21.5 48-48-21.5-48-48-48zm92.5-299l-72.2 72.2-15.6 15.6c-4.7 4.7-12.9 4.7-17.6 0L3.5 109.4c-4.7-4.7-4.7-12.3 0-17l15.7-15.7c4.7-4.7 12.3-4.7 17 0l22.7 22.1 63.7-63.3c4.7-4.7 12.3-4.7 17 0l17 16.5c4.6 4.7 4.6 12.3-.1 17zm0 159.6l-72.2 72.2-15.7 15.7c-4.7 4.7-12.9 4.7-17.6 0L3.5 269c-4.7-4.7-4.7-12.3 0-17l15.7-15.7c4.7-4.7 12.3-4.7 17 0l22.7 22.1 63.7-63.7c4.7-4.7 12.3-4.7 17 0l17 17c4.6 4.6 4.6 12.2-.1 16.9z"],
    "taxi": [512, 512, [], "f1ba", "M461.951 243.865l-21.816-87.268A79.885 79.885 0 0 0 362.522 96H352V56c0-13.255-10.745-24-24-24H184c-13.255 0-24 10.745-24 24v40h-10.522a79.885 79.885 0 0 0-77.612 60.597L50.05 243.865C25.515 252.823 8 276.366 8 304v48c0 20.207 9.374 38.214 24 49.943V456c0 13.255 10.745 24 24 24h48c13.255 0 24-10.745 24-24v-40h256v40c0 13.255 10.745 24 24 24h48c13.255 0 24-10.745 24-24v-54.057c14.626-11.729 24-29.737 24-49.943v-48c0-27.634-17.515-51.177-42.049-60.135zM149.478 160h213.045a15.975 15.975 0 0 1 15.522 12.12l16.97 67.88h-278.03l16.97-67.881A15.976 15.976 0 0 1 149.478 160zM132 336c0 19.882-16.118 36-36 36s-36-16.118-36-36 16.118-36 36-36 36 16.118 36 36zm320 0c0 19.882-16.118 36-36 36s-36-16.118-36-36 16.118-36 36-36 36 16.118 36 36z"],
    "terminal": [640, 512, [], "f120", "M257.981 272.971L63.638 467.314c-9.373 9.373-24.569 9.373-33.941 0L7.029 444.647c-9.357-9.357-9.375-24.522-.04-33.901L161.011 256 6.99 101.255c-9.335-9.379-9.317-24.544.04-33.901l22.667-22.667c9.373-9.373 24.569-9.373 33.941 0L257.981 239.03c9.373 9.372 9.373 24.568 0 33.941zM640 456v-32c0-13.255-10.745-24-24-24H312c-13.255 0-24 10.745-24 24v32c0 13.255 10.745 24 24 24h304c13.255 0 24-10.745 24-24z"],
    "text-height": [576, 512, [], "f034", "M16 32h288c8.837 0 16 7.163 16 16v96c0 8.837-7.163 16-16 16h-35.496c-8.837 0-16-7.163-16-16V96h-54.761v320H232c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16H88c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h34.257V96H67.496v48c0 8.837-7.163 16-16 16H16c-8.837 0-16-7.163-16-16V48c0-8.837 7.163-16 16-16zm475.308 4.685l79.995 80.001C581.309 126.693 574.297 144 559.99 144H512v224h48c15.639 0 20.635 17.991 11.313 27.314l-79.995 80.001c-6.247 6.247-16.381 6.245-22.626 0l-79.995-80.001C378.691 385.307 385.703 368 400.01 368H448V144h-48c-15.639 0-20.635-17.991-11.313-27.314l79.995-80.001c6.247-6.248 16.381-6.245 22.626 0z"],
    "text-width": [448, 512, [], "f035", "M16 32h416c8.837 0 16 7.163 16 16v96c0 8.837-7.163 16-16 16h-35.496c-8.837 0-16-7.163-16-16V96H261.743v128H296c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16H152c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16h34.257V96H67.496v48c0 8.837-7.163 16-16 16H16c-8.837 0-16-7.163-16-16V48c0-8.837 7.163-16 16-16zm427.315 340.682l-80.001-79.995C353.991 283.365 336 288.362 336 304v48H112v-47.99c0-14.307-17.307-21.319-27.314-11.313L4.685 372.692c-6.245 6.245-6.247 16.379 0 22.626l80.001 79.995C94.009 484.635 112 479.638 112 464v-48h224v47.99c0 14.307 17.307 21.319 27.314 11.313l80.001-79.995c6.245-6.245 6.248-16.379 0-22.626z"],
    "th": [512, 512, [], "f00a", "M149.333 56v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zm181.334 240v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm32-240v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24zm-32 80V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.256 0 24.001-10.745 24.001-24zm-205.334 56H24c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm386.667-56H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm0 160H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H386.667c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zM181.333 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24z"],
    "th-large": [512, 512, [], "f009", "M296 32h192c13.255 0 24 10.745 24 24v160c0 13.255-10.745 24-24 24H296c-13.255 0-24-10.745-24-24V56c0-13.255 10.745-24 24-24zm-80 0H24C10.745 32 0 42.745 0 56v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24zM0 296v160c0 13.255 10.745 24 24 24h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zm296 184h192c13.255 0 24-10.745 24-24V296c0-13.255-10.745-24-24-24H296c-13.255 0-24 10.745-24 24v160c0 13.255 10.745 24 24 24z"],
    "th-list": [512, 512, [], "f00b", "M149.333 216v80c0 13.255-10.745 24-24 24H24c-13.255 0-24-10.745-24-24v-80c0-13.255 10.745-24 24-24h101.333c13.255 0 24 10.745 24 24zM0 376v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H24c-13.255 0-24 10.745-24 24zM125.333 32H24C10.745 32 0 42.745 0 56v80c0 13.255 10.745 24 24 24h101.333c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24zm80 448H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24zm-24-424v80c0 13.255 10.745 24 24 24H488c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24zm24 264H488c13.255 0 24-10.745 24-24v-80c0-13.255-10.745-24-24-24H205.333c-13.255 0-24 10.745-24 24v80c0 13.255 10.745 24 24 24z"],
    "thermometer": [512, 512, [], "f491", "M476.8 20.4c-37.5-30.7-95.5-26.3-131.9 10.2l-45.7 46 50.5 50.5c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0l-50.4-50.5-45.1 45.4 50.3 50.4c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0L209 167.4l-45.1 45.4L214 263c3.1 3.1 3.1 8.2 0 11.3l-11.3 11.3c-3.1 3.1-8.2 3.1-11.3 0l-50.1-50.2L96 281.1V382L7 471c-9.4 9.4-9.4 24.6 0 33.9 9.4 9.4 24.6 9.4 33.9 0l89-89h99.9L484 162.6c34.9-34.9 42.2-101.5-7.2-142.2z"],
    "thermometer-empty": [256, 512, [], "f2cb", "M192 384c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-35.346 28.654-64 64-64s64 28.654 64 64zm32-84.653c19.912 22.563 32 52.194 32 84.653 0 70.696-57.303 128-128 128-.299 0-.609-.001-.909-.003C56.789 511.509-.357 453.636.002 383.333.166 351.135 12.225 321.755 32 299.347V96c0-53.019 42.981-96 96-96s96 42.981 96 96v203.347zM208 384c0-34.339-19.37-52.19-32-66.502V96c0-26.467-21.533-48-48-48S80 69.533 80 96v221.498c-12.732 14.428-31.825 32.1-31.999 66.08-.224 43.876 35.563 80.116 79.423 80.42L128 464c44.112 0 80-35.888 80-80z"],
    "thermometer-full": [256, 512, [], "f2c7", "M224 96c0-53.019-42.981-96-96-96S32 42.981 32 96v203.347C12.225 321.756.166 351.136.002 383.333c-.359 70.303 56.787 128.176 127.089 128.664.299.002.61.003.909.003 70.698 0 128-57.304 128-128 0-32.459-12.088-62.09-32-84.653V96zm-96 368l-.576-.002c-43.86-.304-79.647-36.544-79.423-80.42.173-33.98 19.266-51.652 31.999-66.08V96c0-26.467 21.533-48 48-48s48 21.533 48 48v221.498c12.63 14.312 32 32.164 32 66.502 0 44.112-35.888 80-80 80zm64-80c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-23.685 12.876-44.349 32-55.417V96c0-17.673 14.327-32 32-32s32 14.327 32 32v232.583c19.124 11.068 32 31.732 32 55.417z"],
    "thermometer-half": [256, 512, [], "f2c9", "M192 384c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-23.685 12.876-44.349 32-55.417V224c0-17.673 14.327-32 32-32s32 14.327 32 32v104.583c19.124 11.068 32 31.732 32 55.417zm32-84.653c19.912 22.563 32 52.194 32 84.653 0 70.696-57.303 128-128 128-.299 0-.609-.001-.909-.003C56.789 511.509-.357 453.636.002 383.333.166 351.135 12.225 321.755 32 299.347V96c0-53.019 42.981-96 96-96s96 42.981 96 96v203.347zM208 384c0-34.339-19.37-52.19-32-66.502V96c0-26.467-21.533-48-48-48S80 69.533 80 96v221.498c-12.732 14.428-31.825 32.1-31.999 66.08-.224 43.876 35.563 80.116 79.423 80.42L128 464c44.112 0 80-35.888 80-80z"],
    "thermometer-quarter": [256, 512, [], "f2ca", "M192 384c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-23.685 12.876-44.349 32-55.417V288c0-17.673 14.327-32 32-32s32 14.327 32 32v40.583c19.124 11.068 32 31.732 32 55.417zm32-84.653c19.912 22.563 32 52.194 32 84.653 0 70.696-57.303 128-128 128-.299 0-.609-.001-.909-.003C56.789 511.509-.357 453.636.002 383.333.166 351.135 12.225 321.755 32 299.347V96c0-53.019 42.981-96 96-96s96 42.981 96 96v203.347zM208 384c0-34.339-19.37-52.19-32-66.502V96c0-26.467-21.533-48-48-48S80 69.533 80 96v221.498c-12.732 14.428-31.825 32.1-31.999 66.08-.224 43.876 35.563 80.116 79.423 80.42L128 464c44.112 0 80-35.888 80-80z"],
    "thermometer-three-quarters": [256, 512, [], "f2c8", "M192 384c0 35.346-28.654 64-64 64-35.346 0-64-28.654-64-64 0-23.685 12.876-44.349 32-55.417V160c0-17.673 14.327-32 32-32s32 14.327 32 32v168.583c19.124 11.068 32 31.732 32 55.417zm32-84.653c19.912 22.563 32 52.194 32 84.653 0 70.696-57.303 128-128 128-.299 0-.609-.001-.909-.003C56.789 511.509-.357 453.636.002 383.333.166 351.135 12.225 321.755 32 299.347V96c0-53.019 42.981-96 96-96s96 42.981 96 96v203.347zM208 384c0-34.339-19.37-52.19-32-66.502V96c0-26.467-21.533-48-48-48S80 69.533 80 96v221.498c-12.732 14.428-31.825 32.1-31.999 66.08-.224 43.876 35.563 80.116 79.423 80.42L128 464c44.112 0 80-35.888 80-80z"],
    "thumbs-down": [512, 512, [], "f165", "M0 56v240c0 13.255 10.745 24 24 24h80c13.255 0 24-10.745 24-24V56c0-13.255-10.745-24-24-24H24C10.745 32 0 42.745 0 56zm40 200c0-13.255 10.745-24 24-24s24 10.745 24 24-10.745 24-24 24-24-10.745-24-24zm272 256c-20.183 0-29.485-39.293-33.931-57.795-5.206-21.666-10.589-44.07-25.393-58.902-32.469-32.524-49.503-73.967-89.117-113.111a11.98 11.98 0 0 1-3.558-8.521V59.901c0-6.541 5.243-11.878 11.783-11.998 15.831-.29 36.694-9.079 52.651-16.178C256.189 17.598 295.709.017 343.995 0h2.844c42.777 0 93.363.413 113.774 29.737 8.392 12.057 10.446 27.034 6.148 44.632 16.312 17.053 25.063 48.863 16.382 74.757 17.544 23.432 19.143 56.132 9.308 79.469l.11.11c11.893 11.949 19.523 31.259 19.439 49.197-.156 30.352-26.157 58.098-59.553 58.098H350.723C358.03 364.34 384 388.132 384 430.548 384 504 336 512 312 512z"],
    "thumbs-up": [512, 512, [], "f164", "M104 224H24c-13.255 0-24 10.745-24 24v240c0 13.255 10.745 24 24 24h80c13.255 0 24-10.745 24-24V248c0-13.255-10.745-24-24-24zM64 472c-13.255 0-24-10.745-24-24s10.745-24 24-24 24 10.745 24 24-10.745 24-24 24zM384 81.452c0 42.416-25.97 66.208-33.277 94.548h101.723c33.397 0 59.397 27.746 59.553 58.098.084 17.938-7.546 37.249-19.439 49.197l-.11.11c9.836 23.337 8.237 56.037-9.308 79.469 8.681 25.895-.069 57.704-16.382 74.757 4.298 17.598 2.244 32.575-6.148 44.632C440.202 511.587 389.616 512 346.839 512l-2.845-.001c-48.287-.017-87.806-17.598-119.56-31.725-15.957-7.099-36.821-15.887-52.651-16.178-6.54-.12-11.783-5.457-11.783-11.998v-213.77c0-3.2 1.282-6.271 3.558-8.521 39.614-39.144 56.648-80.587 89.117-113.111 14.804-14.832 20.188-37.236 25.393-58.902C282.515 39.293 291.817 0 312 0c24 0 72 8 72 81.452z"],
    "thumbtack": [384, 512, [], "f08d", "M298.028 214.267L285.793 96H328c13.255 0 24-10.745 24-24V24c0-13.255-10.745-24-24-24H56C42.745 0 32 10.745 32 24v48c0 13.255 10.745 24 24 24h42.207L85.972 214.267C37.465 236.82 0 277.261 0 328c0 13.255 10.745 24 24 24h136v104.007c0 1.242.289 2.467.845 3.578l24 48c2.941 5.882 11.364 5.893 14.311 0l24-48a8.008 8.008 0 0 0 .845-3.578V352h136c13.255 0 24-10.745 24-24-.001-51.183-37.983-91.42-85.973-113.733z"],
    "ticket-alt": [576, 512, [], "f3ff", "M128 160h320v192H128V160zm400 96c0 26.51 21.49 48 48 48v96c0 26.51-21.49 48-48 48H48c-26.51 0-48-21.49-48-48v-96c26.51 0 48-21.49 48-48s-21.49-48-48-48v-96c0-26.51 21.49-48 48-48h480c26.51 0 48 21.49 48 48v96c-26.51 0-48 21.49-48 48zm-48-104c0-13.255-10.745-24-24-24H120c-13.255 0-24 10.745-24 24v208c0 13.255 10.745 24 24 24h336c13.255 0 24-10.745 24-24V152z"],
    "times": [384, 512, [], "f00d", "M323.1 441l53.9-53.9c9.4-9.4 9.4-24.5 0-33.9L279.8 256l97.2-97.2c9.4-9.4 9.4-24.5 0-33.9L323.1 71c-9.4-9.4-24.5-9.4-33.9 0L192 168.2 94.8 71c-9.4-9.4-24.5-9.4-33.9 0L7 124.9c-9.4 9.4-9.4 24.5 0 33.9l97.2 97.2L7 353.2c-9.4 9.4-9.4 24.5 0 33.9L60.9 441c9.4 9.4 24.5 9.4 33.9 0l97.2-97.2 97.2 97.2c9.3 9.3 24.5 9.3 33.9 0z"],
    "times-circle": [512, 512, [], "f057", "M256 8C119 8 8 119 8 256s111 248 248 248 248-111 248-248S393 8 256 8zm121.6 313.1c4.7 4.7 4.7 12.3 0 17L338 377.6c-4.7 4.7-12.3 4.7-17 0L256 312l-65.1 65.6c-4.7 4.7-12.3 4.7-17 0L134.4 338c-4.7-4.7-4.7-12.3 0-17l65.6-65-65.6-65.1c-4.7-4.7-4.7-12.3 0-17l39.6-39.6c4.7-4.7 12.3-4.7 17 0l65 65.7 65.1-65.6c4.7-4.7 12.3-4.7 17 0l39.6 39.6c4.7 4.7 4.7 12.3 0 17L312 256l65.6 65.1z"],
    "tint": [384, 512, [], "f043", "M192 512c-98.435 0-178.087-79.652-178.087-178.087 0-111.196 101.194-154.065 148.522-311.825 9.104-30.116 51.099-28.778 59.13 0 47.546 158.486 148.522 200.069 148.522 311.825C370.087 432.348 290.435 512 192 512zm-42.522-171.826c-1.509-5.533-9.447-5.532-10.956 0-9.223 29.425-27.913 37.645-27.913 58.435C110.609 417.13 125.478 432 144 432s33.391-14.87 33.391-33.391c0-20.839-18.673-28.956-27.913-58.435z"],
    "toggle-off": [576, 512, [], "f204", "M384 64H192C85.961 64 0 149.961 0 256s85.961 192 192 192h192c106.039 0 192-85.961 192-192S490.039 64 384 64zM64 256c0-70.741 57.249-128 128-128 70.741 0 128 57.249 128 128 0 70.741-57.249 128-128 128-70.741 0-128-57.249-128-128zm320 128h-48.905c65.217-72.858 65.236-183.12 0-256H384c70.741 0 128 57.249 128 128 0 70.74-57.249 128-128 128z"],
    "toggle-on": [576, 512, [], "f205", "M576 256c0 106.039-85.961 192-192 192H192C85.961 448 0 362.039 0 256S85.961 64 192 64h192c106.039 0 192 85.961 192 192zM384 128c-70.741 0-128 57.249-128 128 0 70.741 57.249 128 128 128 70.741 0 128-57.249 128-128 0-70.741-57.249-128-128-128"],
    "trademark": [640, 512, [], "f25c", "M97.119 163.133H12c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h248.559c6.627 0 12 5.373 12 12v43.133c0 6.627-5.373 12-12 12H175.44V404c0 6.627-5.373 12-12 12h-54.322c-6.627 0-12-5.373-12-12V163.133zM329.825 96h65.425a12 12 0 0 1 11.346 8.093l43.759 127.068c7.161 20.588 16.111 52.812 16.111 52.812h.896s8.95-32.224 16.111-52.812l43.758-127.068A12 12 0 0 1 538.577 96h65.41a12 12 0 0 1 11.961 11.03l24.012 296c.567 6.987-4.951 12.97-11.961 12.97h-54.101a12 12 0 0 1-11.972-11.182l-9.082-132.93c-1.79-24.168 0-53.706 0-53.706h-.896s-10.741 33.566-17.902 53.706l-30.7 84.731a12 12 0 0 1-11.282 7.912h-50.302a12 12 0 0 1-11.282-7.912l-30.7-84.731c-7.161-20.14-17.903-53.706-17.903-53.706h-.895s1.79 29.538 0 53.706l-9.082 132.93c-.428 6.295-5.66 11.182-11.97 11.182H305.4c-7.017 0-12.536-5.994-11.959-12.987l24.425-296A11.999 11.999 0 0 1 329.825 96z"],
    "train": [448, 512, [], "f238", "M448 96v256c0 51.815-61.624 96-130.022 96l62.98 49.721C386.905 502.417 383.562 512 376 512H72c-7.578 0-10.892-9.594-4.957-14.279L130.022 448C61.82 448 0 403.954 0 352V96C0 42.981 64 0 128 0h192c65 0 128 42.981 128 96zm-48 136V120c0-13.255-10.745-24-24-24H72c-13.255 0-24 10.745-24 24v112c0 13.255 10.745 24 24 24h304c13.255 0 24-10.745 24-24zm-176 64c-30.928 0-56 25.072-56 56s25.072 56 56 56 56-25.072 56-56-25.072-56-56-56z"],
    "transgender": [384, 512, [], "f224", "M372 0h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-80.7 80.7C198.5 104.1 172.2 96 144 96 64.5 96 0 160.5 0 240c0 68.5 47.9 125.9 112 140.4V408H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v28c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-28h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-27.6c64.1-14.6 112-71.9 112-140.4 0-28.2-8.1-54.5-22.1-76.7l80.7-80.7 16.9 16.9c7.6 7.6 20.5 2.2 20.5-8.5V12c0-6.6-5.4-12-12-12zM144 320c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"],
    "transgender-alt": [480, 512, [], "f225", "M468 0h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-80.7 80.7C294.5 104.1 268.2 96 240 96c-28.2 0-54.5 8.1-76.7 22.1l-16.5-16.5 19.8-19.8c4.7-4.7 4.7-12.3 0-17l-28.3-28.3c-4.7-4.7-12.3-4.7-17 0l-19.8 19.8-19-19 16.9-16.9C107.1 12.9 101.7 0 91 0H12C5.4 0 0 5.4 0 12v79c0 10.7 12.9 16 20.5 8.5l16.9-16.9 19 19-19.8 19.8c-4.7 4.7-4.7 12.3 0 17l28.3 28.3c4.7 4.7 12.3 4.7 17 0l19.8-19.8 16.5 16.5C104.1 185.5 96 211.8 96 240c0 68.5 47.9 125.9 112 140.4V408h-36c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v28c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-28h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-27.6c64.1-14.6 112-71.9 112-140.4 0-28.2-8.1-54.5-22.1-76.7l80.7-80.7 16.9 16.9c7.6 7.6 20.5 2.2 20.5-8.5V12c0-6.6-5.4-12-12-12zM240 320c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"],
    "trash": [448, 512, [], "f1f8", "M0 84V56c0-13.3 10.7-24 24-24h112l9.4-18.7c4-8.2 12.3-13.3 21.4-13.3h114.3c9.1 0 17.4 5.1 21.5 13.3L312 32h112c13.3 0 24 10.7 24 24v28c0 6.6-5.4 12-12 12H12C5.4 96 0 90.6 0 84zm415.2 56.7L394.8 467c-1.6 25.3-22.6 45-47.9 45H101.1c-25.3 0-46.3-19.7-47.9-45L32.8 140.7c-.4-6.9 5.1-12.7 12-12.7h358.5c6.8 0 12.3 5.8 11.9 12.7z"],
    "trash-alt": [448, 512, [], "f2ed", "M0 84V56c0-13.3 10.7-24 24-24h112l9.4-18.7c4-8.2 12.3-13.3 21.4-13.3h114.3c9.1 0 17.4 5.1 21.5 13.3L312 32h112c13.3 0 24 10.7 24 24v28c0 6.6-5.4 12-12 12H12C5.4 96 0 90.6 0 84zm416 56v324c0 26.5-21.5 48-48 48H80c-26.5 0-48-21.5-48-48V140c0-6.6 5.4-12 12-12h360c6.6 0 12 5.4 12 12zm-272 68c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208zm96 0c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208zm96 0c0-8.8-7.2-16-16-16s-16 7.2-16 16v224c0 8.8 7.2 16 16 16s16-7.2 16-16V208z"],
    "tree": [384, 512, [], "f1bb", "M377.33 375.429L293.906 288H328c21.017 0 31.872-25.207 17.448-40.479L262.79 160H296c20.878 0 31.851-24.969 17.587-40.331l-104-112.003c-9.485-10.214-25.676-10.229-35.174 0l-104 112.003C56.206 134.969 67.037 160 88 160h33.21l-82.659 87.521C24.121 262.801 34.993 288 56 288h34.094L6.665 375.429C-7.869 390.655 2.925 416 24.025 416H144c0 32.781-11.188 49.26-33.995 67.506C98.225 492.93 104.914 512 120 512h144c15.086 0 21.776-19.069 9.995-28.494-19.768-15.814-33.992-31.665-33.995-67.496V416h119.97c21.05 0 31.929-25.309 17.36-40.571z"],
    "trophy": [576, 512, [], "f091", "M552 64H448V24c0-13.3-10.7-24-24-24H152c-13.3 0-24 10.7-24 24v40H24C10.7 64 0 74.7 0 88v56c0 35.7 22.5 72.4 61.9 100.7 31.5 22.7 69.8 37.1 110 41.7C203.3 338.5 240 360 240 360v72h-48c-35.3 0-64 20.7-64 56v12c0 6.6 5.4 12 12 12h296c6.6 0 12-5.4 12-12v-12c0-35.3-28.7-56-64-56h-48v-72s36.7-21.5 68.1-73.6c40.3-4.6 78.6-19 110-41.7 39.3-28.3 61.9-65 61.9-100.7V88c0-13.3-10.7-24-24-24zM99.3 192.8C74.9 175.2 64 155.6 64 144v-16h64.2c1 32.6 5.8 61.2 12.8 86.2-15.1-5.2-29.2-12.4-41.7-21.4zM512 144c0 16.1-17.7 36.1-35.3 48.8-12.5 9-26.7 16.2-41.8 21.4 7-25 11.8-53.6 12.8-86.2H512v16z"],
    "truck": [640, 512, [], "f0d1", "M624 352h-16V243.9c0-12.7-5.1-24.9-14.1-33.9L494 110.1c-9-9-21.2-14.1-33.9-14.1H416V48c0-26.5-21.5-48-48-48H48C21.5 0 0 21.5 0 48v320c0 26.5 21.5 48 48 48h16c0 53 43 96 96 96s96-43 96-96h128c0 53 43 96 96 96s96-43 96-96h48c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zM160 464c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm320 0c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm80-208H416V144h44.1l99.9 99.9V256z"],
    "tty": [512, 512, [], "f1e4", "M5.37 103.822c138.532-138.532 362.936-138.326 501.262 0 6.078 6.078 7.074 15.496 2.583 22.681l-43.214 69.138a18.332 18.332 0 0 1-22.356 7.305l-86.422-34.569a18.335 18.335 0 0 1-11.434-18.846L351.741 90c-62.145-22.454-130.636-21.986-191.483 0l5.953 59.532a18.331 18.331 0 0 1-11.434 18.846l-86.423 34.568a18.334 18.334 0 0 1-22.356-7.305L2.787 126.502a18.333 18.333 0 0 1 2.583-22.68zM96 308v-40c0-6.627-5.373-12-12-12H44c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm-336 96v-40c0-6.627-5.373-12-12-12H92c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zM96 500v-40c0-6.627-5.373-12-12-12H44c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12zm288 0v-40c0-6.627-5.373-12-12-12H140c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h232c6.627 0 12-5.373 12-12zm96 0v-40c0-6.627-5.373-12-12-12h-40c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h40c6.627 0 12-5.373 12-12z"],
    "tv": [640, 512, [], "f26c", "M592 0H48C21.5 0 0 21.5 0 48v320c0 26.5 21.5 48 48 48h245.1v32h-160c-17.7 0-32 14.3-32 32s14.3 32 32 32h384c17.7 0 32-14.3 32-32s-14.3-32-32-32h-160v-32H592c26.5 0 48-21.5 48-48V48c0-26.5-21.5-48-48-48zm-16 352H64V64h512v288z"],
    "umbrella": [576, 512, [], "f0e9", "M557.011 267.631c-51.432-45.217-107.572-43.698-158.567 30.731-5.298 7.861-14.906 7.165-19.736 0-2.483-3.624-32.218-60.808-90.708-60.808-45.766 0-70.542 31.378-90.709 60.808-4.829 7.165-14.436 7.861-19.734 0-50.904-74.285-106.613-76.406-158.567-30.731-10.21 8.264-20.912-1.109-18.696-9.481C32.146 134.573 158.516 64.612 288.001 64.612c128.793 0 256.546 69.961 287.706 193.538 2.206 8.322-8.426 17.793-18.696 9.481zM256 261.001V416c0 17.645-14.355 32-32 32s-32-14.355-32-32c0-17.673-14.327-32-32-32s-32 14.327-32 32c0 52.935 43.065 96 96 96s96-43.065 96-96V261.288c-21.836-10.806-45.425-9.737-64-.287zm64-211.007V32c0-17.673-14.327-32-32-32s-32 14.327-32 32v17.987a372.105 372.105 0 0 1 64 .007z"],
    "underline": [448, 512, [], "f0cd", "M224.264 388.24c-91.669 0-156.603-51.165-156.603-151.392V64H39.37c-8.837 0-16-7.163-16-16V16c0-8.837 7.163-16 16-16h137.39c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16h-28.813v172.848c0 53.699 28.314 79.444 76.317 79.444 46.966 0 75.796-25.434 75.796-79.965V64h-28.291c-8.837 0-16-7.163-16-16V16c0-8.837 7.163-16 16-16h136.868c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16h-28.291v172.848c0 99.405-64.881 151.392-156.082 151.392zM16 448h416c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16H16c-8.837 0-16-7.163-16-16v-32c0-8.837 7.163-16 16-16z"],
    "undo": [512, 512, [], "f0e2", "M212.333 224.333H12c-6.627 0-12-5.373-12-12V12C0 5.373 5.373 0 12 0h48c6.627 0 12 5.373 12 12v78.112C117.773 39.279 184.26 7.47 258.175 8.007c136.906.994 246.448 111.623 246.157 248.532C504.041 393.258 393.12 504 256.333 504c-64.089 0-122.496-24.313-166.51-64.215-5.099-4.622-5.334-12.554-.467-17.42l33.967-33.967c4.474-4.474 11.662-4.717 16.401-.525C170.76 415.336 211.58 432 256.333 432c97.268 0 176-78.716 176-176 0-97.267-78.716-176-176-176-58.496 0-110.28 28.476-142.274 72.333h98.274c6.627 0 12 5.373 12 12v48c0 6.627-5.373 12-12 12z"],
    "undo-alt": [512, 512, [], "f2ea", "M255.545 8c-66.269.119-126.438 26.233-170.86 68.685L48.971 40.971C33.851 25.851 8 36.559 8 57.941V192c0 13.255 10.745 24 24 24h134.059c21.382 0 32.09-25.851 16.971-40.971l-41.75-41.75c30.864-28.899 70.801-44.907 113.23-45.273 92.398-.798 170.283 73.977 169.484 169.442C423.236 348.009 349.816 424 256 424c-41.127 0-79.997-14.678-110.63-41.556-4.743-4.161-11.906-3.908-16.368.553L89.34 422.659c-4.872 4.872-4.631 12.815.482 17.433C133.798 479.813 192.074 504 256 504c136.966 0 247.999-111.033 248-247.998C504.001 119.193 392.354 7.755 255.545 8z"],
    "universal-access": [512, 512, [], "f29a", "M256 48c114.953 0 208 93.029 208 208 0 114.953-93.029 208-208 208-114.953 0-208-93.029-208-208 0-114.953 93.029-208 208-208m0-40C119.033 8 8 119.033 8 256s111.033 248 248 248 248-111.033 248-248S392.967 8 256 8zm0 56C149.961 64 64 149.961 64 256s85.961 192 192 192 192-85.961 192-192S362.039 64 256 64zm0 44c19.882 0 36 16.118 36 36s-16.118 36-36 36-36-16.118-36-36 16.118-36 36-36zm117.741 98.023c-28.712 6.779-55.511 12.748-82.14 15.807.851 101.023 12.306 123.052 25.037 155.621 3.617 9.26-.957 19.698-10.217 23.315-9.261 3.617-19.699-.957-23.316-10.217-8.705-22.308-17.086-40.636-22.261-78.549h-9.686c-5.167 37.851-13.534 56.208-22.262 78.549-3.615 9.255-14.05 13.836-23.315 10.217-9.26-3.617-13.834-14.056-10.217-23.315 12.713-32.541 24.185-54.541 25.037-155.621-26.629-3.058-53.428-9.027-82.141-15.807-8.6-2.031-13.926-10.648-11.895-19.249s10.647-13.926 19.249-11.895c96.686 22.829 124.283 22.783 220.775 0 8.599-2.03 17.218 3.294 19.249 11.895 2.029 8.601-3.297 17.219-11.897 19.249z"],
    "university": [512, 512, [], "f19c", "M496 128v16a8 8 0 0 1-8 8h-24v12c0 6.627-5.373 12-12 12H60c-6.627 0-12-5.373-12-12v-12H24a8 8 0 0 1-8-8v-16a8 8 0 0 1 4.941-7.392l232-88a7.996 7.996 0 0 1 6.118 0l232 88A8 8 0 0 1 496 128zm-24 304H40c-13.255 0-24 10.745-24 24v16a8 8 0 0 0 8 8h464a8 8 0 0 0 8-8v-16c0-13.255-10.745-24-24-24zM96 192v192H60c-6.627 0-12 5.373-12 12v20h416v-20c0-6.627-5.373-12-12-12h-36V192h-64v192h-64V192h-64v192h-64V192H96z"],
    "unlink": [512, 512, [], "f127", "M304.083 405.907c4.686 4.686 4.686 12.284 0 16.971l-44.674 44.674c-59.263 59.262-155.693 59.266-214.961 0-59.264-59.265-59.264-155.696 0-214.96l44.675-44.675c4.686-4.686 12.284-4.686 16.971 0l39.598 39.598c4.686 4.686 4.686 12.284 0 16.971l-44.675 44.674c-28.072 28.073-28.072 73.75 0 101.823 28.072 28.072 73.75 28.073 101.824 0l44.674-44.674c4.686-4.686 12.284-4.686 16.971 0l39.597 39.598zm-56.568-260.216c4.686 4.686 12.284 4.686 16.971 0l44.674-44.674c28.072-28.075 73.75-28.073 101.824 0 28.072 28.073 28.072 73.75 0 101.823l-44.675 44.674c-4.686 4.686-4.686 12.284 0 16.971l39.598 39.598c4.686 4.686 12.284 4.686 16.971 0l44.675-44.675c59.265-59.265 59.265-155.695 0-214.96-59.266-59.264-155.695-59.264-214.961 0l-44.674 44.674c-4.686 4.686-4.686 12.284 0 16.971l39.597 39.598zm234.828 359.28l22.627-22.627c9.373-9.373 9.373-24.569 0-33.941L63.598 7.029c-9.373-9.373-24.569-9.373-33.941 0L7.029 29.657c-9.373 9.373-9.373 24.569 0 33.941l441.373 441.373c9.373 9.372 24.569 9.372 33.941 0z"],
    "unlock": [448, 512, [], "f09c", "M400 256H152V152.9c0-39.6 31.7-72.5 71.3-72.9 40-.4 72.7 32.1 72.7 72v16c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24v-16C376 68 307.5-.3 223.5 0 139.5.3 72 69.5 72 153.5V256H48c-26.5 0-48 21.5-48 48v160c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48z"],
    "unlock-alt": [448, 512, [], "f13e", "M400 256H152V152.9c0-39.6 31.7-72.5 71.3-72.9 40-.4 72.7 32.1 72.7 72v16c0 13.3 10.7 24 24 24h32c13.3 0 24-10.7 24-24v-16C376 68 307.5-.3 223.5 0 139.5.3 72 69.5 72 153.5V256H48c-26.5 0-48 21.5-48 48v160c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V304c0-26.5-21.5-48-48-48zM264 408c0 22.1-17.9 40-40 40s-40-17.9-40-40v-48c0-22.1 17.9-40 40-40s40 17.9 40 40v48z"],
    "upload": [512, 512, [], "f093", "M296 384h-80c-13.3 0-24-10.7-24-24V192h-87.7c-17.8 0-26.7-21.5-14.1-34.1L242.3 5.7c7.5-7.5 19.8-7.5 27.3 0l152.2 152.2c12.6 12.6 3.7 34.1-14.1 34.1H320v168c0 13.3-10.7 24-24 24zm216-8v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h136v8c0 30.9 25.1 56 56 56h80c30.9 0 56-25.1 56-56v-8h136c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z"],
    "user": [512, 512, [], "f007", "M256 0c88.366 0 160 71.634 160 160s-71.634 160-160 160S96 248.366 96 160 167.634 0 256 0zm183.283 333.821l-71.313-17.828c-74.923 53.89-165.738 41.864-223.94 0l-71.313 17.828C29.981 344.505 0 382.903 0 426.955V464c0 26.51 21.49 48 48 48h416c26.51 0 48-21.49 48-48v-37.045c0-44.052-29.981-82.45-72.717-93.134z"],
    "user-circle": [512, 512, [], "f2bd", "M8 256C8 119.033 119.033 8 256 8s248 111.033 248 248-111.033 248-248 248S8 392.967 8 256zm72.455 125.868C119.657 436.446 183.673 472 256 472s136.343-35.554 175.545-90.132c-3.141-26.99-22.667-49.648-49.538-56.366l-32.374-8.093C323.565 339.79 290.722 352 256 352s-67.565-12.21-93.634-34.591l-32.374 8.093c-26.87 6.718-46.396 29.376-49.537 56.366zM144 208c0 61.856 50.144 112 112 112s112-50.144 112-112S317.856 96 256 96s-112 50.144-112 112z"],
    "user-md": [448, 512, [], "f0f0", "M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zM104 424c0 13.3 10.7 24 24 24s24-10.7 24-24-10.7-24-24-24-24 10.7-24 24zm250.4-151.6l-34.4-5.7v55c36.5 7.4 64 39.8 64 78.4v56c0 7.6-5.4 14.2-12.9 15.7l-32.2 6.4c-4.3.9-8.5-1.9-9.4-6.3l-3.1-15.7c-.9-4.3 1.9-8.6 6.3-9.4l19.3-3.9V400c0-29.6-26.9-53-57.6-47.1-22.8 4.4-38.4 25.8-38.4 49v41l19.3 3.9c4.3.9 7.1 5.1 6.3 9.4l-3.1 15.7c-.9 4.3-5.1 7.1-9.4 6.3l-31.2-4.2c-7.9-1.1-13.8-7.8-13.8-15.9v-58c0-38.6 27.5-70.9 64-78.4v-47.2c-19.6 8.6-41.2 13.6-64 13.6-29.3 0-56.4-8.5-80-22.3v104.9c23.1 6.9 40 28.1 40 53.4 0 30.9-25.1 56-56 56s-56-25.1-56-56c0-25.3 16.9-46.5 40-53.4V269.3l-18.4 3.1c-54 9-93.6 55.7-93.6 110.5V480c0 17.7 14.3 32 32 32h384c17.7 0 32-14.3 32-32v-97.1c-.1-54.8-39.7-101.5-93.7-110.5z"],
    "user-plus": [640, 512, [], "f234", "M224 32c77.32 0 140 62.68 140 140s-62.68 140-140 140S84 249.32 84 172 146.68 32 224 32zm160.373 292.093l-62.399-15.6c-65.557 47.154-145.021 36.631-195.948 0l-62.399 15.6C26.233 333.442 0 367.04 0 405.585V438c0 23.196 18.804 42 42 42h364c23.196 0 42-18.804 42-42v-32.415c0-38.545-26.233-72.143-63.627-81.492zM628 224.889h-68.889V156c0-6.627-5.373-12-12-12h-38.222c-6.627 0-12 5.373-12 12l-.002 68.887-68.887.002c-6.627 0-12 5.373-12 12v38.222c0 6.627 5.373 12 12 12l68.887.002.002 68.887c0 6.627 5.373 12 12 12h38.222c6.627 0 12-5.373 12-12l.002-68.887 68.887-.002c6.627 0 12-5.373 12-12v-38.222c0-6.627-5.373-12-12-12z"],
    "user-secret": [448, 512, [], "f21b", "M388.829 295.324l20.972-55.052c2.992-7.854-2.809-16.272-11.214-16.272H340.39c7.45-16.236 11.61-34.297 11.61-53.333 0-3.631-.16-7.224-.456-10.778C391.083 152.074 416 140.684 416 128c0-13.263-27.231-25.112-69.947-32.937-9.185-32.805-27.178-65.797-40.714-82.85-9.452-11.908-25.873-15.634-39.471-8.834l-27.557 13.779a31.997 31.997 0 0 1-28.622 0l-27.557-13.78c-13.599-6.799-30.02-3.074-39.471 8.834-13.536 17.053-31.529 50.045-40.714 82.85C59.231 102.888 32 114.737 32 128c0 12.684 24.917 24.074 64.456 31.889A129.362 129.362 0 0 0 96 170.667c0 19.037 4.159 37.098 11.608 53.333h-57.41c-8.615 0-14.423 8.808-11.029 16.727l22.906 53.447C25.799 307.882 0 342.925 0 384v80c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48v-80c0-39.97-24.43-74.231-59.171-88.676zM184 488l-48-192 48 24 24 40-24 128zm80 0l-24-128 24-40 48-24-48 192zm54.778-303.746c-.008.043-4.299 3.231-5.125 5.771-3.861 11.864-7.026 24.572-16.514 33.359-10.071 9.327-47.957 22.405-63.996-25.029-2.837-8.395-15.447-8.398-18.285 0-16.963 50.168-56.019 32.417-63.996 25.029-9.488-8.786-12.653-21.495-16.514-33.359-.826-2.54-5.118-5.728-5.125-5.771-.554-2.925-.981-5.884-1.22-8.85-.309-3.848 10.078-3.658 11.078-3.747 26.303-2.326 52.303-.579 78.023 5.497 2.563.606 11.553.529 13.793 0 25.72-6.076 51.72-7.824 78.023-5.497 1.002.089 11.387-.102 11.078 3.747-.239 2.966-.666 5.925-1.22 8.85z"],
    "user-times": [640, 512, [], "f235", "M224 32c77.32 0 140 62.68 140 140s-62.68 140-140 140S84 249.32 84 172 146.68 32 224 32zm160.373 292.093l-62.399-15.6c-65.557 47.154-145.021 36.631-195.948 0l-62.399 15.6C26.233 333.442 0 367.04 0 405.585V438c0 23.196 18.804 42 42 42h364c23.196 0 42-18.804 42-42v-32.415c0-38.545-26.233-72.143-63.627-81.492zM587.897 256l48.596-48.598c4.675-4.675 4.675-12.256 0-16.931l-26.964-26.964c-4.675-4.675-12.256-4.675-16.931 0L544 212.105l-48.598-48.598c-4.675-4.675-12.256-4.675-16.931 0l-26.964 26.964c-4.675 4.675-4.675 12.256 0 16.931L500.103 256l-48.596 48.598c-4.675 4.675-4.675 12.256 0 16.931l26.964 26.964c4.675 4.675 12.256 4.675 16.931 0L544 299.897l48.598 48.596c4.675 4.675 12.256 4.675 16.931 0l26.964-26.964c4.675-4.675 4.675-12.256 0-16.931L587.897 256z"],
    "users": [640, 512, [], "f0c0", "M320 64c57.99 0 105 47.01 105 105s-47.01 105-105 105-105-47.01-105-105S262.01 64 320 64zm113.463 217.366l-39.982-9.996c-49.168 35.365-108.766 27.473-146.961 0l-39.982 9.996C174.485 289.379 152 318.177 152 351.216V412c0 19.882 16.118 36 36 36h264c19.882 0 36-16.118 36-36v-60.784c0-33.039-22.485-61.837-54.537-69.85zM528 300c38.66 0 70-31.34 70-70s-31.34-70-70-70-70 31.34-70 70 31.34 70 70 70zm-416 0c38.66 0 70-31.34 70-70s-31.34-70-70-70-70 31.34-70 70 31.34 70 70 70zm24 112v-60.784c0-16.551 4.593-32.204 12.703-45.599-29.988 14.72-63.336 8.708-85.69-7.37l-26.655 6.664C14.99 310.252 0 329.452 0 351.477V392c0 13.255 10.745 24 24 24h112.169a52.417 52.417 0 0 1-.169-4zm467.642-107.09l-26.655-6.664c-27.925 20.086-60.89 19.233-85.786 7.218C499.369 318.893 504 334.601 504 351.216V412c0 1.347-.068 2.678-.169 4H616c13.255 0 24-10.745 24-24v-40.523c0-22.025-14.99-41.225-36.358-46.567z"],
    "utensil-spoon": [512, 512, [], "f2e5", "M480.1 31.9c-55-55.1-164.9-34.5-227.8 28.5-49.3 49.3-55.1 110-28.8 160.4L9 413.2c-11.6 10.5-12.1 28.5-1 39.5L59.3 504c11 11 29.1 10.5 39.5-1.1l192.4-214.4c50.4 26.3 111.1 20.5 160.4-28.8 63-62.9 83.6-172.8 28.5-227.8z"],
    "utensils": [416, 512, [], "f2e7", "M207.9 15.2c.8 4.7 16.1 94.5 16.1 128.8 0 52.3-27.8 89.6-68.9 104.6L168 486.7c.7 13.7-10.2 25.3-24 25.3H80c-13.7 0-24.7-11.5-24-25.3l12.9-238.1C27.7 233.6 0 196.2 0 144 0 109.6 15.3 19.9 16.1 15.2 19.3-5.1 61.4-5.4 64 16.3v141.2c1.3 3.4 15.1 3.2 16 0 1.4-25.3 7.9-139.2 8-141.8 3.3-20.8 44.7-20.8 47.9 0 .2 2.7 6.6 116.5 8 141.8.9 3.2 14.8 3.4 16 0V16.3c2.6-21.6 44.8-21.4 48-1.1zm119.2 285.7l-15 185.1c-1.2 14 9.9 26 23.9 26h56c13.3 0 24-10.7 24-24V24c0-13.2-10.7-24-24-24-82.5 0-221.4 178.5-64.9 300.9z"],
    "venus": [288, 512, [], "f221", "M288 176c0-79.5-64.5-144-144-144S0 96.5 0 176c0 68.5 47.9 125.9 112 140.4V368H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v36c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-36h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-51.6c64.1-14.5 112-71.9 112-140.4zm-224 0c0-44.1 35.9-80 80-80s80 35.9 80 80-35.9 80-80 80-80-35.9-80-80z"],
    "venus-double": [512, 512, [], "f226", "M288 176c0-79.5-64.5-144-144-144S0 96.5 0 176c0 68.5 47.9 125.9 112 140.4V368H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v36c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-36h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-51.6c64.1-14.5 112-71.9 112-140.4zm-224 0c0-44.1 35.9-80 80-80s80 35.9 80 80-35.9 80-80 80-80-35.9-80-80zm336 140.4V368h36c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12h-36v36c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-36h-36c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h36v-51.6c-21.2-4.8-40.6-14.3-57.2-27.3 14-16.7 25-36 32.1-57.1 14.5 14.8 34.7 24 57.1 24 44.1 0 80-35.9 80-80s-35.9-80-80-80c-22.3 0-42.6 9.2-57.1 24-7.1-21.1-18-40.4-32.1-57.1C303.4 43.6 334.3 32 368 32c79.5 0 144 64.5 144 144 0 68.5-47.9 125.9-112 140.4z"],
    "venus-mars": [576, 512, [], "f228", "M564 0h-79c-10.7 0-16 12.9-8.5 20.5l16.9 16.9-48.7 48.7C422.5 72.1 396.2 64 368 64c-33.7 0-64.6 11.6-89.2 30.9 14 16.7 25 36 32.1 57.1 14.5-14.8 34.7-24 57.1-24 44.1 0 80 35.9 80 80s-35.9 80-80 80c-22.3 0-42.6-9.2-57.1-24-7.1 21.1-18 40.4-32.1 57.1 24.5 19.4 55.5 30.9 89.2 30.9 79.5 0 144-64.5 144-144 0-28.2-8.1-54.5-22.1-76.7l48.7-48.7 16.9 16.9c2.4 2.4 5.4 3.5 8.4 3.5 6.2 0 12.1-4.8 12.1-12V12c0-6.6-5.4-12-12-12zM144 64C64.5 64 0 128.5 0 208c0 68.5 47.9 125.9 112 140.4V400H76c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h36v36c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12v-36h36c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12h-36v-51.6c64.1-14.6 112-71.9 112-140.4 0-79.5-64.5-144-144-144zm0 224c-44.1 0-80-35.9-80-80s35.9-80 80-80 80 35.9 80 80-35.9 80-80 80z"],
    "video": [576, 512, [], "f03d", "M528 64h-12.118a48 48 0 0 0-33.941 14.059L384 176v-64c0-26.51-21.49-48-48-48H48C21.49 64 0 85.49 0 112v288c0 26.51 21.49 48 48 48h288c26.51 0 48-21.49 48-48v-64l97.941 97.941A48 48 0 0 0 515.882 448H528c26.51 0 48-21.49 48-48V112c0-26.51-21.49-48-48-48z"],
    "volleyball-ball": [495, 512, [], "f45f", "M223.3 243.4c-.9-37-8.6-72.8-22.7-105.7-90.8 42.4-157.5 122.4-180.3 216.8 13.4 30.8 32.9 58.3 56.9 81.1 22.7-79.2 74.2-147.8 146.1-192.2zM186.4 109c-15-26.4-34.5-50.1-57.4-70.7C38 88.1-15.8 191.2 4 300.5c33.4-83.1 98.4-152 182.4-191.5zM374 274.1c8.6-99.8-27.3-197.5-97.5-264.4-14.7-1.7-51.6-5.5-98.9 8.5 57.3 59.3 91 138.2 93.5 222.7 32.5 17.7 67.3 29 102.9 33.2zm-124.7 9.5c-31.6 19.3-58.7 43.9-80.2 72.6 82 57.3 184.5 75.1 277.5 47.8 19.7-26.4 34.2-56.8 42.2-89.9-26.6 6.6-53.7 10.4-80.9 10.4-54.6-.1-108.9-14.1-158.6-40.9zM151 383.3c-15.2 26-25.7 54.4-32.1 84.2 37.6 23 81.7 36.5 129.1 36.5 61 0 116.7-22.1 159.9-58.6C295 461.5 204.6 420.6 151 383.3zM331.3 22.7c55.3 70.4 82.5 161.2 74.6 253.6 30.3.2 60.5-4.8 89.7-14.2 0-2 .3-4 .3-6 0-107.8-68.7-199.1-164.6-233.4z"],
    "volume-down": [384, 512, [], "f027", "M256 88.017v335.964c0 21.438-25.943 31.998-40.971 16.971L126.059 352H24c-13.255 0-24-10.745-24-24V184c0-13.255 10.745-24 24-24h102.059l88.971-88.954c15.01-15.01 40.97-4.49 40.97 16.971zM384 256c0-33.717-17.186-64.35-45.972-81.944-15.079-9.214-34.775-4.463-43.992 10.616s-4.464 34.775 10.615 43.992C314.263 234.538 320 244.757 320 256a32.056 32.056 0 0 1-13.802 26.332c-14.524 10.069-18.136 30.006-8.067 44.53 10.07 14.525 30.008 18.136 44.53 8.067C368.546 316.983 384 287.478 384 256z"],
    "volume-off": [256, 512, [], "f026", "M256 88.017v335.964c0 21.438-25.943 31.998-40.971 16.971L126.059 352H24c-13.255 0-24-10.745-24-24V184c0-13.255 10.745-24 24-24h102.059l88.971-88.954c15.01-15.01 40.97-4.49 40.97 16.971z"],
    "volume-up": [576, 512, [], "f028", "M256 88.017v335.964c0 21.438-25.943 31.998-40.971 16.971L126.059 352H24c-13.255 0-24-10.745-24-24V184c0-13.255 10.745-24 24-24h102.059l88.971-88.954c15.01-15.01 40.97-4.49 40.97 16.971zm182.056-77.876C422.982.92 403.283 5.668 394.061 20.745c-9.221 15.077-4.473 34.774 10.604 43.995C468.967 104.063 512 174.983 512 256c0 73.431-36.077 142.292-96.507 184.206-14.522 10.072-18.129 30.01-8.057 44.532 10.076 14.528 30.016 18.126 44.531 8.057C529.633 438.927 576 350.406 576 256c0-103.244-54.579-194.877-137.944-245.859zM480 256c0-68.547-36.15-129.777-91.957-163.901-15.076-9.22-34.774-4.471-43.994 10.607-9.22 15.078-4.471 34.774 10.607 43.994C393.067 170.188 416 211.048 416 256c0 41.964-20.62 81.319-55.158 105.276-14.521 10.073-18.128 30.01-8.056 44.532 6.216 8.96 16.185 13.765 26.322 13.765a31.862 31.862 0 0 0 18.21-5.709C449.091 377.953 480 318.938 480 256zm-96 0c0-33.717-17.186-64.35-45.972-81.944-15.079-9.214-34.775-4.463-43.992 10.616s-4.464 34.775 10.615 43.992C314.263 234.538 320 244.757 320 256a32.056 32.056 0 0 1-13.802 26.332c-14.524 10.069-18.136 30.006-8.067 44.53 10.07 14.525 30.008 18.136 44.53 8.067C368.546 316.983 384 287.478 384 256z"],
    "warehouse": [640, 512, [], "f494", "M504 352H136.4c-4.4 0-8 3.6-8 8l-.1 48c0 4.4 3.6 8 8 8H504c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm0 96H136.1c-4.4 0-8 3.6-8 8l-.1 48c0 4.4 3.6 8 8 8h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm0-192H136.6c-4.4 0-8 3.6-8 8l-.1 48c0 4.4 3.6 8 8 8H504c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8zm106.5-139L338.4 3.7a48.15 48.15 0 0 0-36.9 0L29.5 117C11.7 124.5 0 141.9 0 161.3V504c0 4.4 3.6 8 8 8h80c4.4 0 8-3.6 8-8V256c0-17.6 14.6-32 32.6-32h382.8c18 0 32.6 14.4 32.6 32v248c0 4.4 3.6 8 8 8h80c4.4 0 8-3.6 8-8V161.3c0-19.4-11.7-36.8-29.5-44.3z"],
    "weight": [512, 512, [], "f496", "M448 64h-26c16.4 28.3 26 61 26 96 0 105.9-86.1 192-192 192S64 265.9 64 160c0-35 9.6-67.7 26-96H64C28.7 64 0 92.7 0 128v320c0 35.3 28.7 64 64 64h384c35.3 0 64-28.7 64-64V128c0-35.3-28.7-64-64-64zM256 320c88.4 0 160-71.6 160-160S344.4 0 256 0 96 71.6 96 160s71.6 160 160 160zm-.3-151.9l33.6-78.4c3.5-8.2 12.9-11.9 21-8.4s11.9 12.9 8.4 21L285 180.9c6.7 7.1 10.9 16.6 10.9 27.1 0 22.1-17.9 40-40 40s-40-17.9-40-40c.1-22 17.9-39.8 39.8-39.9z"],
    "wheelchair": [512, 512, [], "f193", "M496.101 385.669l14.227 28.663c3.929 7.915.697 17.516-7.218 21.445l-65.465 32.886c-16.049 7.967-35.556 1.194-43.189-15.055L331.679 320H192c-15.925 0-29.426-11.71-31.679-27.475C126.433 55.308 128.38 70.044 128 64c0-36.358 30.318-65.635 67.052-63.929 33.271 1.545 60.048 28.905 60.925 62.201.868 32.933-23.152 60.423-54.608 65.039l4.67 32.69H336c8.837 0 16 7.163 16 16v32c0 8.837-7.163 16-16 16H215.182l4.572 32H352a32 32 0 0 1 28.962 18.392L438.477 396.8l36.178-18.349c7.915-3.929 17.517-.697 21.446 7.218zM311.358 352h-24.506c-7.788 54.204-54.528 96-110.852 96-61.757 0-112-50.243-112-112 0-41.505 22.694-77.809 56.324-97.156-3.712-25.965-6.844-47.86-9.488-66.333C45.956 198.464 0 261.963 0 336c0 97.047 78.953 176 176 176 71.87 0 133.806-43.308 161.11-105.192L311.358 352z"],
    "wifi": [640, 512, [], "f1eb", "M384 416c0 35.346-28.654 64-64 64s-64-28.654-64-64c0-35.346 28.654-64 64-64s64 28.654 64 64zm136.659-124.443c6.465-6.465 6.245-17.065-.564-23.167-113.793-101.985-286.526-101.869-400.19 0-6.809 6.102-7.029 16.702-.564 23.167l34.006 34.006c5.927 5.927 15.464 6.32 21.769.796 82.88-72.609 207.074-72.447 289.768 0 6.305 5.524 15.842 5.132 21.769-.796l34.006-34.006zm112.11-113.718c6.385-6.385 6.254-16.816-.35-22.973-175.768-163.86-449.134-163.8-624.837 0-6.604 6.157-6.735 16.589-.35 22.973l33.966 33.966c6.095 6.095 15.891 6.231 22.224.383 144.763-133.668 368.356-133.702 513.156 0 6.333 5.848 16.129 5.712 22.224-.383l33.967-33.966z"],
    "window-close": [512, 512, [], "f410", "M464 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-83.6 290.5c4.8 4.8 4.8 12.6 0 17.4l-40.5 40.5c-4.8 4.8-12.6 4.8-17.4 0L256 313.3l-66.5 67.1c-4.8 4.8-12.6 4.8-17.4 0l-40.5-40.5c-4.8-4.8-4.8-12.6 0-17.4l67.1-66.5-67.1-66.5c-4.8-4.8-4.8-12.6 0-17.4l40.5-40.5c4.8-4.8 12.6-4.8 17.4 0l66.5 67.1 66.5-67.1c4.8-4.8 12.6-4.8 17.4 0l40.5 40.5c4.8 4.8 4.8 12.6 0 17.4L313.3 256l67.1 66.5z"],
    "window-maximize": [512, 512, [], "f2d0", "M464 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48zm-16 160H64v-84c0-6.6 5.4-12 12-12h360c6.6 0 12 5.4 12 12v84z"],
    "window-minimize": [512, 512, [], "f2d1", "M464 352H48c-26.5 0-48 21.5-48 48v32c0 26.5 21.5 48 48 48h416c26.5 0 48-21.5 48-48v-32c0-26.5-21.5-48-48-48z"],
    "window-restore": [512, 512, [], "f2d2", "M512 48v288c0 26.5-21.5 48-48 48h-48V176c0-44.1-35.9-80-80-80H128V48c0-26.5 21.5-48 48-48h288c26.5 0 48 21.5 48 48zM384 176v288c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V176c0-26.5 21.5-48 48-48h288c26.5 0 48 21.5 48 48zm-68 28c0-6.6-5.4-12-12-12H76c-6.6 0-12 5.4-12 12v52h252v-52z"],
    "won-sign": [576, 512, [], "f159", "M564 192c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-48.028l18.572-80.61c1.732-7.518-3.978-14.694-11.693-14.694h-46.107a11.998 11.998 0 0 0-11.736 9.5L450.73 128H340.839l-19.725-85.987a12 12 0 0 0-11.696-9.317H265.43a12 12 0 0 0-11.687 9.277L233.696 128H124.975L107.5 42.299a12 12 0 0 0-11.758-9.602H53.628c-7.686 0-13.39 7.124-11.709 14.624L60 128H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h62.342l7.171 32H12c-6.627 0-12 5.373-12 12v40c0 6.627 5.373 12 12 12h83.856l40.927 182.624A12 12 0 0 0 148.492 480h56.767c5.583 0 10.428-3.85 11.689-9.288L259.335 288h55.086l42.386 182.712A12 12 0 0 0 368.496 480h56.826a12 12 0 0 0 11.694-9.306L479.108 288H564c6.627 0 12-5.373 12-12v-40c0-6.627-5.373-12-12-12h-70.146l7.373-32H564zm-425.976 0h80.757l-7.457 32h-66.776l-6.524-32zm45.796 150.029c-6.194 25.831-6.758 47.25-7.321 47.25h-1.126s-1.689-22.05-6.758-47.25L157.599 288h38.812l-12.591 54.029zM274.182 224l1.996-8.602c1.856-7.962 3.457-15.968 4.803-23.398h11.794c1.347 7.43 2.947 15.436 4.803 23.398l1.996 8.602h-25.392zm130.959 118.029c-5.068 25.2-6.758 47.25-6.758 47.25h-1.126c-.563 0-1.126-21.42-7.321-47.25L377.542 288h39.107l-11.508 54.029zM430.281 224h-67.42l-7.34-32h81.577l-6.817 32z"],
    "wrench": [512, 512, [], "f0ad", "M481.156 200c9.3 0 15.12 10.155 10.325 18.124C466.295 259.992 420.419 288 368 288c-79.222 0-143.501-63.974-143.997-143.079C223.505 65.469 288.548-.001 368.002 0c52.362.001 98.196 27.949 123.4 69.743C496.24 77.766 490.523 88 481.154 88H376l-40 56 40 56h105.156zm-171.649 93.003L109.255 493.255c-24.994 24.993-65.515 24.994-90.51 0-24.993-24.994-24.993-65.516 0-90.51L218.991 202.5c16.16 41.197 49.303 74.335 90.516 90.503zM104 432c0-13.255-10.745-24-24-24s-24 10.745-24 24 10.745 24 24 24 24-10.745 24-24z"],
    "yen-sign": [384, 512, [], "f157", "M351.208 32h-65.277a12 12 0 0 0-10.778 6.724l-55.39 113.163c-14.513 34.704-27.133 71.932-27.133 71.932h-1.262s-12.62-37.228-27.133-71.932l-55.39-113.163A11.997 11.997 0 0 0 98.068 32H32.792c-9.057 0-14.85 9.65-10.59 17.643L102.322 200H44c-6.627 0-12 5.373-12 12v32c0 6.627 5.373 12 12 12h88.162L152 293.228V320H44c-6.627 0-12 5.373-12 12v32c0 6.627 5.373 12 12 12h108v92c0 6.627 5.373 12 12 12h56c6.627 0 12-5.373 12-12v-92h108c6.627 0 12-5.373 12-12v-32c0-6.627-5.373-12-12-12H232v-26.772L251.838 256H340c6.627 0 12-5.373 12-12v-32c0-6.627-5.373-12-12-12h-58.322l80.12-150.357C366.058 41.65 360.266 32 351.208 32z"]
  };

  var appleCrayonPalette = {
    licorice: "#000000",
    lead: "#1e1e1e",
    tungsten: "#3a3a3a",
    iron: "#545453",
    steel: "#6e6e6e",
    tin: "#878687",
    nickel: "#888787",
    aluminum: "#a09fa0",
    magnesium: "#b8b8b8",
    silver: "#d0d0d0",
    mercury: "#e8e8e8",
    snow: "white",
    //
    cayenne: "#891100",
    mocha: "#894800",
    aspargus: "#888501",
    fern: "#458401",
    clover: "#028401",
    moss: "#018448",
    teal: "#008688",
    ocean: "#004a88",
    midnight: "#001888",
    eggplant: "#491a88",
    plum: "#891e88",
    maroon: "#891648",
    //
    maraschino: "#ff2101",
    tangerine: "#ff8802",
    lemon: "#fffa03",
    lime: "#83f902",
    spring: "#05f802",
    seam_foam: "#03f987",
    turquoise: "#00fdff",
    aqua: "#008cff",
    blueberry: "#002eff",
    grape: "#8931ff",
    magenta: "#ff39ff",
    strawberry: "#ff2987",
    //
    salmon: "#ff726e",
    cantaloupe: "#ffce6e",
    banana: "#fffb6d",
    honeydew: "#cefa6e",
    flora: "#68f96e",
    spindrift: "#68fbd0",
    ice: "#68fdff",
    sky: "#6acfff",
    orchid: "#6e76ff",
    lavender: "#d278ff",
    bubblegum: "#ff7aff",
    carnation: "#ff7fd3"
  };
  var nucleotideColorComponents = {
    "A": [0, 200, 0],
    "C": [0, 0, 200],
    "T": [255, 0, 0],
    "G": [209, 113, 5],
    "a": [0, 200, 0],
    "c": [0, 0, 200],
    "t": [255, 0, 0],
    "g": [209, 113, 5],
    "N": [80, 80, 80]
  };
  var nucleotideColors = {
    "A": "rgb(  0, 200,   0)",
    "C": "rgb(  0,   0, 200)",
    "T": "rgb(255,   0,   0)",
    "G": "rgb(209, 113,   5)",
    "a": "rgb(  0, 200,   0)",
    "c": "rgb(  0,   0, 200)",
    "t": "rgb(255,   0,   0)",
    "g": "rgb(209, 113,   5)",
    "N": "rgb(80, 80, 80)"
  };
  var colorPalettes = {
    Set1: ["rgb(228,26,28)", "rgb(55,126,184)", "rgb(77,175,74)", "rgb(166,86,40)", "rgb(152,78,163)", "rgb(255,127,0)", "rgb(247,129,191)", "rgb(153,153,153)", "rgb(255,255,51)"],
    Dark2: ["rgb(27,158,119)", "rgb(217,95,2)", "rgb(117,112,179)", "rgb(231,41,138)", "rgb(102,166,30)", "rgb(230,171,2)", "rgb(166,118,29)", "rgb(102,102,102)"],
    Set2: ["rgb(102, 194,165)", "rgb(252,141,98)", "rgb(141,160,203)", "rgb(231,138,195)", "rgb(166,216,84)", "rgb(255,217,47)", "rgb(229,196,148)", "rgb(179,179,179)"],
    Set3: ["rgb(141,211,199)", "rgb(255,255,179)", "rgb(190,186,218)", "rgb(251,128,114)", "rgb(128,177,211)", "rgb(253,180,98)", "rgb(179,222,105)", "rgb(252,205,229)", "rgb(217,217,217)", "rgb(188,128,189)", "rgb(204,235,197)", "rgb(255,237,111)"],
    Pastel1: ["rgb(251,180,174)", "rgb(179,205,227)", "rgb(204,235,197)", "rgb(222,203,228)", "rgb(254,217,166)", "rgb(255,255,204)", "rgb(229,216,189)", "rgb(253,218,236)"],
    Pastel2: ["rgb(173,226,207)", "rgb(253,205,172)", "rgb(203,213,232)", "rgb(244,202,228)", "rgb(230,245,201)", "rgb(255,242,174)", "rgb(243,225,206)"],
    Accent: ["rgb(127,201,127)", "rgb(190,174,212)", "rgb(253,192,134)", "rgb(255,255,153)", "rgb(56,108,176)", "rgb(240,2,127)", "rgb(191,91,23)"]
  };

  function PaletteColorTable(palette) {
    this.colors = colorPalettes[palette];
    if (!Array.isArray(this.colors)) this.colors = [];
    this.colorTable = {};
    this.nextIdx = 0;
    this.colorGenerator = new RandomColorGenerator();
  }

  PaletteColorTable.prototype.getColor = function (key) {
    if (!this.colorTable.hasOwnProperty(key)) {
      if (this.nextIdx < this.colors.length) {
        this.colorTable[key] = this.colors[this.nextIdx];
      } else {
        this.colorTable[key] = this.colorGenerator.get();
      }

      this.nextIdx++;
    }

    return this.colorTable[key];
  }; // Random color generator from https://github.com/sterlingwes/RandomColor/blob/master/rcolor.js
  // Free to use & distribute under the MIT license
  // Wes Johnson (@SterlingWes)
  //
  // inspired by http://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/


  function RandomColorGenerator() {
    this.hue = Math.random();
    this.goldenRatio = 0.618033988749895;
    this.hexwidth = 2;
  }

  RandomColorGenerator.prototype.hsvToRgb = function (h, s, v) {
    var h_i = Math.floor(h * 6),
        f = h * 6 - h_i,
        p = v * (1 - s),
        q = v * (1 - f * s),
        t = v * (1 - (1 - f) * s),
        r = 255,
        g = 255,
        b = 255;

    switch (h_i) {
      case 0:
        r = v, g = t, b = p;
        break;

      case 1:
        r = q, g = v, b = p;
        break;

      case 2:
        r = p, g = v, b = t;
        break;

      case 3:
        r = p, g = q, b = v;
        break;

      case 4:
        r = t, g = p, b = v;
        break;

      case 5:
        r = v, g = p, b = q;
        break;
    }

    return [Math.floor(r * 256), Math.floor(g * 256), Math.floor(b * 256)];
  };

  RandomColorGenerator.prototype.padHex = function (str) {
    if (str.length > this.hexwidth) return str;
    return new Array(this.hexwidth - str.length + 1).join('0') + str;
  };

  RandomColorGenerator.prototype.get = function (saturation, value) {
    this.hue += this.goldenRatio;
    this.hue %= 1;
    if (typeof saturation !== "number") saturation = 0.5;
    if (typeof value !== "number") value = 0.95;
    var rgb = this.hsvToRgb(this.hue, saturation, value);
    return "#" + this.padHex(rgb[0].toString(16)) + this.padHex(rgb[1].toString(16)) + this.padHex(rgb[2].toString(16));
  }; // Returns a random number between min (inclusive) and max (exclusive)

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var IGVMath = {
    lerp: function lerp(v0, v1, t) {
      return (1 - t) * v0 + t * v1;
    },
    mean: function mean(array) {
      var t = 0,
          n = 0,
          i;

      for (i = 0; i < array.length; i++) {
        if (!isNaN(array[i])) {
          t += array[i];
          n++;
        }
      }

      return n > 0 ? t / n : 0;
    },
    meanAndStdev: function meanAndStdev(array) {
      var v,
          t = 0,
          t2 = 0,
          n = 0,
          i;

      for (i = 0; i < array.length; i++) {
        v = array[i];

        if (!isNaN(v)) {
          t += v;
          t2 += v * v;
          n++;
        }
      }

      return n > 0 ? {
        mean: t / n,
        stdev: Math.sqrt(t2 - t * t / n)
      } : {
        mean: 0,
        stdev: 0
      };
    },
    median: function median(numbers) {
      // median of [3, 5, 4, 4, 1, 1, 2, 3] = 3
      var median = 0,
          numsLen = numbers.length;
      numbers.sort();

      if (numsLen % 2 === 0 // is even
      ) {
          // average of two middle numbers
          median = (numbers[numsLen / 2 - 1] + numbers[numsLen / 2]) / 2;
        } else {
        // is odd
        // middle number only
        median = numbers[(numsLen - 1) / 2];
      }

      return median;
    },
    // Fast percentile function for "p" near edges.  This needs profiled for p in middle (e.g. median)
    percentile: function percentile(array, p) {
      if (array.length === 0) return undefined;
      var k = Math.floor(array.length * ((100 - p) / 100));

      if (k === 0) {
        array.sort(function (a, b) {
          return b - a;
        });
        return array[k];
      } else {
        return selectElement(array, k);
      }
    },
    clamp: function clamp(value, min, max) {
      return Math.min(Math.max(value, min), max);
    },
    log2: function log2(x) {
      return Math.log(x) / Math.LN2;
    }
  };

  function selectElement(array, k) {
    // Credit Steve Hanov http://stevehanov.ca/blog/index.php?id=122
    var heap = new BinaryHeap(),
        i;

    for (i = 0; i < array.length; i++) {
      var item = array[i]; // If we have not yet found k items, or the current item is larger than
      // the smallest item on the heap, add current item

      if (heap.content.length < k || item > heap.content[0]) {
        // If the heap is full, remove the smallest element on the heap.
        if (heap.content.length === k) {
          var r = heap.pop();
        }

        heap.push(item);
      }
    }

    return heap.content[0];
  }

  function BinaryHeap() {
    this.content = [];
  }

  BinaryHeap.prototype = {
    push: function push(element) {
      // Add the new element to the end of the array.
      this.content.push(element); // Allow it to bubble up.

      this.bubbleUp(this.content.length - 1);
    },
    pop: function pop() {
      // Store the first element so we can return it later.
      var result = this.content[0]; // Get the element at the end of the array.

      var end = this.content.pop(); // If there are any elements left, put the end element at the
      // start, and let it sink down.

      if (this.content.length > 0) {
        this.content[0] = end;
        this.sinkDown(0);
      }

      return result;
    },
    remove: function remove(node) {
      var length = this.content.length; // To remove a value, we must search through the array to find
      // it.

      for (var i = 0; i < length; i++) {
        if (this.content[i] !== node) continue; // When it is found, the process seen in 'pop' is repeated
        // to fill up the hole.

        var end = this.content.pop(); // If the element we popped was the one we needed to remove,
        // we're done.

        if (i === length - 1) break; // Otherwise, we replace the removed element with the popped
        // one, and allow it to float up or sink down as appropriate.

        this.content[i] = end;
        this.bubbleUp(i);
        this.sinkDown(i);
        break;
      }
    },
    size: function size() {
      return this.content.length;
    },
    bubbleUp: function bubbleUp(n) {
      // Fetch the element that has to be moved.
      var element = this.content[n],
          score = element; // When at 0, an element can not go up any further.

      while (n > 0) {
        // Compute the parent element's index, and fetch it.
        var parentN = Math.floor((n + 1) / 2) - 1,
            parent = this.content[parentN]; // If the parent has a lesser score, things are in order and we
        // are done.

        if (score >= parent) break; // Otherwise, swap the parent with the current element and
        // continue.

        this.content[parentN] = element;
        this.content[n] = parent;
        n = parentN;
      }
    },
    sinkDown: function sinkDown(n) {
      // Look up the target element and its score.
      var length = this.content.length,
          element = this.content[n],
          elemScore = element;

      while (true) {
        // Compute the indices of the child elements.
        var child2N = (n + 1) * 2,
            child1N = child2N - 1; // This is used to store the new position of the element,
        // if any.

        var swap = null; // If the first child exists (is inside the array)...

        if (child1N < length) {
          // Look it up and compute its score.
          var child1 = this.content[child1N],
              child1Score = child1; // If the score is less than our element's, we need to swap.

          if (child1Score < elemScore) swap = child1N;
        } // Do the same checks for the other child.


        if (child2N < length) {
          var child2 = this.content[child2N],
              child2Score = child2;
          if (child2Score < (swap == null ? elemScore : child1Score)) swap = child2N;
        } // No need to swap further, we are done.


        if (swap == null) break; // Otherwise, swap and continue.

        this.content[n] = this.content[swap];
        this.content[swap] = element;
        n = swap;
      }
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var IGVColor = {
    rgbListFromHSV: function rgbListFromHSV() {
      var s = 1;
      var accumulation = [];

      for (var v = 1; v >= 0.5; v -= .1) {
        for (var h = 0; h < 1; h += 1 / 28) {
          var r = "rgb(" + IGVColor.hsvToRgb(h, s, v).join(",") + ")";
          accumulation.push(r);
        }
      } // add black


      accumulation.pop();
      accumulation.push(IGVColor.rgbColor(16, 16, 16));
      return accumulation;
    },
    rgbToHex: function rgbToHex(rgb) {
      rgb = rgb.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i);
      return rgb && rgb.length === 4 ? "#" + ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[3], 10).toString(16)).slice(-2) : '';
    },
    hexToRgb: function hexToRgb(hex) {
      var cooked = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

      if (null === cooked) {
        return undefined;
      }

      return "rgb(" + parseInt(cooked[1], 16) + "," + parseInt(cooked[2], 16) + "," + parseInt(cooked[3], 16) + ")";
    },

    /**
     * Converts an HSV color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
     * Assumes h, s, and v are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     *
     * Credit: https://gist.githubusercontent.com/mjackson/5311256
     *
     * @param   h       The hue
     * @param   s       The saturation
     * @param   v       The value
     * @return  Array   The RGB representation
     */
    hsvToRgb: function hsvToRgb(h, s, v) {
      var r, g, b;
      var i = Math.floor(h * 6);
      var f = h * 6 - i;
      var p = v * (1 - s);
      var q = v * (1 - f * s);
      var t = v * (1 - (1 - f) * s);

      switch (i % 6) {
        case 0:
          r = v, g = t, b = p;
          break;

        case 1:
          r = q, g = v, b = p;
          break;

        case 2:
          r = p, g = v, b = t;
          break;

        case 3:
          r = p, g = q, b = v;
          break;

        case 4:
          r = t, g = p, b = v;
          break;

        case 5:
          r = v, g = p, b = q;
          break;
      }

      return [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];
    },

    /**
     * Converts an HSL color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes h, s, and l are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     *
     * Credit: https://gist.githubusercontent.com/mjackson/5311256
     *
     * @param   h       The hue
     * @param   s       The saturation
     * @param   l       The lightness
     * @return  Array   The RGB representation
     */
    hslToRgb: function hslToRgb(h, s, l) {
      var r, g, b;

      if (s === 0) {
        r = g = b = l; // achromatic
      } else {
        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        var p = 2 * l - q;
        r = IGVColor.hue2rgb(p, q, h + 1 / 3);
        g = IGVColor.hue2rgb(p, q, h);
        b = IGVColor.hue2rgb(p, q, h - 1 / 3);
      }

      return [r * 255, g * 255, b * 255];
    },
    hue2rgb: function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    },
    rgbaColor: function rgbaColor(r, g, b, a) {
      r = IGVMath.clamp(r, 0, 255);
      g = IGVMath.clamp(g, 0, 255);
      b = IGVMath.clamp(b, 0, 255);
      a = IGVMath.clamp(a, 0.0, 1.0);
      return "rgba(" + r + "," + g + "," + b + "," + a + ")";
    },
    rgbColor: function rgbColor(r, g, b) {
      r = IGVMath.clamp(r, 0, 255);
      g = IGVMath.clamp(g, 0, 255);
      b = IGVMath.clamp(b, 0, 255);
      return "rgb(" + r + "," + g + "," + b + ")";
    },
    greyScale: function greyScale(value) {
      var grey = IGVMath.clamp(value, 0, 255);
      return "rgb(" + grey + "," + grey + "," + grey + ")";
    },
    randomGrey: function randomGrey(min, max) {
      min = IGVMath.clamp(min, 0, 255);
      max = IGVMath.clamp(max, 0, 255);
      var g = Math.round(Math.random(min, max)).toString(10);
      return "rgb(" + g + "," + g + "," + g + ")";
    },
    randomRGB: function randomRGB(min, max) {
      min = IGVMath.clamp(min, 0, 255);
      max = IGVMath.clamp(max, 0, 255);
      var r = Math.round(Math.random(min, max)).toString(10);
      var g = Math.round(Math.random(min, max)).toString(10);
      var b = Math.round(Math.random(min, max)).toString(10);
      return "rgb(" + r + "," + g + "," + b + ")";
    },
    randomRGBConstantAlpha: function randomRGBConstantAlpha(min, max, alpha) {
      min = IGVMath.clamp(min, 0, 255);
      max = IGVMath.clamp(max, 0, 255);
      var r = Math.round(Math.random(min, max)).toString(10);
      var g = Math.round(Math.random(min, max)).toString(10);
      var b = Math.round(Math.random(min, max)).toString(10);
      return "rgba(" + r + "," + g + "," + b + "," + alpha + ")";
    },
    addAlpha: function addAlpha(color, alpha) {
      var c = this.colorNameToHex(color);

      if (c) {
        color = c;
      }

      var isHex = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(color);

      if (color.startsWith("rgba")) {
        return color; // TODO -- should replace current alpha with new one
      }

      if (isHex) {
        color = IGVColor.hexToRgb(color);
      }

      if (color.startsWith("rgb")) {
        return color.replace("rgb", "rgba").replace(")", ", " + alpha + ")");
      } else {
        return color;
      }
    },

    /**
     *
     * @param dest  RGB components as an array
     * @param src  RGB components as an array
     * @param alpha   alpha transparancy in the range 0-1
     * @returns {}
     */
    getCompositeColor: function getCompositeColor(dest, src, alpha) {
      var r = Math.floor(alpha * src[0] + (1 - alpha) * dest[0]),
          g = Math.floor(alpha * src[1] + (1 - alpha) * dest[1]),
          b = Math.floor(alpha * src[2] + (1 - alpha) * dest[2]);
      return "rgb(" + r + "," + g + "," + b + ")";
    },
    createColorString: function createColorString(token) {
      if (token.includes(",")) {
        return token.startsWith("rgb") ? token : "rgb(" + token + ")";
      } else {
        return token;
      }
    },
    darkenLighten: function darkenLighten(color, amt) {
      var src;
      var hexColor = this.colorNameToHex(color);

      if (hexColor) {
        src = IGVColor.hexToRgb(hexColor);
      } else {
        src = color.startsWith('rgb(') ? color : IGVColor.hexToRgb(color);
      }

      var components = src.replace(")", "").substring(4).split(",");
      var r = Math.max(0, Math.min(255, Number.parseInt(components[0].trim()) + amt));
      var g = Math.max(0, Math.min(255, Number.parseInt(components[1].trim()) + amt));
      var b = Math.max(0, Math.min(255, Number.parseInt(components[2].trim()) + amt));
      return 'rgb(' + r.toString() + ',' + g.toString() + ',' + b.toString() + ')';
    },

    /**
     * Convert html/css color name to hex value.  Adapted from https://gist.github.com/mxfh/4719348
     * @param colorName
     * @returns {*}
     */
    colorNameToHex: function colorNameToHex(colorName) {
      // color list from http://stackoverflow.com/q/1573053/731179  with added gray/gray
      var definedColorNames = {
        "aliceblue": "#f0f8ff",
        "antiquewhite": "#faebd7",
        "aqua": "#00ffff",
        "aquamarine": "#7fffd4",
        "azure": "#f0ffff",
        "beige": "#f5f5dc",
        "bisque": "#ffe4c4",
        "black": "#000000",
        "blanchedalmond": "#ffebcd",
        "blue": "#0000ff",
        "blueviolet": "#8a2be2",
        "brown": "#a52a2a",
        "burlywood": "#deb887",
        "cadetblue": "#5f9ea0",
        "chartreuse": "#7fff00",
        "chocolate": "#d2691e",
        "coral": "#ff7f50",
        "cornflowerblue": "#6495ed",
        "cornsilk": "#fff8dc",
        "crimson": "#dc143c",
        "cyan": "#00ffff",
        "darkblue": "#00008b",
        "darkcyan": "#008b8b",
        "darkgoldenrod": "#b8860b",
        "darkgray": "#a9a9a9",
        "darkgreen": "#006400",
        "darkkhaki": "#bdb76b",
        "darkmagenta": "#8b008b",
        "darkolivegreen": "#556b2f",
        "darkorange": "#ff8c00",
        "darkorchid": "#9932cc",
        "darkred": "#8b0000",
        "darksalmon": "#e9967a",
        "darkseagreen": "#8fbc8f",
        "darkslateblue": "#483d8b",
        "darkslategray": "#2f4f4f",
        "darkturquoise": "#00ced1",
        "darkviolet": "#9400d3",
        "deeppink": "#ff1493",
        "deepskyblue": "#00bfff",
        "dimgray": "#696969",
        "dodgerblue": "#1e90ff",
        "firebrick": "#b22222",
        "floralwhite": "#fffaf0",
        "forestgreen": "#228b22",
        "fuchsia": "#ff00ff",
        "gainsboro": "#dcdcdc",
        "ghostwhite": "#f8f8ff",
        "gold": "#ffd700",
        "goldenrod": "#daa520",
        "gray": "#808080",
        "green": "#008000",
        "greenyellow": "#adff2f",
        "honeydew": "#f0fff0",
        "hotpink": "#ff69b4",
        "indianred ": "#cd5c5c",
        "indigo ": "#4b0082",
        "ivory": "#fffff0",
        "khaki": "#f0e68c",
        "lavender": "#e6e6fa",
        "lavenderblush": "#fff0f5",
        "lawngreen": "#7cfc00",
        "lemonchiffon": "#fffacd",
        "lightblue": "#add8e6",
        "lightcoral": "#f08080",
        "lightcyan": "#e0ffff",
        "lightgoldenrodyellow": "#fafad2",
        "lightgrey": "#d3d3d3",
        "lightgreen": "#90ee90",
        "lightpink": "#ffb6c1",
        "lightsalmon": "#ffa07a",
        "lightseagreen": "#20b2aa",
        "lightskyblue": "#87cefa",
        "lightslategray": "#778899",
        "lightsteelblue": "#b0c4de",
        "lightyellow": "#ffffe0",
        "lime": "#00ff00",
        "limegreen": "#32cd32",
        "linen": "#faf0e6",
        "magenta": "#ff00ff",
        "maroon": "#800000",
        "mediumaquamarine": "#66cdaa",
        "mediumblue": "#0000cd",
        "mediumorchid": "#ba55d3",
        "mediumpurple": "#9370d8",
        "mediumseagreen": "#3cb371",
        "mediumslateblue": "#7b68ee",
        "mediumspringgreen": "#00fa9a",
        "mediumturquoise": "#48d1cc",
        "mediumvioletred": "#c71585",
        "midnightblue": "#191970",
        "mintcream": "#f5fffa",
        "mistyrose": "#ffe4e1",
        "moccasin": "#ffe4b5",
        "navajowhite": "#ffdead",
        "navy": "#000080",
        "oldlace": "#fdf5e6",
        "olive": "#808000",
        "olivedrab": "#6b8e23",
        "orange": "#ffa500",
        "orangered": "#ff4500",
        "orchid": "#da70d6",
        "palegoldenrod": "#eee8aa",
        "palegreen": "#98fb98",
        "paleturquoise": "#afeeee",
        "palevioletred": "#d87093",
        "papayawhip": "#ffefd5",
        "peachpuff": "#ffdab9",
        "peru": "#cd853f",
        "pink": "#ffc0cb",
        "plum": "#dda0dd",
        "powderblue": "#b0e0e6",
        "purple": "#800080",
        "red": "#ff0000",
        "rosybrown": "#bc8f8f",
        "royalblue": "#4169e1",
        "saddlebrown": "#8b4513",
        "salmon": "#fa8072",
        "sandybrown": "#f4a460",
        "seagreen": "#2e8b57",
        "seashell": "#fff5ee",
        "sienna": "#a0522d",
        "silver": "#c0c0c0",
        "skyblue": "#87ceeb",
        "slateblue": "#6a5acd",
        "slategray": "#708090",
        "snow": "#fffafa",
        "springgreen": "#00ff7f",
        "steelblue": "#4682b4",
        "tan": "#d2b48c",
        "teal": "#008080",
        "thistle": "#d8bfd8",
        "tomato": "#ff6347",
        "turquoise": "#40e0d0",
        "violet": "#ee82ee",
        "wheat": "#f5deb3",
        "white": "#ffffff",
        "whitesmoke": "#f5f5f5",
        "yellow": "#ffff00",
        "yellowgreen": "#9acd32",
        "darkgrey": "#a9a9a9",
        "darkslategrey": "#2f4f4f",
        "dimgrey": "#696969",
        "grey": "#808080",
        "lightgray": "#d3d3d3",
        "lightslategrey": "#778899",
        "slategrey": "#708090"
      };
      return definedColorNames[colorName];
    }
  };

  function attachDialogCloseHandlerWithParent($parent, closeHandler) {
    var $container = $('<div>');
    $parent.append($container);
    $container.append(createIcon("times"));
    $container.on('click', function (e) {
      e.preventDefault();
      e.stopPropagation();
      closeHandler();
    });
  }

  function createColorSwatchSelector($genericContainer, colorHandler, defaultColor) {
    var appleColors = Object.values(appleCrayonPalette);

    if (defaultColor && !(typeof defaultColor === 'function')) {
      // Remove 'snow' color.
      appleColors.splice(11, 1); // Add default color.

      appleColors.unshift(IGVColor.rgbToHex(defaultColor));
    }

    var _loop = function _loop() {
      var color = _appleColors[_i];
      var $swatch = $('<div>', {
        class: 'igv-color-swatch'
      });
      $genericContainer.append($swatch);
      $swatch.css('background-color', color);

      if ('white' === color) ; else {
        $swatch.hover(function () {
          $swatch.get(0).style.borderColor = color;
        }, function () {
          $swatch.get(0).style.borderColor = 'white';
        });
        $swatch.on('click.trackview', function (event) {
          event.stopPropagation();
          colorHandler(color);
        });
        $swatch.on('touchend.trackview', function (event) {
          event.stopPropagation();
          colorHandler(color);
        });
      }
    };

    for (var _i = 0, _appleColors = appleColors; _i < _appleColors.length; _i++) {
      _loop();
    }
  }

  var relativeDOMBBox = function relativeDOMBBox(parentElement, childElement) {
    var _parentElement$getBou = parentElement.getBoundingClientRect(),
        x_p = _parentElement$getBou.x,
        y_p = _parentElement$getBou.y,
        width_p = _parentElement$getBou.width,
        height_p = _parentElement$getBou.height;

    var _childElement$getBoun = childElement.getBoundingClientRect(),
        x_c = _childElement$getBoun.x,
        y_c = _childElement$getBoun.y,
        width_c = _childElement$getBoun.width,
        height_c = _childElement$getBoun.height;

    return {
      x: x_c - x_p,
      y: y_c - y_p,
      width: width_c,
      height: height_c
    };
  };

  function pageCoordinates(e) {
    if (e.type.startsWith("touch")) {
      var touch = e.touches[0];
      return {
        x: touch.pageX,
        y: touch.pageY
      };
    } else {
      return {
        x: e.pageX,
        y: e.pageY
      };
    }
  }
  /**
   * Translate the mouse coordinates for the event to the coordinates for the given target element
   * @param e
   * @param target
   * @returns {{x: number, y: number}}
   */


  function translateMouseCoordinates(e, target) {
    var $target = $(target),
        posx,
        posy;

    if (undefined === $target.offset()) ;

    var coords = pageCoordinates(e);
    posx = coords.x - $target.offset().left;
    posy = coords.y - $target.offset().top;
    return {
      x: posx,
      y: posy
    };
  }

  function guid() {
    return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var trackMenuItemListHelper = MenuUtils.trackMenuItemListHelper;

  var Popover = function Popover($parent, browser) {
    this.browser = browser;
    this.$parent = initializationHelper.call(this, $parent);
  };

  function initializationHelper($parent) {
    var self = this,
        $popoverHeader; // popover container

    this.$popover = $('<div class="igv-popover">');
    $parent.append(this.$popover); // popover header

    $popoverHeader = $('<div class="igv-popover-header">');
    this.$popover.append($popoverHeader);
    attachDialogCloseHandlerWithParent($popoverHeader, function () {
      self.hide();
    }); // popover content

    this.$popoverContent = $('<div>');
    this.$popover.append(this.$popoverContent); // this.$popover.draggable({handle: $popoverHeader.get(0)});

    makeDraggable(this.$popover.get(0), $popoverHeader.get(0));
    return $parent;
  }

  Popover.prototype.hide = function () {
    this.$popover.hide();
  };

  Popover.prototype.presentTrackContextMenu = function (e, menuItems) {
    var $popover = this.$popover; // Only 1 popover open at a time

    $('.igv-popover').hide();

    if (menuItems.length > 0) {
      menuItems = trackMenuItemListHelper(menuItems, $popover);
      this.$popoverContent.empty();
      this.$popoverContent.removeClass();
      this.$popoverContent.addClass("igv-popover-track-popup-content");
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = menuItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;
          this.$popoverContent.append(item.object);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var page = pageCoordinates(e);
      $popover.css(clampPopoverLocation(page.x, page.y, this));
      $popover.show();
    }
  };

  Popover.prototype.presentTrackContent = function (pageX, pageY, content) {
    // Only 1 popover open at a time
    $('.igv-popover').hide();

    if (undefined === content) {
      return;
    }

    this.$popoverContent.empty();
    this.$popoverContent.removeClass();
    this.$popoverContent.addClass("igv-popover-track-popup-content");
    this.$popoverContent.html(content);
    this.$popover.css(clampPopoverLocation(pageX, pageY, this));
    this.$popover.show();
  };

  Popover.prototype.dispose = function () {
    this.$popover.empty();
    this.$popoverContent.empty();
    Object.keys(this).forEach(function (key) {
      this[key] = undefined;
    });
  };

  function clampPopoverLocation(pageX, pageY, popover) {
    var left,
        containerCoordinates = {
      x: pageX,
      y: pageY
    },
        containerRect = {
      x: 0,
      y: 0,
      width: $(window).width(),
      height: $(window).height()
    },
        popupRect,
        popupX = pageX,
        popupY = pageY;
    popupX -= popover.$parent.offset().left;
    popupY -= popover.$parent.offset().top;
    popupRect = {
      x: popupX,
      y: popupY,
      width: popover.$popover.outerWidth(),
      height: popover.$popover.outerHeight()
    };
    left = popupX;

    if (containerCoordinates.x + popupRect.width > containerRect.width) {
      left = popupX - popupRect.width;
    }

    return {
      "left": left + "px",
      "top": popupY + "px"
    };
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var extend = function extend(parent, child) {
    child.prototype = Object.create(parent.prototype);
    child.prototype.constructor = child;
    child.prototype._super = Object.getPrototypeOf(child.prototype);
    return child;
  };
  /**
   * Test if the given value is a string or number.  Not using typeof as it fails on boxed primitives.
   *
   * @param value
   * @returns boolean
   */


  function isSimpleType(value) {
    var simpleTypes = new Set(["boolean", "number", "string", "symbol"]);

    var valueType = _typeof(value);

    return value !== undefined && (simpleTypes.has(valueType) || value.substring || value.toFixed);
  }

  var buildOptions = function buildOptions(config, options) {
    var defaultOptions = {
      oauthToken: config.oauthToken,
      headers: config.headers,
      withCredentials: config.withCredentials,
      filename: config.filename
    };
    return Object.assign(defaultOptions, options);
  };

  function download(filename, data) {
    var element = document.createElement('a');
    element.setAttribute('href', data);
    element.setAttribute('download', filename);
    element.style.display = 'none';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  }
  /**
   * isMobile test from http://detectmobilebrowsers.com
   * TODO -- improve UI design so this isn't neccessary
   * @returns {boolean}
   */
  // igv.isMobile = function () {
  //
  //     const a = (navigator.userAgent || navigator.vendor || window.opera);
  //     return (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) ||
  //         /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
  //
  // }


  var doAutoscale = function doAutoscale(features) {
    var min, max;

    if (features.length > 0) {
      min = Number.MAX_VALUE;
      max = -Number.MAX_VALUE;
      features.forEach(function (f) {
        if (!Number.isNaN(f.value)) {
          min = Math.min(min, f.value);
          max = Math.max(max, f.value);
        }
      }); // Insure we have a zero baseline

      if (max > 0) min = Math.min(0, min);
      if (max < 0) max = 0;
    } else {
      // No features -- default
      min = 0;
      max = 100;
    }

    return {
      min: min,
      max: max
    };
  };

  var validateLocusExtent = function validateLocusExtent(chromosomeLengthBP, extent, minimumBP) {
    var ss = extent.start;
    var ee = extent.end;

    if (undefined === ee) {
      ss -= minimumBP / 2;
      ee = ss + minimumBP;

      if (ee > chromosomeLengthBP) {
        ee = chromosomeLengthBP;
        ss = ee - minimumBP;
      } else if (ss < 0) {
        ss = 0;
        ee = minimumBP;
      }
    } else if (ee - ss < minimumBP) {
      var center = (ee + ss) / 2;

      if (center - minimumBP / 2 < 0) {
        ss = 0;
        ee = ss + minimumBP;
      } else if (center + minimumBP / 2 > chromosomeLengthBP) {
        ee = chromosomeLengthBP;
        ss = ee - minimumBP;
      } else {
        ss = center - minimumBP / 2;
        ee = ss + minimumBP;
      }
    }

    extent.start = Math.ceil(ss);
    extent.end = Math.floor(ee);
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var RulerSweeper = function RulerSweeper(viewport) {
    this.viewport = viewport;
    this.browser = viewport.browser;
    this.$rulerSweeper = $('<div class="igv-ruler-sweeper-div">');
    $(viewport.contentDiv).append(this.$rulerSweeper);
    this.namespace = '.sweeper_' + guid();
    this.addMouseHandlers();
  };

  RulerSweeper.prototype.disableMouseHandlers = function () {
    $(document).off(this.namespace);
    this.viewport.$viewport.off(this.namespace);
  };

  RulerSweeper.prototype.addMouseHandlers = function () {
    var browser = this.browser;
    var self = this;
    var isMouseDown, isMouseIn, mouseDown, left, threshold, width, dx;
    this.disableMouseHandlers();
    isMouseDown = isMouseIn = mouseDown = undefined;
    threshold = 1;
    $(this.browser.$root).on('mousedown' + this.namespace, function (e) {
      isMouseIn = true;
      mouseDown = translateMouseCoordinates(e, self.viewport.$viewport).x;

      if (true === isMouseDown) {
        self.$rulerSweeper.show();
        width = threshold;
        left = mouseDown;
        self.$rulerSweeper.css({
          left: left + 'px'
        });
        self.$rulerSweeper.width(width);
      }
    });
    $(this.browser.$root).on('mousemove' + this.namespace, function (e) {
      var mouseCurrent;

      if (isMouseDown && isMouseIn) {
        mouseCurrent = translateMouseCoordinates(e, self.viewport.$viewport).x;
        mouseCurrent = Math.min(mouseCurrent, self.viewport.$viewport.width());
        mouseCurrent = Math.max(mouseCurrent, 0);
        dx = mouseCurrent - mouseDown;
        width = Math.abs(dx);
        self.$rulerSweeper.width(width);

        if (dx < 0) {
          left = mouseDown + dx;
          self.$rulerSweeper.css({
            left: left + 'px'
          });
        }
      }
    });
    $(this.browser.$root).on('mouseup' + this.namespace, function (e) {
      var extent;

      if (true === isMouseDown && true === isMouseIn) {
        isMouseDown = isMouseIn = undefined;
        self.$rulerSweeper.hide();
        extent = {};
        extent.start = bp.call(self, left);
        extent.end = bp.call(self, left + width);

        if (width > threshold) {
          validateLocusExtent(browser.genome.getChromosome(self.viewport.genomicState.referenceFrame.chrName).bpLength, extent, browser.minimumBases());
          self.viewport.genomicState.referenceFrame.bpPerPixel = (Math.round(extent.end) - Math.round(extent.start)) / self.viewport.$viewport.width();
          self.viewport.genomicState.referenceFrame.start = Math.round(extent.start);
          browser.updateViews(self.viewport.genomicState);
        }
      }
    });
    this.viewport.$viewport.on('mousedown' + this.namespace, function (e) {
      isMouseDown = true;
    });
  };

  RulerSweeper.prototype.dispose = function () {
    this.disableMouseHandlers();
  };

  function bp(pixel) {
    return this.viewport.genomicState.referenceFrame.start + pixel * this.viewport.genomicState.referenceFrame.bpPerPixel;
  }

  var Cytoband = function Cytoband(start, end, name, typestain) {
    this.start = start;
    this.end = end;
    this.name = name;
    this.stain = 0; // Set the type, either p, n, or c

    if (typestain === 'acen') {
      this.type = 'c';
    } else {
      this.type = typestain.charAt(1);

      if (this.type === 'p') {
        this.stain = parseInt(typestain.substring(4));
      }
    }
  };

  /**
   * @fileoverview Zlib namespace. Zlib の仕様に準拠した圧縮は Zlib.Deflate で実装
   * されている. これは Inflate との共存を考慮している為.
   */
  var ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE = 65000;
  var Zlib = {
    Huffman: {},
    Util: {},
    CRC32: {}
  };
  /**
   * Compression Method
   * @enum {number}
   */

  Zlib.CompressionMethod = {
    DEFLATE: 8,
    RESERVED: 15
  };
  /**
   * @param {Object=} opt_params options.
   * @constructor
   */

  Zlib.Zip = function (opt_params) {
    opt_params = opt_params || {};
    /** @type {Array.<{
     *   buffer: !(Array.<number>|Uint8Array),
     *   option: Object,
     *   compressed: boolean,
     *   encrypted: boolean,
     *   size: number,
     *   crc32: number
     * }>} */

    this.files = [];
    /** @type {(Array.<number>|Uint8Array)} */

    this.comment = opt_params['comment'];
    /** @type {(Array.<number>|Uint8Array)} */

    this.password;
  };
  /**
   * @enum {number}
   */


  Zlib.Zip.CompressionMethod = {
    STORE: 0,
    DEFLATE: 8
  };
  /**
   * @enum {number}
   */

  Zlib.Zip.OperatingSystem = {
    MSDOS: 0,
    UNIX: 3,
    MACINTOSH: 7
  };
  /**
   * @enum {number}
   */

  Zlib.Zip.Flags = {
    ENCRYPT: 0x0001,
    DESCRIPTOR: 0x0008,
    UTF8: 0x0800
  };
  /**
   * @type {Array.<number>}
   * @const
   */

  Zlib.Zip.FileHeaderSignature = [0x50, 0x4b, 0x01, 0x02];
  /**
   * @type {Array.<number>}
   * @const
   */

  Zlib.Zip.LocalFileHeaderSignature = [0x50, 0x4b, 0x03, 0x04];
  /**
   * @type {Array.<number>}
   * @const
   */

  Zlib.Zip.CentralDirectorySignature = [0x50, 0x4b, 0x05, 0x06];
  /**
   * @param {Array.<number>|Uint8Array} input
   * @param {Object=} opt_params options.
   */

  Zlib.Zip.prototype.addFile = function (input, opt_params) {
    opt_params = opt_params || {};
    /** @type {string} */

    var filename =  opt_params['filename'];
    /** @type {boolean} */

    var compressed;
    /** @type {number} */

    var size = input.length;
    /** @type {number} */

    var crc32 = 0;

    if ( input instanceof Array) {
      input = new Uint8Array(input);
    } // default


    if (typeof opt_params['compressionMethod'] !== 'number') {
      opt_params['compressionMethod'] = Zlib.Zip.CompressionMethod.DEFLATE;
    } // その場で圧縮する場合


    if (opt_params['compress']) {
      switch (opt_params['compressionMethod']) {
        case Zlib.Zip.CompressionMethod.STORE:
          break;

        case Zlib.Zip.CompressionMethod.DEFLATE:
          crc32 = Zlib.CRC32.calc(input);
          input = this.deflateWithOption(input, opt_params);
          compressed = true;
          break;

        default:
          throw new Error('unknown compression method:' + opt_params['compressionMethod']);
      }
    }

    this.files.push({
      buffer: input,
      option: opt_params,
      compressed: compressed,
      encrypted: false,
      size: size,
      crc32: crc32
    });
  };
  /**
   * @param {(Array.<number>|Uint8Array)} password
   */


  Zlib.Zip.prototype.setPassword = function (password) {
    this.password = password;
  };

  Zlib.Zip.prototype.compress = function () {
    /** @type {Array.<{
     *   buffer: !(Array.<number>|Uint8Array),
     *   option: Object,
     *   compressed: boolean,
     *   encrypted: boolean,
     *   size: number,
     *   crc32: number
     * }>} */
    var files = this.files;
    /** @type {{
     *   buffer: !(Array.<number>|Uint8Array),
     *   option: Object,
     *   compressed: boolean,
     *   encrypted: boolean,
     *   size: number,
     *   crc32: number
     * }} */

    var file;
    /** @type {!(Array.<number>|Uint8Array)} */

    var output;
    /** @type {number} */

    var op1;
    /** @type {number} */

    var op2;
    /** @type {number} */

    var op3;
    /** @type {number} */

    var localFileSize = 0;
    /** @type {number} */

    var centralDirectorySize = 0;
    /** @type {number} */

    var endOfCentralDirectorySize;
    /** @type {number} */

    var offset;
    /** @type {number} */

    var needVersion;
    /** @type {number} */

    var flags;
    /** @type {Zlib.Zip.CompressionMethod} */

    var compressionMethod;
    /** @type {Date} */

    var date;
    /** @type {number} */

    var crc32;
    /** @type {number} */

    var size;
    /** @type {number} */

    var plainSize;
    /** @type {number} */

    var filenameLength;
    /** @type {number} */

    var extraFieldLength;
    /** @type {number} */

    var commentLength;
    /** @type {(Array.<number>|Uint8Array)} */

    var filename;
    /** @type {(Array.<number>|Uint8Array)} */

    var extraField;
    /** @type {(Array.<number>|Uint8Array)} */

    var comment;
    /** @type {(Array.<number>|Uint8Array)} */

    var buffer;
    /** @type {*} */

    var tmp;
    /** @type {Array.<number>|Uint32Array|Object} */

    var key;
    /** @type {number} */

    var i;
    /** @type {number} */

    var il;
    /** @type {number} */

    var j;
    /** @type {number} */

    var jl; // ファイルの圧縮

    for (i = 0, il = files.length; i < il; ++i) {
      file = files[i];
      filenameLength = file.option['filename'] ? file.option['filename'].length : 0;
      extraFieldLength = file.option['extraField'] ? file.option['extraField'].length : 0;
      commentLength = file.option['comment'] ? file.option['comment'].length : 0; // 圧縮されていなかったら圧縮

      if (!file.compressed) {
        // 圧縮前に CRC32 の計算をしておく
        file.crc32 = Zlib.CRC32.calc(file.buffer);

        switch (file.option['compressionMethod']) {
          case Zlib.Zip.CompressionMethod.STORE:
            break;

          case Zlib.Zip.CompressionMethod.DEFLATE:
            file.buffer = this.deflateWithOption(file.buffer, file.option);
            file.compressed = true;
            break;

          default:
            throw new Error('unknown compression method:' + file.option['compressionMethod']);
        }
      } // encryption


      if (file.option['password'] !== void 0 || this.password !== void 0) {
        // init encryption
        key = this.createEncryptionKey(file.option['password'] || this.password); // add header

        buffer = file.buffer;

        {
          tmp = new Uint8Array(buffer.length + 12);
          tmp.set(buffer, 12);
          buffer = tmp;
        }

        for (j = 0; j < 12; ++j) {
          buffer[j] = this.encode(key, i === 11 ? file.crc32 & 0xff : Math.random() * 256 | 0);
        } // data encryption


        for (jl = buffer.length; j < jl; ++j) {
          buffer[j] = this.encode(key, buffer[j]);
        }

        file.buffer = buffer;
      } // 必要バッファサイズの計算


      localFileSize += // local file header
      30 + filenameLength + // file data
      file.buffer.length;
      centralDirectorySize += // file header
      46 + filenameLength + commentLength;
    } // end of central directory


    endOfCentralDirectorySize = 22 + (this.comment ? this.comment.length : 0);
    output = new ( Uint8Array )(localFileSize + centralDirectorySize + endOfCentralDirectorySize);
    op1 = 0;
    op2 = localFileSize;
    op3 = op2 + centralDirectorySize; // ファイルの圧縮

    for (i = 0, il = files.length; i < il; ++i) {
      file = files[i];
      filenameLength = file.option['filename'] ? file.option['filename'].length : 0;
      extraFieldLength = 0; // TODO

      commentLength = file.option['comment'] ? file.option['comment'].length : 0; //-------------------------------------------------------------------------
      // local file header & file header
      //-------------------------------------------------------------------------

      offset = op1; // signature
      // local file header

      output[op1++] = Zlib.Zip.LocalFileHeaderSignature[0];
      output[op1++] = Zlib.Zip.LocalFileHeaderSignature[1];
      output[op1++] = Zlib.Zip.LocalFileHeaderSignature[2];
      output[op1++] = Zlib.Zip.LocalFileHeaderSignature[3]; // file header

      output[op2++] = Zlib.Zip.FileHeaderSignature[0];
      output[op2++] = Zlib.Zip.FileHeaderSignature[1];
      output[op2++] = Zlib.Zip.FileHeaderSignature[2];
      output[op2++] = Zlib.Zip.FileHeaderSignature[3]; // compressor info

      needVersion = 20;
      output[op2++] = needVersion & 0xff;
      output[op2++] =
      /** @type {Zlib.Zip.OperatingSystem} */
      file.option['os'] || Zlib.Zip.OperatingSystem.MSDOS; // need version

      output[op1++] = output[op2++] = needVersion & 0xff;
      output[op1++] = output[op2++] = needVersion >> 8 & 0xff; // general purpose bit flag

      flags = 0;

      if (file.option['password'] || this.password) {
        flags |= Zlib.Zip.Flags.ENCRYPT;
      }

      output[op1++] = output[op2++] = flags & 0xff;
      output[op1++] = output[op2++] = flags >> 8 & 0xff; // compression method

      compressionMethod =
      /** @type {Zlib.Zip.CompressionMethod} */
      file.option['compressionMethod'];
      output[op1++] = output[op2++] = compressionMethod & 0xff;
      output[op1++] = output[op2++] = compressionMethod >> 8 & 0xff; // date

      date =
      /** @type {(Date|undefined)} */
      file.option['date'] || new Date();
      output[op1++] = output[op2++] = (date.getMinutes() & 0x7) << 5 | (date.getSeconds() / 2 | 0);
      output[op1++] = output[op2++] = date.getHours() << 3 | date.getMinutes() >> 3; //

      output[op1++] = output[op2++] = (date.getMonth() + 1 & 0x7) << 5 | date.getDate();
      output[op1++] = output[op2++] = (date.getFullYear() - 1980 & 0x7f) << 1 | date.getMonth() + 1 >> 3; // CRC-32

      crc32 = file.crc32;
      output[op1++] = output[op2++] = crc32 & 0xff;
      output[op1++] = output[op2++] = crc32 >> 8 & 0xff;
      output[op1++] = output[op2++] = crc32 >> 16 & 0xff;
      output[op1++] = output[op2++] = crc32 >> 24 & 0xff; // compressed size

      size = file.buffer.length;
      output[op1++] = output[op2++] = size & 0xff;
      output[op1++] = output[op2++] = size >> 8 & 0xff;
      output[op1++] = output[op2++] = size >> 16 & 0xff;
      output[op1++] = output[op2++] = size >> 24 & 0xff; // uncompressed size

      plainSize = file.size;
      output[op1++] = output[op2++] = plainSize & 0xff;
      output[op1++] = output[op2++] = plainSize >> 8 & 0xff;
      output[op1++] = output[op2++] = plainSize >> 16 & 0xff;
      output[op1++] = output[op2++] = plainSize >> 24 & 0xff; // filename length

      output[op1++] = output[op2++] = filenameLength & 0xff;
      output[op1++] = output[op2++] = filenameLength >> 8 & 0xff; // extra field length

      output[op1++] = output[op2++] = extraFieldLength & 0xff;
      output[op1++] = output[op2++] = extraFieldLength >> 8 & 0xff; // file comment length

      output[op2++] = commentLength & 0xff;
      output[op2++] = commentLength >> 8 & 0xff; // disk number start

      output[op2++] = 0;
      output[op2++] = 0; // internal file attributes

      output[op2++] = 0;
      output[op2++] = 0; // external file attributes

      output[op2++] = 0;
      output[op2++] = 0;
      output[op2++] = 0;
      output[op2++] = 0; // relative offset of local header

      output[op2++] = offset & 0xff;
      output[op2++] = offset >> 8 & 0xff;
      output[op2++] = offset >> 16 & 0xff;
      output[op2++] = offset >> 24 & 0xff; // filename

      filename = file.option['filename'];

      if (filename) {
        {
          output.set(filename, op1);
          output.set(filename, op2);
          op1 += filenameLength;
          op2 += filenameLength;
        }
      } // extra field


      extraField = file.option['extraField'];

      if (extraField) {
        {
          output.set(extraField, op1);
          output.set(extraField, op2);
          op1 += extraFieldLength;
          op2 += extraFieldLength;
        }
      } // comment


      comment = file.option['comment'];

      if (comment) {
        {
          output.set(comment, op2);
          op2 += commentLength;
        }
      } //-------------------------------------------------------------------------
      // file data
      //-------------------------------------------------------------------------


      {
        output.set(file.buffer, op1);
        op1 += file.buffer.length;
      }
    } //-------------------------------------------------------------------------
    // end of central directory
    //-------------------------------------------------------------------------
    // signature


    output[op3++] = Zlib.Zip.CentralDirectorySignature[0];
    output[op3++] = Zlib.Zip.CentralDirectorySignature[1];
    output[op3++] = Zlib.Zip.CentralDirectorySignature[2];
    output[op3++] = Zlib.Zip.CentralDirectorySignature[3]; // number of this disk

    output[op3++] = 0;
    output[op3++] = 0; // number of the disk with the start of the central directory

    output[op3++] = 0;
    output[op3++] = 0; // total number of entries in the central directory on this disk

    output[op3++] = il & 0xff;
    output[op3++] = il >> 8 & 0xff; // total number of entries in the central directory

    output[op3++] = il & 0xff;
    output[op3++] = il >> 8 & 0xff; // size of the central directory

    output[op3++] = centralDirectorySize & 0xff;
    output[op3++] = centralDirectorySize >> 8 & 0xff;
    output[op3++] = centralDirectorySize >> 16 & 0xff;
    output[op3++] = centralDirectorySize >> 24 & 0xff; // offset of start of central directory with respect to the starting disk number

    output[op3++] = localFileSize & 0xff;
    output[op3++] = localFileSize >> 8 & 0xff;
    output[op3++] = localFileSize >> 16 & 0xff;
    output[op3++] = localFileSize >> 24 & 0xff; // .ZIP file comment length

    commentLength = this.comment ? this.comment.length : 0;
    output[op3++] = commentLength & 0xff;
    output[op3++] = commentLength >> 8 & 0xff; // .ZIP file comment

    if (this.comment) {
      {
        output.set(this.comment, op3);
        op3 += commentLength;
      }
    }

    return output;
  };
  /**
   * @param {!(Array.<number>|Uint8Array)} input
   * @param {Object=} opt_params options.
   * @return {!(Array.<number>|Uint8Array)}
   */


  Zlib.Zip.prototype.deflateWithOption = function (input, opt_params) {
    /** @type {Zlib.RawDeflate} */
    var deflator = new Zlib.RawDeflate(input, opt_params['deflateOption']);
    return deflator.compress();
  };
  /**
   * @param {(Array.<number>|Uint32Array)} key
   * @return {number}
   */


  Zlib.Zip.prototype.getByte = function (key) {
    /** @type {number} */
    var tmp = key[2] & 0xffff | 2;
    return tmp * (tmp ^ 1) >> 8 & 0xff;
  };
  /**
   * @param {(Array.<number>|Uint32Array|Object)} key
   * @param {number} n
   * @return {number}
   */


  Zlib.Zip.prototype.encode = function (key, n) {
    /** @type {number} */
    var tmp = this.getByte(
    /** @type {(Array.<number>|Uint32Array)} */
    key);
    this.updateKeys(
    /** @type {(Array.<number>|Uint32Array)} */
    key, n);
    return tmp ^ n;
  };
  /**
   * @param {(Array.<number>|Uint32Array)} key
   * @param {number} n
   */


  Zlib.Zip.prototype.updateKeys = function (key, n) {
    key[0] = Zlib.CRC32.single(key[0], n);
    key[1] = (((key[1] + (key[0] & 0xff)) * 20173 >>> 0) * 6681 >>> 0) + 1 >>> 0;
    key[2] = Zlib.CRC32.single(key[2], key[1] >>> 24);
  };
  /**
   * @param {(Array.<number>|Uint8Array)} password
   * @return {!(Array.<number>|Uint32Array|Object)}
   */


  Zlib.Zip.prototype.createEncryptionKey = function (password) {
    /** @type {!(Array.<number>|Uint32Array)} */
    var key = [305419896, 591751049, 878082192];
    /** @type {number} */

    var i;
    /** @type {number} */

    var il;

    {
      key = new Uint32Array(key);
    }

    for (i = 0, il = password.length; i < il; ++i) {
      this.updateKeys(key, password[i] & 0xff);
    }

    return key;
  };
  /**
   * build huffman table from length list.
   * @param {!(Array.<number>|Uint8Array)} lengths length list.
   * @return {!Array} huffman table.
   */


  Zlib.Huffman.buildHuffmanTable = function (lengths) {
    /** @type {number} length list size. */
    var listSize = lengths.length;
    /** @type {number} max code length for table size. */

    var maxCodeLength = 0;
    /** @type {number} min code length for table size. */

    var minCodeLength = Number.POSITIVE_INFINITY;
    /** @type {number} table size. */

    var size;
    /** @type {!(Array|Uint8Array)} huffman code table. */

    var table;
    /** @type {number} bit length. */

    var bitLength;
    /** @type {number} huffman code. */

    var code;
    /**
     * サイズが 2^maxlength 個のテーブルを埋めるためのスキップ長.
     * @type {number} skip length for table filling.
     */

    var skip;
    /** @type {number} reversed code. */

    var reversed;
    /** @type {number} reverse temp. */

    var rtemp;
    /** @type {number} loop counter. */

    var i;
    /** @type {number} loop limit. */

    var il;
    /** @type {number} loop counter. */

    var j;
    /** @type {number} table value. */

    var value; // Math.max は遅いので最長の値は for-loop で取得する

    for (i = 0, il = listSize; i < il; ++i) {
      if (lengths[i] > maxCodeLength) {
        maxCodeLength = lengths[i];
      }

      if (lengths[i] < minCodeLength) {
        minCodeLength = lengths[i];
      }
    }

    size = 1 << maxCodeLength;
    table = new ( Uint32Array )(size); // ビット長の短い順からハフマン符号を割り当てる

    for (bitLength = 1, code = 0, skip = 2; bitLength <= maxCodeLength;) {
      for (i = 0; i < listSize; ++i) {
        if (lengths[i] === bitLength) {
          // ビットオーダーが逆になるためビット長分並びを反転する
          for (reversed = 0, rtemp = code, j = 0; j < bitLength; ++j) {
            reversed = reversed << 1 | rtemp & 1;
            rtemp >>= 1;
          } // 最大ビット長をもとにテーブルを作るため、
          // 最大ビット長以外では 0 / 1 どちらでも良い箇所ができる
          // そのどちらでも良い場所は同じ値で埋めることで
          // 本来のビット長以上のビット数取得しても問題が起こらないようにする


          value = bitLength << 16 | i;

          for (j = reversed; j < size; j += skip) {
            table[j] = value;
          }

          ++code;
        }
      } // 次のビット長へ


      ++bitLength;
      code <<= 1;
      skip <<= 1;
    }

    return [table, maxCodeLength, minCodeLength];
  }; //-----------------------------------------------------------------------------

  /** @define {number} buffer block size. */


  var ZLIB_RAW_INFLATE_BUFFER_SIZE = 0x8000; // [ 0x8000 >= ZLIB_BUFFER_BLOCK_SIZE ]
  //-----------------------------------------------------------------------------

  var buildHuffmanTable = Zlib.Huffman.buildHuffmanTable;
  /**
   * @constructor
   * @param {!(Uint8Array|Array.<number>)} input input buffer.
   * @param {Object} opt_params option parameter.
   *
   * opt_params は以下のプロパティを指定する事ができます。
   *   - index: input buffer の deflate コンテナの開始位置.
   *   - blockSize: バッファのブロックサイズ.
   *   - bufferType: Zlib.RawInflate.BufferType の値によってバッファの管理方法を指定する.
   *   - resize: 確保したバッファが実際の大きさより大きかった場合に切り詰める.
   */

  Zlib.RawInflate = function (input, opt_params) {
    /** @type {!(Array.<number>|Uint8Array)} inflated buffer */
    this.buffer;
    /** @type {!Array.<(Array.<number>|Uint8Array)>} */

    this.blocks = [];
    /** @type {number} block size. */

    this.bufferSize = ZLIB_RAW_INFLATE_BUFFER_SIZE;
    /** @type {!number} total output buffer pointer. */

    this.totalpos = 0;
    /** @type {!number} input buffer pointer. */

    this.ip = 0;
    /** @type {!number} bit stream reader buffer. */

    this.bitsbuf = 0;
    /** @type {!number} bit stream reader buffer size. */

    this.bitsbuflen = 0;
    /** @type {!(Array.<number>|Uint8Array)} input buffer. */

    this.input =  new Uint8Array(input) ;
    /** @type {!(Uint8Array|Array.<number>)} output buffer. */

    this.output;
    /** @type {!number} output buffer pointer. */

    this.op;
    /** @type {boolean} is final block flag. */

    this.bfinal = false;
    /** @type {Zlib.RawInflate.BufferType} buffer management. */

    this.bufferType = Zlib.RawInflate.BufferType.ADAPTIVE;
    /** @type {boolean} resize flag for memory size optimization. */

    this.resize = false; // option parameters

    if (opt_params || !(opt_params = {})) {
      if (opt_params['index']) {
        this.ip = opt_params['index'];
      }

      if (opt_params['bufferSize']) {
        this.bufferSize = opt_params['bufferSize'];
      }

      if (opt_params['bufferType']) {
        this.bufferType = opt_params['bufferType'];
      }

      if (opt_params['resize']) {
        this.resize = opt_params['resize'];
      }
    } // initialize


    switch (this.bufferType) {
      case Zlib.RawInflate.BufferType.BLOCK:
        this.op = Zlib.RawInflate.MaxBackwardLength;
        this.output = new ( Uint8Array )(Zlib.RawInflate.MaxBackwardLength + this.bufferSize + Zlib.RawInflate.MaxCopyLength);
        break;

      case Zlib.RawInflate.BufferType.ADAPTIVE:
        this.op = 0;
        this.output = new ( Uint8Array )(this.bufferSize);
        break;

      default:
        throw new Error('invalid inflate mode');
    }
  };
  /**
   * @enum {number}
   */


  Zlib.RawInflate.BufferType = {
    BLOCK: 0,
    ADAPTIVE: 1
  };
  /**
   * decompress.
   * @return {!(Uint8Array|Array.<number>)} inflated buffer.
   */

  Zlib.RawInflate.prototype.decompress = function () {
    while (!this.bfinal) {
      this.parseBlock();
    }

    switch (this.bufferType) {
      case Zlib.RawInflate.BufferType.BLOCK:
        return this.concatBufferBlock();

      case Zlib.RawInflate.BufferType.ADAPTIVE:
        return this.concatBufferDynamic();

      default:
        throw new Error('invalid inflate mode');
    }
  };
  /**
   * @const
   * @type {number} max backward length for LZ77.
   */


  Zlib.RawInflate.MaxBackwardLength = 32768;
  /**
   * @const
   * @type {number} max copy length for LZ77.
   */

  Zlib.RawInflate.MaxCopyLength = 258;
  /**
   * huffman order
   * @const
   * @type {!(Array.<number>|Uint8Array)}
   */

  Zlib.RawInflate.Order = function (table) {
    return  new Uint16Array(table) ;
  }([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  /**
   * huffman length code table.
   * @const
   * @type {!(Array.<number>|Uint16Array)}
   */


  Zlib.RawInflate.LengthCodeTable = function (table) {
    return  new Uint16Array(table) ;
  }([0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102]);
  /**
   * huffman length extra-bits table.
   * @const
   * @type {!(Array.<number>|Uint8Array)}
   */


  Zlib.RawInflate.LengthExtraTable = function (table) {
    return  new Uint8Array(table) ;
  }([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
  /**
   * huffman dist code table.
   * @const
   * @type {!(Array.<number>|Uint16Array)}
   */


  Zlib.RawInflate.DistCodeTable = function (table) {
    return  new Uint16Array(table) ;
  }([0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001]);
  /**
   * huffman dist extra-bits table.
   * @const
   * @type {!(Array.<number>|Uint8Array)}
   */


  Zlib.RawInflate.DistExtraTable = function (table) {
    return  new Uint8Array(table) ;
  }([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
  /**
   * fixed huffman length code table
   * @const
   * @type {!Array}
   */


  Zlib.RawInflate.FixedLiteralLengthTable = function (table) {
    return table;
  }(function () {
    var lengths = new ( Uint8Array )(288);
    var i, il;

    for (i = 0, il = lengths.length; i < il; ++i) {
      lengths[i] = i <= 143 ? 8 : i <= 255 ? 9 : i <= 279 ? 7 : 8;
    }

    return buildHuffmanTable(lengths);
  }());
  /**
   * fixed huffman distance code table
   * @const
   * @type {!Array}
   */


  Zlib.RawInflate.FixedDistanceTable = function (table) {
    return table;
  }(function () {
    var lengths = new ( Uint8Array )(30);
    var i, il;

    for (i = 0, il = lengths.length; i < il; ++i) {
      lengths[i] = 5;
    }

    return buildHuffmanTable(lengths);
  }());
  /**
   * parse deflated block.
   */


  Zlib.RawInflate.prototype.parseBlock = function () {
    /** @type {number} header */
    var hdr = this.readBits(3); // BFINAL

    if (hdr & 0x1) {
      this.bfinal = true;
    } // BTYPE


    hdr >>>= 1;

    switch (hdr) {
      // uncompressed
      case 0:
        this.parseUncompressedBlock();
        break;
      // fixed huffman

      case 1:
        this.parseFixedHuffmanBlock();
        break;
      // dynamic huffman

      case 2:
        this.parseDynamicHuffmanBlock();
        break;
      // reserved or other

      default:
        throw new Error('unknown BTYPE: ' + hdr);
    }
  };
  /**
   * read inflate bits
   * @param {number} length bits length.
   * @return {number} read bits.
   */


  Zlib.RawInflate.prototype.readBits = function (length) {
    var bitsbuf = this.bitsbuf;
    var bitsbuflen = this.bitsbuflen;
    var input = this.input;
    var ip = this.ip;
    /** @type {number} */

    var inputLength = input.length;
    /** @type {number} input and output byte. */

    var octet; // input byte

    if (ip + (length - bitsbuflen + 7 >> 3) >= inputLength) {
      throw new Error('input buffer is broken');
    } // not enough buffer


    while (bitsbuflen < length) {
      bitsbuf |= input[ip++] << bitsbuflen;
      bitsbuflen += 8;
    } // output byte


    octet = bitsbuf &
    /* MASK */
    (1 << length) - 1;
    bitsbuf >>>= length;
    bitsbuflen -= length;
    this.bitsbuf = bitsbuf;
    this.bitsbuflen = bitsbuflen;
    this.ip = ip;
    return octet;
  };
  /**
   * read huffman code using table
   * @param {!(Array.<number>|Uint8Array|Uint16Array)} table huffman code table.
   * @return {number} huffman code.
   */


  Zlib.RawInflate.prototype.readCodeByTable = function (table) {
    var bitsbuf = this.bitsbuf;
    var bitsbuflen = this.bitsbuflen;
    var input = this.input;
    var ip = this.ip;
    /** @type {number} */

    var inputLength = input.length;
    /** @type {!(Array.<number>|Uint8Array)} huffman code table */

    var codeTable = table[0];
    /** @type {number} */

    var maxCodeLength = table[1];
    /** @type {number} code length & code (16bit, 16bit) */

    var codeWithLength;
    /** @type {number} code bits length */

    var codeLength; // not enough buffer

    while (bitsbuflen < maxCodeLength) {
      if (ip >= inputLength) {
        break;
      }

      bitsbuf |= input[ip++] << bitsbuflen;
      bitsbuflen += 8;
    } // read max length


    codeWithLength = codeTable[bitsbuf & (1 << maxCodeLength) - 1];
    codeLength = codeWithLength >>> 16;

    if (codeLength > bitsbuflen) {
      throw new Error('invalid code length: ' + codeLength);
    }

    this.bitsbuf = bitsbuf >> codeLength;
    this.bitsbuflen = bitsbuflen - codeLength;
    this.ip = ip;
    return codeWithLength & 0xffff;
  };
  /**
   * parse uncompressed block.
   */


  Zlib.RawInflate.prototype.parseUncompressedBlock = function () {
    var input = this.input;
    var ip = this.ip;
    var output = this.output;
    var op = this.op;
    /** @type {number} */

    var inputLength = input.length;
    /** @type {number} block length */

    var len;
    /** @type {number} number for check block length */

    var nlen;
    /** @type {number} output buffer length */

    var olength = output.length;
    /** @type {number} copy counter */

    var preCopy; // skip buffered header bits

    this.bitsbuf = 0;
    this.bitsbuflen = 0; // len

    if (ip + 1 >= inputLength) {
      throw new Error('invalid uncompressed block header: LEN');
    }

    len = input[ip++] | input[ip++] << 8; // nlen

    if (ip + 1 >= inputLength) {
      throw new Error('invalid uncompressed block header: NLEN');
    }

    nlen = input[ip++] | input[ip++] << 8; // check len & nlen

    if (len === ~nlen) {
      throw new Error('invalid uncompressed block header: length verify');
    } // check size


    if (ip + len > input.length) {
      throw new Error('input buffer is broken');
    } // expand buffer


    switch (this.bufferType) {
      case Zlib.RawInflate.BufferType.BLOCK:
        // pre copy
        while (op + len > output.length) {
          preCopy = olength - op;
          len -= preCopy;

          {
            output.set(input.subarray(ip, ip + preCopy), op);
            op += preCopy;
            ip += preCopy;
          }

          this.op = op;
          output = this.expandBufferBlock();
          op = this.op;
        }

        break;

      case Zlib.RawInflate.BufferType.ADAPTIVE:
        while (op + len > output.length) {
          output = this.expandBufferAdaptive({
            fixRatio: 2
          });
        }

        break;

      default:
        throw new Error('invalid inflate mode');
    } // copy


    {
      output.set(input.subarray(ip, ip + len), op);
      op += len;
      ip += len;
    }

    this.ip = ip;
    this.op = op;
    this.output = output;
  };
  /**
   * parse fixed huffman block.
   */


  Zlib.RawInflate.prototype.parseFixedHuffmanBlock = function () {
    switch (this.bufferType) {
      case Zlib.RawInflate.BufferType.ADAPTIVE:
        this.decodeHuffmanAdaptive(Zlib.RawInflate.FixedLiteralLengthTable, Zlib.RawInflate.FixedDistanceTable);
        break;

      case Zlib.RawInflate.BufferType.BLOCK:
        this.decodeHuffmanBlock(Zlib.RawInflate.FixedLiteralLengthTable, Zlib.RawInflate.FixedDistanceTable);
        break;

      default:
        throw new Error('invalid inflate mode');
    }
  };
  /**
   * parse dynamic huffman block.
   */


  Zlib.RawInflate.prototype.parseDynamicHuffmanBlock = function () {
    /** @type {number} number of literal and length codes. */
    var hlit = this.readBits(5) + 257;
    /** @type {number} number of distance codes. */

    var hdist = this.readBits(5) + 1;
    /** @type {number} number of code lengths. */

    var hclen = this.readBits(4) + 4;
    /** @type {!(Uint8Array|Array.<number>)} code lengths. */

    var codeLengths = new ( Uint8Array )(Zlib.RawInflate.Order.length);
    /** @type {!Array} code lengths table. */

    var codeLengthsTable;
    /** @type {!(Uint8Array|Array.<number>)} literal and length code table. */

    var litlenTable;
    /** @type {!(Uint8Array|Array.<number>)} distance code table. */

    var distTable;
    /** @type {!(Uint8Array|Array.<number>)} code length table. */

    var lengthTable;
    /** @type {number} */

    var code;
    /** @type {number} */

    var prev;
    /** @type {number} */

    var repeat;
    /** @type {number} loop counter. */

    var i;
    /** @type {number} loop limit. */

    var il; // decode code lengths

    for (i = 0; i < hclen; ++i) {
      codeLengths[Zlib.RawInflate.Order[i]] = this.readBits(3);
    }


    codeLengthsTable = buildHuffmanTable(codeLengths);
    lengthTable = new ( Uint8Array )(hlit + hdist);

    for (i = 0, il = hlit + hdist; i < il;) {
      code = this.readCodeByTable(codeLengthsTable);

      switch (code) {
        case 16:
          repeat = 3 + this.readBits(2);

          while (repeat--) {
            lengthTable[i++] = prev;
          }

          break;

        case 17:
          repeat = 3 + this.readBits(3);

          while (repeat--) {
            lengthTable[i++] = 0;
          }

          prev = 0;
          break;

        case 18:
          repeat = 11 + this.readBits(7);

          while (repeat--) {
            lengthTable[i++] = 0;
          }

          prev = 0;
          break;

        default:
          lengthTable[i++] = code;
          prev = code;
          break;
      }
    }

    litlenTable =  buildHuffmanTable(lengthTable.subarray(0, hlit)) ;
    distTable =  buildHuffmanTable(lengthTable.subarray(hlit)) ;

    switch (this.bufferType) {
      case Zlib.RawInflate.BufferType.ADAPTIVE:
        this.decodeHuffmanAdaptive(litlenTable, distTable);
        break;

      case Zlib.RawInflate.BufferType.BLOCK:
        this.decodeHuffmanBlock(litlenTable, distTable);
        break;

      default:
        throw new Error('invalid inflate mode');
    }
  };
  /**
   * decode huffman code
   * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.
   * @param {!(Array.<number>|Uint8Array)} dist distination code table.
   */


  Zlib.RawInflate.prototype.decodeHuffmanBlock = function (litlen, dist) {
    var output = this.output;
    var op = this.op;
    this.currentLitlenTable = litlen;
    /** @type {number} output position limit. */

    var olength = output.length - Zlib.RawInflate.MaxCopyLength;
    /** @type {number} huffman code. */

    var code;
    /** @type {number} table index. */

    var ti;
    /** @type {number} huffman code distination. */

    var codeDist;
    /** @type {number} huffman code length. */

    var codeLength;
    var lengthCodeTable = Zlib.RawInflate.LengthCodeTable;
    var lengthExtraTable = Zlib.RawInflate.LengthExtraTable;
    var distCodeTable = Zlib.RawInflate.DistCodeTable;
    var distExtraTable = Zlib.RawInflate.DistExtraTable;

    while ((code = this.readCodeByTable(litlen)) !== 256) {
      // literal
      if (code < 256) {
        if (op >= olength) {
          this.op = op;
          output = this.expandBufferBlock();
          op = this.op;
        }

        output[op++] = code;
        continue;
      } // length code


      ti = code - 257;
      codeLength = lengthCodeTable[ti];

      if (lengthExtraTable[ti] > 0) {
        codeLength += this.readBits(lengthExtraTable[ti]);
      } // dist code


      code = this.readCodeByTable(dist);
      codeDist = distCodeTable[code];

      if (distExtraTable[code] > 0) {
        codeDist += this.readBits(distExtraTable[code]);
      } // lz77 decode


      if (op >= olength) {
        this.op = op;
        output = this.expandBufferBlock();
        op = this.op;
      }

      while (codeLength--) {
        output[op] = output[op++ - codeDist];
      }
    }

    while (this.bitsbuflen >= 8) {
      this.bitsbuflen -= 8;
      this.ip--;
    }

    this.op = op;
  };
  /**
   * decode huffman code (adaptive)
   * @param {!(Array.<number>|Uint16Array)} litlen literal and length code table.
   * @param {!(Array.<number>|Uint8Array)} dist distination code table.
   */


  Zlib.RawInflate.prototype.decodeHuffmanAdaptive = function (litlen, dist) {
    var output = this.output;
    var op = this.op;
    this.currentLitlenTable = litlen;
    /** @type {number} output position limit. */

    var olength = output.length;
    /** @type {number} huffman code. */

    var code;
    /** @type {number} table index. */

    var ti;
    /** @type {number} huffman code distination. */

    var codeDist;
    /** @type {number} huffman code length. */

    var codeLength;
    var lengthCodeTable = Zlib.RawInflate.LengthCodeTable;
    var lengthExtraTable = Zlib.RawInflate.LengthExtraTable;
    var distCodeTable = Zlib.RawInflate.DistCodeTable;
    var distExtraTable = Zlib.RawInflate.DistExtraTable;

    while ((code = this.readCodeByTable(litlen)) !== 256) {
      // literal
      if (code < 256) {
        if (op >= olength) {
          output = this.expandBufferAdaptive();
          olength = output.length;
        }

        output[op++] = code;
        continue;
      } // length code


      ti = code - 257;
      codeLength = lengthCodeTable[ti];

      if (lengthExtraTable[ti] > 0) {
        codeLength += this.readBits(lengthExtraTable[ti]);
      } // dist code


      code = this.readCodeByTable(dist);
      codeDist = distCodeTable[code];

      if (distExtraTable[code] > 0) {
        codeDist += this.readBits(distExtraTable[code]);
      } // lz77 decode


      if (op + codeLength > olength) {
        output = this.expandBufferAdaptive();
        olength = output.length;
      }

      while (codeLength--) {
        output[op] = output[op++ - codeDist];
      }
    }

    while (this.bitsbuflen >= 8) {
      this.bitsbuflen -= 8;
      this.ip--;
    }

    this.op = op;
  };
  /**
   * expand output buffer.
   * @param {Object=} opt_param option parameters.
   * @return {!(Array.<number>|Uint8Array)} output buffer.
   */


  Zlib.RawInflate.prototype.expandBufferBlock = function (opt_param) {
    /** @type {!(Array.<number>|Uint8Array)} store buffer. */
    var buffer = new ( Uint8Array )(this.op - Zlib.RawInflate.MaxBackwardLength);
    /** @type {number} backward base point */

    var backward = this.op - Zlib.RawInflate.MaxBackwardLength;
    var output = this.output; // copy to output buffer

    {
      buffer.set(output.subarray(Zlib.RawInflate.MaxBackwardLength, buffer.length));
    }

    this.blocks.push(buffer);
    this.totalpos += buffer.length; // copy to backward buffer

    {
      output.set(output.subarray(backward, backward + Zlib.RawInflate.MaxBackwardLength));
    }

    this.op = Zlib.RawInflate.MaxBackwardLength;
    return output;
  };
  /**
   * expand output buffer. (adaptive)
   * @param {Object=} opt_param option parameters.
   * @return {!(Array.<number>|Uint8Array)} output buffer pointer.
   */


  Zlib.RawInflate.prototype.expandBufferAdaptive = function (opt_param) {
    /** @type {!(Array.<number>|Uint8Array)} store buffer. */
    var buffer;
    /** @type {number} expantion ratio. */

    var ratio = this.input.length / this.ip + 1 | 0;
    /** @type {number} maximum number of huffman code. */

    var maxHuffCode;
    /** @type {number} new output buffer size. */

    var newSize;
    /** @type {number} max inflate size. */

    var maxInflateSize;
    var input = this.input;
    var output = this.output;

    if (opt_param) {
      if (typeof opt_param.fixRatio === 'number') {
        ratio = opt_param.fixRatio;
      }

      if (typeof opt_param.addRatio === 'number') {
        ratio += opt_param.addRatio;
      }
    } // calculate new buffer size


    if (ratio < 2) {
      maxHuffCode = (input.length - this.ip) / this.currentLitlenTable[2];
      maxInflateSize = maxHuffCode / 2 * 258 | 0;
      newSize = maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;
    } else {
      newSize = output.length * ratio;
    } // buffer expantion


    {
      buffer = new Uint8Array(newSize);
      buffer.set(output);
    }

    this.output = buffer;
    return this.output;
  };
  /**
   * concat output buffer.
   * @return {!(Array.<number>|Uint8Array)} output buffer.
   */


  Zlib.RawInflate.prototype.concatBufferBlock = function () {
    /** @type {number} buffer pointer. */
    var pos = 0;
    /** @type {number} buffer pointer. */

    var limit = this.totalpos + (this.op - Zlib.RawInflate.MaxBackwardLength);
    /** @type {!(Array.<number>|Uint8Array)} output block array. */

    var output = this.output;
    /** @type {!Array} blocks array. */

    var blocks = this.blocks;
    /** @type {!(Array.<number>|Uint8Array)} output block array. */

    var block;
    /** @type {!(Array.<number>|Uint8Array)} output buffer. */

    var buffer = new ( Uint8Array )(limit);
    /** @type {number} loop counter. */

    var i;
    /** @type {number} loop limiter. */

    var il;
    /** @type {number} loop counter. */

    var j;
    /** @type {number} loop limiter. */

    var jl; // single buffer

    if (blocks.length === 0) {
      return  this.output.subarray(Zlib.RawInflate.MaxBackwardLength, this.op) ;
    } // copy to buffer


    for (i = 0, il = blocks.length; i < il; ++i) {
      block = blocks[i];

      for (j = 0, jl = block.length; j < jl; ++j) {
        buffer[pos++] = block[j];
      }
    } // current buffer


    for (i = Zlib.RawInflate.MaxBackwardLength, il = this.op; i < il; ++i) {
      buffer[pos++] = output[i];
    }

    this.blocks = [];
    this.buffer = buffer;
    return this.buffer;
  };
  /**
   * concat output buffer. (dynamic)
   * @return {!(Array.<number>|Uint8Array)} output buffer.
   */


  Zlib.RawInflate.prototype.concatBufferDynamic = function () {
    /** @type {Array.<number>|Uint8Array} output buffer. */
    var buffer;
    var op = this.op;

    {
      if (this.resize) {
        buffer = new Uint8Array(op);
        buffer.set(this.output.subarray(0, op));
      } else {
        buffer = this.output.subarray(0, op);
      }
    }

    this.buffer = buffer;
    return this.buffer;
  };

  var buildHuffmanTable = Zlib.Huffman.buildHuffmanTable;
  /**
   * @param {!(Uint8Array|Array.<number>)} input input buffer.
   * @param {number} ip input buffer pointer.
   * @param {number=} opt_buffersize buffer block size.
   * @constructor
   */

  Zlib.RawInflateStream = function (input, ip, opt_buffersize) {
    /** @type {!Array.<(Array|Uint8Array)>} */
    this.blocks = [];
    /** @type {number} block size. */

    this.bufferSize = opt_buffersize ? opt_buffersize : ZLIB_STREAM_RAW_INFLATE_BUFFER_SIZE;
    /** @type {!number} total output buffer pointer. */

    this.totalpos = 0;
    /** @type {!number} input buffer pointer. */

    this.ip = ip === void 0 ? 0 : ip;
    /** @type {!number} bit stream reader buffer. */

    this.bitsbuf = 0;
    /** @type {!number} bit stream reader buffer size. */

    this.bitsbuflen = 0;
    /** @type {!(Array|Uint8Array)} input buffer. */

    this.input =  new Uint8Array(input) ;
    /** @type {!(Uint8Array|Array)} output buffer. */

    this.output = new ( Uint8Array )(this.bufferSize);
    /** @type {!number} output buffer pointer. */

    this.op = 0;
    /** @type {boolean} is final block flag. */

    this.bfinal = false;
    /** @type {number} uncompressed block length. */

    this.blockLength;
    /** @type {boolean} resize flag for memory size optimization. */

    this.resize = false;
    /** @type {Array} */

    this.litlenTable;
    /** @type {Array} */

    this.distTable;
    /** @type {number} */

    this.sp = 0; // stream pointer

    /** @type {Zlib.RawInflateStream.Status} */

    this.status = Zlib.RawInflateStream.Status.INITIALIZED; //
    // backup
    //

    /** @type {!number} */

    this.ip_;
    /** @type {!number} */

    this.bitsbuflen_;
    /** @type {!number} */

    this.bitsbuf_;
  };
  /**
   * @enum {number}
   */


  Zlib.RawInflateStream.BlockType = {
    UNCOMPRESSED: 0,
    FIXED: 1,
    DYNAMIC: 2
  };
  /**
   * @enum {number}
   */

  Zlib.RawInflateStream.Status = {
    INITIALIZED: 0,
    BLOCK_HEADER_START: 1,
    BLOCK_HEADER_END: 2,
    BLOCK_BODY_START: 3,
    BLOCK_BODY_END: 4,
    DECODE_BLOCK_START: 5,
    DECODE_BLOCK_END: 6
  };
  /**
   * decompress.
   * @return {!(Uint8Array|Array)} inflated buffer.
   */

  Zlib.RawInflateStream.prototype.decompress = function (newInput, ip) {
    /** @type {boolean} */
    var stop = false;

    if (newInput !== void 0) {
      this.input = newInput;
    }

    if (ip !== void 0) {
      this.ip = ip;
    } // decompress


    while (!stop) {
      switch (this.status) {
        // block header
        case Zlib.RawInflateStream.Status.INITIALIZED:
        case Zlib.RawInflateStream.Status.BLOCK_HEADER_START:
          if (this.readBlockHeader() < 0) {
            stop = true;
          }

          break;
        // block body

        case Zlib.RawInflateStream.Status.BLOCK_HEADER_END:
        /* FALLTHROUGH */

        case Zlib.RawInflateStream.Status.BLOCK_BODY_START:
          switch (this.currentBlockType) {
            case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:
              if (this.readUncompressedBlockHeader() < 0) {
                stop = true;
              }

              break;

            case Zlib.RawInflateStream.BlockType.FIXED:
              if (this.parseFixedHuffmanBlock() < 0) {
                stop = true;
              }

              break;

            case Zlib.RawInflateStream.BlockType.DYNAMIC:
              if (this.parseDynamicHuffmanBlock() < 0) {
                stop = true;
              }

              break;
          }

          break;
        // decode data

        case Zlib.RawInflateStream.Status.BLOCK_BODY_END:
        case Zlib.RawInflateStream.Status.DECODE_BLOCK_START:
          switch (this.currentBlockType) {
            case Zlib.RawInflateStream.BlockType.UNCOMPRESSED:
              if (this.parseUncompressedBlock() < 0) {
                stop = true;
              }

              break;

            case Zlib.RawInflateStream.BlockType.FIXED:
            /* FALLTHROUGH */

            case Zlib.RawInflateStream.BlockType.DYNAMIC:
              if (this.decodeHuffman() < 0) {
                stop = true;
              }

              break;
          }

          break;

        case Zlib.RawInflateStream.Status.DECODE_BLOCK_END:
          if (this.bfinal) {
            stop = true;
          } else {
            this.status = Zlib.RawInflateStream.Status.INITIALIZED;
          }

          break;
      }
    }

    return this.concatBuffer();
  };
  /**
   * @const
   * @type {number} max backward length for LZ77.
   */


  Zlib.RawInflateStream.MaxBackwardLength = 32768;
  /**
   * @const
   * @type {number} max copy length for LZ77.
   */

  Zlib.RawInflateStream.MaxCopyLength = 258;
  /**
   * huffman order
   * @const
   * @type {!(Array.<number>|Uint8Array)}
   */

  Zlib.RawInflateStream.Order = function (table) {
    return  new Uint16Array(table) ;
  }([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  /**
   * huffman length code table.
   * @const
   * @type {!(Array.<number>|Uint16Array)}
   */


  Zlib.RawInflateStream.LengthCodeTable = function (table) {
    return  new Uint16Array(table) ;
  }([0x0003, 0x0004, 0x0005, 0x0006, 0x0007, 0x0008, 0x0009, 0x000a, 0x000b, 0x000d, 0x000f, 0x0011, 0x0013, 0x0017, 0x001b, 0x001f, 0x0023, 0x002b, 0x0033, 0x003b, 0x0043, 0x0053, 0x0063, 0x0073, 0x0083, 0x00a3, 0x00c3, 0x00e3, 0x0102, 0x0102, 0x0102]);
  /**
   * huffman length extra-bits table.
   * @const
   * @type {!(Array.<number>|Uint8Array)}
   */


  Zlib.RawInflateStream.LengthExtraTable = function (table) {
    return  new Uint8Array(table) ;
  }([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0]);
  /**
   * huffman dist code table.
   * @const
   * @type {!(Array.<number>|Uint16Array)}
   */


  Zlib.RawInflateStream.DistCodeTable = function (table) {
    return  new Uint16Array(table) ;
  }([0x0001, 0x0002, 0x0003, 0x0004, 0x0005, 0x0007, 0x0009, 0x000d, 0x0011, 0x0019, 0x0021, 0x0031, 0x0041, 0x0061, 0x0081, 0x00c1, 0x0101, 0x0181, 0x0201, 0x0301, 0x0401, 0x0601, 0x0801, 0x0c01, 0x1001, 0x1801, 0x2001, 0x3001, 0x4001, 0x6001]);
  /**
   * huffman dist extra-bits table.
   * @const
   * @type {!(Array.<number>|Uint8Array)}
   */


  Zlib.RawInflateStream.DistExtraTable = function (table) {
    return  new Uint8Array(table) ;
  }([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
  /**
   * fixed huffman length code table
   * @const
   * @type {!Array}
   */


  Zlib.RawInflateStream.FixedLiteralLengthTable = function (table) {
    return table;
  }(function () {
    var lengths = new ( Uint8Array )(288);
    var i, il;

    for (i = 0, il = lengths.length; i < il; ++i) {
      lengths[i] = i <= 143 ? 8 : i <= 255 ? 9 : i <= 279 ? 7 : 8;
    }

    return buildHuffmanTable(lengths);
  }());
  /**
   * fixed huffman distance code table
   * @const
   * @type {!Array}
   */


  Zlib.RawInflateStream.FixedDistanceTable = function (table) {
    return table;
  }(function () {
    var lengths = new ( Uint8Array )(30);
    var i, il;

    for (i = 0, il = lengths.length; i < il; ++i) {
      lengths[i] = 5;
    }

    return buildHuffmanTable(lengths);
  }());
  /**
   * parse deflated block.
   */


  Zlib.RawInflateStream.prototype.readBlockHeader = function () {
    /** @type {number} header */
    var hdr;
    this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_START;
    this.save_();

    if ((hdr = this.readBits(3)) < 0) {
      this.restore_();
      return -1;
    } // BFINAL


    if (hdr & 0x1) {
      this.bfinal = true;
    } // BTYPE


    hdr >>>= 1;

    switch (hdr) {
      case 0:
        // uncompressed
        this.currentBlockType = Zlib.RawInflateStream.BlockType.UNCOMPRESSED;
        break;

      case 1:
        // fixed huffman
        this.currentBlockType = Zlib.RawInflateStream.BlockType.FIXED;
        break;

      case 2:
        // dynamic huffman
        this.currentBlockType = Zlib.RawInflateStream.BlockType.DYNAMIC;
        break;

      default:
        // reserved or other
        throw new Error('unknown BTYPE: ' + hdr);
    }

    this.status = Zlib.RawInflateStream.Status.BLOCK_HEADER_END;
  };
  /**
   * read inflate bits
   * @param {number} length bits length.
   * @return {number} read bits.
   */


  Zlib.RawInflateStream.prototype.readBits = function (length) {
    var bitsbuf = this.bitsbuf;
    var bitsbuflen = this.bitsbuflen;
    var input = this.input;
    var ip = this.ip;
    /** @type {number} input and output byte. */

    var octet; // not enough buffer

    while (bitsbuflen < length) {
      // input byte
      if (input.length <= ip) {
        return -1;
      }

      octet = input[ip++]; // concat octet

      bitsbuf |= octet << bitsbuflen;
      bitsbuflen += 8;
    } // output byte


    octet = bitsbuf &
    /* MASK */
    (1 << length) - 1;
    bitsbuf >>>= length;
    bitsbuflen -= length;
    this.bitsbuf = bitsbuf;
    this.bitsbuflen = bitsbuflen;
    this.ip = ip;
    return octet;
  };
  /**
   * read huffman code using table
   * @param {Array} table huffman code table.
   * @return {number} huffman code.
   */


  Zlib.RawInflateStream.prototype.readCodeByTable = function (table) {
    var bitsbuf = this.bitsbuf;
    var bitsbuflen = this.bitsbuflen;
    var input = this.input;
    var ip = this.ip;
    /** @type {!(Array|Uint8Array)} huffman code table */

    var codeTable = table[0];
    /** @type {number} */

    var maxCodeLength = table[1];
    /** @type {number} input byte */

    var octet;
    /** @type {number} code length & code (16bit, 16bit) */

    var codeWithLength;
    /** @type {number} code bits length */

    var codeLength; // not enough buffer

    while (bitsbuflen < maxCodeLength) {
      if (input.length <= ip) {
        return -1;
      }

      octet = input[ip++];
      bitsbuf |= octet << bitsbuflen;
      bitsbuflen += 8;
    } // read max length


    codeWithLength = codeTable[bitsbuf & (1 << maxCodeLength) - 1];
    codeLength = codeWithLength >>> 16;

    if (codeLength > bitsbuflen) {
      throw new Error('invalid code length: ' + codeLength);
    }

    this.bitsbuf = bitsbuf >> codeLength;
    this.bitsbuflen = bitsbuflen - codeLength;
    this.ip = ip;
    return codeWithLength & 0xffff;
  };
  /**
   * read uncompressed block header
   */


  Zlib.RawInflateStream.prototype.readUncompressedBlockHeader = function () {
    /** @type {number} block length */
    var len;
    /** @type {number} number for check block length */

    var nlen;
    var input = this.input;
    var ip = this.ip;
    this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;

    if (ip + 4 >= input.length) {
      return -1;
    }

    len = input[ip++] | input[ip++] << 8;
    nlen = input[ip++] | input[ip++] << 8; // check len & nlen

    if (len === ~nlen) {
      throw new Error('invalid uncompressed block header: length verify');
    } // skip buffered header bits


    this.bitsbuf = 0;
    this.bitsbuflen = 0;
    this.ip = ip;
    this.blockLength = len;
    this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;
  };
  /**
   * parse uncompressed block.
   */


  Zlib.RawInflateStream.prototype.parseUncompressedBlock = function () {
    var input = this.input;
    var ip = this.ip;
    var output = this.output;
    var op = this.op;
    var len = this.blockLength;
    this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START; // copy
    // XXX: とりあえず素直にコピー

    while (len--) {
      if (op === output.length) {
        output = this.expandBuffer({
          fixRatio: 2
        });
      } // not enough input buffer


      if (ip >= input.length) {
        this.ip = ip;
        this.op = op;
        this.blockLength = len + 1; // コピーしてないので戻す

        return -1;
      }

      output[op++] = input[ip++];
    }

    if (len < 0) {
      this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END;
    }

    this.ip = ip;
    this.op = op;
    return 0;
  };
  /**
   * parse fixed huffman block.
   */


  Zlib.RawInflateStream.prototype.parseFixedHuffmanBlock = function () {
    this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;
    this.litlenTable = Zlib.RawInflateStream.FixedLiteralLengthTable;
    this.distTable = Zlib.RawInflateStream.FixedDistanceTable;
    this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;
    return 0;
  };
  /**
   * オブジェクトのコンテキストを別のプロパティに退避する.
   * @private
   */


  Zlib.RawInflateStream.prototype.save_ = function () {
    this.ip_ = this.ip;
    this.bitsbuflen_ = this.bitsbuflen;
    this.bitsbuf_ = this.bitsbuf;
  };
  /**
   * 別のプロパティに退避したコンテキストを復元する.
   * @private
   */


  Zlib.RawInflateStream.prototype.restore_ = function () {
    this.ip = this.ip_;
    this.bitsbuflen = this.bitsbuflen_;
    this.bitsbuf = this.bitsbuf_;
  };
  /**
   * parse dynamic huffman block.
   */


  Zlib.RawInflateStream.prototype.parseDynamicHuffmanBlock = function () {
    /** @type {number} number of literal and length codes. */
    var hlit;
    /** @type {number} number of distance codes. */

    var hdist;
    /** @type {number} number of code lengths. */

    var hclen;
    /** @type {!(Uint8Array|Array)} code lengths. */

    var codeLengths = new ( Uint8Array )(Zlib.RawInflateStream.Order.length);
    /** @type {!Array} code lengths table. */

    var codeLengthsTable;
    this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_START;
    this.save_();
    hlit = this.readBits(5) + 257;
    hdist = this.readBits(5) + 1;
    hclen = this.readBits(4) + 4;

    if (hlit < 0 || hdist < 0 || hclen < 0) {
      this.restore_();
      return -1;
    }

    try {
      parseDynamicHuffmanBlockImpl.call(this);
    } catch (e) {
      this.restore_();
      return -1;
    }

    function parseDynamicHuffmanBlockImpl() {
      /** @type {number} */
      var bits;
      var code;
      var prev = 0;
      var repeat;
      /** @type {!(Uint8Array|Array.<number>)} code length table. */

      var lengthTable;
      /** @type {number} loop counter. */

      var i;
      /** @type {number} loop limit. */

      var il; // decode code lengths

      for (i = 0; i < hclen; ++i) {
        if ((bits = this.readBits(3)) < 0) {
          throw new Error('not enough input');
        }

        codeLengths[Zlib.RawInflateStream.Order[i]] = bits;
      } // decode length table


      codeLengthsTable = buildHuffmanTable(codeLengths);
      lengthTable = new ( Uint8Array )(hlit + hdist);

      for (i = 0, il = hlit + hdist; i < il;) {
        code = this.readCodeByTable(codeLengthsTable);

        if (code < 0) {
          throw new Error('not enough input');
        }

        switch (code) {
          case 16:
            if ((bits = this.readBits(2)) < 0) {
              throw new Error('not enough input');
            }

            repeat = 3 + bits;

            while (repeat--) {
              lengthTable[i++] = prev;
            }

            break;

          case 17:
            if ((bits = this.readBits(3)) < 0) {
              throw new Error('not enough input');
            }

            repeat = 3 + bits;

            while (repeat--) {
              lengthTable[i++] = 0;
            }

            prev = 0;
            break;

          case 18:
            if ((bits = this.readBits(7)) < 0) {
              throw new Error('not enough input');
            }

            repeat = 11 + bits;

            while (repeat--) {
              lengthTable[i++] = 0;
            }

            prev = 0;
            break;

          default:
            lengthTable[i++] = code;
            prev = code;
            break;
        }
      } // literal and length code
      this.litlenTable =  buildHuffmanTable(lengthTable.subarray(0, hlit)) ;
      this.distTable =  buildHuffmanTable(lengthTable.subarray(hlit)) ;
    }

    this.status = Zlib.RawInflateStream.Status.BLOCK_BODY_END;
    return 0;
  };
  /**
   * decode huffman code (dynamic)
   * @return {(number|undefined)} -1 is error.
   */


  Zlib.RawInflateStream.prototype.decodeHuffman = function () {
    var output = this.output;
    var op = this.op;
    /** @type {number} huffman code. */

    var code;
    /** @type {number} table index. */

    var ti;
    /** @type {number} huffman code distination. */

    var codeDist;
    /** @type {number} huffman code length. */

    var codeLength;
    var litlen = this.litlenTable;
    var dist = this.distTable;
    var olength = output.length;
    var bits;
    this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_START;

    while (true) {
      this.save_();
      code = this.readCodeByTable(litlen);

      if (code < 0) {
        this.op = op;
        this.restore_();
        return -1;
      }

      if (code === 256) {
        break;
      } // literal


      if (code < 256) {
        if (op === olength) {
          output = this.expandBuffer();
          olength = output.length;
        }

        output[op++] = code;
        continue;
      } // length code


      ti = code - 257;
      codeLength = Zlib.RawInflateStream.LengthCodeTable[ti];

      if (Zlib.RawInflateStream.LengthExtraTable[ti] > 0) {
        bits = this.readBits(Zlib.RawInflateStream.LengthExtraTable[ti]);

        if (bits < 0) {
          this.op = op;
          this.restore_();
          return -1;
        }

        codeLength += bits;
      } // dist code


      code = this.readCodeByTable(dist);

      if (code < 0) {
        this.op = op;
        this.restore_();
        return -1;
      }

      codeDist = Zlib.RawInflateStream.DistCodeTable[code];

      if (Zlib.RawInflateStream.DistExtraTable[code] > 0) {
        bits = this.readBits(Zlib.RawInflateStream.DistExtraTable[code]);

        if (bits < 0) {
          this.op = op;
          this.restore_();
          return -1;
        }

        codeDist += bits;
      } // lz77 decode


      if (op + codeLength >= olength) {
        output = this.expandBuffer();
        olength = output.length;
      }

      while (codeLength--) {
        output[op] = output[op++ - codeDist];
      } // break


      if (this.ip === this.input.length) {
        this.op = op;
        return -1;
      }
    }

    while (this.bitsbuflen >= 8) {
      this.bitsbuflen -= 8;
      this.ip--;
    }

    this.op = op;
    this.status = Zlib.RawInflateStream.Status.DECODE_BLOCK_END;
  };
  /**
   * expand output buffer. (dynamic)
   * @param {Object=} opt_param option parameters.
   * @return {!(Array|Uint8Array)} output buffer pointer.
   */


  Zlib.RawInflateStream.prototype.expandBuffer = function (opt_param) {
    /** @type {!(Array|Uint8Array)} store buffer. */
    var buffer;
    /** @type {number} expantion ratio. */

    var ratio = this.input.length / this.ip + 1 | 0;
    /** @type {number} maximum number of huffman code. */

    var maxHuffCode;
    /** @type {number} new output buffer size. */

    var newSize;
    /** @type {number} max inflate size. */

    var maxInflateSize;
    var input = this.input;
    var output = this.output;

    if (opt_param) {
      if (typeof opt_param.fixRatio === 'number') {
        ratio = opt_param.fixRatio;
      }

      if (typeof opt_param.addRatio === 'number') {
        ratio += opt_param.addRatio;
      }
    } // calculate new buffer size


    if (ratio < 2) {
      maxHuffCode = (input.length - this.ip) / this.litlenTable[2];
      maxInflateSize = maxHuffCode / 2 * 258 | 0;
      newSize = maxInflateSize < output.length ? output.length + maxInflateSize : output.length << 1;
    } else {
      newSize = output.length * ratio;
    } // buffer expantion


    {
      buffer = new Uint8Array(newSize);
      buffer.set(output);
    }

    this.output = buffer;
    return this.output;
  };
  /**
   * concat output buffer. (dynamic)
   * @return {!(Array|Uint8Array)} output buffer.
   */


  Zlib.RawInflateStream.prototype.concatBuffer = function () {
    /** @type {!(Array|Uint8Array)} output buffer. */
    var buffer;
    /** @type {number} */

    var op = this.op;
    /** @type {Uint8Array} */

    var tmp;

    if (this.resize) {
      {
        buffer = new Uint8Array(this.output.subarray(this.sp, op));
      }
    } else {
      buffer =  this.output.subarray(this.sp, op) ;
    }

    this.sp = op; // compaction

    if (op > Zlib.RawInflateStream.MaxBackwardLength + this.bufferSize) {
      this.op = this.sp = Zlib.RawInflateStream.MaxBackwardLength;

      {
        tmp =
        /** @type {Uint8Array} */
        this.output;
        this.output = new Uint8Array(this.bufferSize + Zlib.RawInflateStream.MaxBackwardLength);
        this.output.set(tmp.subarray(op - Zlib.RawInflateStream.MaxBackwardLength, op));
      }
    }

    return buffer;
  };
  /**
   * @constructor
   * @param {!(Uint8Array|Array)} input deflated buffer.
   * @param {Object=} opt_params option parameters.
   *
   * opt_params は以下のプロパティを指定する事ができます。
   *   - index: input buffer の deflate コンテナの開始位置.
   *   - blockSize: バッファのブロックサイズ.
   *   - verify: 伸張が終わった後 adler-32 checksum の検証を行うか.
   *   - bufferType: Zlib.Inflate.BufferType の値によってバッファの管理方法を指定する.
   *       Zlib.Inflate.BufferType は Zlib.RawInflate.BufferType のエイリアス.
   */


  Zlib.Inflate = function (input, opt_params) {
    /** @type {number} */

    var cmf;
    /** @type {number} */

    var flg;
    /** @type {!(Uint8Array|Array)} */

    this.input = input;
    /** @type {number} */

    this.ip = 0;
    /** @type {Zlib.RawInflate} */

    this.rawinflate;
    /** @type {(boolean|undefined)} verify flag. */

    this.verify; // option parameters

    if (opt_params || !(opt_params = {})) {
      if (opt_params['index']) {
        this.ip = opt_params['index'];
      }

      if (opt_params['verify']) {
        this.verify = opt_params['verify'];
      }
    } // Compression Method and Flags


    cmf = input[this.ip++];
    flg = input[this.ip++]; // compression method

    switch (cmf & 0x0f) {
      case Zlib.CompressionMethod.DEFLATE:
        this.method = Zlib.CompressionMethod.DEFLATE;
        break;

      default:
        throw new Error('unsupported compression method');
    } // fcheck


    if (((cmf << 8) + flg) % 31 !== 0) {
      throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);
    } // fdict (not supported)


    if (flg & 0x20) {
      throw new Error('fdict flag is not supported');
    } // RawInflate


    this.rawinflate = new Zlib.RawInflate(input, {
      'index': this.ip,
      'bufferSize': opt_params['bufferSize'],
      'bufferType': opt_params['bufferType'],
      'resize': opt_params['resize']
    });
  };
  /**
   * @enum {number}
   */


  Zlib.Inflate.BufferType = Zlib.RawInflate.BufferType;
  /**
   * decompress.
   * @return {!(Uint8Array|Array)} inflated buffer.
   */

  Zlib.Inflate.prototype.decompress = function () {
    /** @type {!(Array|Uint8Array)} input buffer. */
    var input = this.input;
    /** @type {!(Uint8Array|Array)} inflated buffer. */

    var buffer;
    /** @type {number} adler-32 checksum */

    var adler32;
    buffer = this.rawinflate.decompress();
    this.ip = this.rawinflate.ip; // verify adler-32

    if (this.verify) {
      adler32 = (input[this.ip++] << 24 | input[this.ip++] << 16 | input[this.ip++] << 8 | input[this.ip++]) >>> 0;

      if (adler32 !== Zlib.Adler32(buffer)) {
        throw new Error('invalid adler-32 checksum');
      }
    }

    return buffer;
  };
  /* vim:set expandtab ts=2 sw=2 tw=80: */

  /**
   * @param {!(Uint8Array|Array)} input deflated buffer.
   * @constructor
   */


  Zlib.InflateStream = function (input) {
    /** @type {!(Uint8Array|Array)} */
    this.input = input === void 0 ? new ( Uint8Array )() : input;
    /** @type {number} */

    this.ip = 0;
    /** @type {Zlib.RawInflateStream} */

    this.rawinflate = new Zlib.RawInflateStream(this.input, this.ip);
    /** @type {Zlib.CompressionMethod} */

    this.method;
    /** @type {!(Array|Uint8Array)} */

    this.output = this.rawinflate.output;
  };
  /**
   * decompress.
   * @return {!(Uint8Array|Array)} inflated buffer.
   */


  Zlib.InflateStream.prototype.decompress = function (input) {
    /** @type {!(Uint8Array|Array)} inflated buffer. */
    var buffer;
    // XXX Array, Uint8Array のチェックを行うか確認する

    if (input !== void 0) {
      {
        var tmp = new Uint8Array(this.input.length + input.length);
        tmp.set(this.input, 0);
        tmp.set(input, this.input.length);
        this.input = tmp;
      }
    }

    if (this.method === void 0) {
      if (this.readHeader() < 0) {
        return new ( Uint8Array )();
      }
    }

    buffer = this.rawinflate.decompress(this.input, this.ip);

    if (this.rawinflate.ip !== 0) {
      this.input =  this.input.subarray(this.rawinflate.ip) ;
      this.ip = 0;
    } // verify adler-32

    /*
    if (this.verify) {
      adler32 =
        input[this.ip++] << 24 | input[this.ip++] << 16 |
        input[this.ip++] << 8 | input[this.ip++];
       if (adler32 !== Zlib.Adler32(buffer)) {
        throw new Error('invalid adler-32 checksum');
      }
    }
    */


    return buffer;
  };

  Zlib.InflateStream.prototype.readHeader = function () {
    var ip = this.ip;
    var input = this.input; // Compression Method and Flags

    var cmf = input[ip++];
    var flg = input[ip++];

    if (cmf === void 0 || flg === void 0) {
      return -1;
    } // compression method


    switch (cmf & 0x0f) {
      case Zlib.CompressionMethod.DEFLATE:
        this.method = Zlib.CompressionMethod.DEFLATE;
        break;

      default:
        throw new Error('unsupported compression method');
    } // fcheck


    if (((cmf << 8) + flg) % 31 !== 0) {
      throw new Error('invalid fcheck flag:' + ((cmf << 8) + flg) % 31);
    } // fdict (not supported)


    if (flg & 0x20) {
      throw new Error('fdict flag is not supported');
    }

    this.ip = ip;
  };
  /**
   * @fileoverview GZIP (RFC1952) 展開コンテナ実装.
   */

  /**
   * @constructor
   * @param {!(Array|Uint8Array)} input input buffer.
   * @param {Object=} opt_params option parameters.
   */


  Zlib.Gunzip = function (input, opt_params) {
    /** @type {!(Array.<number>|Uint8Array)} input buffer. */
    this.input = input;
    /** @type {number} input buffer pointer. */

    this.ip = 0;
    /** @type {Array.<Zlib.GunzipMember>} */

    this.member = [];
    /** @type {boolean} */

    this.decompressed = false;
  };
  /**
   * @return {Array.<Zlib.GunzipMember>}
   */


  Zlib.Gunzip.prototype.getMembers = function () {
    if (!this.decompressed) {
      this.decompress();
    }

    return this.member.slice();
  };
  /**
   * inflate gzip data.
   * @return {!(Array.<number>|Uint8Array)} inflated buffer.
   */


  Zlib.Gunzip.prototype.decompress = function () {
    /** @type {number} input length. */
    var il = this.input.length;

    while (this.ip < il) {
      this.decodeMember();
    }

    this.decompressed = true;
    return this.concatMember();
  };
  /**
   * decode gzip member.
   */


  Zlib.Gunzip.prototype.decodeMember = function () {
    /** @type {Zlib.GunzipMember} */
    var member = new Zlib.GunzipMember();
    /** @type {number} */

    var isize;
    /** @type {Zlib.RawInflate} RawInflate implementation. */

    var rawinflate;
    /** @type {!(Array.<number>|Uint8Array)} inflated data. */

    var inflated;
    /** @type {number} inflate size */

    var inflen;
    /** @type {number} character code */

    var c;
    /** @type {number} character index in string. */

    var ci;
    /** @type {Array.<string>} character array. */

    var str;
    /** @type {number} modification time. */

    var mtime;
    /** @type {number} */

    var crc32;
    var input = this.input;
    var ip = this.ip;
    member.id1 = input[ip++];
    member.id2 = input[ip++]; // check signature

    if (member.id1 !== 0x1f || member.id2 !== 0x8b) {
      throw new Error('invalid file signature:' + member.id1 + ',' + member.id2);
    } // check compression method


    member.cm = input[ip++];

    switch (member.cm) {
      case 8:
        /* XXX: use Zlib const */
        break;

      default:
        throw new Error('unknown compression method: ' + member.cm);
    } // flags


    member.flg = input[ip++]; // modification time

    mtime = input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24;
    member.mtime = new Date(mtime * 1000); // extra flags

    member.xfl = input[ip++]; // operating system

    member.os = input[ip++]; // extra

    if ((member.flg & Zlib.Gzip.FlagsMask.FEXTRA) > 0) {
      member.xlen = input[ip++] | input[ip++] << 8;
      ip = this.decodeSubField(ip, member.xlen);
    } // fname


    if ((member.flg & Zlib.Gzip.FlagsMask.FNAME) > 0) {
      for (str = [], ci = 0; (c = input[ip++]) > 0;) {
        str[ci++] = String.fromCharCode(c);
      }

      member.name = str.join('');
    } // fcomment


    if ((member.flg & Zlib.Gzip.FlagsMask.FCOMMENT) > 0) {
      for (str = [], ci = 0; (c = input[ip++]) > 0;) {
        str[ci++] = String.fromCharCode(c);
      }

      member.comment = str.join('');
    } // fhcrc


    if ((member.flg & Zlib.Gzip.FlagsMask.FHCRC) > 0) {
      member.crc16 = Zlib.CRC32.calc(input, 0, ip) & 0xffff;

      if (member.crc16 !== (input[ip++] | input[ip++] << 8)) {
        throw new Error('invalid header crc16');
      }
    } // isize を事前に取得すると展開後のサイズが分かるため、
    // inflate処理のバッファサイズが事前に分かり、高速になる


    isize = input[input.length - 4] | input[input.length - 3] << 8 | input[input.length - 2] << 16 | input[input.length - 1] << 24; // isize の妥当性チェック
    // ハフマン符号では最小 2-bit のため、最大で 1/4 になる
    // LZ77 符号では 長さと距離 2-Byte で最大 258-Byte を表現できるため、
    // 1/128 になるとする
    // ここから入力バッファの残りが isize の 512 倍以上だったら
    // サイズ指定のバッファ確保は行わない事とする

    if (input.length - ip -
    /* CRC-32 */
    4 -
    /* ISIZE */
    4 < isize * 512) {
      inflen = isize;
    } // compressed block


    rawinflate = new Zlib.RawInflate(input, {
      'index': ip,
      'bufferSize': inflen
    });
    member.data = inflated = rawinflate.decompress();
    ip = rawinflate.ip; // crc32

    member.crc32 = crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;

    if (Zlib.CRC32.calc(inflated) !== crc32) {
      throw new Error('invalid CRC-32 checksum: 0x' + Zlib.CRC32.calc(inflated).toString(16) + ' / 0x' + crc32.toString(16));
    } // input size


    member.isize = isize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0;

    if ((inflated.length & 0xffffffff) !== isize) {
      throw new Error('invalid input size: ' + (inflated.length & 0xffffffff) + ' / ' + isize);
    }

    this.member.push(member);
    this.ip = ip;
  };
  /**
   * サブフィールドのデコード
   * XXX: 現在は何もせずスキップする
   */


  Zlib.Gunzip.prototype.decodeSubField = function (ip, length) {
    return ip + length;
  };
  /**
   * @return {!(Array.<number>|Uint8Array)}
   */


  Zlib.Gunzip.prototype.concatMember = function () {
    /** @type {Array.<Zlib.GunzipMember>} */
    var member = this.member;
    /** @type {number} */

    var i;
    /** @type {number} */

    var il;
    /** @type {number} */

    var p = 0;
    /** @type {number} */

    var size = 0;
    /** @type {!(Array.<number>|Uint8Array)} */

    var buffer;

    for (i = 0, il = member.length; i < il; ++i) {
      size += member[i].data.length;
    }

    {
      buffer = new Uint8Array(size);

      for (i = 0; i < il; ++i) {
        buffer.set(member[i].data, p);
        p += member[i].data.length;
      }
    }

    return buffer;
  };
  /**
   * @constructor
   */


  Zlib.GunzipMember = function () {
    /** @type {number} signature first byte. */
    this.id1;
    /** @type {number} signature second byte. */

    this.id2;
    /** @type {number} compression method. */

    this.cm;
    /** @type {number} flags. */

    this.flg;
    /** @type {Date} modification time. */

    this.mtime;
    /** @type {number} extra flags. */

    this.xfl;
    /** @type {number} operating system number. */

    this.os;
    /** @type {number} CRC-16 value for FHCRC flag. */

    this.crc16;
    /** @type {number} extra length. */

    this.xlen;
    /** @type {number} CRC-32 value for verification. */

    this.crc32;
    /** @type {number} input size modulo 32 value. */

    this.isize;
    /** @type {string} filename. */

    this.name;
    /** @type {string} comment. */

    this.comment;
    /** @type {!(Uint8Array|Array.<number>)} */

    this.data;
  };

  Zlib.GunzipMember.prototype.getName = function () {
    return this.name;
  };

  Zlib.GunzipMember.prototype.getData = function () {
    return this.data;
  };

  Zlib.GunzipMember.prototype.getMtime = function () {
    return this.mtime;
  };
  /**
   * @fileoverview GZIP (RFC1952) 実装.
   */

  /**
   * @constructor
   * @param {!(Array|Uint8Array)} input input buffer.
   * @param {Object=} opt_params option parameters.
   */


  Zlib.Gzip = function (input, opt_params) {
    /** @type {!(Array.<number>|Uint8Array)} input buffer. */
    this.input = input;
    /** @type {number} input buffer pointer. */

    this.ip = 0;
    /** @type {!(Array.<number>|Uint8Array)} output buffer. */

    this.output;
    /** @type {number} output buffer. */

    this.op = 0;
    /** @type {!Object} flags option flags. */

    this.flags = {};
    /** @type {!string} filename. */

    this.filename;
    /** @type {!string} comment. */

    this.comment;
    /** @type {!Object} deflate options. */

    this.deflateOptions; // option parameters

    if (opt_params) {
      if (opt_params['flags']) {
        this.flags = opt_params['flags'];
      }

      if (typeof opt_params['filename'] === 'string') {
        this.filename = opt_params['filename'];
      }

      if (typeof opt_params['comment'] === 'string') {
        this.comment = opt_params['comment'];
      }

      if (opt_params['deflateOptions']) {
        this.deflateOptions = opt_params['deflateOptions'];
      }
    }

    if (!this.deflateOptions) {
      this.deflateOptions = {};
    }
  };
  /**
   * @type {number}
   * @const
   */


  Zlib.Gzip.DefaultBufferSize = 0x8000;
  /**
   * encode gzip members.
   * @return {!(Array|Uint8Array)} gzip binary array.
   */

  Zlib.Gzip.prototype.compress = function () {
    /** @type {number} flags. */
    var flg;
    /** @type {number} modification time. */

    var mtime;
    /** @type {number} CRC-16 value for FHCRC flag. */

    var crc16;
    /** @type {number} CRC-32 value for verification. */

    var crc32;
    /** @type {!Zlib.RawDeflate} raw deflate object. */

    var rawdeflate;
    /** @type {number} character code */

    var c;
    /** @type {number} loop counter. */

    var i;
    /** @type {number} loop limiter. */

    var il;
    /** @type {!(Array|Uint8Array)} output buffer. */

    var output = new ( Uint8Array )(Zlib.Gzip.DefaultBufferSize);
    /** @type {number} output buffer pointer. */

    var op = 0;
    var input = this.input;
    var ip = this.ip;
    var filename = this.filename;
    var comment = this.comment; // check signature

    output[op++] = 0x1f;
    output[op++] = 0x8b; // check compression method

    output[op++] = 8;
    /* XXX: use Zlib const */
    // flags

    flg = 0;
    if (this.flags['fname']) flg |= Zlib.Gzip.FlagsMask.FNAME;
    if (this.flags['fcomment']) flg |= Zlib.Gzip.FlagsMask.FCOMMENT;
    if (this.flags['fhcrc']) flg |= Zlib.Gzip.FlagsMask.FHCRC; // XXX: FTEXT
    // XXX: FEXTRA

    output[op++] = flg; // modification time

    mtime = (Date.now ? Date.now() : +new Date()) / 1000 | 0;
    output[op++] = mtime & 0xff;
    output[op++] = mtime >>> 8 & 0xff;
    output[op++] = mtime >>> 16 & 0xff;
    output[op++] = mtime >>> 24 & 0xff; // extra flags

    output[op++] = 0; // operating system

    output[op++] = Zlib.Gzip.OperatingSystem.UNKNOWN; // extra

    /* NOP */
    // fname

    if (this.flags['fname'] !== void 0) {
      for (i = 0, il = filename.length; i < il; ++i) {
        c = filename.charCodeAt(i);

        if (c > 0xff) {
          output[op++] = c >>> 8 & 0xff;
        }

        output[op++] = c & 0xff;
      }

      output[op++] = 0; // null termination
    } // fcomment


    if (this.flags['comment']) {
      for (i = 0, il = comment.length; i < il; ++i) {
        c = comment.charCodeAt(i);

        if (c > 0xff) {
          output[op++] = c >>> 8 & 0xff;
        }

        output[op++] = c & 0xff;
      }

      output[op++] = 0; // null termination
    } // fhcrc


    if (this.flags['fhcrc']) {
      crc16 = Zlib.CRC32.calc(output, 0, op) & 0xffff;
      output[op++] = crc16 & 0xff;
      output[op++] = crc16 >>> 8 & 0xff;
    } // add compress option


    this.deflateOptions['outputBuffer'] = output;
    this.deflateOptions['outputIndex'] = op; // compress

    rawdeflate = new Zlib.RawDeflate(input, this.deflateOptions);
    output = rawdeflate.compress();
    op = rawdeflate.op; // expand buffer

    {
      if (op + 8 > output.buffer.byteLength) {
        this.output = new Uint8Array(op + 8);
        this.output.set(new Uint8Array(output.buffer));
        output = this.output;
      } else {
        output = new Uint8Array(output.buffer);
      }
    } // crc32


    crc32 = Zlib.CRC32.calc(input);
    output[op++] = crc32 & 0xff;
    output[op++] = crc32 >>> 8 & 0xff;
    output[op++] = crc32 >>> 16 & 0xff;
    output[op++] = crc32 >>> 24 & 0xff; // input size

    il = input.length;
    output[op++] = il & 0xff;
    output[op++] = il >>> 8 & 0xff;
    output[op++] = il >>> 16 & 0xff;
    output[op++] = il >>> 24 & 0xff;
    this.ip = ip;

    if ( op < output.length) {
      this.output = output = output.subarray(0, op);
    }

    return output;
  };
  /** @enum {number} */


  Zlib.Gzip.OperatingSystem = {
    FAT: 0,
    AMIGA: 1,
    VMS: 2,
    UNIX: 3,
    VM_CMS: 4,
    ATARI_TOS: 5,
    HPFS: 6,
    MACINTOSH: 7,
    Z_SYSTEM: 8,
    CP_M: 9,
    TOPS_20: 10,
    NTFS: 11,
    QDOS: 12,
    ACORN_RISCOS: 13,
    UNKNOWN: 255
  };
  /** @enum {number} */

  Zlib.Gzip.FlagsMask = {
    FTEXT: 0x01,
    FHCRC: 0x02,
    FEXTRA: 0x04,
    FNAME: 0x08,
    FCOMMENT: 0x10
  };
  /**
   * @fileoverview Heap Sort 実装. ハフマン符号化で使用する.
   */

  /**
   * カスタムハフマン符号で使用するヒープ実装
   * @param {number} length ヒープサイズ.
   * @constructor
   */

  Zlib.Heap = function (length) {
    this.buffer = new ( Uint16Array )(length * 2);
    this.length = 0;
  };
  /**
   * 親ノードの index 取得
   * @param {number} index 子ノードの index.
   * @return {number} 親ノードの index.
   *
   */


  Zlib.Heap.prototype.getParent = function (index) {
    return ((index - 2) / 4 | 0) * 2;
  };
  /**
   * 子ノードの index 取得
   * @param {number} index 親ノードの index.
   * @return {number} 子ノードの index.
   */


  Zlib.Heap.prototype.getChild = function (index) {
    return 2 * index + 2;
  };
  /**
   * Heap に値を追加する
   * @param {number} index キー index.
   * @param {number} value 値.
   * @return {number} 現在のヒープ長.
   */


  Zlib.Heap.prototype.push = function (index, value) {
    var current,
        parent,
        heap = this.buffer,
        swap;
    current = this.length;
    heap[this.length++] = value;
    heap[this.length++] = index; // ルートノードにたどり着くまで入れ替えを試みる

    while (current > 0) {
      parent = this.getParent(current); // 親ノードと比較して親の方が小さければ入れ替える

      if (heap[current] > heap[parent]) {
        swap = heap[current];
        heap[current] = heap[parent];
        heap[parent] = swap;
        swap = heap[current + 1];
        heap[current + 1] = heap[parent + 1];
        heap[parent + 1] = swap;
        current = parent; // 入れ替えが必要なくなったらそこで抜ける
      } else {
        break;
      }
    }

    return this.length;
  };
  /**
   * Heapから一番大きい値を返す
   * @return {{index: number, value: number, length: number}} {index: キーindex,
   *     value: 値, length: ヒープ長} の Object.
   */


  Zlib.Heap.prototype.pop = function () {
    var index,
        value,
        heap = this.buffer,
        swap,
        current,
        parent;
    value = heap[0];
    index = heap[1]; // 後ろから値を取る

    this.length -= 2;
    heap[0] = heap[this.length];
    heap[1] = heap[this.length + 1];
    parent = 0; // ルートノードから下がっていく

    while (true) {
      current = this.getChild(parent); // 範囲チェック

      if (current >= this.length) {
        break;
      } // 隣のノードと比較して、隣の方が値が大きければ隣を現在ノードとして選択


      if (current + 2 < this.length && heap[current + 2] > heap[current]) {
        current += 2;
      } // 親ノードと比較して親の方が小さい場合は入れ替える


      if (heap[current] > heap[parent]) {
        swap = heap[parent];
        heap[parent] = heap[current];
        heap[current] = swap;
        swap = heap[parent + 1];
        heap[parent + 1] = heap[current + 1];
        heap[current + 1] = swap;
      } else {
        break;
      }

      parent = current;
    }

    return {
      index: index,
      value: value,
      length: this.length
    };
  };
  /* vim:set expandtab ts=2 sw=2 tw=80: */

  /**
   * @fileoverview Deflate (RFC1951) 符号化アルゴリズム実装.
   */

  /**
   * Raw Deflate 実装
   *
   * @constructor
   * @param {!(Array.<number>|Uint8Array)} input 符号化する対象のバッファ.
   * @param {Object=} opt_params option parameters.
   *
   * typed array が使用可能なとき、outputBuffer が Array は自動的に Uint8Array に
   * 変換されます.
   * 別のオブジェクトになるため出力バッファを参照している変数などは
   * 更新する必要があります.
   */


  Zlib.RawDeflate = function (input, opt_params) {
    /** @type {Zlib.RawDeflate.CompressionType} */
    this.compressionType = Zlib.RawDeflate.CompressionType.DYNAMIC;
    /** @type {number} */

    this.lazy = 0;
    /** @type {!(Array.<number>|Uint32Array)} */

    this.freqsLitLen;
    /** @type {!(Array.<number>|Uint32Array)} */

    this.freqsDist;
    /** @type {!(Array.<number>|Uint8Array)} */

    this.input =  input instanceof Array ? new Uint8Array(input) : input;
    /** @type {!(Array.<number>|Uint8Array)} output output buffer. */

    this.output;
    /** @type {number} pos output buffer position. */

    this.op = 0; // option parameters

    if (opt_params) {
      if (opt_params['lazy']) {
        this.lazy = opt_params['lazy'];
      }

      if (typeof opt_params['compressionType'] === 'number') {
        this.compressionType = opt_params['compressionType'];
      }

      if (opt_params['outputBuffer']) {
        this.output =  opt_params['outputBuffer'] instanceof Array ? new Uint8Array(opt_params['outputBuffer']) : opt_params['outputBuffer'];
      }

      if (typeof opt_params['outputIndex'] === 'number') {
        this.op = opt_params['outputIndex'];
      }
    }

    if (!this.output) {
      this.output = new ( Uint8Array )(0x8000);
    }
  };
  /**
   * @enum {number}
   */


  Zlib.RawDeflate.CompressionType = {
    NONE: 0,
    FIXED: 1,
    DYNAMIC: 2,
    RESERVED: 3
  };
  /**
   * LZ77 の最小マッチ長
   * @const
   * @type {number}
   */

  Zlib.RawDeflate.Lz77MinLength = 3;
  /**
   * LZ77 の最大マッチ長
   * @const
   * @type {number}
   */

  Zlib.RawDeflate.Lz77MaxLength = 258;
  /**
   * LZ77 のウィンドウサイズ
   * @const
   * @type {number}
   */

  Zlib.RawDeflate.WindowSize = 0x8000;
  /**
   * 最長の符号長
   * @const
   * @type {number}
   */

  Zlib.RawDeflate.MaxCodeLength = 16;
  /**
   * ハフマン符号の最大数値
   * @const
   * @type {number}
   */

  Zlib.RawDeflate.HUFMAX = 286;
  /**
   * 固定ハフマン符号の符号化テーブル
   * @const
   * @type {Array.<Array.<number, number>>}
   */

  Zlib.RawDeflate.FixedHuffmanTable = function () {
    var table = [],
        i;

    for (i = 0; i < 288; i++) {
      switch (true) {
        case i <= 143:
          table.push([i + 0x030, 8]);
          break;

        case i <= 255:
          table.push([i - 144 + 0x190, 9]);
          break;

        case i <= 279:
          table.push([i - 256 + 0x000, 7]);
          break;

        case i <= 287:
          table.push([i - 280 + 0x0C0, 8]);
          break;

        default:
          throw 'invalid literal: ' + i;
      }
    }

    return table;
  }();
  /**
   * DEFLATE ブロックの作成
   * @return {!(Array.<number>|Uint8Array)} 圧縮済み byte array.
   */


  Zlib.RawDeflate.prototype.compress = function () {
    /** @type {!(Array.<number>|Uint8Array)} */
    var blockArray;
    /** @type {number} */

    var position;
    /** @type {number} */

    var length;
    var input = this.input; // compression

    switch (this.compressionType) {
      case Zlib.RawDeflate.CompressionType.NONE:
        // each 65535-Byte (length header: 16-bit)
        for (position = 0, length = input.length; position < length;) {
          blockArray =  input.subarray(position, position + 0xffff) ;
          position += blockArray.length;
          this.makeNocompressBlock(blockArray, position === length);
        }

        break;

      case Zlib.RawDeflate.CompressionType.FIXED:
        this.output = this.makeFixedHuffmanBlock(input, true);
        this.op = this.output.length;
        break;

      case Zlib.RawDeflate.CompressionType.DYNAMIC:
        this.output = this.makeDynamicHuffmanBlock(input, true);
        this.op = this.output.length;
        break;

      default:
        throw 'invalid compression type';
    }

    return this.output;
  };
  /**
   * 非圧縮ブロックの作成
   * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.
   * @param {!boolean} isFinalBlock 最後のブロックならばtrue.
   * @return {!(Array.<number>|Uint8Array)} 非圧縮ブロック byte array.
   */


  Zlib.RawDeflate.prototype.makeNocompressBlock = function (blockArray, isFinalBlock) {
    /** @type {number} */
    var bfinal;
    /** @type {Zlib.RawDeflate.CompressionType} */

    var btype;
    /** @type {number} */

    var len;
    /** @type {number} */

    var nlen;
    var output = this.output;
    var op = this.op; // expand buffer

    {
      output = new Uint8Array(this.output.buffer);

      while (output.length <= op + blockArray.length + 5) {
        output = new Uint8Array(output.length << 1);
      }

      output.set(this.output);
    } // header


    bfinal = isFinalBlock ? 1 : 0;
    btype = Zlib.RawDeflate.CompressionType.NONE;
    output[op++] = bfinal | btype << 1; // length

    len = blockArray.length;
    nlen = ~len + 0x10000 & 0xffff;
    output[op++] = len & 0xff;
    output[op++] = len >>> 8 & 0xff;
    output[op++] = nlen & 0xff;
    output[op++] = nlen >>> 8 & 0xff; // copy buffer

    {
      output.set(blockArray, op);
      op += blockArray.length;
      output = output.subarray(0, op);
    }

    this.op = op;
    this.output = output;
    return output;
  };
  /**
   * 固定ハフマンブロックの作成
   * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.
   * @param {!boolean} isFinalBlock 最後のブロックならばtrue.
   * @return {!(Array.<number>|Uint8Array)} 固定ハフマン符号化ブロック byte array.
   */


  Zlib.RawDeflate.prototype.makeFixedHuffmanBlock = function (blockArray, isFinalBlock) {
    /** @type {Zlib.BitStream} */
    var stream = new Zlib.BitStream( new Uint8Array(this.output.buffer) , this.op);
    /** @type {number} */

    var bfinal;
    /** @type {Zlib.RawDeflate.CompressionType} */

    var btype;
    /** @type {!(Array.<number>|Uint16Array)} */

    var data; // header

    bfinal = isFinalBlock ? 1 : 0;
    btype = Zlib.RawDeflate.CompressionType.FIXED;
    stream.writeBits(bfinal, 1, true);
    stream.writeBits(btype, 2, true);
    data = this.lz77(blockArray);
    this.fixedHuffman(data, stream);
    return stream.finish();
  };
  /**
   * 動的ハフマンブロックの作成
   * @param {!(Array.<number>|Uint8Array)} blockArray ブロックデータ byte array.
   * @param {!boolean} isFinalBlock 最後のブロックならばtrue.
   * @return {!(Array.<number>|Uint8Array)} 動的ハフマン符号ブロック byte array.
   */


  Zlib.RawDeflate.prototype.makeDynamicHuffmanBlock = function (blockArray, isFinalBlock) {
    /** @type {Zlib.BitStream} */
    var stream = new Zlib.BitStream( new Uint8Array(this.output.buffer) , this.op);
    /** @type {number} */

    var bfinal;
    /** @type {Zlib.RawDeflate.CompressionType} */

    var btype;
    /** @type {!(Array.<number>|Uint16Array)} */

    var data;
    /** @type {number} */

    var hlit;
    /** @type {number} */

    var hdist;
    /** @type {number} */

    var hclen;
    /** @const @type {Array.<number>} */

    var hclenOrder = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
    /** @type {!(Array.<number>|Uint8Array)} */

    var litLenLengths;
    /** @type {!(Array.<number>|Uint16Array)} */

    var litLenCodes;
    /** @type {!(Array.<number>|Uint8Array)} */

    var distLengths;
    /** @type {!(Array.<number>|Uint16Array)} */

    var distCodes;
    /** @type {{
     *   codes: !(Array.<number>|Uint32Array),
     *   freqs: !(Array.<number>|Uint8Array)
     * }} */

    var treeSymbols;
    /** @type {!(Array.<number>|Uint8Array)} */

    var treeLengths;
    /** @type {Array} */

    var transLengths = new Array(19);
    /** @type {!(Array.<number>|Uint16Array)} */

    var treeCodes;
    /** @type {number} */

    var code;
    /** @type {number} */

    var bitlen;
    /** @type {number} */

    var i;
    /** @type {number} */

    var il; // header

    bfinal = isFinalBlock ? 1 : 0;
    btype = Zlib.RawDeflate.CompressionType.DYNAMIC;
    stream.writeBits(bfinal, 1, true);
    stream.writeBits(btype, 2, true);
    data = this.lz77(blockArray); // リテラル・長さ, 距離のハフマン符号と符号長の算出

    litLenLengths = this.getLengths_(this.freqsLitLen, 15);
    litLenCodes = this.getCodesFromLengths_(litLenLengths);
    distLengths = this.getLengths_(this.freqsDist, 7);
    distCodes = this.getCodesFromLengths_(distLengths); // HLIT, HDIST の決定

    for (hlit = 286; hlit > 257 && litLenLengths[hlit - 1] === 0; hlit--) {}

    for (hdist = 30; hdist > 1 && distLengths[hdist - 1] === 0; hdist--) {} // HCLEN


    treeSymbols = this.getTreeSymbols_(hlit, litLenLengths, hdist, distLengths);
    treeLengths = this.getLengths_(treeSymbols.freqs, 7);

    for (i = 0; i < 19; i++) {
      transLengths[i] = treeLengths[hclenOrder[i]];
    }

    for (hclen = 19; hclen > 4 && transLengths[hclen - 1] === 0; hclen--) {}

    treeCodes = this.getCodesFromLengths_(treeLengths); // 出力

    stream.writeBits(hlit - 257, 5, true);
    stream.writeBits(hdist - 1, 5, true);
    stream.writeBits(hclen - 4, 4, true);

    for (i = 0; i < hclen; i++) {
      stream.writeBits(transLengths[i], 3, true);
    } // ツリーの出力


    for (i = 0, il = treeSymbols.codes.length; i < il; i++) {
      code = treeSymbols.codes[i];
      stream.writeBits(treeCodes[code], treeLengths[code], true); // extra bits

      if (code >= 16) {
        i++;

        switch (code) {
          case 16:
            bitlen = 2;
            break;

          case 17:
            bitlen = 3;
            break;

          case 18:
            bitlen = 7;
            break;

          default:
            throw 'invalid code: ' + code;
        }

        stream.writeBits(treeSymbols.codes[i], bitlen, true);
      }
    }

    this.dynamicHuffman(data, [litLenCodes, litLenLengths], [distCodes, distLengths], stream);
    return stream.finish();
  };
  /**
   * 動的ハフマン符号化(カスタムハフマンテーブル)
   * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 符号化済み byte array.
   * @param {!Zlib.BitStream} stream 書き込み用ビットストリーム.
   * @return {!Zlib.BitStream} ハフマン符号化済みビットストリームオブジェクト.
   */


  Zlib.RawDeflate.prototype.dynamicHuffman = function (dataArray, litLen, dist, stream) {
    /** @type {number} */
    var index;
    /** @type {number} */

    var length;
    /** @type {number} */

    var literal;
    /** @type {number} */

    var code;
    /** @type {number} */

    var litLenCodes;
    /** @type {number} */

    var litLenLengths;
    /** @type {number} */

    var distCodes;
    /** @type {number} */

    var distLengths;
    litLenCodes = litLen[0];
    litLenLengths = litLen[1];
    distCodes = dist[0];
    distLengths = dist[1]; // 符号を BitStream に書き込んでいく

    for (index = 0, length = dataArray.length; index < length; ++index) {
      literal = dataArray[index]; // literal or length

      stream.writeBits(litLenCodes[literal], litLenLengths[literal], true); // 長さ・距離符号

      if (literal > 256) {
        // length extra
        stream.writeBits(dataArray[++index], dataArray[++index], true); // distance

        code = dataArray[++index];
        stream.writeBits(distCodes[code], distLengths[code], true); // distance extra

        stream.writeBits(dataArray[++index], dataArray[++index], true); // 終端
      } else if (literal === 256) {
        break;
      }
    }

    return stream;
  };
  /**
   * 固定ハフマン符号化
   * @param {!(Array.<number>|Uint16Array)} dataArray LZ77 符号化済み byte array.
   * @param {!Zlib.BitStream} stream 書き込み用ビットストリーム.
   * @return {!Zlib.BitStream} ハフマン符号化済みビットストリームオブジェクト.
   */


  Zlib.RawDeflate.prototype.fixedHuffman = function (dataArray, stream) {
    /** @type {number} */
    var index;
    /** @type {number} */

    var length;
    /** @type {number} */

    var literal; // 符号を BitStream に書き込んでいく

    for (index = 0, length = dataArray.length; index < length; index++) {
      literal = dataArray[index]; // 符号の書き込み

      Zlib.BitStream.prototype.writeBits.apply(stream, Zlib.RawDeflate.FixedHuffmanTable[literal]); // 長さ・距離符号

      if (literal > 0x100) {
        // length extra
        stream.writeBits(dataArray[++index], dataArray[++index], true); // distance

        stream.writeBits(dataArray[++index], 5); // distance extra

        stream.writeBits(dataArray[++index], dataArray[++index], true); // 終端
      } else if (literal === 0x100) {
        break;
      }
    }

    return stream;
  };
  /**
   * マッチ情報
   * @param {!number} length マッチした長さ.
   * @param {!number} backwardDistance マッチ位置との距離.
   * @constructor
   */


  Zlib.RawDeflate.Lz77Match = function (length, backwardDistance) {
    /** @type {number} match length. */
    this.length = length;
    /** @type {number} backward distance. */

    this.backwardDistance = backwardDistance;
  };
  /**
   * 長さ符号テーブル.
   * [コード, 拡張ビット, 拡張ビット長] の配列となっている.
   * @const
   * @type {!(Array.<number>|Uint32Array)}
   */


  Zlib.RawDeflate.Lz77Match.LengthCodeTable = function (table) {
    return  new Uint32Array(table) ;
  }(function () {
    /** @type {!Array} */
    var table = [];
    /** @type {number} */

    var i;
    /** @type {!Array.<number>} */

    var c;

    for (i = 3; i <= 258; i++) {
      c = code(i);
      table[i] = c[2] << 24 | c[1] << 16 | c[0];
    }
    /**
     * @param {number} length lz77 length.
     * @return {!Array.<number>} lz77 codes.
     */


    function code(length) {
      switch (true) {
        case length === 3:
          return [257, length - 3, 0];
          break;

        case length === 4:
          return [258, length - 4, 0];
          break;

        case length === 5:
          return [259, length - 5, 0];
          break;

        case length === 6:
          return [260, length - 6, 0];
          break;

        case length === 7:
          return [261, length - 7, 0];
          break;

        case length === 8:
          return [262, length - 8, 0];
          break;

        case length === 9:
          return [263, length - 9, 0];
          break;

        case length === 10:
          return [264, length - 10, 0];
          break;

        case length <= 12:
          return [265, length - 11, 1];
          break;

        case length <= 14:
          return [266, length - 13, 1];
          break;

        case length <= 16:
          return [267, length - 15, 1];
          break;

        case length <= 18:
          return [268, length - 17, 1];
          break;

        case length <= 22:
          return [269, length - 19, 2];
          break;

        case length <= 26:
          return [270, length - 23, 2];
          break;

        case length <= 30:
          return [271, length - 27, 2];
          break;

        case length <= 34:
          return [272, length - 31, 2];
          break;

        case length <= 42:
          return [273, length - 35, 3];
          break;

        case length <= 50:
          return [274, length - 43, 3];
          break;

        case length <= 58:
          return [275, length - 51, 3];
          break;

        case length <= 66:
          return [276, length - 59, 3];
          break;

        case length <= 82:
          return [277, length - 67, 4];
          break;

        case length <= 98:
          return [278, length - 83, 4];
          break;

        case length <= 114:
          return [279, length - 99, 4];
          break;

        case length <= 130:
          return [280, length - 115, 4];
          break;

        case length <= 162:
          return [281, length - 131, 5];
          break;

        case length <= 194:
          return [282, length - 163, 5];
          break;

        case length <= 226:
          return [283, length - 195, 5];
          break;

        case length <= 257:
          return [284, length - 227, 5];
          break;

        case length === 258:
          return [285, length - 258, 0];
          break;

        default:
          throw 'invalid length: ' + length;
      }
    }

    return table;
  }());
  /**
   * 距離符号テーブル
   * @param {!number} dist 距離.
   * @return {!Array.<number>} コード、拡張ビット、拡張ビット長の配列.
   * @private
   */


  Zlib.RawDeflate.Lz77Match.prototype.getDistanceCode_ = function (dist) {
    /** @type {!Array.<number>} distance code table. */
    var r;

    switch (true) {
      case dist === 1:
        r = [0, dist - 1, 0];
        break;

      case dist === 2:
        r = [1, dist - 2, 0];
        break;

      case dist === 3:
        r = [2, dist - 3, 0];
        break;

      case dist === 4:
        r = [3, dist - 4, 0];
        break;

      case dist <= 6:
        r = [4, dist - 5, 1];
        break;

      case dist <= 8:
        r = [5, dist - 7, 1];
        break;

      case dist <= 12:
        r = [6, dist - 9, 2];
        break;

      case dist <= 16:
        r = [7, dist - 13, 2];
        break;

      case dist <= 24:
        r = [8, dist - 17, 3];
        break;

      case dist <= 32:
        r = [9, dist - 25, 3];
        break;

      case dist <= 48:
        r = [10, dist - 33, 4];
        break;

      case dist <= 64:
        r = [11, dist - 49, 4];
        break;

      case dist <= 96:
        r = [12, dist - 65, 5];
        break;

      case dist <= 128:
        r = [13, dist - 97, 5];
        break;

      case dist <= 192:
        r = [14, dist - 129, 6];
        break;

      case dist <= 256:
        r = [15, dist - 193, 6];
        break;

      case dist <= 384:
        r = [16, dist - 257, 7];
        break;

      case dist <= 512:
        r = [17, dist - 385, 7];
        break;

      case dist <= 768:
        r = [18, dist - 513, 8];
        break;

      case dist <= 1024:
        r = [19, dist - 769, 8];
        break;

      case dist <= 1536:
        r = [20, dist - 1025, 9];
        break;

      case dist <= 2048:
        r = [21, dist - 1537, 9];
        break;

      case dist <= 3072:
        r = [22, dist - 2049, 10];
        break;

      case dist <= 4096:
        r = [23, dist - 3073, 10];
        break;

      case dist <= 6144:
        r = [24, dist - 4097, 11];
        break;

      case dist <= 8192:
        r = [25, dist - 6145, 11];
        break;

      case dist <= 12288:
        r = [26, dist - 8193, 12];
        break;

      case dist <= 16384:
        r = [27, dist - 12289, 12];
        break;

      case dist <= 24576:
        r = [28, dist - 16385, 13];
        break;

      case dist <= 32768:
        r = [29, dist - 24577, 13];
        break;

      default:
        throw 'invalid distance';
    }

    return r;
  };
  /**
   * マッチ情報を LZ77 符号化配列で返す.
   * なお、ここでは以下の内部仕様で符号化している
   * [ CODE, EXTRA-BIT-LEN, EXTRA, CODE, EXTRA-BIT-LEN, EXTRA ]
   * @return {!Array.<number>} LZ77 符号化 byte array.
   */


  Zlib.RawDeflate.Lz77Match.prototype.toLz77Array = function () {
    /** @type {number} */
    var length = this.length;
    /** @type {number} */

    var dist = this.backwardDistance;
    /** @type {Array} */

    var codeArray = [];
    /** @type {number} */

    var pos = 0;
    /** @type {!Array.<number>} */

    var code; // length

    code = Zlib.RawDeflate.Lz77Match.LengthCodeTable[length];
    codeArray[pos++] = code & 0xffff;
    codeArray[pos++] = code >> 16 & 0xff;
    codeArray[pos++] = code >> 24; // distance

    code = this.getDistanceCode_(dist);
    codeArray[pos++] = code[0];
    codeArray[pos++] = code[1];
    codeArray[pos++] = code[2];
    return codeArray;
  };
  /**
   * LZ77 実装
   * @param {!(Array.<number>|Uint8Array)} dataArray LZ77 符号化するバイト配列.
   * @return {!(Array.<number>|Uint16Array)} LZ77 符号化した配列.
   */


  Zlib.RawDeflate.prototype.lz77 = function (dataArray) {
    /** @type {number} input position */
    var position;
    /** @type {number} input length */

    var length;
    /** @type {number} loop counter */

    var i;
    /** @type {number} loop limiter */

    var il;
    /** @type {number} chained-hash-table key */

    var matchKey;
    /** @type {Object.<number, Array.<number>>} chained-hash-table */

    var table = {};
    /** @const @type {number} */

    var windowSize = Zlib.RawDeflate.WindowSize;
    /** @type {Array.<number>} match list */

    var matchList;
    /** @type {Zlib.RawDeflate.Lz77Match} longest match */

    var longestMatch;
    /** @type {Zlib.RawDeflate.Lz77Match} previous longest match */

    var prevMatch;
    /** @type {!(Array.<number>|Uint16Array)} lz77 buffer */

    var lz77buf =  new Uint16Array(dataArray.length * 2) ;
    /** @type {number} lz77 output buffer pointer */

    var pos = 0;
    /** @type {number} lz77 skip length */

    var skipLength = 0;
    /** @type {!(Array.<number>|Uint32Array)} */

    var freqsLitLen = new ( Uint32Array )(286);
    /** @type {!(Array.<number>|Uint32Array)} */

    var freqsDist = new ( Uint32Array )(30);
    /** @type {number} */

    var lazy = this.lazy;
    /** @type {*} temporary variable */

    var tmp; // 初期化

    freqsLitLen[256] = 1; // EOB の最低出現回数は 1

    /**
     * マッチデータの書き込み
     * @param {Zlib.RawDeflate.Lz77Match} match LZ77 Match data.
     * @param {!number} offset スキップ開始位置(相対指定).
     * @private
     */

    function writeMatch(match, offset) {
      /** @type {Array.<number>} */
      var lz77Array = match.toLz77Array();
      /** @type {number} */

      var i;
      /** @type {number} */

      var il;

      for (i = 0, il = lz77Array.length; i < il; ++i) {
        lz77buf[pos++] = lz77Array[i];
      }

      freqsLitLen[lz77Array[0]]++;
      freqsDist[lz77Array[3]]++;
      skipLength = match.length + offset - 1;
      prevMatch = null;
    } // LZ77 符号化


    for (position = 0, length = dataArray.length; position < length; ++position) {
      // ハッシュキーの作成
      for (matchKey = 0, i = 0, il = Zlib.RawDeflate.Lz77MinLength; i < il; ++i) {
        if (position + i === length) {
          break;
        }

        matchKey = matchKey << 8 | dataArray[position + i];
      } // テーブルが未定義だったら作成する


      if (table[matchKey] === void 0) {
        table[matchKey] = [];
      }

      matchList = table[matchKey]; // skip

      if (skipLength-- > 0) {
        matchList.push(position);
        continue;
      } // マッチテーブルの更新 (最大戻り距離を超えているものを削除する)


      while (matchList.length > 0 && position - matchList[0] > windowSize) {
        matchList.shift();
      } // データ末尾でマッチしようがない場合はそのまま流しこむ


      if (position + Zlib.RawDeflate.Lz77MinLength >= length) {
        if (prevMatch) {
          writeMatch(prevMatch, -1);
        }

        for (i = 0, il = length - position; i < il; ++i) {
          tmp = dataArray[position + i];
          lz77buf[pos++] = tmp;
          ++freqsLitLen[tmp];
        }

        break;
      } // マッチ候補から最長のものを探す


      if (matchList.length > 0) {
        longestMatch = this.searchLongestMatch_(dataArray, position, matchList);

        if (prevMatch) {
          // 現在のマッチの方が前回のマッチよりも長い
          if (prevMatch.length < longestMatch.length) {
            // write previous literal
            tmp = dataArray[position - 1];
            lz77buf[pos++] = tmp;
            ++freqsLitLen[tmp]; // write current match

            writeMatch(longestMatch, 0);
          } else {
            // write previous match
            writeMatch(prevMatch, -1);
          }
        } else if (longestMatch.length < lazy) {
          prevMatch = longestMatch;
        } else {
          writeMatch(longestMatch, 0);
        } // 前回マッチしていて今回マッチがなかったら前回のを採用

      } else if (prevMatch) {
        writeMatch(prevMatch, -1);
      } else {
        tmp = dataArray[position];
        lz77buf[pos++] = tmp;
        ++freqsLitLen[tmp];
      }

      matchList.push(position); // マッチテーブルに現在の位置を保存
    } // 終端処理


    lz77buf[pos++] = 256;
    freqsLitLen[256]++;
    this.freqsLitLen = freqsLitLen;
    this.freqsDist = freqsDist;
    return (
      /** @type {!(Uint16Array|Array.<number>)} */
       lz77buf.subarray(0, pos) 
    );
  };
  /**
   * マッチした候補の中から最長一致を探す
   * @param {!Object} data plain data byte array.
   * @param {!number} position plain data byte array position.
   * @param {!Array.<number>} matchList 候補となる位置の配列.
   * @return {!Zlib.RawDeflate.Lz77Match} 最長かつ最短距離のマッチオブジェクト.
   * @private
   */


  Zlib.RawDeflate.prototype.searchLongestMatch_ = function (data, position, matchList) {
    var match,
        currentMatch,
        matchMax = 0,
        matchLength,
        i,
        j,
        l,
        dl = data.length; // 候補を後ろから 1 つずつ絞り込んでゆく

    permatch: for (i = 0, l = matchList.length; i < l; i++) {
      match = matchList[l - i - 1];
      matchLength = Zlib.RawDeflate.Lz77MinLength; // 前回までの最長一致を末尾から一致検索する

      if (matchMax > Zlib.RawDeflate.Lz77MinLength) {
        for (j = matchMax; j > Zlib.RawDeflate.Lz77MinLength; j--) {
          if (data[match + j - 1] !== data[position + j - 1]) {
            continue permatch;
          }
        }

        matchLength = matchMax;
      } // 最長一致探索


      while (matchLength < Zlib.RawDeflate.Lz77MaxLength && position + matchLength < dl && data[match + matchLength] === data[position + matchLength]) {
        ++matchLength;
      } // マッチ長が同じ場合は後方を優先


      if (matchLength > matchMax) {
        currentMatch = match;
        matchMax = matchLength;
      } // 最長が確定したら後の処理は省略


      if (matchLength === Zlib.RawDeflate.Lz77MaxLength) {
        break;
      }
    }

    return new Zlib.RawDeflate.Lz77Match(matchMax, position - currentMatch);
  };
  /**
   * Tree-Transmit Symbols の算出
   * reference: PuTTY Deflate implementation
   * @param {number} hlit HLIT.
   * @param {!(Array.<number>|Uint8Array)} litlenLengths リテラルと長さ符号の符号長配列.
   * @param {number} hdist HDIST.
   * @param {!(Array.<number>|Uint8Array)} distLengths 距離符号の符号長配列.
   * @return {{
   *   codes: !(Array.<number>|Uint32Array),
   *   freqs: !(Array.<number>|Uint8Array)
   * }} Tree-Transmit Symbols.
   */


  Zlib.RawDeflate.prototype.getTreeSymbols_ = function (hlit, litlenLengths, hdist, distLengths) {
    var src = new ( Uint32Array )(hlit + hdist),
        i,
        j,
        runLength,
        l,
        result = new ( Uint32Array )(286 + 30),
        nResult,
        rpt,
        freqs = new ( Uint8Array )(19);
    j = 0;

    for (i = 0; i < hlit; i++) {
      src[j++] = litlenLengths[i];
    }

    for (i = 0; i < hdist; i++) {
      src[j++] = distLengths[i];
    } // 初期化


    nResult = 0;

    for (i = 0, l = src.length; i < l; i += j) {
      // Run Length Encoding
      for (j = 1; i + j < l && src[i + j] === src[i]; ++j) {}

      runLength = j;

      if (src[i] === 0) {
        // 0 の繰り返しが 3 回未満ならばそのまま
        if (runLength < 3) {
          while (runLength-- > 0) {
            result[nResult++] = 0;
            freqs[0]++;
          }
        } else {
          while (runLength > 0) {
            // 繰り返しは最大 138 までなので切り詰める
            rpt = runLength < 138 ? runLength : 138;

            if (rpt > runLength - 3 && rpt < runLength) {
              rpt = runLength - 3;
            } // 3-10 回 -> 17


            if (rpt <= 10) {
              result[nResult++] = 17;
              result[nResult++] = rpt - 3;
              freqs[17]++; // 11-138 回 -> 18
            } else {
              result[nResult++] = 18;
              result[nResult++] = rpt - 11;
              freqs[18]++;
            }

            runLength -= rpt;
          }
        }
      } else {
        result[nResult++] = src[i];
        freqs[src[i]]++;
        runLength--; // 繰り返し回数が3回未満ならばランレングス符号は要らない

        if (runLength < 3) {
          while (runLength-- > 0) {
            result[nResult++] = src[i];
            freqs[src[i]]++;
          } // 3 回以上ならばランレングス符号化

        } else {
          while (runLength > 0) {
            // runLengthを 3-6 で分割
            rpt = runLength < 6 ? runLength : 6;

            if (rpt > runLength - 3 && rpt < runLength) {
              rpt = runLength - 3;
            }

            result[nResult++] = 16;
            result[nResult++] = rpt - 3;
            freqs[16]++;
            runLength -= rpt;
          }
        }
      }
    }

    return {
      codes:  result.subarray(0, nResult) ,
      freqs: freqs
    };
  };
  /**
   * ハフマン符号の長さを取得する
   * @param {!(Array.<number>|Uint8Array|Uint32Array)} freqs 出現カウント.
   * @param {number} limit 符号長の制限.
   * @return {!(Array.<number>|Uint8Array)} 符号長配列.
   * @private
   */


  Zlib.RawDeflate.prototype.getLengths_ = function (freqs, limit) {
    /** @type {number} */
    var nSymbols = freqs.length;
    /** @type {Zlib.Heap} */

    var heap = new Zlib.Heap(2 * Zlib.RawDeflate.HUFMAX);
    /** @type {!(Array.<number>|Uint8Array)} */

    var length = new ( Uint8Array )(nSymbols);
    /** @type {Array} */

    var nodes;
    /** @type {!(Array.<number>|Uint32Array)} */

    var values;
    /** @type {!(Array.<number>|Uint8Array)} */

    var codeLength;
    /** @type {number} */

    var i;
    /** @type {number} */

    var il; // 配列の初期化


    for (i = 0; i < nSymbols; ++i) {
      if (freqs[i] > 0) {
        heap.push(i, freqs[i]);
      }
    }

    nodes = new Array(heap.length / 2);
    values = new ( Uint32Array )(heap.length / 2); // 非 0 の要素が一つだけだった場合は、そのシンボルに符号長 1 を割り当てて終了

    if (nodes.length === 1) {
      length[heap.pop().index] = 1;
      return length;
    } // Reverse Package Merge Algorithm による Canonical Huffman Code の符号長決定


    for (i = 0, il = heap.length / 2; i < il; ++i) {
      nodes[i] = heap.pop();
      values[i] = nodes[i].value;
    }

    codeLength = this.reversePackageMerge_(values, values.length, limit);

    for (i = 0, il = nodes.length; i < il; ++i) {
      length[nodes[i].index] = codeLength[i];
    }

    return length;
  };
  /**
   * Reverse Package Merge Algorithm.
   * @param {!(Array.<number>|Uint32Array)} freqs sorted probability.
   * @param {number} symbols number of symbols.
   * @param {number} limit code length limit.
   * @return {!(Array.<number>|Uint8Array)} code lengths.
   */


  Zlib.RawDeflate.prototype.reversePackageMerge_ = function (freqs, symbols, limit) {
    /** @type {!(Array.<number>|Uint16Array)} */
    var minimumCost = new ( Uint16Array )(limit);
    /** @type {!(Array.<number>|Uint8Array)} */

    var flag = new ( Uint8Array )(limit);
    /** @type {!(Array.<number>|Uint8Array)} */

    var codeLength = new ( Uint8Array )(symbols);
    /** @type {Array} */

    var value = new Array(limit);
    /** @type {Array} */

    var type = new Array(limit);
    /** @type {Array.<number>} */

    var currentPosition = new Array(limit);
    /** @type {number} */

    var excess = (1 << limit) - symbols;
    /** @type {number} */

    var half = 1 << limit - 1;
    /** @type {number} */

    var i;
    /** @type {number} */

    var j;
    /** @type {number} */

    var t;
    /** @type {number} */

    var weight;
    /** @type {number} */

    var next;
    /**
     * @param {number} j
     */

    function takePackage(j) {
      /** @type {number} */
      var x = type[j][currentPosition[j]];

      if (x === symbols) {
        takePackage(j + 1);
        takePackage(j + 1);
      } else {
        --codeLength[x];
      }

      ++currentPosition[j];
    }

    minimumCost[limit - 1] = symbols;

    for (j = 0; j < limit; ++j) {
      if (excess < half) {
        flag[j] = 0;
      } else {
        flag[j] = 1;
        excess -= half;
      }

      excess <<= 1;
      minimumCost[limit - 2 - j] = (minimumCost[limit - 1 - j] / 2 | 0) + symbols;
    }

    minimumCost[0] = flag[0];
    value[0] = new Array(minimumCost[0]);
    type[0] = new Array(minimumCost[0]);

    for (j = 1; j < limit; ++j) {
      if (minimumCost[j] > 2 * minimumCost[j - 1] + flag[j]) {
        minimumCost[j] = 2 * minimumCost[j - 1] + flag[j];
      }

      value[j] = new Array(minimumCost[j]);
      type[j] = new Array(minimumCost[j]);
    }

    for (i = 0; i < symbols; ++i) {
      codeLength[i] = limit;
    }

    for (t = 0; t < minimumCost[limit - 1]; ++t) {
      value[limit - 1][t] = freqs[t];
      type[limit - 1][t] = t;
    }

    for (i = 0; i < limit; ++i) {
      currentPosition[i] = 0;
    }

    if (flag[limit - 1] === 1) {
      --codeLength[0];
      ++currentPosition[limit - 1];
    }

    for (j = limit - 2; j >= 0; --j) {
      i = 0;
      weight = 0;
      next = currentPosition[j + 1];

      for (t = 0; t < minimumCost[j]; t++) {
        weight = value[j + 1][next] + value[j + 1][next + 1];

        if (weight > freqs[i]) {
          value[j][t] = weight;
          type[j][t] = symbols;
          next += 2;
        } else {
          value[j][t] = freqs[i];
          type[j][t] = i;
          ++i;
        }
      }

      currentPosition[j] = 0;

      if (flag[j] === 1) {
        takePackage(j);
      }
    }

    return codeLength;
  };
  /**
   * 符号長配列からハフマン符号を取得する
   * reference: PuTTY Deflate implementation
   * @param {!(Array.<number>|Uint8Array)} lengths 符号長配列.
   * @return {!(Array.<number>|Uint16Array)} ハフマン符号配列.
   * @private
   */


  Zlib.RawDeflate.prototype.getCodesFromLengths_ = function (lengths) {
    var codes = new ( Uint16Array )(lengths.length),
        count = [],
        startCode = [],
        code = 0,
        i,
        il,
        j,
        m; // Count the codes of each length.

    for (i = 0, il = lengths.length; i < il; i++) {
      count[lengths[i]] = (count[lengths[i]] | 0) + 1;
    } // Determine the starting code for each length block.


    for (i = 1, il = Zlib.RawDeflate.MaxCodeLength; i <= il; i++) {
      startCode[i] = code;
      code += count[i] | 0;
      code <<= 1;
    } // Determine the code for each symbol. Mirrored, of course.


    for (i = 0, il = lengths.length; i < il; i++) {
      code = startCode[lengths[i]];
      startCode[lengths[i]] += 1;
      codes[i] = 0;

      for (j = 0, m = lengths[i]; j < m; j++) {
        codes[i] = codes[i] << 1 | code & 1;
        code >>>= 1;
      }
    }

    return codes;
  };
  /**
   * @param {!(Array.<number>|Uint8Array)} input input buffer.
   * @param {Object=} opt_params options.
   * @constructor
   */


  Zlib.Unzip = function (input, opt_params) {
    opt_params = opt_params || {};
    /** @type {!(Array.<number>|Uint8Array)} */

    this.input =  input instanceof Array ? new Uint8Array(input) : input;
    /** @type {number} */

    this.ip = 0;
    /** @type {number} */

    this.eocdrOffset;
    /** @type {number} */

    this.numberOfThisDisk;
    /** @type {number} */

    this.startDisk;
    /** @type {number} */

    this.totalEntriesThisDisk;
    /** @type {number} */

    this.totalEntries;
    /** @type {number} */

    this.centralDirectorySize;
    /** @type {number} */

    this.centralDirectoryOffset;
    /** @type {number} */

    this.commentLength;
    /** @type {(Array.<number>|Uint8Array)} */

    this.comment;
    /** @type {Array.<Zlib.Unzip.FileHeader>} */

    this.fileHeaderList;
    /** @type {Object.<string, number>} */

    this.filenameToIndex;
    /** @type {boolean} */

    this.verify = opt_params['verify'] || false;
    /** @type {(Array.<number>|Uint8Array)} */

    this.password = opt_params['password'];
  };

  Zlib.Unzip.CompressionMethod = Zlib.Zip.CompressionMethod;
  /**
   * @type {Array.<number>}
   * @const
   */

  Zlib.Unzip.FileHeaderSignature = Zlib.Zip.FileHeaderSignature;
  /**
   * @type {Array.<number>}
   * @const
   */

  Zlib.Unzip.LocalFileHeaderSignature = Zlib.Zip.LocalFileHeaderSignature;
  /**
   * @type {Array.<number>}
   * @const
   */

  Zlib.Unzip.CentralDirectorySignature = Zlib.Zip.CentralDirectorySignature;
  /**
   * @param {!(Array.<number>|Uint8Array)} input input buffer.
   * @param {number} ip input position.
   * @constructor
   */

  Zlib.Unzip.FileHeader = function (input, ip) {
    /** @type {!(Array.<number>|Uint8Array)} */
    this.input = input;
    /** @type {number} */

    this.offset = ip;
    /** @type {number} */

    this.length;
    /** @type {number} */

    this.version;
    /** @type {number} */

    this.os;
    /** @type {number} */

    this.needVersion;
    /** @type {number} */

    this.flags;
    /** @type {number} */

    this.compression;
    /** @type {number} */

    this.time;
    /** @type {number} */

    this.date;
    /** @type {number} */

    this.crc32;
    /** @type {number} */

    this.compressedSize;
    /** @type {number} */

    this.plainSize;
    /** @type {number} */

    this.fileNameLength;
    /** @type {number} */

    this.extraFieldLength;
    /** @type {number} */

    this.fileCommentLength;
    /** @type {number} */

    this.diskNumberStart;
    /** @type {number} */

    this.internalFileAttributes;
    /** @type {number} */

    this.externalFileAttributes;
    /** @type {number} */

    this.relativeOffset;
    /** @type {string} */

    this.filename;
    /** @type {!(Array.<number>|Uint8Array)} */

    this.extraField;
    /** @type {!(Array.<number>|Uint8Array)} */

    this.comment;
  };

  Zlib.Unzip.FileHeader.prototype.parse = function () {
    /** @type {!(Array.<number>|Uint8Array)} */
    var input = this.input;
    /** @type {number} */

    var ip = this.offset; // central file header signature

    if (input[ip++] !== Zlib.Unzip.FileHeaderSignature[0] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[1] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[2] || input[ip++] !== Zlib.Unzip.FileHeaderSignature[3]) {
      throw new Error('invalid file header signature');
    } // version made by


    this.version = input[ip++];
    this.os = input[ip++]; // version needed to extract

    this.needVersion = input[ip++] | input[ip++] << 8; // general purpose bit flag

    this.flags = input[ip++] | input[ip++] << 8; // compression method

    this.compression = input[ip++] | input[ip++] << 8; // last mod file time

    this.time = input[ip++] | input[ip++] << 8; //last mod file date

    this.date = input[ip++] | input[ip++] << 8; // crc-32

    this.crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // compressed size

    this.compressedSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // uncompressed size

    this.plainSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name length

    this.fileNameLength = input[ip++] | input[ip++] << 8; // extra field length

    this.extraFieldLength = input[ip++] | input[ip++] << 8; // file comment length

    this.fileCommentLength = input[ip++] | input[ip++] << 8; // disk number start

    this.diskNumberStart = input[ip++] | input[ip++] << 8; // internal file attributes

    this.internalFileAttributes = input[ip++] | input[ip++] << 8; // external file attributes

    this.externalFileAttributes = input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24; // relative offset of local header

    this.relativeOffset = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name

    this.filename = String.fromCharCode.apply(null,  input.subarray(ip, ip += this.fileNameLength) ); // extra field

    this.extraField =  input.subarray(ip, ip += this.extraFieldLength) ; // file comment

    this.comment =  input.subarray(ip, ip + this.fileCommentLength) ;
    this.length = ip - this.offset;
  };
  /**
   * @param {!(Array.<number>|Uint8Array)} input input buffer.
   * @param {number} ip input position.
   * @constructor
   */


  Zlib.Unzip.LocalFileHeader = function (input, ip) {
    /** @type {!(Array.<number>|Uint8Array)} */
    this.input = input;
    /** @type {number} */

    this.offset = ip;
    /** @type {number} */

    this.length;
    /** @type {number} */

    this.needVersion;
    /** @type {number} */

    this.flags;
    /** @type {number} */

    this.compression;
    /** @type {number} */

    this.time;
    /** @type {number} */

    this.date;
    /** @type {number} */

    this.crc32;
    /** @type {number} */

    this.compressedSize;
    /** @type {number} */

    this.plainSize;
    /** @type {number} */

    this.fileNameLength;
    /** @type {number} */

    this.extraFieldLength;
    /** @type {string} */

    this.filename;
    /** @type {!(Array.<number>|Uint8Array)} */

    this.extraField;
  };

  Zlib.Unzip.LocalFileHeader.Flags = Zlib.Zip.Flags;

  Zlib.Unzip.LocalFileHeader.prototype.parse = function () {
    /** @type {!(Array.<number>|Uint8Array)} */
    var input = this.input;
    /** @type {number} */

    var ip = this.offset; // local file header signature

    if (input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[0] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[1] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[2] || input[ip++] !== Zlib.Unzip.LocalFileHeaderSignature[3]) {
      throw new Error('invalid local file header signature');
    } // version needed to extract


    this.needVersion = input[ip++] | input[ip++] << 8; // general purpose bit flag

    this.flags = input[ip++] | input[ip++] << 8; // compression method

    this.compression = input[ip++] | input[ip++] << 8; // last mod file time

    this.time = input[ip++] | input[ip++] << 8; //last mod file date

    this.date = input[ip++] | input[ip++] << 8; // crc-32

    this.crc32 = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // compressed size

    this.compressedSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // uncompressed size

    this.plainSize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // file name length

    this.fileNameLength = input[ip++] | input[ip++] << 8; // extra field length

    this.extraFieldLength = input[ip++] | input[ip++] << 8; // file name

    this.filename = String.fromCharCode.apply(null,  input.subarray(ip, ip += this.fileNameLength) ); // extra field

    this.extraField =  input.subarray(ip, ip += this.extraFieldLength) ;
    this.length = ip - this.offset;
  };

  Zlib.Unzip.prototype.searchEndOfCentralDirectoryRecord = function () {
    /** @type {!(Array.<number>|Uint8Array)} */
    var input = this.input;
    /** @type {number} */

    var ip;

    for (ip = input.length - 12; ip > 0; --ip) {
      if (input[ip] === Zlib.Unzip.CentralDirectorySignature[0] && input[ip + 1] === Zlib.Unzip.CentralDirectorySignature[1] && input[ip + 2] === Zlib.Unzip.CentralDirectorySignature[2] && input[ip + 3] === Zlib.Unzip.CentralDirectorySignature[3]) {
        this.eocdrOffset = ip;
        return;
      }
    }

    throw new Error('End of Central Directory Record not found');
  };

  Zlib.Unzip.prototype.parseEndOfCentralDirectoryRecord = function () {
    /** @type {!(Array.<number>|Uint8Array)} */
    var input = this.input;
    /** @type {number} */

    var ip;

    if (!this.eocdrOffset) {
      this.searchEndOfCentralDirectoryRecord();
    }

    ip = this.eocdrOffset; // signature

    if (input[ip++] !== Zlib.Unzip.CentralDirectorySignature[0] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[1] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[2] || input[ip++] !== Zlib.Unzip.CentralDirectorySignature[3]) {
      throw new Error('invalid signature');
    } // number of this disk


    this.numberOfThisDisk = input[ip++] | input[ip++] << 8; // number of the disk with the start of the central directory

    this.startDisk = input[ip++] | input[ip++] << 8; // total number of entries in the central directory on this disk

    this.totalEntriesThisDisk = input[ip++] | input[ip++] << 8; // total number of entries in the central directory

    this.totalEntries = input[ip++] | input[ip++] << 8; // size of the central directory

    this.centralDirectorySize = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // offset of start of central directory with respect to the starting disk number

    this.centralDirectoryOffset = (input[ip++] | input[ip++] << 8 | input[ip++] << 16 | input[ip++] << 24) >>> 0; // .ZIP file comment length

    this.commentLength = input[ip++] | input[ip++] << 8; // .ZIP file comment

    this.comment =  input.subarray(ip, ip + this.commentLength) ;
  };

  Zlib.Unzip.prototype.parseFileHeader = function () {
    /** @type {Array.<Zlib.Unzip.FileHeader>} */
    var filelist = [];
    /** @type {Object.<string, number>} */

    var filetable = {};
    /** @type {number} */

    var ip;
    /** @type {Zlib.Unzip.FileHeader} */

    var fileHeader;
    /*: @type {number} */

    var i;
    /*: @type {number} */

    var il;

    if (this.fileHeaderList) {
      return;
    }

    if (this.centralDirectoryOffset === void 0) {
      this.parseEndOfCentralDirectoryRecord();
    }

    ip = this.centralDirectoryOffset;

    for (i = 0, il = this.totalEntries; i < il; ++i) {
      fileHeader = new Zlib.Unzip.FileHeader(this.input, ip);
      fileHeader.parse();
      ip += fileHeader.length;
      filelist[i] = fileHeader;
      filetable[fileHeader.filename] = i;
    }

    if (this.centralDirectorySize < ip - this.centralDirectoryOffset) {
      throw new Error('invalid file header size');
    }

    this.fileHeaderList = filelist;
    this.filenameToIndex = filetable;
  };
  /**
   * @param {number} index file header index.
   * @param {Object=} opt_params
   * @return {!(Array.<number>|Uint8Array)} file data.
   */


  Zlib.Unzip.prototype.getFileData = function (index, opt_params) {
    opt_params = opt_params || {};
    /** @type {!(Array.<number>|Uint8Array)} */

    var input = this.input;
    /** @type {Array.<Zlib.Unzip.FileHeader>} */

    var fileHeaderList = this.fileHeaderList;
    /** @type {Zlib.Unzip.LocalFileHeader} */

    var localFileHeader;
    /** @type {number} */

    var offset;
    /** @type {number} */

    var length;
    /** @type {!(Array.<number>|Uint8Array)} */

    var buffer;
    /** @type {number} */

    var crc32;
    /** @type {Array.<number>|Uint32Array|Object} */

    var key;
    /** @type {number} */

    var i;
    /** @type {number} */

    var il;

    if (!fileHeaderList) {
      this.parseFileHeader();
    }

    if (fileHeaderList[index] === void 0) {
      throw new Error('wrong index');
    }

    offset = fileHeaderList[index].relativeOffset;
    localFileHeader = new Zlib.Unzip.LocalFileHeader(this.input, offset);
    localFileHeader.parse();
    offset += localFileHeader.length;
    length = localFileHeader.compressedSize; // decryption

    if ((localFileHeader.flags & Zlib.Unzip.LocalFileHeader.Flags.ENCRYPT) !== 0) {
      if (!(opt_params['password'] || this.password)) {
        throw new Error('please set password');
      }

      key = this.createDecryptionKey(opt_params['password'] || this.password); // encryption header

      for (i = offset, il = offset + 12; i < il; ++i) {
        this.decode(key, input[i]);
      }

      offset += 12;
      length -= 12; // decryption

      for (i = offset, il = offset + length; i < il; ++i) {
        input[i] = this.decode(key, input[i]);
      }
    }

    switch (localFileHeader.compression) {
      case Zlib.Unzip.CompressionMethod.STORE:
        buffer =  this.input.subarray(offset, offset + length) ;
        break;

      case Zlib.Unzip.CompressionMethod.DEFLATE:
        buffer = new Zlib.RawInflate(this.input, {
          'index': offset,
          'bufferSize': localFileHeader.plainSize
        }).decompress();
        break;

      default:
        throw new Error('unknown compression type');
    }

    if (this.verify) {
      crc32 = Zlib.CRC32.calc(buffer);

      if (localFileHeader.crc32 !== crc32) {
        throw new Error('wrong crc: file=0x' + localFileHeader.crc32.toString(16) + ', data=0x' + crc32.toString(16));
      }
    }

    return buffer;
  };
  /**
   * @return {Array.<string>}
   */


  Zlib.Unzip.prototype.getFilenames = function () {
    /** @type {Array.<string>} */
    var filenameList = [];
    /** @type {number} */

    var i;
    /** @type {number} */

    var il;
    /** @type {Array.<Zlib.Unzip.FileHeader>} */

    var fileHeaderList;

    if (!this.fileHeaderList) {
      this.parseFileHeader();
    }

    fileHeaderList = this.fileHeaderList;

    for (i = 0, il = fileHeaderList.length; i < il; ++i) {
      filenameList[i] = fileHeaderList[i].filename;
    }

    return filenameList;
  };
  /**
   * @param {string} filename extract filename.
   * @param {Object=} opt_params
   * @return {!(Array.<number>|Uint8Array)} decompressed data.
   */


  Zlib.Unzip.prototype.decompress = function (filename, opt_params) {
    /** @type {number} */
    var index;

    if (!this.filenameToIndex) {
      this.parseFileHeader();
    }

    index = this.filenameToIndex[filename];

    if (index === void 0) {
      throw new Error(filename + ' not found');
    }

    return this.getFileData(index, opt_params);
  };
  /**
   * @param {(Array.<number>|Uint8Array)} password
   */


  Zlib.Unzip.prototype.setPassword = function (password) {
    this.password = password;
  };
  /**
   * @param {(Array.<number>|Uint32Array|Object)} key
   * @param {number} n
   * @return {number}
   */


  Zlib.Unzip.prototype.decode = function (key, n) {
    n ^= this.getByte(
    /** @type {(Array.<number>|Uint32Array)} */
    key);
    this.updateKeys(
    /** @type {(Array.<number>|Uint32Array)} */
    key, n);
    return n;
  }; // common method


  Zlib.Unzip.prototype.updateKeys = Zlib.Zip.prototype.updateKeys;
  Zlib.Unzip.prototype.createDecryptionKey = Zlib.Zip.prototype.createEncryptionKey;
  Zlib.Unzip.prototype.getByte = Zlib.Zip.prototype.getByte;
  /**
   * @fileoverview 雑多な関数群をまとめたモジュール実装.
   */

  /**
   * Byte String から Byte Array に変換.
   * @param {!string} str byte string.
   * @return {!Array.<number>} byte array.
   */

  Zlib.Util.stringToByteArray = function (str) {
    /** @type {!Array.<(string|number)>} */
    var tmp = str.split('');
    /** @type {number} */

    var i;
    /** @type {number} */

    var il;

    for (i = 0, il = tmp.length; i < il; i++) {
      tmp[i] = (tmp[i].charCodeAt(0) & 0xff) >>> 0;
    }

    return tmp;
  };
  /**
   * @fileoverview Adler32 checksum 実装.
   */

  /**
   * Adler32 ハッシュ値の作成
   * @param {!(Array|Uint8Array|string)} array 算出に使用する byte array.
   * @return {number} Adler32 ハッシュ値.
   */


  Zlib.Adler32 = function (array) {
    if (typeof array === 'string') {
      array = Zlib.Util.stringToByteArray(array);
    }

    return Zlib.Adler32.update(1, array);
  };
  /**
   * Adler32 ハッシュ値の更新
   * @param {number} adler 現在のハッシュ値.
   * @param {!(Array|Uint8Array)} array 更新に使用する byte array.
   * @return {number} Adler32 ハッシュ値.
   */


  Zlib.Adler32.update = function (adler, array) {
    /** @type {number} */
    var s1 = adler & 0xffff;
    /** @type {number} */

    var s2 = adler >>> 16 & 0xffff;
    /** @type {number} array length */

    var len = array.length;
    /** @type {number} loop length (don't overflow) */

    var tlen;
    /** @type {number} array index */

    var i = 0;

    while (len > 0) {
      tlen = len > Zlib.Adler32.OptimizationParameter ? Zlib.Adler32.OptimizationParameter : len;
      len -= tlen;

      do {
        s1 += array[i++];
        s2 += s1;
      } while (--tlen);

      s1 %= 65521;
      s2 %= 65521;
    }

    return (s2 << 16 | s1) >>> 0;
  };
  /**
   * Adler32 最適化パラメータ
   * 現状では 1024 程度が最適.
   * @see http://jsperf.com/adler-32-simple-vs-optimized/3
   * @define {number}
   */


  Zlib.Adler32.OptimizationParameter = 1024;
  /**
   * ビットストリーム
   * @constructor
   * @param {!(Array|Uint8Array)=} buffer output buffer.
   * @param {number=} bufferPosition start buffer pointer.
   */

  Zlib.BitStream = function (buffer, bufferPosition) {
    /** @type {number} buffer index. */
    this.index = typeof bufferPosition === 'number' ? bufferPosition : 0;
    /** @type {number} bit index. */

    this.bitindex = 0;
    /** @type {!(Array|Uint8Array)} bit-stream output buffer. */

    this.buffer = buffer instanceof ( Uint8Array ) ? buffer : new ( Uint8Array )(Zlib.BitStream.DefaultBlockSize); // 入力された index が足りなかったら拡張するが、倍にしてもダメなら不正とする

    if (this.buffer.length * 2 <= this.index) {
      throw new Error("invalid index");
    } else if (this.buffer.length <= this.index) {
      this.expandBuffer();
    }
  };
  /**
   * デフォルトブロックサイズ.
   * @const
   * @type {number}
   */


  Zlib.BitStream.DefaultBlockSize = 0x8000;
  /**
   * expand buffer.
   * @return {!(Array|Uint8Array)} new buffer.
   */

  Zlib.BitStream.prototype.expandBuffer = function () {
    /** @type {!(Array|Uint8Array)} old buffer. */
    var oldbuf = this.buffer;
    /** @type {number} loop limiter. */

    var il = oldbuf.length;
    /** @type {!(Array|Uint8Array)} new buffer. */

    var buffer = new ( Uint8Array )(il << 1); // copy buffer

    {
      buffer.set(oldbuf);
    }

    return this.buffer = buffer;
  };
  /**
   * 数値をビットで指定した数だけ書き込む.
   * @param {number} number 書き込む数値.
   * @param {number} n 書き込むビット数.
   * @param {boolean=} reverse 逆順に書き込むならば true.
   */


  Zlib.BitStream.prototype.writeBits = function (number, n, reverse) {
    var buffer = this.buffer;
    var index = this.index;
    var bitindex = this.bitindex;
    /** @type {number} current octet. */

    var current = buffer[index];
    /** @type {number} loop counter. */

    var i;
    /**
     * 32-bit 整数のビット順を逆にする
     * @param {number} n 32-bit integer.
     * @return {number} reversed 32-bit integer.
     * @private
     */

    function rev32_(n) {
      return Zlib.BitStream.ReverseTable[n & 0xFF] << 24 | Zlib.BitStream.ReverseTable[n >>> 8 & 0xFF] << 16 | Zlib.BitStream.ReverseTable[n >>> 16 & 0xFF] << 8 | Zlib.BitStream.ReverseTable[n >>> 24 & 0xFF];
    }

    if (reverse && n > 1) {
      number = n > 8 ? rev32_(number) >> 32 - n : Zlib.BitStream.ReverseTable[number] >> 8 - n;
    } // Byte 境界を超えないとき


    if (n + bitindex < 8) {
      current = current << n | number;
      bitindex += n; // Byte 境界を超えるとき
    } else {
      for (i = 0; i < n; ++i) {
        current = current << 1 | number >> n - i - 1 & 1; // next byte

        if (++bitindex === 8) {
          bitindex = 0;
          buffer[index++] = Zlib.BitStream.ReverseTable[current];
          current = 0; // expand

          if (index === buffer.length) {
            buffer = this.expandBuffer();
          }
        }
      }
    }

    buffer[index] = current;
    this.buffer = buffer;
    this.bitindex = bitindex;
    this.index = index;
  };
  /**
   * ストリームの終端処理を行う
   * @return {!(Array|Uint8Array)} 終端処理後のバッファを byte array で返す.
   */


  Zlib.BitStream.prototype.finish = function () {
    var buffer = this.buffer;
    var index = this.index;
    /** @type {!(Array|Uint8Array)} output buffer. */

    var output; // bitindex が 0 の時は余分に index が進んでいる状態

    if (this.bitindex > 0) {
      buffer[index] <<= 8 - this.bitindex;
      buffer[index] = Zlib.BitStream.ReverseTable[buffer[index]];
      index++;
    } // array truncation


    {
      output = buffer.subarray(0, index);
    }

    return output;
  };
  /**
   * 0-255 のビット順を反転したテーブル
   * @const
   * @type {!(Uint8Array|Array.<number>)}
   */


  Zlib.BitStream.ReverseTable = function (table) {
    return table;
  }(function () {
    /** @type {!(Array|Uint8Array)} reverse table. */
    var table = new ( Uint8Array )(256);
    /** @type {number} loop counter. */

    var i; // generate

    for (i = 0; i < 256; ++i) {
      table[i] = function (n) {
        var r = n;
        var s = 7;

        for (n >>>= 1; n; n >>>= 1) {
          r <<= 1;
          r |= n & 1;
          --s;
        }

        return (r << s & 0xff) >>> 0;
      }(i);
    }

    return table;
  }());
  /**
   * CRC32 ハッシュ値を取得
   * @param {!(Array.<number>|Uint8Array)} data data byte array.
   * @param {number=} pos data position.
   * @param {number=} length data length.
   * @return {number} CRC32.
   */

  Zlib.CRC32.calc = function (data, pos, length) {
    return Zlib.CRC32.update(data, 0, pos, length);
  };
  /**
   * CRC32ハッシュ値を更新
   * @param {!(Array.<number>|Uint8Array)} data data byte array.
   * @param {number} crc CRC32.
   * @param {number=} pos data position.
   * @param {number=} length data length.
   * @return {number} CRC32.
   */


  Zlib.CRC32.update = function (data, crc, pos, length) {
    var table = Zlib.CRC32.Table;
    var i = typeof pos === 'number' ? pos : pos = 0;
    var il = typeof length === 'number' ? length : data.length;
    crc ^= 0xffffffff; // loop unrolling for performance

    for (i = il & 7; i--; ++pos) {
      crc = crc >>> 8 ^ table[(crc ^ data[pos]) & 0xff];
    }

    for (i = il >> 3; i--; pos += 8) {
      crc = crc >>> 8 ^ table[(crc ^ data[pos]) & 0xff];
      crc = crc >>> 8 ^ table[(crc ^ data[pos + 1]) & 0xff];
      crc = crc >>> 8 ^ table[(crc ^ data[pos + 2]) & 0xff];
      crc = crc >>> 8 ^ table[(crc ^ data[pos + 3]) & 0xff];
      crc = crc >>> 8 ^ table[(crc ^ data[pos + 4]) & 0xff];
      crc = crc >>> 8 ^ table[(crc ^ data[pos + 5]) & 0xff];
      crc = crc >>> 8 ^ table[(crc ^ data[pos + 6]) & 0xff];
      crc = crc >>> 8 ^ table[(crc ^ data[pos + 7]) & 0xff];
    }

    return (crc ^ 0xffffffff) >>> 0;
  };
  /**
   * @param {number} num
   * @param {number} crc
   * @returns {number}
   */


  Zlib.CRC32.single = function (num, crc) {
    return (Zlib.CRC32.Table[(num ^ crc) & 0xff] ^ num >>> 8) >>> 0;
  };
  /**
   * @type {Array.<number>}
   * @const
   * @private
   */


  Zlib.CRC32.Table_ = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];
  /**
   * @type {!(Array.<number>|Uint32Array)} CRC-32 Table.
   * @const
   */

  Zlib.CRC32.Table =   new Uint32Array(Zlib.CRC32.Table_) ;
  /**
   * @fileoverview Deflate (RFC1951) 実装.
   * Deflateアルゴリズム本体は Zlib.RawDeflate で実装されている.
   */

  /**
   * Zlib Deflate
   * @constructor
   * @param {!(Array|Uint8Array)} input 符号化する対象の byte array.
   * @param {Object=} opt_params option parameters.
   */

  Zlib.Deflate = function (input, opt_params) {
    /** @type {!(Array|Uint8Array)} */
    this.input = input;
    /** @type {!(Array|Uint8Array)} */

    this.output = new ( Uint8Array )(Zlib.Deflate.DefaultBufferSize);
    /** @type {Zlib.Deflate.CompressionType} */

    this.compressionType = Zlib.Deflate.CompressionType.DYNAMIC;
    /** @type {Zlib.RawDeflate} */

    this.rawDeflate;
    /** @type {Object} */

    var rawDeflateOption = {};
    /** @type {string} */

    var prop; // option parameters

    if (opt_params || !(opt_params = {})) {
      if (typeof opt_params['compressionType'] === 'number') {
        this.compressionType = opt_params['compressionType'];
      }
    } // copy options


    for (prop in opt_params) {
      rawDeflateOption[prop] = opt_params[prop];
    } // set raw-deflate output buffer


    rawDeflateOption['outputBuffer'] = this.output;
    this.rawDeflate = new Zlib.RawDeflate(this.input, rawDeflateOption);
  };
  /**
   * @const
   * @type {number} デフォルトバッファサイズ.
   */


  Zlib.Deflate.DefaultBufferSize = 0x8000;
  /**
   * @enum {number}
   */

  Zlib.Deflate.CompressionType = Zlib.RawDeflate.CompressionType;
  /**
   * 直接圧縮に掛ける.
   * @param {!(Array|Uint8Array)} input target buffer.
   * @param {Object=} opt_params option parameters.
   * @return {!(Array|Uint8Array)} compressed data byte array.
   */

  Zlib.Deflate.compress = function (input, opt_params) {
    return new Zlib.Deflate(input, opt_params).compress();
  };
  /**
   * Deflate Compression.
   * @return {!(Array|Uint8Array)} compressed data byte array.
   */


  Zlib.Deflate.prototype.compress = function () {
    /** @type {Zlib.CompressionMethod} */
    var cm;
    /** @type {number} */

    var cinfo;
    /** @type {number} */

    var cmf;
    /** @type {number} */

    var flg;
    /** @type {number} */

    var fcheck;
    /** @type {number} */

    var fdict;
    /** @type {number} */

    var flevel;
    /** @type {number} */

    var adler;
    /** @type {!(Array|Uint8Array)} */

    var output;
    /** @type {number} */

    var pos = 0;
    output = this.output; // Compression Method and Flags

    cm = Zlib.CompressionMethod.DEFLATE;

    switch (cm) {
      case Zlib.CompressionMethod.DEFLATE:
        cinfo = Math.LOG2E * Math.log(Zlib.RawDeflate.WindowSize) - 8;
        break;

      default:
        throw new Error('invalid compression method');
    }

    cmf = cinfo << 4 | cm;
    output[pos++] = cmf; // Flags

    fdict = 0;

    switch (cm) {
      case Zlib.CompressionMethod.DEFLATE:
        switch (this.compressionType) {
          case Zlib.Deflate.CompressionType.NONE:
            flevel = 0;
            break;

          case Zlib.Deflate.CompressionType.FIXED:
            flevel = 1;
            break;

          case Zlib.Deflate.CompressionType.DYNAMIC:
            flevel = 2;
            break;

          default:
            throw new Error('unsupported compression type');
        }

        break;

      default:
        throw new Error('invalid compression method');
    }

    flg = flevel << 6 | fdict << 5;
    fcheck = 31 - (cmf * 256 + flg) % 31;
    flg |= fcheck;
    output[pos++] = flg; // Adler-32 checksum

    adler = Zlib.Adler32(this.input);
    this.rawDeflate.op = pos;
    output = this.rawDeflate.compress();
    pos = output.length;

    {
      // subarray 分を元にもどす
      output = new Uint8Array(output.buffer); // expand buffer

      if (output.length <= pos + 4) {
        this.output = new Uint8Array(output.length + 4);
        this.output.set(output);
        output = this.output;
      }

      output = output.subarray(0, pos + 4);
    } // adler32


    output[pos++] = adler >> 24 & 0xff;
    output[pos++] = adler >> 16 & 0xff;
    output[pos++] = adler >> 8 & 0xff;
    output[pos++] = adler & 0xff;
    return output;
  };

  var GenomicInterval = function GenomicInterval(chr, start, end, features) {
    this.chr = chr;
    this.start = start;
    this.end = end;
    this.features = features;
  };

  GenomicInterval.prototype.contains = function (chr, start, end) {
    return this.chr === chr && this.start <= start && this.end >= end;
  };

  GenomicInterval.prototype.containsRange = function (range) {
    return this.chr === range.chr && this.start <= range.start && this.end >= range.end;
  };

  var Chromosome = function Chromosome(name, order, bpStart, bpLength, rangeLocus) {
    this.name = name;
    this.order = order;
    this.bpStart = bpStart;
    this.bpLength = bpLength;
    this.rangeLocus = rangeLocus;
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014-2015 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var google = {
    fileInfoCache: {},
    // Crude test, this is conservative, nothing bad happens for a false positive
    isGoogleURL: function isGoogleURL(url) {
      return url.includes("googleapis") && !url.includes("urlshortener") || this.isGoogleCloudURL(url) || this.isGoogleStorageURL(url) || this.isGoogleDrive(url);
    },
    isGoogleStorageURL: function isGoogleStorageURL(url) {
      return url.startsWith("https://www.googleapis.com/storage") || url.startsWith("https://storage.cloud.google.com");
    },
    isGoogleCloudURL: function isGoogleCloudURL(url) {
      return url.startsWith("gs://");
    },
    isGoogleDrive: function isGoogleDrive(url) {
      return url.indexOf("drive.google.com") >= 0 || url.indexOf("www.googleapis.com/drive") > 0;
    },
    setApiKey: function setApiKey(key) {
      this.apiKey = key;
    },
    translateGoogleCloudURL: function translateGoogleCloudURL(gsUrl) {
      var i, bucket, object, qIdx, objectString, paramString;
      i = gsUrl.indexOf('/', 5);
      qIdx = gsUrl.indexOf('?');

      if (i < 0) {
        return gsUrl;
      }

      bucket = gsUrl.substring(5, i);
      objectString = qIdx < 0 ? gsUrl.substring(i + 1) : gsUrl.substring(i + 1, qIdx);
      object = encodeURIComponent(objectString);

      if (qIdx > 0) {
        paramString = gsUrl.substring(qIdx);
      }

      return "https://www.googleapis.com/storage/v1/b/" + bucket + "/o/" + object + (paramString ? paramString + "&alt=media" : "?alt=media");
    },
    addApiKey: function addApiKey(url) {
      var apiKey = this.apiKey;

      if (apiKey !== undefined && !url.includes("key=")) {
        var paramSeparator = url.includes("?") ? "&" : "?";
        url = url + paramSeparator + "key=" + apiKey;
      }

      return url;
    },
    driveDownloadURL: function driveDownloadURL(link) {
      // Return a google drive download url for the sharable link
      //https://drive.google.com/open?id=0B-lleX9c2pZFbDJ4VVRxakJzVGM
      //https://drive.google.com/file/d/1_FC4kCeO8E3V4dJ1yIW7A0sn1yURKIX-/view?usp=sharing
      var id = getGoogleDriveFileID(link);
      return id ? "https://www.googleapis.com/drive/v3/files/" + id + "?alt=media&supportsTeamDrives=true" : link;
    },
    getDriveFileInfo: function getDriveFileInfo(googleDriveURL) {
      var id = getGoogleDriveFileID(googleDriveURL),
          endPoint = "https://www.googleapis.com/drive/v3/files/" + id + "?supportsTeamDrives=true";
      return igvxhr.loadJson(endPoint, buildOptions({}));
    },
    loadGoogleProperties: function loadGoogleProperties(propertiesURL) {
      var self = this;
      return igvxhr.loadArrayBuffer(propertiesURL).then(function (arrayBuffer) {
        var inflate, plain, str;
        inflate = new Zlib.Gunzip(new Uint8Array(arrayBuffer));
        plain = inflate.decompress();
        str = String.fromCharCode.apply(null, plain);
        var properties = JSON.parse(str);
        self.setApiKey(properties["api_key"]);
        self.properties = properties;
        return properties;
      });
    }
  };

  function getGoogleDriveFileID(link) {
    //https://drive.google.com/file/d/1_FC4kCeO8E3V4dJ1yIW7A0sn1yURKIX-/view?usp=sharing
    var i1, i2;

    if (link.includes("/open?id=")) {
      i1 = link.indexOf("/open?id=") + 9;
      i2 = link.indexOf("&");

      if (i1 > 0 && i2 > i1) {
        return link.substring(i1, i2);
      } else if (i1 > 0) {
        return link.substring(i1);
      }
    } else if (link.includes("/file/d/")) {
      i1 = link.indexOf("/file/d/") + 8;
      i2 = link.lastIndexOf("/");
      return link.substring(i1, i2);
    }
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014-2015 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var oauth = {
    oauthTokens: {},
    setToken: function setToken(token, host) {
      if (!host) {
        this.google.access_token = token;
      } else {
        this.oauthTokens[host] = token;
      }
    },
    getToken: function getToken(host) {
      var token;

      if (!host) {
        token = this.google.access_token;
      } else {
        for (var key in this.oauthTokens) {
          var regex = wildcardToRegExp(key);

          if (regex.test(host)) {
            token = this.oauthTokens[key];
            break;
          }
        }
      }

      return token;
    },
    removeToken: function removeToken(host) {
      if (!host) {
        delete oauth.google["access_token"];
      } else {
        delete this.oauthTokens[host];
      }
    },
    // Special object for google -- legacy support
    google: {
      setToken: function setToken(token) {
        this.access_token = token;
      }
    }
  };
  /**
   * Creates a RegExp from the given string, converting asterisks to .* expressions,
   * and escaping all other characters.
   *
   * credit https://gist.github.com/donmccurdy/6d073ce2c6f3951312dfa45da14a420f
   */

  function wildcardToRegExp(s) {
    return new RegExp('^' + s.split(/\*+/).map(regExpEscape).join('.*') + '$');
  }
  /**
   * RegExp-escapes all characters in the given string.
   *
   * credit https://gist.github.com/donmccurdy/6d073ce2c6f3951312dfa45da14a420f
   */


  function regExpEscape(s) {
    return s.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
  }

  // Uncompress data,  assumed to be series of bgzipped blocks

  function unbgzf(data, lim) {
    var oBlockList = [];
    var ptr = 0;
    var totalSize = 0;
    lim = lim || data.byteLength - 18;

    while (ptr < lim) {
      try {
        var ba = new Uint8Array(data, ptr, 18);
        var xlen = ba[11] << 8 | ba[10];
        var si1 = ba[12];
        var si2 = ba[13];
        var slen = ba[15] << 8 | ba[14];
        var bsize = (ba[17] << 8 | ba[16]) + 1;
        var start = 12 + xlen + ptr; // Start of CDATA

        var bytesLeft = data.byteLength - start;
        var cDataSize = bsize - xlen - 19;
        if (bytesLeft < cDataSize) break;
        var a = new Uint8Array(data, start, bytesLeft);
        var inflate = new Zlib.RawInflate(a);
        var unc = inflate.decompress();
        ptr += inflate.ip + 26;
        totalSize += unc.byteLength;
        oBlockList.push(unc);
      } catch (e) {
        console.error(e);
        break;
      }
    } // Concatenate decompressed blocks


    if (oBlockList.length === 1) {
      return oBlockList[0];
    } else {
      var out = new Uint8Array(totalSize);
      var cursor = 0;

      for (var i = 0; i < oBlockList.length; ++i) {
        var b = new Uint8Array(oBlockList[i]);
        arrayCopy(b, 0, out, cursor, b.length);
        cursor += b.length;
      }

      return out.buffer;
    }
  }

  function bgzBlockSize(data) {
    var ba = new Uint8Array(data);
    var bsize = ba[17] << 8 | ba[16] + 1;
    return bsize;
  } // From Thomas Down's zlib implementation


  var testArray = new Uint8Array(1);
  var hasSubarray = typeof testArray.subarray === 'function';
  /* (typeof testArray.slice === 'function'); */
  // Chrome slice performance is so dire that we're currently not using it...

  function arrayCopy(src, srcOffset, dest, destOffset, count) {
    if (count === 0) {
      return;
    }

    if (!src) {
      throw "Undef src";
    } else if (!dest) {
      throw "Undef dest";
    }

    if (srcOffset === 0 && count === src.length) {
      arrayCopy_fast(src, dest, destOffset);
    } else if (hasSubarray) {
      arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset);
    } else if (src.BYTES_PER_ELEMENT === 1 && count > 100) {
      arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);
    } else {
      arrayCopy_slow(src, srcOffset, dest, destOffset, count);
    }
  }

  function arrayCopy_slow(src, srcOffset, dest, destOffset, count) {
    for (var i = 0; i < count; ++i) {
      dest[destOffset + i] = src[srcOffset + i];
    }
  }

  function arrayCopy_fast(src, dest, destOffset) {
    dest.set(src, destOffset);
  }

  function getExtension(config) {
    if (undefined === config.url) {
      return undefined;
    }

    var path = isFilePath(config.url) ? config.url.name : config.url;
    var filename = path.toLowerCase(); //Strip parameters -- handle local files later

    var index = filename.indexOf("?");

    if (index > 0) {
      filename = filename.substr(0, index);
    } //Strip aux extensions .gz, .tab, and .txt


    if (filename.endsWith(".gz")) {
      filename = filename.substr(0, filename.length - 3);
    } else if (filename.endsWith(".txt") || filename.endsWith(".tab") || filename.endsWith(".bgz")) {
      filename = filename.substr(0, filename.length - 4);
    }

    index = filename.lastIndexOf(".");
    return index < 0 ? filename : filename.substr(1 + index);
  }
  /**
   * Return the filename from the path.   Example
   *   https://foo.com/bar.bed?param=2   => bar.bed
   * @param path
   */


  function getFilename(path) {
    var index, filename;

    if (path instanceof File) {
      return path.name;
    } else {
      index = path.lastIndexOf("/");
      filename = index < 0 ? path : path.substr(index + 1); //Strip parameters -- handle local files later

      index = filename.indexOf("?");

      if (index > 0) {
        filename = filename.substr(0, index);
      }

      return filename;
    }
  }

  function isFilePath(path) {
    return path instanceof File;
  }

  /**
   * @param dataURI
   * @returns {Array<number>|Uint8Array}
   */

  function decodeDataURI(dataURI) {
    var split = dataURI.split(',');
    var info = split[0].split(':')[1];
    var dataString = split[1];

    if (info.indexOf('base64') >= 0) {
      dataString = atob(dataString);
    } else {
      dataString = decodeURI(dataString); // URL encoded string -- not currently used of tested
    }

    var bytes = new Uint8Array(dataString.length);

    for (var i = 0; i < dataString.length; i++) {
      bytes[i] = dataString.charCodeAt(i);
    }

    var plain;

    if (info.indexOf('gzip') > 0) {
      var inflate = new Zlib.Gunzip(bytes);
      plain = inflate.decompress();
    } else {
      plain = bytes;
    }

    return plain;
  }

  function parseUri(str) {
    var o = options,
        m = o.parser[ "loose"].exec(str),
        uri = {},
        i = 14;

    while (i--) {
      uri[o.key[i]] = m[i] || "";
    }

    uri[o.q.name] = {};
    uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
      if ($1) uri[o.q.name][$1] = $2;
    });
    return uri;
  }

  var options = {
    strictMode: false,
    key: ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"],
    q: {
      name: "queryKey",
      parser: /(?:^|&)([^&=]*)=?([^&]*)/g
    },
    parser: {
      strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
      loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
    }
  };

  // TODO -- eliminate dependence on getBrowser
  var Alert = {
    presentAlert: function presentAlert(message) {
      getBrowser().presentAlert(message);
    },
    // TODO -- eliminate dependence on getBrowser
    presentMessageWithCallback: function presentMessageWithCallback(message, fn) {
      getBrowser().presentMessageWithCallback(message, fn);
    }
  };

  var NONE = 0;
  var GZIP = 1;
  var BGZF = 2;
  var UNKNOWN = 3;

  var RateLimiter =
  /*#__PURE__*/
  function () {
    function RateLimiter(wait) {
      _classCallCheck(this, RateLimiter);

      this.wait = wait === undefined ? 100 : wait;
      this.isCalled = false;
      this.calls = [];
    }

    _createClass(RateLimiter, [{
      key: "limiter",
      value: function limiter(fn) {
        var self = this;

        var caller = function caller() {
          if (self.calls.length && !self.isCalled) {
            self.isCalled = true;
            self.calls.shift().call();
            setTimeout(function () {
              self.isCalled = false;
              caller();
            }, self.wait);
          }
        };

        return function () {
          self.calls.push(fn.bind.apply(fn, [this].concat(Array.prototype.slice.call(arguments))));
          caller();
        };
      }
    }]);

    return RateLimiter;
  }();

  var rateLimiter = new RateLimiter(100);
  var igvxhr = {
    load: function () {
      var _load = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4(url, options) {
        var loadURL, _loadURL;

        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _loadURL = function _ref6() {
                  _loadURL = _asyncToGenerator(
                  /*#__PURE__*/
                  regeneratorRuntime.mark(function _callee3(url, options) {
                    var oauthToken, token, applyOauthToken, getLoadPromise, _getLoadPromise;

                    return regeneratorRuntime.wrap(function _callee3$(_context3) {
                      while (1) {
                        switch (_context3.prev = _context3.next) {
                          case 0:
                            _getLoadPromise = function _ref4() {
                              _getLoadPromise = _asyncToGenerator(
                              /*#__PURE__*/
                              regeneratorRuntime.mark(function _callee2(url, options) {
                                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                  while (1) {
                                    switch (_context2.prev = _context2.next) {
                                      case 0:
                                        return _context2.abrupt("return", new Promise(function (fullfill, reject) {
                                          // Various Google tansformations
                                          if (google.isGoogleURL(url)) {
                                            if (url.startsWith("gs://")) {
                                              url = google.translateGoogleCloudURL(url);
                                            } else if (google.isGoogleStorageURL(url)) {
                                              if (!url.includes("altMedia=")) {
                                                url += url.includes("?") ? "&altMedia=true" : "?altMedia=true";
                                              }
                                            }

                                            url = google.addApiKey(url);
                                          }

                                          var headers = options.headers || {};

                                          if (options.token) {
                                            addOauthHeaders(headers, options.token);
                                          }

                                          var range = options.range;
                                          var isChrome = navigator.userAgent.indexOf('Chrome') > -1;
                                          var isSafari = navigator.vendor.indexOf("Apple") === 0 && /\sSafari\//.test(navigator.userAgent);

                                          if (range && isChrome && !isAmazonV4Signed(url)) {
                                            // Hack to prevent caching for byte-ranges. Attempt to fix net:err-cache errors in Chrome
                                            url += url.includes("?") ? "&" : "?";
                                            url += "someRandomSeed=" + Math.random().toString(36);
                                          }

                                          var xhr = new XMLHttpRequest();
                                          var sendData = options.sendData || options.body;
                                          var method = options.method || (sendData ? "POST" : "GET");
                                          var responseType = options.responseType;
                                          var contentType = options.contentType;
                                          var mimeType = options.mimeType;
                                          xhr.open(method, url);

                                          if (range) {
                                            var rangeEnd = range.size ? range.start + range.size - 1 : "";
                                            xhr.setRequestHeader("Range", "bytes=" + range.start + "-" + rangeEnd); //      xhr.setRequestHeader("Cache-Control", "no-cache");    <= This can cause CORS issues, disabled for now
                                          }

                                          if (contentType) {
                                            xhr.setRequestHeader("Content-Type", contentType);
                                          }

                                          if (mimeType) {
                                            xhr.overrideMimeType(mimeType);
                                          }

                                          if (responseType) {
                                            xhr.responseType = responseType;
                                          }

                                          if (headers) {
                                            for (var _i = 0, _Object$keys = Object.keys(headers); _i < _Object$keys.length; _i++) {
                                              var key = _Object$keys[_i];
                                              var value = headers[key];
                                              xhr.setRequestHeader(key, value);
                                            }
                                          } // NOTE: using withCredentials with servers that return "*" for access-allowed-origin will fail


                                          if (options.withCredentials === true) {
                                            xhr.withCredentials = true;
                                          }

                                          xhr.onload = function (event) {
                                            // when the url points to a local file, the status is 0 but that is no error
                                            if (xhr.status === 0 || xhr.status >= 200 && xhr.status <= 300) {
                                              if (range && xhr.status !== 206 && range.start !== 0) {
                                                // For small files a range starting at 0 can return the whole file => 200
                                                handleError("ERROR: range-byte header was ignored for url: " + url);
                                              } else {
                                                fullfill(xhr.response);
                                              }
                                            } else if (typeof gapi !== "undefined" && (xhr.status === 404 || xhr.status === 401) && google.isGoogleURL(url) && !options.retries) {
                                              options.retries = 1;
                                              return getGoogleAccessToken().then(function (accessToken) {
                                                options.oauthToken = accessToken;
                                                igvxhr.load(url, options).then(function (response) {
                                                  fullfill(response);
                                                }).catch(function (error) {
                                                  if (reject) {
                                                    reject(error);
                                                  } else {
                                                    throw error;
                                                  }
                                                });
                                              });
                                            } else {
                                              //
                                              if (xhr.status === 403) {
                                                handleError("Access forbidden");
                                              } else if (xhr.status === 416) {
                                                //  Tried to read off the end of the file.   This shouldn't happen, but if it does return an
                                                handleError("Unsatisfiable range");
                                              } else {
                                                // TODO -- better error handling
                                                handleError(xhr.status);
                                              }
                                            }
                                          };

                                          xhr.onerror = function (event) {
                                            handleError("Error accessing resource: " + url + " Status: " + xhr.status);
                                          };

                                          xhr.ontimeout = function (event) {
                                            handleError("Timed out");
                                          };

                                          xhr.onabort = function (event) {
                                            reject(event);
                                          };

                                          try {
                                            xhr.send(sendData);
                                          } catch (e) {
                                            reject(e);
                                          }

                                          function handleError(message) {
                                            if (reject) {
                                              reject(new Error(message));
                                            } else {
                                              throw new Error(message);
                                            }
                                          }
                                        }));

                                      case 1:
                                      case "end":
                                        return _context2.stop();
                                    }
                                  }
                                }, _callee2);
                              }));
                              return _getLoadPromise.apply(this, arguments);
                            };

                            getLoadPromise = function _ref3(_x7, _x8) {
                              return _getLoadPromise.apply(this, arguments);
                            };

                            applyOauthToken = function _ref2(token) {
                              if (token) {
                                options.token = token;
                              }

                              return getLoadPromise(url, options);
                            };

                            url = mapUrl(url);
                            options = options || {};
                            oauthToken = options.oauthToken;

                            if (!oauthToken) {
                              oauthToken = getOauthToken(url);
                            }

                            if (!oauthToken) {
                              _context3.next = 16;
                              break;
                            }

                            token = typeof oauthToken === 'function' ? oauthToken() : oauthToken;

                            if (!(token.then && typeof token.then === 'function')) {
                              _context3.next = 13;
                              break;
                            }

                            return _context3.abrupt("return", token.then(applyOauthToken));

                          case 13:
                            return _context3.abrupt("return", applyOauthToken(token));

                          case 14:
                            _context3.next = 17;
                            break;

                          case 16:
                            return _context3.abrupt("return", getLoadPromise(url, options));

                          case 17:
                          case "end":
                            return _context3.stop();
                        }
                      }
                    }, _callee3);
                  }));
                  return _loadURL.apply(this, arguments);
                };

                loadURL = function _ref5(_x5, _x6) {
                  return _loadURL.apply(this, arguments);
                };

                options = options || {};

                if (!(url instanceof File)) {
                  _context4.next = 7;
                  break;
                }

                return _context4.abrupt("return", loadFileSlice(url, options));

              case 7:
                if (!url.startsWith("data:")) {
                  _context4.next = 11;
                  break;
                }

                return _context4.abrupt("return", decodeDataURI(url));

              case 11:
                if (!isGoogleDrive(url)) {
                  _context4.next = 15;
                  break;
                }

                return _context4.abrupt("return", new Promise(function (fulfill, reject) {
                  rateLimiter.limiter(
                  /*#__PURE__*/
                  function () {
                    var _ref = _asyncToGenerator(
                    /*#__PURE__*/
                    regeneratorRuntime.mark(function _callee(url, options) {
                      var result;
                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              try {
                                result = loadURL(url, options);
                                fulfill(result);
                              } catch (e) {
                                reject(e);
                              }

                            case 1:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    return function (_x3, _x4) {
                      return _ref.apply(this, arguments);
                    };
                  }())(url, options);
                }));

              case 15:
                return _context4.abrupt("return", loadURL(url, options));

              case 16:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function load(_x, _x2) {
        return _load.apply(this, arguments);
      }

      return load;
    }(),
    loadArrayBuffer: function loadArrayBuffer(url, options) {
      options = options || {};
      options.responseType = "arraybuffer";

      if (url instanceof File) {
        return loadFileSlice(url, options);
      } else {
        return igvxhr.load(url, options);
      }
    },
    loadJson: function loadJson(url, options) {
      options = options || {};
      var method = options.method || (options.sendData ? "POST" : "GET");
      if (method === "POST") options.contentType = "application/json";
      return igvxhr.load(url, options).then(function (result) {
        if (result) {
          return JSON.parse(result);
        } else {
          return result;
        }
      });
    },
    loadString: function loadString(path, options) {
      options = options || {};

      if (path instanceof File) {
        return loadStringFromFile(path, options);
      } else {
        return loadStringFromUrl(path, options);
      }
    },
    startup: startup
  };

  function loadFileSlice(localfile, options) {
    return new Promise(function (resolve, reject) {
      var fileReader = new FileReader();

      fileReader.onload = function (e) {
        resolve(fileReader.result);
      };

      fileReader.onerror = function (e) {
        reject(null, fileReader);
      };

      if (options.range) {
        var blob = localfile.slice(options.range.start, options.range.start + options.range.size);

        if ("arraybuffer" === options.responseType) {
          fileReader.readAsArrayBuffer(blob);
        } else {
          fileReader.readAsBinaryString(blob);
        }
      } else {
        if ("arraybuffer" === options.responseType) {
          fileReader.readAsArrayBuffer(localfile);
        } else {
          fileReader.readAsBinaryString(localfile);
        }
      }
    });
  }

  function loadStringFromFile(localfile, options) {
    options = options || {};
    var blob = options.range ? localfile.slice(options.range.start, options.range.start + options.range.size) : localfile;
    return new Promise(function (resolve, reject) {
      var fileReader = new FileReader();
      var compression = NONE;

      if (options.bgz || localfile.name.endsWith(".bgz")) {
        compression = BGZF;
      } else if (localfile.name.endsWith(".gz")) {
        compression = GZIP;
      }

      fileReader.onload = function (e) {
        if (compression === NONE) {
          return resolve(fileReader.result);
        } else {
          return resolve(arrayBufferToString(fileReader.result, compression));
        }
      };

      fileReader.onerror = function (e) {
        var error = fileReader.error;
        reject(error + " " + localfile.name, fileReader);
      };

      if (compression === NONE) {
        fileReader.readAsText(blob);
      } else {
        fileReader.readAsArrayBuffer(blob);
      }
    });
  }

  function loadStringFromUrl(url, options) {
    options = options || {};
    var fn = options.filename || getFilename(url);
    var compression = UNKNOWN;

    if (options.bgz) {
      compression = BGZF;
    } else if (fn.endsWith(".gz")) {
      compression = GZIP;
    }

    options.responseType = "arraybuffer";
    return igvxhr.load(url, options).then(function (data) {
      return arrayBufferToString(data, compression);
    });
  }

  function isAmazonV4Signed(url) {
    return url.indexOf("X-Amz-Signature") > -1;
  }

  function getOauthToken(url) {
    var host = parseUri(url).host;
    var token = oauth.getToken(host);

    if (!token && google.isGoogleURL(url)) {
      token = oauth.google.access_token;
    }

    return token;
  }

  function addOauthHeaders(headers, acToken) {
    if (acToken) {
      headers["Cache-Control"] = "no-cache";
      headers["Authorization"] = "Bearer " + acToken;
    }

    return headers;
  }
  /**
   * Perform some well-known url mappings.  For now just handles dropbox urls
   * @param url
   */


  function mapUrl(url) {
    if (url.includes("//www.dropbox.com")) {
      return url.replace("//www.dropbox.com", "//dl.dropboxusercontent.com");
    } else if (url.includes("//drive.google.com")) {
      return google.driveDownloadURL(url);
    } else if (url.includes("//www.broadinstitute.org/igvdata")) {
      return url.replace("//www.broadinstitute.org/igvdata", "//data.broadinstitute.org/igvdata");
    } else if (url.includes("//igvdata.broadinstitute.org")) {
      return url.replace("//igvdata.broadinstitute.org", "https://dn7ywbm9isq8j.cloudfront.net");
    } else {
      return url;
    }
  }

  function arrayBufferToString(arraybuffer, compression) {
    if (compression === UNKNOWN && arraybuffer.byteLength > 2) {
      var m = new Uint8Array(arraybuffer, 0, 2);

      if (m[0] === 31 && m[1] === 139) {
        compression = GZIP;
      }
    }

    var plain;

    if (compression === GZIP) {
      var inflate = new Zlib.Gunzip(new Uint8Array(arraybuffer));
      plain = inflate.decompress();
    } else if (compression === BGZF) {
      plain = new Uint8Array(unbgzf(arraybuffer));
    } else {
      plain = new Uint8Array(arraybuffer);
    }

    if ('TextDecoder' in getGlobalObject()) {
      return new TextDecoder().decode(plain);
    } else {
      return decodeUTF8(plain);
    }
  }

  function isGoogleDrive(url) {
    return url.includes("drive.google.com") || url.includes("www.googleapis.com/drive");
  }
  /**
   * There can be only 1 oAuth promise executing at a time.
   */


  var oauthPromise;

  function getGoogleAccessToken() {
    return _getGoogleAccessToken.apply(this, arguments);
  } //Increments an anonymous usage count.  Count is anonymous, needed for our continued funding.  Please don't delete


  function _getGoogleAccessToken() {
    _getGoogleAccessToken = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee5() {
      var authInstance, scope, options;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              if (!oauth.google.access_token) {
                _context5.next = 2;
                break;
              }

              return _context5.abrupt("return", Promise.resolve(oauth.google.access_token));

            case 2:
              if (!oauthPromise) {
                _context5.next = 4;
                break;
              }

              return _context5.abrupt("return", oauthPromise);

            case 4:
              authInstance = gapi.auth2.getAuthInstance();

              if (authInstance) {
                _context5.next = 8;
                break;
              }

              Alert.presentAlert("Authorization is required, but Google oAuth has not been initalized.  Contact your site administrator for assistance.");
              return _context5.abrupt("return", undefined);

            case 8:
              scope = "https://www.googleapis.com/auth/devstorage.read_only https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/drive.readonly";
              options = new gapi.auth2.SigninOptionsBuilder();
              options.setPrompt('select_account');
              options.setScope(scope);
              oauthPromise = new Promise(function (resolve, reject) {
                Alert.presentMessageWithCallback("Google Login required", function () {
                  gapi.auth2.getAuthInstance().signIn(options).then(function (user) {
                    var authResponse = user.getAuthResponse();
                    oauth.google.setToken(authResponse["access_token"]);
                    resolve(authResponse["access_token"]);
                    oauthPromise = undefined;
                  }).catch(function (err) {
                    oauthPromise = undefined;
                    reject(err);
                  });
                });
              });
              return _context5.abrupt("return", oauthPromise);

            case 14:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5);
    }));
    return _getGoogleAccessToken.apply(this, arguments);
  }

  var startupCalls = 0;

  function startup() {
    var href = window.document.location.href;
    var host = parseUri(href).host;

    if (startupCalls === 0 && !href.includes("localhost") && !href.includes("127.0.0.1")) {
      startupCalls++;
      var url = "https://data.broadinstitute.org/igv/projects/current/counter_igvjs.php?version=" + "0";
      igvxhr.load(url).then(function (ignore) {}).catch(function (error) {});
    }
  }
  /**
   * Use when TextDecoder is not available (primarily IE).
   *
   * From: https://gist.github.com/Yaffle/5458286
   *
   * @param octets
   * @returns {string}
   */


  function decodeUTF8(octets) {
    var string = "";
    var i = 0;

    while (i < octets.length) {
      var octet = octets[i];
      var bytesNeeded = 0;
      var codePoint = 0;

      if (octet <= 0x7F) {
        bytesNeeded = 0;
        codePoint = octet & 0xFF;
      } else if (octet <= 0xDF) {
        bytesNeeded = 1;
        codePoint = octet & 0x1F;
      } else if (octet <= 0xEF) {
        bytesNeeded = 2;
        codePoint = octet & 0x0F;
      } else if (octet <= 0xF4) {
        bytesNeeded = 3;
        codePoint = octet & 0x07;
      }

      if (octets.length - i - bytesNeeded > 0) {
        var k = 0;

        while (k < bytesNeeded) {
          octet = octets[i + k + 1];
          codePoint = codePoint << 6 | octet & 0x3F;
          k += 1;
        }
      } else {
        codePoint = 0xFFFD;
        bytesNeeded = octets.length - i;
      }

      string += String.fromCodePoint(codePoint);
      i += bytesNeeded + 1;
    }

    return string;
  }

  function getGlobalObject() {
    if (typeof self !== 'undefined') {
      return self;
    }

    if (typeof global !== 'undefined') {
      return global;
    } else {
      return window;
    }
  }

  /**
   * Covers string literals and String objects
   * @param x
   * @returns {boolean}
   */

  function isString(x) {
    return typeof x === "string" || x instanceof String;
  } // StackOverflow: http://stackoverflow.com/a/10810674/116169


  function numberFormatter(rawNumber) {
    var dec = String(rawNumber).split(/[.,]/),
        sep = ',',
        decsep = '.';
    return dec[0].split('').reverse().reduce(function (prev, now, i) {
      return i % 3 === 0 ? prev + sep + now : prev + now;
    }).split('').reverse().join('') + (dec[1] ? decsep + dec[1] : '');
  }

  var splitLines = function splitLines(string) {
    return string.split(/\n|\r\n|\r/g);
  };

  function splitStringRespectingQuotes(string, delim) {
    var tokens = [],
        len = string.length,
        i,
        n = 0,
        quote = false,
        c;

    if (len > 0) {
      tokens[n] = string.charAt(0);

      for (i = 1; i < len; i++) {
        c = string.charAt(i);

        if (c === '"') {
          quote = !quote;
        } else if (!quote && c === delim) {
          n++;
          tokens[n] = "";
        } else {
          tokens[n] += c;
        }
      }
    }

    return tokens;
  }

  function hashCode(s) {
    return s.split("").reduce(function (a, b) {
      a = (a << 5) - a + b.charCodeAt(0);
      return a & a;
    }, 0);
  }
  /**
   * Compress string and encode in a url safe form
   * @param s
   */


  function compressString(str) {
    var bytes = [];

    for (var i = 0; i < str.length; i++) {
      bytes.push(str.charCodeAt(i));
    }

    var compressedBytes = new Zlib.RawDeflate(bytes).compress(); // UInt8Arry

    var compressedString = String.fromCharCode.apply(null, compressedBytes); // Convert to string

    var enc = btoa(compressedString);
    return enc.replace(/\+/g, '.').replace(/\//g, '_').replace(/=/g, '-'); // URL safe
  }
  /**
   * Uncompress the url-safe encoded compressed string, presumably created by compressString above
   *
   * @param enc
   * @returns {string}
   */


  function uncompressString(enc) {
    enc = enc.replace(/\./g, '+').replace(/_/g, '/').replace(/-/g, '=');
    var compressedString = atob(enc);
    var compressedBytes = [];

    for (var i = 0; i < compressedString.length; i++) {
      compressedBytes.push(compressedString.charCodeAt(i));
    }

    var bytes = new Zlib.RawInflate(compressedBytes).decompress();
    var str = '';
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = bytes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var b = _step.value;
        str += String.fromCharCode(b);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return str;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var reservedProperties = new Set(['fastaURL', 'indexURL', 'cytobandURL', 'indexed']);

  var FastaSequence = function FastaSequence(reference) {
    if (typeof reference.fastaURL === 'string' && reference.fastaURL.startsWith('data:')) {
      this.file = decodeDataUri(reference.fastaURL);
      this.indexed = false; // dataURI is by definition not indexed

      this.isDataURI = true;
    } else {
      this.file = reference.fastaURL;
      this.indexed = reference.indexed !== false; // Indexed unless it explicitly is not

      if (this.indexed) {
        this.indexFile = reference.indexURL || reference.indexFile || this.file + ".fai";
      }
    }

    this.withCredentials = reference.withCredentials;
    this.chromosomeNames = [];
    this.chromosomes = {};
    this.sequences = {};
    this.offsets = {};
    this.config = buildConfig(reference);
  }; // Build a track-like config object from the referenceObject


  function buildConfig(reference) {
    var key,
        config = {};

    for (key in reference) {
      if (reference.hasOwnProperty(key) && !reservedProperties.has(key)) {
        config[key] = reference[key];
      }
    }

    return config;
  }

  FastaSequence.prototype.init = function () {
    var self = this;

    if (self.indexed) {
      return self.getIndex();
    } else {
      return self.loadAll();
    }
  };

  FastaSequence.prototype.getSequence = function (chr, start, end) {
    if (this.indexed) {
      return getSequenceIndexed.call(this, chr, start, end);
    } else {
      return getSequenceNonIndexed.call(this, chr, start, end);
    }
  };

  function getSequenceIndexed(chr, start, end) {
    var self = this;
    var interval = self.interval;

    if (interval && interval.contains(chr, start, end)) {
      return Promise.resolve(getSequenceFromInterval(interval, start, end));
    } else {
      // Expand query, to minimum of 50kb
      var qstart = start;
      var qend = end;

      if (end - start < 50000) {
        var w = end - start;
        var center = Math.round(start + w / 2);
        qstart = Math.max(0, center - 25000);
        qend = center + 25000;
      }

      return self.readSequence(chr, qstart, qend).then(function (seqBytes) {
        self.interval = new GenomicInterval(chr, qstart, qend, seqBytes);
        return getSequenceFromInterval(self.interval, start, end);
      });
    }

    function getSequenceFromInterval(interval, start, end) {
      var offset = start - interval.start;
      var n = end - start;
      var seq = interval.features ? interval.features.substr(offset, n) : null;
      return seq;
    }
  }

  function getSequenceNonIndexed(chr, start, end) {
    var self = this;

    if (this.offsets[chr]) {
      start -= this.offsets[chr];
      end -= this.offsets[chr];
    }

    var prefix = "";

    if (start < 0) {
      for (var i = start; i < Math.min(end, 0); i++) {
        prefix += "*";
      }
    }

    if (end <= 0) {
      return Promise.resolve(prefix);
    }

    var seq = self.sequences[chr];
    var seqEnd = Math.min(end, seq.length);
    return Promise.resolve(prefix + seq.substring(start, end));
  }

  FastaSequence.prototype.getIndex = function () {
    if (this.index) {
      return Promise.resolve(this.index);
    } else {
      var self = this;
      return igvxhr.load(self.indexFile, buildOptions(self.config)).then(function (data) {
        var lines = splitLines(data);
        var len = lines.length;
        var lineNo = 0;
        var order = 0;
        self.index = {};

        while (lineNo < len) {
          var tokens = lines[lineNo++].split("\t");
          var nTokens = tokens.length;

          if (nTokens === 5) {
            // Parse the index line.
            var chr = tokens[0];
            var size = parseInt(tokens[1]);
            var position = parseInt(tokens[2]);
            var basesPerLine = parseInt(tokens[3]);
            var bytesPerLine = parseInt(tokens[4]);
            var indexEntry = {
              size: size,
              position: position,
              basesPerLine: basesPerLine,
              bytesPerLine: bytesPerLine
            };
            self.chromosomeNames.push(chr);
            self.index[chr] = indexEntry;
            self.chromosomes[chr] = new Chromosome(chr, order++, 0, size);
          }
        }

        return self.index;
      });
    }
  };

  FastaSequence.prototype.loadAll = function () {
    var self = this;

    if (this.isDataURI) {
      return Promise.resolve(parseFasta(this.file));
    } else {
      return igvxhr.load(self.file, buildOptions(self.config)).then(parseFasta);
    }

    function parseFasta(data) {
      var lines = splitLines(data),
          len = lines.length,
          lineNo = 0,
          nextLine,
          currentSeq = "",
          currentChr,
          currentRangeLocus = undefined,
          currentOffset = 0,
          order = 0;

      while (lineNo < len) {
        nextLine = lines[lineNo++].trim();

        if (nextLine.startsWith("#") || nextLine.length === 0) ; else if (nextLine.startsWith(">")) {
          if (currentSeq) {
            self.chromosomeNames.push(currentChr);
            self.sequences[currentChr] = currentSeq;
            self.chromosomes[currentChr] = new Chromosome(currentChr, order++, currentOffset, currentOffset + currentSeq.length, currentRangeLocus);
          }

          var parts = nextLine.substr(1).split(/\s+/); // Check for samtools style locus string.   This is not perfect, and could fail on weird sequence names

          var nameParts = parts[0].split(':');
          currentChr = nameParts[0];
          currentSeq = "";
          currentOffset = 0;
          currentRangeLocus = undefined;

          if (nameParts.length > 1 && nameParts[1].indexOf('-') > 0) {
            var locusParts = nameParts[1].split('-');

            if (locusParts.length === 2 && /^[0-9]+$/.test(locusParts[0]) && /^[0-9]+$/.test(locusParts[1])) ;

            var from = Number.parseInt(locusParts[0]);
            var to = Number.parseInt(locusParts[1]);

            if (to > from) {
              currentOffset = from - 1;
              self.offsets[currentChr] = currentOffset;
              currentRangeLocus = nameParts[1];
            }
          }
        } else {
          currentSeq += nextLine;
        }
      } // add last seq


      if (currentSeq) {
        self.chromosomeNames.push(currentChr);
        self.sequences[currentChr] = currentSeq;
        self.chromosomes[currentChr] = new Chromosome(currentChr, order++, currentOffset, currentOffset + currentSeq.length, currentRangeLocus);
      }
    }
  };

  FastaSequence.prototype.readSequence = function (chr, qstart, qend) {
    //console.log("Read sequence " + chr + ":" + qstart + "-" + qend);
    var self = this;
    var offset;
    var start;
    var end;
    var basesPerLine;
    var nEndBytes;
    return self.getIndex().then(function () {
      var idxEntry = self.index[chr];

      if (!idxEntry) {
        // Tag interval with null so we don't try again
        self.interval = new GenomicInterval(chr, qstart, qend, null);
        return null;
      } else {
        start = Math.max(0, qstart); // qstart should never be < 0

        end = Math.min(idxEntry.size, qend);
        var bytesPerLine = idxEntry.bytesPerLine;
        basesPerLine = idxEntry.basesPerLine;
        var position = idxEntry.position;
        nEndBytes = bytesPerLine - basesPerLine;
        var startLine = Math.floor(start / basesPerLine);
        var endLine = Math.floor(end / basesPerLine);
        var base0 = startLine * basesPerLine; // Base at beginning of start line

        offset = start - base0;
        var startByte = position + startLine * bytesPerLine + offset;
        var base1 = endLine * basesPerLine;
        var offset1 = end - base1;
        var endByte = position + endLine * bytesPerLine + offset1 - 1;
        var byteCount = endByte - startByte + 1;

        if (byteCount <= 0) {
          console.error("No sequence for " + chr + ":" + qstart + "-" + qend);
          return "";
        } else {
          return igvxhr.load(self.file, buildOptions(self.config, {
            range: {
              start: startByte,
              size: byteCount
            }
          }));
        }
      }
    }).then(function (allBytes) {
      if (!allBytes) {
        return null;
      } else {
        var nBases,
            seqBytes = "",
            srcPos = 0,
            allBytesLength = allBytes.length;

        if (offset > 0) {
          nBases = Math.min(end - start, basesPerLine - offset);
          seqBytes += allBytes.substr(srcPos, nBases);
          srcPos += nBases + nEndBytes;
        }

        while (srcPos < allBytesLength) {
          nBases = Math.min(basesPerLine, allBytesLength - srcPos);
          seqBytes += allBytes.substr(srcPos, nBases);
          srcPos += nBases + nEndBytes;
        }

        return seqBytes;
      }
    });
  };

  function decodeDataUri(dataUri) {
    var bytes,
        split = dataUri.split(','),
        info = split[0].split(':')[1],
        dataString = split[1];

    if (info.indexOf('base64') >= 0) {
      dataString = atob(dataString);
    } else {
      dataString = decodeURI(dataString);
    }

    bytes = new Uint8Array(dataString.length);

    for (var i = 0; i < dataString.length; i++) {
      bytes[i] = dataString.charCodeAt(i);
    }

    var inflate = new Zlib.Gunzip(bytes);
    var plain = inflate.decompress();
    var s = "";
    var len = plain.length;

    for (var _i = 0; _i < len; _i++) {
      s += String.fromCharCode(plain[_i]);
    }

    return s;
  }

  var KNOWN_GENOMES;
  var GenomeUtils = {
    loadGenome: function () {
      var _loadGenome = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(config) {
        var cytobandUrl, aliasURL, sequence, cytobands, aliases;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                cytobandUrl = config.cytobandURL;
                aliasURL = config.aliasURL;
                sequence = new FastaSequence(config);
                _context.next = 5;
                return sequence.init();

              case 5:
                if (!cytobandUrl) {
                  _context.next = 9;
                  break;
                }

                _context.next = 8;
                return loadCytobands(cytobandUrl, sequence.config);

              case 8:
                cytobands = _context.sent;

              case 9:
                if (!aliasURL) {
                  _context.next = 13;
                  break;
                }

                _context.next = 12;
                return loadAliases(aliasURL, sequence.config);

              case 12:
                aliases = _context.sent;

              case 13:
                return _context.abrupt("return", new Genome(config, sequence, cytobands, aliases));

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function loadGenome(_x) {
        return _loadGenome.apply(this, arguments);
      }

      return loadGenome;
    }(),
    getKnownGenomes: function () {
      var _getKnownGenomes = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var genomeList, jsonArray, processJson;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                processJson = function _ref(jsonArray) {
                  var table = {};
                  jsonArray.forEach(function (json) {
                    table[json.id] = json;
                  });
                  KNOWN_GENOMES = table;
                  return table;
                };

                genomeList = GenomeUtils.genomeList;

                if (!KNOWN_GENOMES) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", KNOWN_GENOMES);

              case 6:
                if (genomeList) {
                  _context2.next = 10;
                  break;
                }

                return _context2.abrupt("return", {});

              case 10:
                if (!(typeof genomeList === 'string')) {
                  _context2.next = 17;
                  break;
                }

                _context2.next = 13;
                return igvxhr.loadJson(genomeList, {});

              case 13:
                jsonArray = _context2.sent;
                return _context2.abrupt("return", processJson(jsonArray));

              case 17:
                return _context2.abrupt("return", processJson(genomeList));

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function getKnownGenomes() {
        return _getKnownGenomes.apply(this, arguments);
      }

      return getKnownGenomes;
    }(),
    isWholeGenomeView: function isWholeGenomeView(referenceFrame) {
      var chromosomeName = referenceFrame.chrName.toLowerCase();
      return 'all' === chromosomeName;
    }
  };

  var Genome = function Genome(config, sequence, ideograms, aliases) {
    this.config = config;
    this.id = config.id;
    this.sequence = sequence;
    this.chromosomeNames = sequence.chromosomeNames;
    this.chromosomes = sequence.chromosomes; // An object (functions as a dictionary)

    this.ideograms = ideograms;

    if (Object.keys(sequence.chromosomes).length > 1) {
      constructWG(this, config);
    } else {
      this.wgChromosomeNames = [sequence.chromosomeNames[0]];
    }
    /**
     * Return the official chromosome name for the (possibly) alias.  Deals with
     * 1 <-> chr1,  chrM <-> MT,  IV <-> chr4, etc.
     * @param str
     */


    var chrAliasTable = {},
        self = this; // The standard mappings

    chrAliasTable["all"] = "all";
    this.chromosomeNames.forEach(function (name) {
      var alias = name.startsWith("chr") ? name.substring(3) : "chr" + name;
      chrAliasTable[alias.toLowerCase()] = name;
      if (name === "chrM") chrAliasTable["mt"] = "chrM";
      if (name === "MT") chrAliasTable["chrm"] = "MT";
      chrAliasTable[name.toLowerCase()] = name;
    }); // Custom mappings

    if (aliases) {
      aliases.forEach(function (array) {
        // Find the official chr name
        var defName, i;

        for (i = 0; i < array.length; i++) {
          if (self.chromosomes[array[i]]) {
            defName = array[i];
            break;
          }
        }

        if (defName) {
          array.forEach(function (alias) {
            if (alias !== defName) {
              chrAliasTable[alias.toLowerCase()] = defName;
              chrAliasTable[alias] = defName; // Should not be needed
            }
          });
        }
      });
    }

    this.chrAliasTable = chrAliasTable;
  };

  Genome.prototype.toJSON = function () {
    return Object.assign({}, this.config, {
      tracks: undefined
    });
  };

  Genome.prototype.getInitialLocus = function () {};

  Genome.prototype.getHomeChromosomeName = function () {
    if (this.chromosomes.hasOwnProperty("all")) {
      return "all";
    } else {
      var chromosome = this.chromosomes[this.chromosomeNames[0]];

      if (chromosome.rangeLocus) {
        return chromosome.name + ":" + chromosome.rangeLocus;
      } else {
        return this.chromosomeNames[0];
      }
    }
  };

  Genome.prototype.getChromosomeName = function (str) {
    var chr = this.chrAliasTable[str.toLowerCase()];
    return chr ? chr : str;
  };

  Genome.prototype.getChromosome = function (chr) {
    chr = this.getChromosomeName(chr);
    return this.chromosomes[chr];
  };

  Genome.prototype.getCytobands = function (chr) {
    return this.ideograms ? this.ideograms[chr] : null;
  };

  Genome.prototype.getLongestChromosome = function () {
    var longestChr,
        chromosomes = this.chromosomes;

    for (var key in chromosomes) {
      if (chromosomes.hasOwnProperty(key)) {
        var chr = chromosomes[key];

        if (longestChr === undefined || chr.bpLength > longestChr.bpLength) {
          longestChr = chr;
        }
      }

      return longestChr;
    }
  };

  Genome.prototype.getChromosomes = function () {
    return this.chromosomes;
  };
  /**
   * Return the genome coordinate in kb for the give chromosome and position.
   * NOTE: This might return undefined if the chr is filtered from whole genome view.
   */


  Genome.prototype.getGenomeCoordinate = function (chr, bp) {
    var offset = this.getCumulativeOffset(chr);
    if (offset === undefined) return undefined;
    return offset + bp;
  };
  /**
   * Return the chromosome and coordinate in bp for the given genome coordinate
   */


  Genome.prototype.getChromosomeCoordinate = function (genomeCoordinate) {
    if (this.cumulativeOffsets === undefined) {
      this.cumulativeOffsets = computeCumulativeOffsets.call(this);
    }

    var lastChr = undefined;
    var lastCoord = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.wgChromosomeNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var name = _step.value;
        var cumulativeOffset = this.cumulativeOffsets[name];

        if (cumulativeOffset > genomeCoordinate) {
          var position = genomeCoordinate - lastCoord;
          return {
            chr: lastChr,
            position: position
          };
        }

        lastChr = name;
        lastCoord = cumulativeOffset;
      } // If we get here off the end

    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return {
      chr: this.chromosomeNames[this.chromosomeNames.length - 1],
      position: 0
    };
  };
  /**
   * Return the offset in genome coordinates (kb) of the start of the given chromosome
   * NOTE:  This might return undefined if the chromosome is filtered from whole genome view.
   */


  Genome.prototype.getCumulativeOffset = function (chr) {
    if (this.cumulativeOffsets === undefined) {
      this.cumulativeOffsets = computeCumulativeOffsets.call(this);
    }

    var queryChr = this.getChromosomeName(chr);
    return this.cumulativeOffsets[queryChr];
  };

  function computeCumulativeOffsets() {
    var self = this;
    var acc = {};
    var offset = 0;
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = self.wgChromosomeNames[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var name = _step2.value;
        acc[name] = Math.floor(offset);
        var chromosome = self.getChromosome(name);
        offset += chromosome.bpLength;
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return acc;
  }
  /**
   * Return the nominal genome length, this is the length of the main chromosomes (no scaffolds, etc).
   */


  Genome.prototype.getGenomeLength = function () {
    var self = this;

    if (!this.bpLength) {
      var bpLength = 0;
      self.wgChromosomeNames.forEach(function (cname) {
        var c = self.chromosomes[cname];
        bpLength += c.bpLength;
      });
      this.bpLength = bpLength;
    }

    return this.bpLength;
  };

  function loadCytobands(cytobandUrl, config) {
    if (cytobandUrl.startsWith("data:")) {
      var data = decodeDataUri(cytobandUrl);
      return Promise.resolve(getCytobands(data));
    } else {
      return igvxhr.loadString(cytobandUrl, buildOptions(config)).then(function (data) {
        return getCytobands(data);
      });
    }

    function getCytobands(data) {
      var bands = [],
          lastChr,
          n = 0,
          lines = splitLines(data),
          len = lines.length,
          cytobands = {};

      for (var i = 0; i < len; i++) {
        var tokens = lines[i].split("\t");
        var chr = tokens[0];
        if (!lastChr) lastChr = chr;

        if (chr !== lastChr) {
          cytobands[lastChr] = bands;
          bands = [];
          lastChr = chr;
          n = 0;
        }

        if (tokens.length === 5) {
          //10	0	3000000	p15.3	gneg
          var start = parseInt(tokens[1]);
          var end = parseInt(tokens[2]);
          var name = tokens[3];
          var stain = tokens[4];
          bands[n++] = new Cytoband(start, end, name, stain);
        }
      }

      return cytobands;
    }

    function decodeDataUri(dataUri) {
      var plain;

      if (dataUri.startsWith("data:application/gzip;base64")) {
        plain = decodeDataURI(dataUri);
      } else {
        var bytes,
            split = dataUri.split(','),
            info = split[0].split(':')[1],
            dataString = split[1];

        if (info.indexOf('base64') >= 0) {
          dataString = atob(dataString);
        } else {
          dataString = decodeURI(dataString);
        }

        bytes = new Uint8Array(dataString.length);

        for (var i = 0; i < dataString.length; i++) {
          bytes[i] = dataString.charCodeAt(i);
        }

        var inflate = new Zlib.Gunzip(bytes);
        plain = inflate.decompress();
      }

      var s = "";
      var len = plain.length;

      for (var _i = 0; _i < len; _i++) {
        s += String.fromCharCode(plain[_i]);
      }

      return s;
    }
  }

  function loadAliases(aliasURL, config) {
    return igvxhr.loadString(aliasURL, buildOptions(config)).then(function (data) {
      var lines = splitLines(data),
          aliases = [];
      lines.forEach(function (line) {
        if (!line.startsWith("#") && line.length > 0) aliases.push(line.split("\t"));
      });
      return aliases;
    });
  }

  function constructWG(genome, config) {
    var wgChromosomes;

    if (config.chromosomeOrder) {
      genome.wgChromosomeNames = config.chromosomeOrder.split(',').map(function (nm) {
        return nm.trim();
      });
      wgChromosomes = genome.wgChromosomeNames.map(function (nm) {
        return genome.chromosomes[nm];
      }).filter(function (chr) {
        return chr !== undefined;
      });
    } else {
      // Trim small chromosomes.
      var lengths = Object.keys(genome.chromosomes).map(function (key) {
        return genome.chromosomes[key].bpLength;
      });
      var median = lengths.reduce(function (a, b) {
        return Math.max(a, b);
      });
      var threshold = median / 50;
      wgChromosomes = Object.values(genome.chromosomes).filter(function (chr) {
        return chr.bpLength > threshold;
      }); // Sort chromosomes.  First segregate numeric and alpha names, sort numeric, leave alpha as is

      var numericChromosomes = wgChromosomes.filter(function (chr) {
        return isDigit(chr.name.replace('chr', ''));
      });
      var alphaChromosomes = wgChromosomes.filter(function (chr) {
        return !isDigit(chr.name.replace('chr', ''));
      });
      numericChromosomes.sort(function (a, b) {
        return Number.parseInt(a.name.replace('chr', '')) - Number.parseInt(b.name.replace('chr', ''));
      });
      var wgChromosomeNames = numericChromosomes.map(function (chr) {
        return chr.name;
      });
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = alphaChromosomes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var chr = _step3.value;
          wgChromosomeNames.push(chr.name);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      genome.wgChromosomeNames = wgChromosomeNames;
    } // Compute psuedo-chromosome "all"


    var l = wgChromosomes.reduce(function (accumulator, currentValue) {
      return accumulator += currentValue.bpLength;
    }, 0);
    genome.chromosomes["all"] = {
      name: "all",
      bpLength: l
    };

    function isDigit(val) {
      return /^\d+$/.test(val);
    }
  }

  var NOT_LOADED_MESSAGE = 'Error loading track data';

  function ViewPort(trackView, $container, genomicState, width) {
    var self = this;
    this.trackView = trackView;
    this.genomicState = genomicState;
    this.browser = trackView.browser; // viewport

    this.$viewport = $('<div class="igv-viewport-div">');
    $container.append(this.$viewport); // viewport-content

    var $div = $("<div>", {
      class: 'igv-viewport-content-div'
    });
    this.$viewport.append($div); // know the genomic state index

    var index = this.browser.genomicStateList.indexOf(genomicState);
    $div.data('genomicStateIndex', index);
    $div.height(this.$viewport.height());
    this.contentDiv = $div.get(0); // viewport canvas

    var $canvas = $('<canvas>');
    $(this.contentDiv).append($canvas);
    this.canvas = $canvas.get(0);
    this.ctx = this.canvas.getContext("2d");
    this.setWidth(width);

    if ("sequence" === trackView.track.type) {
      this.$viewport.addClass('igv-viewport-sequence');
    }

    if ('ruler' === trackView.track.type) {
      this.rulerSweeper = new RulerSweeper(this);
      trackView.track.appendMultiPanelCloseButton(this.$viewport, this.genomicState);
      this.$rulerLabel = $('<div class = "igv-multi-locus-panel-label-div">');
      this.$rulerLabel.click(function (e) {
        self.browser.selectMultiLocusPanelWithGenomicState(self.genomicState);
      });
      $(this.contentDiv).append(this.$rulerLabel);

      if (true === GenomeUtils.isWholeGenomeView(this.genomicState.referenceFrame)) {
        enableRulerTrackMouseHandlers.call(this);
      } else {
        disableRulerTrackMouseHandlers.call(this);
      }
    } else {
      addMouseHandlers.call(this); // const $spinnerContainer = $('<div class="igv-viewport-spinner">');
      // const dimen = 32;
      // $spinnerContainer.css({'font-size': dimen + 'px'});

      this.$spinner = $('<div class="igv-viewport-spinner">');
      this.$spinner.append(createIcon("spinner"));
      this.$viewport.append(this.$spinner);
      this.stopSpinner();

      if ("sequence" !== trackView.track.type) {
        this.popover = new Popover(this.browser.$content);
        var str = trackView.track.name.toLowerCase().split(' ').join('_');
        str = str + '_' + this.browser.genomicStateList.indexOf(this.genomicState);
        this.popover.$popover.attr('id', str);
        this.$zoomInNotice = createZoomInNotice.call(this, $(this.contentDiv));
      }
    }

    if (trackView.track.name) {
      this.$trackLabel = $('<div class="igv-track-label">');
      this.$viewport.append(this.$trackLabel);
      this.setTrackLabel(trackView.track.name);

      if (false === this.browser.trackLabelsVisible) {
        this.$trackLabel.hide();
      }

      this.$trackLabel.click(function (e) {
        var str;
        e.stopPropagation();

        if (typeof trackView.track.description === 'function') {
          str = trackView.track.description();
        } else {
          str = trackView.track.name;
        }

        var page = pageCoordinates(e);
        self.popover.presentTrackContent(page.x, page.y, str);
      });
      this.$trackLabel.mousedown(function (e) {
        // Prevent bubbling
        e.stopPropagation();
      });
      this.$trackLabel.mouseup(function (e) {
        // Prevent  bubbling
        e.stopPropagation();
      });
      this.$trackLabel.mousemove(function (e) {
        // Prevent  bubbling
        e.stopPropagation();
      });
    }
  }

  function createZoomInNotice($parent) {
    var $notice = $('<div class="zoom-in-notice-container">');
    $parent.append($notice);
    var $e = $('<div>');
    $notice.append($e);
    $e.text('Zoom in to see features');
    $notice.hide();
    return $notice;
  }

  ViewPort.prototype.isVisible = function () {
    return this.$viewport.width();
  }; // UI


  ViewPort.prototype.setTrackLabel = function (label) {
    this.trackView.track.name = this.trackView.track.config.name = label;
    this.$trackLabel.empty();
    this.$trackLabel.html(label);
    var txt = this.$trackLabel.text();
    this.$trackLabel.attr('title', txt);
  };

  ViewPort.prototype.setWidth = function (width) {
    this.$viewport.outerWidth(width);
    this.canvas.style.width = this.$viewport.width() + 'px';
    this.canvas.setAttribute('width', this.$viewport.width());
  };

  ViewPort.prototype.startSpinner = function () {
    var $spinner = this.$spinner;

    if ($spinner) {
      $spinner.addClass("igv-fa5-spin");
      $spinner.show();
    }
  };

  ViewPort.prototype.stopSpinner = function () {
    var $spinner = this.$spinner;

    if ($spinner) {
      $spinner.hide();
      $spinner.removeClass("igv-fa5-spin");
    }
  };

  ViewPort.prototype.showMessage = function (message) {
    if (!this.messageDiv) {
      this.messageDiv = document.createElement('div');
      this.messageDiv.className = 'igv-viewport-message';
      this.contentDiv.append(this.messageDiv);
    }

    this.messageDiv.textContent = message;
    this.messageDiv.style.display = 'inline-block';
  };

  ViewPort.prototype.hideMessage = function (message) {
    if (this.messageDiv) this.messageDiv.style.display = 'none';
  };

  ViewPort.prototype.checkZoomIn = function () {
    if (!viewIsReady.call(this)) {
      return false;
    }

    if (this.$zoomInNotice) {
      if (showZoomInNotice.call(this)) {
        if (this.canvas) {
          this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
          this.tile = undefined;
        }

        this.$zoomInNotice.show();
        return false;
      } else {
        this.$zoomInNotice.hide();
        return true;
      }
    }

    return true;

    function showZoomInNotice() {
      var referenceFrame = this.genomicState.referenceFrame;

      if (referenceFrame.chrName.toLowerCase() === "all" && !this.trackView.track.supportsWholeGenome()) {
        return true;
      } else {
        var visibilityWindow = typeof this.trackView.track.getVisibilityWindow === 'function' ? this.trackView.track.getVisibilityWindow() : this.trackView.track.visibilityWindow;
        return visibilityWindow !== undefined && visibilityWindow > 0 && referenceFrame.bpPerPixel * this.$viewport.width() > visibilityWindow;
      }
    }
  };

  ViewPort.prototype.shift = function () {
    var self = this;
    var referenceFrame = self.genomicState.referenceFrame;

    if (self.canvas && self.tile && self.tile.chr === referenceFrame.chrName && self.tile.bpPerPixel === referenceFrame.bpPerPixel) {
      var pixelOffset = Math.round((self.tile.startBP - referenceFrame.start) / referenceFrame.bpPerPixel);
      self.canvas.style.left = pixelOffset + "px";
    }
  };

  ViewPort.prototype.setTop = function (contentTop) {
    var viewportHeight = this.$viewport.height();
    var viewTop = -contentTop;
    var viewBottom = viewTop + viewportHeight;
    $(this.contentDiv).css("top", contentTop + "px");

    if (!this.canvasVerticalRange || this.canvasVerticalRange.bottom < viewBottom || this.canvasVerticalRange.top > viewTop) {
      this.repaint();
    }
  };

  ViewPort.prototype.loadFeatures =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var genomicState, referenceFrame, chr, chrLength, pixelWidth, bpWidth, bpStart, bpEnd, features, roiFeatures, roi, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, r, f;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            genomicState = this.genomicState;
            referenceFrame = genomicState.referenceFrame;
            chr = referenceFrame.chrName; // Expand the requested range so we can pan a bit without reloading.  But not beyond chromosome bounds

            chrLength = this.browser.genome.getChromosome(chr).bpLength;
            pixelWidth = $(this.contentDiv).width() * 3;
            bpWidth = pixelWidth * referenceFrame.bpPerPixel;
            bpStart = Math.floor(Math.max(0, referenceFrame.start - bpWidth / 3));
            bpEnd = Math.ceil(Math.min(chrLength, bpStart + bpWidth));

            if (!(this.loading && this.loading.start === bpStart && this.loading.end === bpEnd)) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return", undefined);

          case 10:
            this.loading = {
              start: bpStart,
              end: bpEnd
            };
            this.startSpinner(); // console.log('get features');

            _context.prev = 12;
            _context.next = 15;
            return getFeatures.call(this, referenceFrame.chrName, bpStart, bpEnd, referenceFrame.bpPerPixel);

          case 15:
            features = _context.sent;
            roiFeatures = [];
            roi = mergeArrays(this.browser.roi, this.trackView.track.roi);

            if (!roi) {
              _context.next = 47;
              break;
            }

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 22;
            _iterator = roi[Symbol.iterator]();

          case 24:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 33;
              break;
            }

            r = _step.value;
            _context.next = 28;
            return r.getFeatures(referenceFrame.chrName, bpStart, bpEnd, referenceFrame.bpPerPixel);

          case 28:
            f = _context.sent;
            roiFeatures.push({
              track: r,
              features: f
            });

          case 30:
            _iteratorNormalCompletion = true;
            _context.next = 24;
            break;

          case 33:
            _context.next = 39;
            break;

          case 35:
            _context.prev = 35;
            _context.t0 = _context["catch"](22);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 39:
            _context.prev = 39;
            _context.prev = 40;

            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }

          case 42:
            _context.prev = 42;

            if (!_didIteratorError) {
              _context.next = 45;
              break;
            }

            throw _iteratorError;

          case 45:
            return _context.finish(42);

          case 46:
            return _context.finish(39);

          case 47:
            this.tile = new Tile(referenceFrame.chrName, bpStart, bpEnd, referenceFrame.bpPerPixel, features, roiFeatures);
            this.loading = false;
            this.hideMessage();
            this.stopSpinner();
            return _context.abrupt("return", this.tile);

          case 54:
            _context.prev = 54;
            _context.t1 = _context["catch"](12);
            this.showMessage(NOT_LOADED_MESSAGE);
            console.error(_context.t1);

          case 58:
            _context.prev = 58;
            this.loading = false;
            this.stopSpinner();
            return _context.finish(58);

          case 62:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[12, 54, 58, 62], [22, 35, 39, 47], [40,, 42, 46]]);
  }));
  /**
   *
   * @param tile - the tile is created whenever features are loaded.  It contains the genomic state
   * representing the features,as well as the features.  The object evolved, at one time it was an image tile.
   * Should be renamed.
   */

  ViewPort.prototype.repaint =
  /*#__PURE__*/
  function () {
    var _ref2 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(tile) {
      var self, isWGV, features, roiFeatures, genomicState, referenceFrame, bpPerPixel, bpStart, bpEnd, pixelWidth, viewportHeight, pixelHeight, canvasTop, devicePixelRatio, drawConfiguration, newCanvas, ctx, pixelXOffset;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              self = this; //

              if (!tile) {
                tile = this.tile;
              }

              if (tile) {
                _context2.next = 4;
                break;
              }

              return _context2.abrupt("return");

            case 4:
              isWGV = GenomeUtils.isWholeGenomeView(this.genomicState.referenceFrame);
              features = tile.features;
              roiFeatures = tile.roiFeatures;
              genomicState = this.genomicState;
              referenceFrame = genomicState.referenceFrame;
              bpPerPixel = isWGV ? referenceFrame.initialEnd / this.$viewport.width() : tile.bpPerPixel;
              bpStart = isWGV ? 0 : tile.startBP;
              bpEnd = isWGV ? referenceFrame.initialEnd : tile.endBP;
              pixelWidth = isWGV ? this.$viewport.width() : Math.ceil((bpEnd - bpStart) / bpPerPixel); // For deep tracks we paint a canvas == 3*viewportHeight centered on the current vertical scroll position

              viewportHeight = this.$viewport.height();
              pixelHeight = Math.min(self.getContentHeight(), 3 * viewportHeight);

              if (!(0 === pixelWidth || 0 === pixelHeight)) {
                _context2.next = 18;
                break;
              }

              if (self.canvas) {
                $(self.canvas).remove();
              }

              return _context2.abrupt("return");

            case 18:
              canvasTop = Math.max(0, -$(this.contentDiv).position().top - viewportHeight); // Always use high DPI if in compressed display mode, otherwise use preference setting;

              if ("FILL" === this.trackView.track.displayMode) {
                devicePixelRatio = window.devicePixelRatio;
              } else {
                devicePixelRatio = this.trackView.track.supportHiDPI === false ? 1 : window.devicePixelRatio;
              }

              drawConfiguration = {
                features: features,
                pixelWidth: pixelWidth,
                pixelHeight: pixelHeight,
                pixelTop: canvasTop,
                bpStart: bpStart,
                bpEnd: bpEnd,
                bpPerPixel: bpPerPixel,
                referenceFrame: referenceFrame,
                genomicState: genomicState,
                selection: self.selection,
                viewport: self,
                viewportWidth: self.$viewport.width(),
                viewportContainerX: referenceFrame.toPixels(referenceFrame.start - bpStart),
                viewportContainerWidth: this.browser.viewportContainerWidth()
              };
              newCanvas = $('<canvas>').get(0);
              newCanvas.style.width = pixelWidth + "px";
              newCanvas.style.height = pixelHeight + "px";
              newCanvas.width = devicePixelRatio * pixelWidth;
              newCanvas.height = devicePixelRatio * pixelHeight;
              ctx = newCanvas.getContext("2d"); // ctx.save();

              ctx.scale(devicePixelRatio, devicePixelRatio);
              pixelXOffset = Math.round((bpStart - referenceFrame.start) / referenceFrame.bpPerPixel);
              newCanvas.style.position = 'absolute';
              newCanvas.style.left = pixelXOffset + "px";
              newCanvas.style.top = canvasTop + "px";
              drawConfiguration.context = ctx;
              ctx.translate(0, -canvasTop);
              draw.call(this, drawConfiguration, features, roiFeatures); // ctx.translate(0, canvasTop);
              // ctx.restore();

              this.canvasVerticalRange = {
                top: canvasTop,
                bottom: canvasTop + pixelHeight
              };

              if (self.canvas) {
                $(self.canvas).remove();
              }

              $(self.contentDiv).append(newCanvas);
              self.canvas = newCanvas;
              self.ctx = ctx;

            case 40:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  /**
   *
   * @param tile - the tile is created whenever features are loaded.  It contains the genomic state
   * representing the features,as well as the features.  The object evolved, at one time it was an image tile.
   * Should be renamed.
   */


  ViewPort.prototype.toSVG =
  /*#__PURE__*/
  function () {
    var _ref3 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(tile) {
      var genomicState, referenceFrame, bpPerPixel, features, roiFeatures, pixelWidth, pixelHeight, bpStart, bpEnd, ctx, drawConfiguration;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              genomicState = this.genomicState;
              referenceFrame = genomicState.referenceFrame;
              bpPerPixel = tile.bpPerPixel;
              features = tile.features;
              roiFeatures = tile.roiFeatures;
              pixelWidth = this.$viewport.width();
              pixelHeight = this.$viewport.height();
              bpStart = referenceFrame.start;
              bpEnd = referenceFrame.start + pixelWidth * referenceFrame.bpPerPixel;
              ctx = new C2S({
                // svg
                width: pixelWidth,
                height: pixelHeight,
                viewbox: {
                  x: 0,
                  y: -$(this.contentDiv).position().top,
                  width: pixelWidth,
                  height: pixelHeight
                }
              });
              drawConfiguration = {
                viewport: this,
                context: ctx,
                top: -$(this.contentDiv).position().top,
                pixelTop: 0,
                // for compatibility with canvas draw
                pixelWidth: pixelWidth,
                pixelHeight: pixelHeight,
                bpStart: bpStart,
                bpEnd: bpEnd,
                bpPerPixel: bpPerPixel,
                referenceFrame: referenceFrame,
                genomicState: this.genomicState,
                selection: this.selection,
                viewportWidth: pixelWidth,
                viewportContainerX: 0,
                viewportContainerWidth: this.browser.viewportContainerWidth()
              };
              draw.call(this, drawConfiguration, features, roiFeatures);
              return _context3.abrupt("return", ctx.getSerializedSvg(true));

            case 13:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function (_x2) {
      return _ref3.apply(this, arguments);
    };
  }();

  function draw(drawConfiguration, features, roiFeatures) {
    if (features) {
      drawConfiguration.features = features;
      this.trackView.track.draw(drawConfiguration);
    }

    if (roiFeatures) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = roiFeatures[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var r = _step2.value;
          drawConfiguration.features = r.features;
          r.track.draw(drawConfiguration);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }

  function viewIsReady() {
    return this.browser && this.browser.genomicStateList && this.genomicState.referenceFrame;
  }

  function enableRulerTrackMouseHandlers() {
    var index = this.browser.genomicStateList.indexOf(this.genomicState);
    var namespace = '.ruler_track_viewport_' + index; // console.log(' enable ruler mouse handler ' + index);

    var self = this;
    this.$viewport.on('click' + namespace, function (e) {
      var pixel = translateMouseCoordinates(e, self.$viewport.get(0)).x;
      var bp = Math.round(self.genomicState.referenceFrame.start + self.genomicState.referenceFrame.toBP(pixel));
      var searchString;

      if (1 === self.browser.genomicStateList.length) {
        searchString = self.browser.genome.getChromosomeCoordinate(bp).chr;
      } else {
        var loci = self.browser.genomicStateList.map(function (genomicState) {
          return genomicState.locusSearchString;
        });
        loci[self.browser.genomicStateList.indexOf(self.genomicState)] = self.browser.genome.getChromosomeCoordinate(bp).chr;
        searchString = loci.join(' ');
      }

      self.browser.search(searchString);
    });
  }

  function disableRulerTrackMouseHandlers() {
    var index = this.browser.genomicStateList.indexOf(this.genomicState);
    var namespace = '.ruler_track_viewport_' + index; // console.log('disable ruler mouse handler ' + index);

    this.$viewport.off(namespace);
  }

  ViewPort.prototype.setContentHeight = function (contentHeight) {
    // Maximum height of a canvas is ~32,000 pixels on Chrome, possibly smaller on other platforms
    contentHeight = Math.min(contentHeight, 32000);
    $(this.contentDiv).height(contentHeight);
    if (this.tile) this.tile.invalidate = true;
  };

  ViewPort.prototype.getContentHeight = function () {
    return $(this.contentDiv).height();
  };

  ViewPort.prototype.getContentTop = function () {
    return this.contentDiv.offsetTop;
  };

  ViewPort.prototype.isLoading = function () {
    return this.loading;
  };

  ViewPort.prototype.saveImage = function () {
    if (!this.ctx) return;
    var canvasTop = this.canvasVerticalRange ? this.canvasVerticalRange.top : 0;
    var devicePixelRatio = window.devicePixelRatio;
    var w = this.$viewport.width() * devicePixelRatio;
    var h = this.$viewport.height() * devicePixelRatio;
    var x = -$(this.canvas).position().left * devicePixelRatio;
    var y = (-$(this.contentDiv).position().top - canvasTop) * devicePixelRatio;
    var imageData = this.ctx.getImageData(x, y, w, h);
    var exportCanvas = document.createElement('canvas');
    var exportCtx = exportCanvas.getContext('2d');
    exportCanvas.width = imageData.width;
    exportCanvas.height = imageData.height;
    exportCtx.putImageData(imageData, 0, 0); // filename = this.trackView.track.name + ".png";

    var filename = (this.$trackLabel.text() ? this.$trackLabel.text() : "image") + ".png";
    var data = exportCanvas.toDataURL("image/png");
    download(filename, data);
  };

  ViewPort.prototype.renderSVGContext =
  /*#__PURE__*/
  function () {
    var _ref4 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4(context, offset) {
      var str, genomicStateIndex, id, bbox, yScrollDelta, dx, dy, _this$$viewport$get$g, width, height, referenceFrame, bpStart, bpPerPixel, drawConfig, features;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              str = this.trackView.track.name || this.trackView.track.id;
              str = str.replace(/\W/g, '');
              genomicStateIndex = this.browser.genomicStateList.indexOf(this.genomicState);
              id = str.toLowerCase() + '_genomic_state_index_' + genomicStateIndex; // If present, paint axis canvas. Only in first multi-locus panel.

              if (0 === genomicStateIndex && typeof this.trackView.track.paintAxis === 'function') {
                bbox = this.trackView.controlCanvas.getBoundingClientRect();
                context.addTrackGroupWithTranslationAndClipRect(id + '_axis', offset.deltaX - bbox.width, offset.deltaY, bbox.width, bbox.height, 0);
                context.save();
                this.trackView.track.paintAxis(context, bbox.width, bbox.height);
                context.restore();
              }

              yScrollDelta = $(this.contentDiv).position().top;
              dx = offset.deltaX + genomicStateIndex * context.multiLocusGap;
              dy = offset.deltaY + yScrollDelta;
              _this$$viewport$get$g = this.$viewport.get(0).getBoundingClientRect(), width = _this$$viewport$get$g.width, height = _this$$viewport$get$g.height;
              context.addTrackGroupWithTranslationAndClipRect(id, dx, dy, width, height, -yScrollDelta);
              referenceFrame = this.genomicState.referenceFrame;
              bpStart = referenceFrame.start, bpPerPixel = referenceFrame.bpPerPixel;
              context.save();
              drawConfig = {
                context: context,
                viewport: this,
                referenceFrame: referenceFrame,
                genomicState: this.genomicState,
                pixelWidth: width,
                pixelHeight: height,
                viewportWidth: width,
                viewportContainerX: 0,
                viewportContainerWidth: this.browser.viewportContainerWidth(),
                bpStart: bpStart,
                bpEnd: bpStart + width * bpPerPixel,
                bpPerPixel: bpPerPixel,
                selection: this.selection
              };
              features = this.tile ? this.tile.features : [];
              draw.call(this, drawConfig, features, this.tile.roiFeatures);

              if (this.$trackLabel && true === this.browser.trackLabelsVisible) {
                renderTrackLabelSVG.call(this, context);
              }

              context.restore();

            case 18:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function (_x3, _x4) {
      return _ref4.apply(this, arguments);
    };
  }();

  ViewPort.prototype.saveSVG = function () {
    var width = this.$viewport.width();
    var height = this.$viewport.height();
    var context = new C2S({
      width: width,
      height: height,
      viewbox: {
        x: 0,
        y: -$(this.contentDiv).position().top,
        width: width,
        height: height
      }
    });
    var _this$genomicState$re = this.genomicState.referenceFrame,
        start = _this$genomicState$re.start,
        bpPerPixel = _this$genomicState$re.bpPerPixel;
    var drawConfiguration = {
      viewport: this,
      context: context,
      top: -$(this.contentDiv).position().top,
      pixelTop: 0,
      pixelWidth: width,
      pixelHeight: height,
      bpStart: start,
      bpEnd: start + width * bpPerPixel,
      bpPerPixel: bpPerPixel,
      referenceFrame: this.genomicState.referenceFrame,
      genomicState: this.genomicState,
      selection: this.selection,
      viewportWidth: width,
      viewportContainerX: 0,
      viewportContainerWidth: this.browser.viewportContainerWidth()
    };
    draw.call(this, drawConfiguration, this.tile.features);

    if (this.$trackLabel && true === this.browser.trackLabelsVisible) {
      renderTrackLabelSVG.call(this, context);
    }

    var svg = drawConfiguration.context.getSerializedSvg(true);
    var data = URL.createObjectURL(new Blob([svg], {
      type: "application/octet-stream"
    }));
    var str = this.$trackLabel ? this.$trackLabel.text() : this.trackView.track.id;
    var filename = str + ".svg";
    download(filename, data);
  };

  function renderTrackLabelSVG(context) {
    var _relativeDOMBBox = relativeDOMBBox(this.$viewport.get(0), this.$trackLabel.get(0)),
        x = _relativeDOMBBox.x,
        y = _relativeDOMBBox.y,
        width = _relativeDOMBBox.width,
        height = _relativeDOMBBox.height;

    var _context$measureText = context.measureText(this.$trackLabel.text()),
        stringWidth = _context$measureText.width;

    context.fillStyle = "white";
    context.fillRect(x, y, width, height);
    context.font = "12px Arial";
    context.fillStyle = 'rgb(68, 68, 68)';
    var dx = 0.25 * (width - stringWidth);
    var dy = 0.7 * (height - 12);
    context.fillText(this.$trackLabel.text(), x + dx, y + height - dy);
    context.strokeStyle = 'rgb(68, 68, 68)';
    context.strokeRect(x, y, width, height);
  }
  /**
   * Called when the associated track is removed.  Do any needed cleanup here.
   */


  ViewPort.prototype.dispose = function () {
    var self = this;

    if (this.popover) {
      this.popover.$popover.off();
      this.popover.$popover.empty();
      this.popover.$popover.remove();
    }

    $(this.canvas).off();
    $(this.canvas).empty();
    $(this.contentDiv).off();
    $(this.contentDiv).empty();
    this.$viewport.off();
    this.$viewport.empty(); // Null out all properties -- this should not be neccessary, but just in case there is a
    // reference to self somewhere we want to free memory.

    Object.keys(this).forEach(function (key, i, list) {
      self[key] = undefined;
    });
  };

  ViewPort.prototype.getCachedFeatures = function () {
    return this.tile ? this.tile.features : [];
  };

  var Tile = function Tile(chr, tileStart, tileEnd, bpPerPixel, features, roiFeatures) {
    this.chr = chr;
    this.startBP = tileStart;
    this.endBP = tileEnd;
    this.bpPerPixel = bpPerPixel;
    this.features = features;
    this.roiFeatures = roiFeatures;
  };

  Tile.prototype.containsRange = function (chr, start, end, bpPerPixel) {
    return this.bpPerPixel === bpPerPixel && start >= this.startBP && end <= this.endBP && chr === this.chr;
  };

  Tile.prototype.overlapsRange = function (chr, start, end) {
    return this.chr === chr && end >= this.startBP && start <= this.endBP;
  };

  function addMouseHandlers() {
    var self = this;
    var browser = this.browser;
    var mouseDownCoords;
    var popupTimerID;
    var lastClickTime = 0;
    this.$viewport.on("contextmenu", function (e) {
      // Ignore if we are doing a drag.  This can happen with touch events.
      if (self.browser.isDragging) {
        return false;
      }

      var clickState = createClickState(e, self);

      if (undefined === clickState) {
        return false;
      }

      e.preventDefault(); // Track specific items

      var menuItems = [];

      if (typeof self.trackView.track.contextMenuItemList === "function") {
        menuItems = self.trackView.track.contextMenuItemList(clickState);
      } // Add items common to all tracks


      if (menuItems.length > 0) {
        menuItems.push({
          label: $('<HR>')
        });
      }

      menuItems.push({
        label: 'Save Image (PNG)',
        click: function click() {
          self.saveImage();
        }
      });
      menuItems.push({
        label: 'Save Image (SVG)',
        click: function click() {
          self.saveSVG();
        }
      });
      if (self.popover) self.popover.presentTrackContextMenu(e, menuItems);
    });
    /**
     * Mouse click down,  notify browser for potential drag (pan), and record position for potential click.
     */

    this.$viewport.on('mousedown', function (e) {
      self.enableClick = true;
      browser.mouseDownOnViewport(e, self);
      mouseDownCoords = pageCoordinates(e);
    });
    this.$viewport.on('touchstart', function (e) {
      self.enableClick = true;
      browser.mouseDownOnViewport(e, self);
      mouseDownCoords = pageCoordinates(e);
    });
    /**
     * Mouse is released.  Ignore if this is a context menu click, or the end of a drag action.   If neither of
     * those, it is a click.
     */

    this.$viewport.on('mouseup', handleMouseUp);
    this.$viewport.on('touchend', handleMouseUp);
    this.$viewport.on('click', function (e) {
      if (self.enableClick) {
        handleClick(e);
      }
    });

    function handleMouseUp(e) {
      // Any mouse up cancels drag and scrolling
      if (self.browser.isDragging || self.browser.isScrolling) {
        self.browser.cancelTrackPan();
        e.preventDefault();
        e.stopPropagation();
        self.enableClick = false; // Until next mouse down

        return;
      }

      self.browser.cancelTrackPan();
      self.browser.endTrackDrag();
    }

    function handleClick(e) {
      if (3 === e.which || e.ctrlKey) {
        return;
      } // Close any currently open popups


      $('.igv-popover').hide();

      if (browser.isDragging || browser.isScrolling) {
        return;
      } // // Interpret mouseDown + mouseUp < 5 pixels as a click.
      // if(!mouseDownCoords) {
      //     return;
      // }
      // const coords = pageCoordinates(e);
      // const dx = coords.x - mouseDownCoords.x;
      // const dy = coords.y - mouseDownCoords.y;
      // const dist2 = dx*dx + dy*dy;
      // if(dist2 > 25) {
      //     mouseDownCoords = undefined;
      //     return;
      // }
      // Treat as a mouse click, its either a single or double click.
      // Handle here and stop propogation / default


      e.preventDefault();
      e.stopPropagation();
      var mouseX = translateMouseCoordinates(e, self.$viewport.get(0)).x;
      var mouseXCanvas = translateMouseCoordinates(e, self.canvas).x;
      var referenceFrame = self.genomicState.referenceFrame;
      var xBP = Math.floor(referenceFrame.start + referenceFrame.toBP(mouseXCanvas));
      var time = Date.now();

      if (time - lastClickTime < browser.constants.doubleClickDelay) {
        // double-click
        if (popupTimerID) {
          window.clearTimeout(popupTimerID);
          popupTimerID = undefined;
        }

        var centerBP = Math.round(referenceFrame.start + referenceFrame.toBP(mouseX));
        var string;

        if ('all' === referenceFrame.chrName.toLowerCase()) {
          var chr = browser.genome.getChromosomeCoordinate(centerBP).chr;

          if (1 === browser.genomicStateList.length) {
            string = chr;
          } else {
            var loci = browser.genomicStateList.map(function (g) {
              return g.locusSearchString;
            });
            loci[browser.genomicStateList.indexOf(self.genomicState)] = chr;
            string = loci.join(' ');
          }

          browser.search(string);
        } else {
          browser.zoomWithScaleFactor(0.5, centerBP, self);
        }
      } else {
        // single-click
        if (e.shiftKey && typeof self.trackView.track.shiftClick === "function") {
          self.trackView.track.shiftClick(xBP, e);
        } else if (typeof self.trackView.track.popupData === "function") {
          popupTimerID = setTimeout(function () {
            var content = getPopupContent(e, self);

            if (content) {
              var page = pageCoordinates(e);
              self.popover.presentTrackContent(page.x, page.y, content);
            }

            clearTimeout(popupTimerID);
            popupTimerID = undefined;
          }, browser.constants.doubleClickDelay);
        }
      }

      lastClickTime = time;
    }

    function createClickState(e, viewport) {
      var referenceFrame = viewport.genomicState.referenceFrame;
      var viewportCoords = translateMouseCoordinates(e, viewport.contentDiv);
      var canvasCoords = translateMouseCoordinates(e, viewport.canvas);
      var genomicLocation = referenceFrame.start + referenceFrame.toBP(viewportCoords.x);

      if (undefined === genomicLocation || null === viewport.tile) {
        return undefined;
      }

      return {
        viewport: viewport,
        referenceFrame: referenceFrame,
        genomicLocation: genomicLocation,
        x: viewportCoords.x,
        y: viewportCoords.y,
        canvasX: canvasCoords.x,
        canvasY: canvasCoords.y
      };
    }
    /**
     * Return markup for popup info window
     *
     * @param e
     * @param viewport
     * @returns {*}
     */


    function getPopupContent(e, viewport) {
      var clickState = createClickState(e, viewport);

      if (undefined === clickState) {
        return;
      }

      var track = viewport.trackView.track;
      var dataList = track.popupData(clickState);
      var popupClickHandlerResult = browser.fireEvent('trackclick', [track, dataList]);
      var content;

      if (undefined === popupClickHandlerResult || true === popupClickHandlerResult) {
        // Indicates handler did not handle the result, or the handler wishes default behavior to occur
        if (dataList && dataList.length > 0) {
          content = formatPopoverText(dataList);
        }
      } else if (typeof popupClickHandlerResult === 'string') {
        content = popupClickHandlerResult;
      }

      return content;
    }
    /**
     * Format markup for popover text from an array of name value pairs [{name, value}]
     */


    function formatPopoverText(nameValueArray) {
      var markup = "<table class=\"igv-popover-table\">";
      nameValueArray.forEach(function (nameValue) {
        if (nameValue.name) {
          markup += "<tr><td class=\"igv-popover-td\">" + "<div class=\"igv-popover-name-value\">" + "<span class=\"igv-popover-name\">" + nameValue.name + "</span>" + "<span class=\"igv-popover-value\">" + nameValue.value + "</span>" + "</div>" + "</td></tr>";
        } else {
          // not a name/value pair
          markup += "<tr><td>" + nameValue.toString() + "</td></tr>";
        }
      });
      markup += "</table>";
      return markup;
    }
  }

  function getFeatures(_x5, _x6, _x7, _x8) {
    return _getFeatures.apply(this, arguments);
  }

  function _getFeatures() {
    _getFeatures = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee5(chr, start, end, bpPerPixel) {
      var track, features;
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              track = this.trackView.track;

              if (!(this.tile && this.tile.containsRange(chr, start, end, bpPerPixel))) {
                _context5.next = 5;
                break;
              }

              return _context5.abrupt("return", this.tile.features);

            case 5:
              if (!(typeof track.getFeatures === "function")) {
                _context5.next = 14;
                break;
              }

              _context5.next = 8;
              return track.getFeatures(chr, start, end, bpPerPixel, this);

            case 8:
              features = _context5.sent;
              this.cachedFeatures = features; // TODO -- associate with "tile"

              this.checkContentHeight();
              return _context5.abrupt("return", features);

            case 14:
              return _context5.abrupt("return", undefined);

            case 15:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this);
    }));
    return _getFeatures.apply(this, arguments);
  }

  ViewPort.prototype.checkContentHeight = function () {
    var track = this.trackView.track;

    if ("FILL" === track.displayMode) {
      this.setContentHeight(this.$viewport.height());
    } else if (typeof track.computePixelHeight === 'function') {
      var features = this.cachedFeatures;

      if (features) {
        var requiredContentHeight = track.computePixelHeight(features);
        var currentContentHeight = $(this.contentDiv).height();

        if (requiredContentHeight !== currentContentHeight) {
          this.setContentHeight(requiredContentHeight);
        }
      }
    }
  };
  /**
   * Merge 2 arrays.  a and/or b can be undefined.  If both are undefined, return undefined
   * @param a An array or undefined
   * @param b An array or undefined
   */


  function mergeArrays(a, b) {
    if (a && b) return a.concat(b);else if (a) return a;else return b;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var BLACK = 1;
  var RED = 2;
  var NIL = {};
  NIL.color = BLACK;
  NIL.parent = NIL;
  NIL.left = NIL;
  NIL.right = NIL;

  var IntervalTree = function IntervalTree() {
    this.root = NIL;
  };

  IntervalTree.prototype.insert = function (start, end, value) {
    var interval = new Interval(start, end, value);
    var x = new Node(interval);
    this.treeInsert(x);
    x.color = RED;

    while (x !== this.root && x.parent.color === RED) {
      if (x.parent === x.parent.parent.left) {
        var y = x.parent.parent.right;

        if (y.color === RED) {
          x.parent.color = BLACK;
          y.color = BLACK;
          x.parent.parent.color = RED;
          x = x.parent.parent;
        } else {
          if (x === x.parent.right) {
            x = x.parent;
            leftRotate.call(this, x);
          }

          x.parent.color = BLACK;
          x.parent.parent.color = RED;
          rightRotate.call(this, x.parent.parent);
        }
      } else {
        var _y = x.parent.parent.left;

        if (_y.color === RED) {
          x.parent.color = BLACK;
          _y.color = BLACK;
          x.parent.parent.color = RED;
          x = x.parent.parent;
        } else {
          if (x === x.parent.left) {
            x = x.parent;
            rightRotate.call(this, x);
          }

          x.parent.color = BLACK;
          x.parent.parent.color = RED;
          leftRotate.call(this, x.parent.parent);
        }
      }
    }

    this.root.color = BLACK;
  };
  /**
   *
   * @param start - query interval
   * @param end - query interval
   * @returns Array of all intervals overlapping the query region
   */


  IntervalTree.prototype.findOverlapping = function (start, end) {
    var searchInterval = new Interval(start, end, 0);
    if (this.root === NIL) return [];
    var intervals = searchAll.call(this, searchInterval, this.root, []);

    if (intervals.length > 1) {
      intervals.sort(function (i1, i2) {
        return i1.low - i2.low;
      });
    }

    return intervals;
  };
  /**
   * Dump info on intervals to console.  For debugging.
   */


  IntervalTree.prototype.logIntervals = function () {
    logNode(this.root);

    function logNode(node, indent) {
      if (node.left !== NIL) logNode(node.left);
      if (node.right !== NIL) logNode(node.right);
    }
  };

  IntervalTree.prototype.mapIntervals = function (func) {
    applyInterval(this.root);

    function applyInterval(node) {
      func(node.interval);
      if (node.left !== NIL) applyInterval(node.left);
      if (node.right !== NIL) applyInterval(node.right);
    }
  };

  function searchAll(interval, node, results) {
    if (node.interval.overlaps(interval)) {
      results.push(node.interval);
    }

    if (node.left !== NIL && node.left.max >= interval.low) {
      searchAll.call(this, interval, node.left, results);
    }

    if (node.right !== NIL && node.right.min <= interval.high) {
      searchAll.call(this, interval, node.right, results);
    }

    return results;
  }

  function leftRotate(x) {
    var y = x.right;
    x.right = y.left;

    if (y.left !== NIL) {
      y.left.parent = x;
    }

    y.parent = x.parent;

    if (x.parent === NIL) {
      this.root = y;
    } else {
      if (x.parent.left === x) {
        x.parent.left = y;
      } else {
        x.parent.right = y;
      }
    }

    y.left = x;
    x.parent = y;
    applyUpdate.call(this, x); // no need to apply update on y, since it'll y is an ancestor
    // of x, and will be touched by applyUpdate().
  }

  function rightRotate(x) {
    var y = x.left;
    x.left = y.right;

    if (y.right !== NIL) {
      y.right.parent = x;
    }

    y.parent = x.parent;

    if (x.parent === NIL) {
      this.root = y;
    } else {
      if (x.parent.right === x) {
        x.parent.right = y;
      } else {
        x.parent.left = y;
      }
    }

    y.right = x;
    x.parent = y;
    applyUpdate.call(this, x); // no need to apply update on y, since it'll y is an ancestor
    // of x, and will be touched by applyUpdate().
  }
  /**
   * Note:  Does not maintain RB constraints,  this is done post insert
   *
   * @param x  a Node
   */


  IntervalTree.prototype.treeInsert = function (x) {
    var node = this.root;
    var y = NIL;

    while (node !== NIL) {
      y = node;

      if (x.interval.low <= node.interval.low) {
        node = node.left;
      } else {
        node = node.right;
      }
    }

    x.parent = y;

    if (y === NIL) {
      this.root = x;
      x.left = x.right = NIL;
    } else {
      if (x.interval.low <= y.interval.low) {
        y.left = x;
      } else {
        y.right = x;
      }
    }

    applyUpdate.call(this, x);
  }; // Applies the statistic update on the node and its ancestors.


  function applyUpdate(node) {
    while (node !== NIL) {
      var nodeMax = node.left.max > node.right.max ? node.left.max : node.right.max;
      var intervalHigh = node.interval.high;
      node.max = nodeMax > intervalHigh ? nodeMax : intervalHigh;
      var nodeMin = node.left.min < node.right.min ? node.left.min : node.right.min;
      var intervalLow = node.interval.low;
      node.min = nodeMin < intervalLow ? nodeMin : intervalLow;
      node = node.parent;
    }
  }

  function Interval(low, high, value) {
    this.low = low;
    this.high = high;
    this.value = value;
  }

  Interval.prototype.equals = function (other) {
    if (!other) {
      return false;
    }

    if (this === other) {
      return true;
    }

    return this.low === other.low && this.high === other.high;
  };

  Interval.prototype.compareTo = function (other) {
    if (this.low < other.low) return -1;
    if (this.low > other.low) return 1;
    if (this.high < other.high) return -1;
    if (this.high > other.high) return 1;
    return 0;
  };
  /**
   * Returns true if this interval overlaps the other.
   */


  Interval.prototype.overlaps = function (other) {
    try {
      return this.low <= other.high && other.low <= this.high;
    } catch (e) {
      //alert(e);
      Alert.presentAlert(e, undefined);
    }
  };

  function Node(interval) {
    this.parent = NIL;
    this.left = NIL;
    this.right = NIL;
    this.interval = interval;
    this.color = RED;
  } //

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var FeatureUtils = {
    packFeatures: function packFeatures(features, maxRows, sorted) {
      var start;
      var end;
      if (!features) return;
      maxRows = maxRows || 10000;

      if (!sorted) {
        features.sort(function (a, b) {
          return a.start - b.start;
        });
      }

      if (features.length === 0) {
        return [];
      } else {
        var bucketList = [],
            allocatedCount = 0,
            lastAllocatedCount = 0,
            nextStart,
            row,
            index,
            bucket,
            feature,
            gap = 2,
            bucketStart;
        start = features[0].start;
        end = features[features.length - 1].start;
        bucketStart = Math.max(start, features[0].start);
        nextStart = bucketStart;
        features.forEach(function (alignment) {
          var buckListIndex = Math.max(0, alignment.start - bucketStart);

          if (bucketList[buckListIndex] === undefined) {
            bucketList[buckListIndex] = [];
          }

          bucketList[buckListIndex].push(alignment);
        });
        row = 0;

        while (allocatedCount < features.length && row <= maxRows) {
          while (nextStart <= end) {
            bucket = undefined;

            while (!bucket && nextStart <= end) {
              index = nextStart - bucketStart;

              if (bucketList[index] === undefined) {
                ++nextStart; // No buckets at this index
              } else {
                bucket = bucketList[index];
              }
            } // while (bucket)


            if (!bucket) {
              break;
            }

            feature = bucket.pop();

            if (0 === bucket.length) {
              bucketList[index] = undefined;
            }

            feature.row = row;
            nextStart = feature.end + gap;
            ++allocatedCount;
          } // while (nextStart)


          row++;
          nextStart = bucketStart;
          if (allocatedCount === lastAllocatedCount) break; // Protect from infinite loops

          lastAllocatedCount = allocatedCount;
        } // while (allocatedCount)

      }
    },

    /**
     * Find features overlapping the given interval.  It is assumed that all features share the same chromosome.
     *
     * TODO -- significant overlap with FeatureCache, refactor to combine
     *
     * @param featureList
     * @param start
     * @param end
     */
    findOverlapping: function findOverlapping(featureList, start, end) {
      if (!featureList || featureList.length === 0) {
        return [];
      } else {
        var tree = buildIntervalTree(featureList);
        var intervals = tree.findOverlapping(start, end);

        if (intervals.length === 0) {
          return [];
        } else {
          // Trim the list of features in the intervals to those
          // overlapping the requested range.
          // Assumption: features are sorted by start position
          featureList = [];
          intervals.forEach(function (interval) {
            var intervalFeatures = interval.value;
            var len = intervalFeatures.length;

            for (var i = 0; i < len; i++) {
              var feature = intervalFeatures[i];
              if (feature.start > end) break;else if (feature.end > start) {
                featureList.push(feature);
              }
            }
          });
          featureList.sort(function (a, b) {
            return a.start - b.start;
          });
          return featureList;
        }
      }
    }
  };
  /**
   * Build an interval tree from the feature list for fast interval based queries.   We lump features in groups
   * of 10, or total size / 100,   to reduce size of the tree.
   *
   * @param featureList
   */

  function buildIntervalTree(featureList) {
    var tree = new IntervalTree();
    var len = featureList.length;
    var chunkSize = Math.max(10, Math.round(len / 100));
    featureList.sort(function (f1, f2) {
      return f1.start === f2.start ? 0 : f1.start > f2.start ? 1 : -1;
    });

    var _loop = function _loop(i) {
      var e = Math.min(len, i + chunkSize);
      var subArray = featureList.slice(i, e);
      var iStart = subArray[0].start;
      var iEnd = iStart;
      subArray.forEach(function (feature) {
        iEnd = Math.max(iEnd, feature.end);
      });
      tree.insert(iStart, iEnd, subArray);
    };

    for (var i = 0; i < len; i += chunkSize) {
      _loop(i);
    }

    return tree;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of ctx software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and ctx permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var IGVGraphics = {
    setProperties: function setProperties(ctx, properties) {
      for (var key in properties) {
        if (properties.hasOwnProperty(key)) {
          var value = properties[key];
          ctx[key] = value;
        }
      }
    },
    strokeLine: function strokeLine(ctx, x1, y1, x2, y2, properties) {
      x1 = Math.floor(x1) + 0.5;
      y1 = Math.floor(y1) + 0.5;
      x2 = Math.floor(x2) + 0.5;
      y2 = Math.floor(y2) + 0.5;

      if (properties) {
        ctx.save();
        IGVGraphics.setProperties(ctx, properties);
      }

      ctx.beginPath();
      ctx.moveTo(x1, y1);
      ctx.lineTo(x2, y2);
      ctx.stroke();
      if (properties) ctx.restore();
    },
    fillRect: function fillRect(ctx, x, y, w, h, properties) {
      x = Math.round(x);
      y = Math.round(y);

      if (properties) {
        ctx.save();
        IGVGraphics.setProperties(ctx, properties);
      }

      ctx.fillRect(x, y, w, h);
      if (properties) ctx.restore();
    },
    fillPolygon: function fillPolygon(ctx, x, y, properties) {
      if (properties) {
        ctx.save();
        IGVGraphics.setProperties(ctx, properties);
      }

      doPath(ctx, x, y);
      ctx.fill();
      if (properties) ctx.restore();
    },
    strokePolygon: function strokePolygon(ctx, x, y, properties) {
      if (properties) {
        ctx.save();
        IGVGraphics.setProperties(ctx, properties);
      }

      doPath(ctx, x, y);
      ctx.stroke();
      if (properties) ctx.restore();
    },
    fillText: function fillText(ctx, text, x, y, properties, transforms) {
      if (properties || transforms) {
        ctx.save();
      }

      if (properties) {
        IGVGraphics.setProperties(ctx, properties);
      }

      if (transforms) {
        // Slow path with context saving and extra translate
        ctx.translate(x, y);

        for (var transform in transforms) {
          var value = transforms[transform]; // TODO: Add error checking for robustness

          if (transform === 'translate') {
            ctx.translate(value['x'], value['y']);
          }

          if (transform === 'rotate') {
            ctx.rotate(value['angle'] * Math.PI / 180);
          }
        }

        ctx.fillText(text, 0, 0);
      } else {
        ctx.fillText(text, x, y);
      }

      if (properties || transforms) ctx.restore();
    },
    strokeText: function strokeText(ctx, text, x, y, properties, transforms) {
      if (properties || transforms) {
        ctx.save();
      }

      if (properties) {
        IGVGraphics.setProperties(ctx, properties);
      }

      if (transforms) {
        ctx.translate(x, y);

        for (var transform in transforms) {
          var value = transforms[transform]; // TODO: Add error checking for robustness

          if (transform === 'translate') {
            ctx.translate(value['x'], value['y']);
          }

          if (transform === 'rotate') {
            ctx.rotate(value['angle'] * Math.PI / 180);
          }
        }

        ctx.strokeText(text, 0, 0);
      } else {
        ctx.strokeText(text, x, y);
      }

      if (properties || transforms) ctx.restore();
    },
    strokeCircle: function strokeCircle(ctx, x, y, radius) {
      ctx.beginPath();
      ctx.arc(x, y, radius, 0, 2 * Math.PI);
      ctx.stroke();
    },
    fillCircle: function fillCircle(ctx, x, y, radius) {
      ctx.beginPath();
      ctx.arc(x, y, radius, 0, 2 * Math.PI);
      ctx.fill();
    },
    drawArrowhead: function drawArrowhead(ctx, x, y, size, lineWidth) {
      ctx.save();

      if (!size) {
        size = 5;
      }

      if (lineWidth) {
        ctx.lineWidth = lineWidth;
      }

      ctx.beginPath();
      ctx.moveTo(x, y - size / 2);
      ctx.lineTo(x, y + size / 2);
      ctx.lineTo(x + size, y);
      ctx.lineTo(x, y - size / 2);
      ctx.closePath();
      ctx.fill();
      ctx.restore();
    },
    dashedLine: function dashedLine(ctx, x1, y1, x2, y2, dashLen, properties) {
      x1 = Math.round(x1);
      y1 = Math.round(y1);
      x2 = Math.round(x2);
      y2 = Math.round(y2);
      dashLen = Math.round(dashLen);

      if (properties) {
        ctx.save();
        IGVGraphics.setProperties(ctx, properties);
      }

      if (dashLen === undefined) dashLen = 2;
      ctx.moveTo(x1, y1);
      var dX = x2 - x1;
      var dY = y2 - y1;
      var dashes = Math.floor(Math.sqrt(dX * dX + dY * dY) / dashLen);
      var dashX = dX / dashes;
      var dashY = dY / dashes;
      var q = 0;

      while (q++ < dashes) {
        x1 += dashX;
        y1 += dashY;
        ctx[q % 2 === 0 ? 'moveTo' : 'lineTo'](x1, y1);
      }

      ctx[q % 2 === 0 ? 'moveTo' : 'lineTo'](x2, y2);
      if (properties) ctx.restore();
    },
    roundRect: function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
      if (typeof stroke == "undefined") {
        stroke = true;
      }

      if (typeof radius === "undefined") {
        radius = 5;
      }

      ctx.beginPath();
      ctx.moveTo(x + radius, y);
      ctx.lineTo(x + width - radius, y);
      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
      ctx.lineTo(x + width, y + height - radius);
      ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
      ctx.lineTo(x + radius, y + height);
      ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
      ctx.lineTo(x, y + radius);
      ctx.quadraticCurveTo(x, y, x + radius, y);
      ctx.closePath();

      if (stroke) {
        ctx.stroke();
      }

      if (fill) {
        ctx.fill();
      }
    },
    polygon: function polygon(ctx, x, y, fill, stroke) {
      if (typeof stroke == "undefined") {
        stroke = true;
      }

      ctx.beginPath();
      var len = x.length;
      ctx.moveTo(x[0], y[0]);

      for (var i = 1; i < len; i++) {
        ctx.lineTo(x[i], y[i]); // this.moveTo(x[i], y[i]);
      }

      ctx.closePath();

      if (stroke) {
        ctx.stroke();
      }

      if (fill) {
        ctx.fill();
      }
    }
  };

  function doPath(ctx, x, y) {
    var i,
        len = x.length;

    for (i = 0; i < len; i++) {
      x[i] = Math.round(x[i]);
      y[i] = Math.round(y[i]);
    }

    ctx.beginPath();
    ctx.moveTo(x[0], y[0]);

    for (i = 1; i < len; i++) {
      ctx.lineTo(x[i], y[i]);
    }

    ctx.closePath();
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var RulerTrack = function RulerTrack(browser) {
    this.browser = browser;
    this.height = 40;
    this.name = "";
    this.id = "ruler";
    this.disableButtons = true;
    this.ignoreTrackMenu = true;
    this.order = -Number.MAX_VALUE;
    this.removable = false;
    this.type = 'ruler';
  };

  RulerTrack.prototype.updateLocusLabel = function () {
    this.trackView.viewports.forEach(function (viewport) {
      var str;
      str = viewport.genomicState.referenceFrame.showLocus(viewport.$viewport.width()); // console.log('ruler update label - viewport ' + viewport.id + ' ' + str);

      viewport.$rulerLabel.text(str);
    });
  };

  RulerTrack.prototype.appendMultiPanelCloseButton = function ($viewport, genomicState) {
    var browser = this.browser;
    var $close;
    $viewport.addClass('igv-viewport-ruler');
    $close = $('<div class="igv-multi-locus-panel-close-container">');
    $viewport.append($close);
    $close.append(createIcon("times-circle"));
    $close.click(function (e) {
      browser.removeMultiLocusPanelWithGenomicState(genomicState, true);
    });
  };

  RulerTrack.prototype.getFeatures = function (chr, bpStart, bpEnd) {
    return Promise.resolve([]);
  };

  RulerTrack.prototype.computePixelHeight = function (ignore) {
    return this.height;
  };

  RulerTrack.prototype.draw = function (options) {
    if (GenomeUtils.isWholeGenomeView(options.referenceFrame)) {
      options.viewport.rulerSweeper.disableMouseHandlers();
      drawWholeGenome.call(this, options);
    } else {
      options.viewport.rulerSweeper.addMouseHandlers();
      var tickHeight = 6;
      var shim = 2;
      var pixelWidthBP = 1 + Math.floor(options.referenceFrame.toBP(options.pixelWidth));
      var tick = new Tick(pixelWidthBP, options);
      tick.drawTicks(options, tickHeight, shim, this.height);
      IGVGraphics.strokeLine(options.context, 0, this.height - shim, options.pixelWidth, this.height - shim);
    }
  };

  function drawWholeGenome(options) {
    options.context.save();
    IGVGraphics.fillRect(options.context, 0, 0, options.pixelWidth, options.pixelHeight, {
      'fillStyle': 'white'
    });
    var y = 0;
    var h = options.pixelHeight;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.browser.genome.wgChromosomeNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var name = _step.value;
        var xBP = this.browser.genome.getCumulativeOffset(name);
        var wBP = this.browser.genome.getChromosome(name).bpLength;
        var x = Math.round(xBP / options.bpPerPixel);
        var w = Math.round(wBP / options.bpPerPixel);
        renderChromosomeRect.call(this, options.context, x, y, w, h, name);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    options.context.restore();
  }

  function renderChromosomeRect(ctx, x, y, w, h, name) {
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    ctx.font = '12px sans-serif'; // IGVGraphics.fillRect(ctx, x, y, w, h, { 'fillStyle' : toggleColor(this.browser.genome.wgChromosomeNames.indexOf(name)) });

    IGVGraphics.strokeLine(ctx, x + w, y, x + w, y + h, {
      strokeStyle: IGVColor.greyScale(191)
    });
    var shortName = name.startsWith("chr") ? name.substring(3) : name;

    if (w > ctx.measureText(shortName).width) {
      IGVGraphics.fillText(ctx, shortName, x + w / 2, y + h / 2, {
        fillStyle: IGVColor.greyScale(68)
      });
    }
  }

  RulerTrack.prototype.supportsWholeGenome = function () {
    return true;
  };

  RulerTrack.prototype.dispose = function () {// do stuff
  };

  var Tick = function Tick(pixelWidthBP, options) {
    initialize.call(this, pixelWidthBP, options);

    function initialize(pixelWidthBP, options) {
      var numberOfZeroes, majorUnit, unitMultiplier, numberOfMajorTicks, str;
      var isSVGContext = options.context.isSVG || false;

      if (pixelWidthBP < 10) {
        set.call(this, 1, "bp", 1, isSVGContext);
      }

      numberOfZeroes = Math.floor(Math.log10(pixelWidthBP));

      if (numberOfZeroes > 9) {
        majorUnit = "gb";
        unitMultiplier = 1e9;
      } else if (numberOfZeroes > 6) {
        majorUnit = "mb";
        unitMultiplier = 1e6;
      } else if (numberOfZeroes > 3) {
        majorUnit = "kb";
        unitMultiplier = 1e3;
      } else {
        majorUnit = "bp";
        unitMultiplier = 1;
      }

      str = numberFormatter(Math.floor(pixelWidthBP / unitMultiplier)) + " " + majorUnit;
      this.labelWidthBP = Math.round(options.referenceFrame.toBP(options.context.measureText(str).width));
      numberOfMajorTicks = pixelWidthBP / Math.pow(10, numberOfZeroes - 1);

      if (numberOfMajorTicks < 25) {
        set.call(this, Math.pow(10, numberOfZeroes - 1), majorUnit, unitMultiplier, isSVGContext);
      } else {
        set.call(this, Math.pow(10, numberOfZeroes) / 2, majorUnit, unitMultiplier, isSVGContext);
      }
    }

    function set(majorTick, majorUnit, unitMultiplier, isSVGContext) {
      // reduce label frequency by half for SVG rendering
      this.majorTick = true === isSVGContext ? 2 * majorTick : majorTick;
      this.majorUnit = majorUnit;
      this.halfTick = majorTick / 2;
      this.unitMultiplier = unitMultiplier;
    }
  };

  Tick.prototype.drawTicks = function (options, tickHeight, shim, height) {
    var numberOfTicks, bp, pixel, label, labelWidth, labelX, numer, floored;
    numberOfTicks = Math.floor(options.bpStart / this.majorTick) - 1;
    labelWidth = 0;
    labelX = 0;
    pixel = 0;

    while (pixel < options.pixelWidth) {
      bp = Math.floor(numberOfTicks * this.majorTick);
      pixel = Math.round(options.referenceFrame.toPixels(bp - 1 - options.bpStart + 0.5));
      label = numberFormatter(Math.floor(bp / this.unitMultiplier)) + " " + this.majorUnit;
      labelWidth = options.context.measureText(label).width;
      labelX = Math.round(pixel - labelWidth / 2);
      IGVGraphics.fillText(options.context, label, labelX, height - tickHeight / 0.75);
      IGVGraphics.strokeLine(options.context, pixel, height - tickHeight, pixel, height - shim);
      ++numberOfTicks;
    }

    numberOfTicks = Math.floor(options.bpStart / this.halfTick) - 1;
    pixel = 0;

    while (pixel < options.pixelWidth) {
      bp = Math.floor(numberOfTicks * this.halfTick);
      pixel = Math.round(options.referenceFrame.toPixels(bp - 1 - options.bpStart + 0.5));
      numer = bp / this.unitMultiplier;
      floored = Math.floor(numer);

      if (numer === floored && this.majorTick / this.labelWidthBP > 8) {
        label = numberFormatter(Math.floor(numer)) + " " + this.majorUnit;
        labelWidth = options.context.measureText(label).width;
        labelX = pixel - labelWidth / 2;
        IGVGraphics.fillText(options.context, label, labelX, height - tickHeight / 0.75);
      }

      IGVGraphics.strokeLine(options.context, pixel, height - tickHeight, pixel, height - shim);
      ++numberOfTicks;
    }
  };

  Tick.prototype.description = function (blurb) {};

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var trackMenuItemListHelper$1 = MenuUtils.trackMenuItemListHelper;

  var TrackGearPopover = function TrackGearPopover($parent) {
    // popover container
    this.$popover = $('<div>', {
      class: 'igv-trackgear-popover'
    });
    $parent.append(this.$popover); // popover header

    var $popoverHeader = $('<div>', {
      class: 'igv-trackgear-popover-header'
    });
    this.$popover.append($popoverHeader);
    var self = this;
    attachDialogCloseHandlerWithParent($popoverHeader, function () {
      self.$popover.hide();
    });
    this.$popoverContent = $('<div>');
    this.$popover.append(this.$popoverContent);
    makeDraggable(this.$popover.get(0), $popoverHeader.get(0));
    $popoverHeader.on('click.track_gear_popover', function (e) {
      e.stopPropagation();
      e.preventDefault(); // absorb click to prevent it leaking through to parent DOM element
    });
  };

  TrackGearPopover.prototype.presentMenuList = function (dx, dy, list) {
    var self = this;

    if (list.length > 0) {
      this.$popoverContent.empty();
      list = trackMenuItemListHelper$1(list, self.$popover);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          if (item.init) {
            item.init();
          }

          var $e = item.object;

          if (0 === list.indexOf(item)) {
            $e.removeClass('igv-track-menu-border-top');
          }

          if ($e.hasClass('igv-track-menu-border-top') || $e.hasClass('igv-trackgear-popover-check-container')) {// do nothing
          } else if ($e.is('div')) {
            $e.addClass('igv-trackgear-popover-shim');
          }

          this.$popoverContent.append($e);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.$popover.css({
        left: dx + 'px',
        top: dy + 'px'
      });
      this.$popover.show();
    }
  };

  TrackGearPopover.prototype.dispose = function () {
    this.$popover.empty();
    this.$popoverContent.empty();
    Object.keys(this).forEach(function (key) {
      this[key] = undefined;
    });
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var GenericContainer = function GenericContainer(_ref) {
    var $parent = _ref.$parent,
        width = _ref.width,
        height = _ref.height,
        closeHandler = _ref.closeHandler;
    var self = this,
        $header;
    this.namespace = '.generic_container_' + guid();
    var $container = $('<div>', {
      class: 'igv-generic-container'
    });
    $parent.append($container);
    this.$container = $container;

    if (width) {
      this.$container.width(width);
    }

    if (height) {
      this.$container.height(height);
    }

    var bbox = $parent.get(0).getBoundingClientRect();
    this.origin = {
      x: bbox.x,
      y: bbox.y
    };
    this.$container.offset({
      left: this.origin.x,
      top: this.origin.y
    }); // header

    $header = $('<div>');
    this.$container.append($header); // close button

    var $div = $('<i>');
    $header.append($div);
    $div.append(createIcon("times"));
    $div.on('mousedown' + self.namespace, function (e) {
      e.stopPropagation();
    });
    $div.on('mouseup' + self.namespace, function (e) {
      e.stopPropagation();
    });
    $div.on('click' + self.namespace, function (e) {
      e.preventDefault();
      e.stopPropagation();
      closeHandler(e);
    });
    $div.on('touchend' + self.namespace, function (e) {
      e.preventDefault();
      e.stopPropagation();
      closeHandler(e);
    });
    makeDraggable(this.$container.get(0), $header.get(0));
  };

  var TrackView = function TrackView(browser, $container, track) {
    var self = this,
        width,
        $track;
    this.browser = browser;
    this.track = track;
    track.trackView = this;
    $track = $('<div class="igv-track-div">');
    this.trackDiv = $track.get(0);
    $container.append($track);
    this.namespace = '.trackview_' + guid();

    if (this.track instanceof RulerTrack) {
      this.trackDiv.dataset.rulerTrack = "rulerTrack";
    }

    if (track.height) {
      this.trackDiv.style.height = track.height + "px";
    }

    this.appendLeftHandGutter($(this.trackDiv)); // if (typeof track.paintAxis === 'function') {
    //     appendLeftHandGutter.call(this, $(this.trackDiv));
    // }

    this.$viewportContainer = $('<div class="igv-viewport-container">');
    $(this.trackDiv).append(this.$viewportContainer);
    this.viewports = [];
    width = this.browser.viewportContainerWidth() / this.browser.genomicStateList.length;
    browser.genomicStateList.forEach(function (genomicState) {
      var viewport;
      viewport = new ViewPort(self, self.$viewportContainer, genomicState, width);
      self.viewports.push(viewport);
    });
    this.decorateViewports();
    this.configureViewportContainer(this.$viewportContainer, this.viewports);

    if (true === this.track.ignoreTrackMenu) ; else {
      this.appendRightHandGutter($(this.trackDiv));
    }

    if (this.track instanceof RulerTrack) ; else {
      attachDragWidget.call(this, $(this.trackDiv), this.$viewportContainer);
    }

    if ("sequence" === this.track.type) ; else if (this.track instanceof RulerTrack) ; else {
      this.createColorPicker();
    }
  };

  TrackView.prototype.renderSVGContext = function (context, offset) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.viewports[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var viewport = _step.value;
        var index = viewport.browser.genomicStateList.indexOf(viewport.genomicState);
        var bbox = viewport.$viewport.get(0).getBoundingClientRect();
        var o = {
          deltaX: offset.deltaX + index * viewport.$viewport.width(),
          deltaY: offset.deltaY + bbox.y
        };
        viewport.renderSVGContext(context, o);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  };

  TrackView.prototype.configureViewportContainer = function ($viewportContainer, viewports) {
    if ("hidden" === $viewportContainer.css("overflow-y")) {
      this.scrollbar = new TrackScrollbar($viewportContainer, viewports, this.browser.$root);
      $viewportContainer.append(this.scrollbar.$outerScroll);
    }

    return $viewportContainer;
  };

  TrackView.prototype.removeViewportWithLocusIndex = function (index) {
    this.viewports[index].$viewport.remove();
    this.viewports.splice(index, 1);
    this.decorateViewports();
  };

  TrackView.prototype.decorateViewports = function () {
    var self = this;
    this.viewports.forEach(function (viewport, index) {
      var $viewport;
      $viewport = viewport.$viewport;

      if (self.viewports.length > 1) {
        $viewport.find('.igv-multi-locus-panel-close-container').show();
        $viewport.find('.igv-multi-locus-panel-label-div').show();
      } else {
        $viewport.find('.igv-multi-locus-panel-close-container').hide();
        $viewport.find('.igv-multi-locus-panel-label-div').hide();
      }

      if (index < self.viewports.length && 1 + index !== self.viewports.length) {
        $viewport.addClass('igv-viewport-div-border-right');
      } else {
        $viewport.removeClass('igv-viewport-div-border-right');
      }
    });
  };

  TrackView.prototype.appendLeftHandGutter = function ($parent) {
    var self = this,
        $leftHandGutter,
        $canvas;
    $leftHandGutter = $('<div class="igv-left-hand-gutter">');
    this.leftHandGutter = $leftHandGutter[0];
    $parent.append($leftHandGutter);

    if (typeof this.track.paintAxis === 'function') {
      if (this.track.dataRange) {
        $leftHandGutter.click(function (e) {
          self.browser.dataRangeDialog.configure({
            trackView: self
          });
          self.browser.dataRangeDialog.present($(self.trackDiv));
        });
        $leftHandGutter.addClass('igv-clickable');
      }

      $canvas = $('<canvas class ="igv-track-control-canvas">');
      $leftHandGutter.append($canvas);
      this.controlCanvas = $canvas.get(0);
      resizeControlCanvas.call(this, $leftHandGutter.outerWidth(), $leftHandGutter.outerHeight());
    }
  };

  TrackView.prototype.appendRightHandGutter = function ($parent) {
    var $div = $('<div class="igv-right-hand-gutter">');
    $parent.append($div);
    createTrackGearPopover.call(this, $div);
  }; // Free function for juicebox -- do not attach to prototype!!!


  function createTrackGearPopover($parent) {
    var $cogContainer = $("<div>", {
      class: 'igv-trackgear-container'
    });
    $parent.append($cogContainer);
    $cogContainer.append(createIcon('cog'));
    this.trackGearPopover = new TrackGearPopover($parent);
    this.trackGearPopover.$popover.hide();
    var self = this;
    $cogContainer.click(function (e) {
      e.preventDefault();
      e.stopPropagation();
      self.trackGearPopover.presentMenuList(-self.trackGearPopover.$popover.width(), 0, MenuUtils.trackMenuItemList(self));
    });
  }

  function resizeControlCanvas(width, height) {
    var devicePixelRatio = window.devicePixelRatio;

    if (this.leftHandGutter) {
      if (this.controlCanvas) {
        $(this.controlCanvas).remove();
      }

      var $canvas = $('<canvas class ="igv-track-control-canvas">');
      this.controlCanvas = $canvas[0];
      $(this.leftHandGutter).append($canvas);
      this.controlCanvas.height = devicePixelRatio * height;
      this.controlCanvas.width = devicePixelRatio * width;
      this.controlCanvas.style.height = height + "px";
      this.controlCanvas.style.width = width + "px";
      this.controlCtx = this.controlCanvas.getContext("2d");
      this.controlCtx.scale(devicePixelRatio, devicePixelRatio);
    }
  }

  function attachDragWidget($track, $viewportContainer) {
    var self = this;
    var browser = this.browser;
    this.$trackDragScrim = $('<div class="igv-track-drag-scrim">');
    $viewportContainer.append(this.$trackDragScrim);
    this.$trackDragScrim.hide();
    self.$trackManipulationHandle = $('<div class="igv-track-manipulation-handle">');
    $track.append(self.$trackManipulationHandle);
    self.$trackManipulationHandle.on('mousedown', function (e) {
      e.preventDefault();
      e.stopPropagation();
      self.$trackDragScrim.show();
      browser.startTrackDrag(self);
    });
    self.$trackManipulationHandle.on('mouseup', function (e) {
      e.preventDefault();
      e.stopPropagation();
      browser.endTrackDrag();
      self.$trackDragScrim.hide();
    });
    $track.on('mouseenter', function (e) {
      if (browser.dragTrack) {
        e.preventDefault();
        e.stopPropagation();
        browser.updateTrackDrag(self);
      }
    });
    self.$trackManipulationHandle.on('mouseleave', function (e) {
      if (!browser.dragTrack) {
        e.preventDefault();
        e.stopPropagation();
        self.$trackDragScrim.hide();
      }
    });
  }

  TrackView.prototype.dataRange = function () {
    return this.track.dataRange ? this.track.dataRange : undefined;
  };

  TrackView.prototype.setDataRange = function (min, max, autoscale) {
    if (min !== undefined) {
      this.track.dataRange.min = min;
      this.track.config.min = min;
    }

    if (max !== undefined) {
      this.track.dataRange.max = max;
      this.track.config.max = max;
    }

    this.track.autoscale = autoscale;
    this.track.config.autoScale = autoscale;
    this.repaintViews();
  };

  TrackView.prototype.setColor = function (color) {
    this.track.color = color;
    this.track.config.color = color;
    this.repaintViews(true);
  };

  TrackView.prototype.createColorPicker = function () {
    var _this = this;

    var self = this;
    var config = {
      $parent: $(this.trackDiv),
      width: 384,
      height: undefined,
      closeHandler: function closeHandler() {
        self.colorPicker.$container.hide();
      }
    };
    this.colorPicker = new GenericContainer(config);
    createColorSwatchSelector(this.colorPicker.$container, function (rgb) {
      return _this.setColor(rgb);
    }, this.track.color);
    self.colorPicker.$container.hide();
  };

  TrackView.prototype.presentColorPicker = function () {
    var bbox = this.trackDiv.getBoundingClientRect();
    this.colorPicker.origin = {
      x: bbox.x,
      y: 0
    };
    this.colorPicker.$container.offset({
      left: this.colorPicker.origin.x,
      top: this.colorPicker.origin.y
    });
    this.colorPicker.$container.show();
  };

  TrackView.prototype.setTrackHeight = function (newHeight, update, force) {
    if (!force) {
      if (this.track.minHeight) {
        newHeight = Math.max(this.track.minHeight, newHeight);
      }

      if (this.track.maxHeight) {
        newHeight = Math.min(this.track.maxHeight, newHeight);
      }
    }

    this.track.height = newHeight;
    this.track.config.height = newHeight;
    $(this.trackDiv).height(newHeight); // If the track does not manage its own content height set it here

    if (typeof this.track.computePixelHeight !== "function") {
      this.viewports.forEach(function (vp) {
        vp.setContentHeight(newHeight);
        if (vp.tile) vp.tile.invalidate = true;
      });
      this.repaintViews();
    }

    resizeControlCanvas.call(this, $(this.leftHandGutter).outerWidth(), newHeight);

    if (this.track.paintAxis) {
      this.track.paintAxis(this.controlCtx, $(this.controlCanvas).width(), $(this.controlCanvas).height());
    }

    if (this.scrollbar) {
      this.scrollbar.update();
    }
  };

  TrackView.prototype.isLoading = function () {
    for (var i = 0; i < this.viewports.length; i++) {
      if (this.viewports[i].isLoading()) return true;
    }
  };

  TrackView.prototype.resize = function () {
    var width;
    width = this.browser.viewportContainerWidth() / this.browser.genomicStateList.length;
    if (width === 0) return;
    this.viewports.forEach(function (viewport) {
      viewport.setWidth(width);
    });
    var $leftHandGutter = $(this.leftHandGutter);
    resizeControlCanvas.call(this, $leftHandGutter.outerWidth(), $leftHandGutter.outerHeight());
    this.updateViews(true);
  };
  /**
   * Repaint all viewports without loading any new data.   Use this for events that change visual aspect of data,
   * e.g. color, sort order, etc, but do not change the genomic state.
   */


  TrackView.prototype.repaintViews = function () {
    this.viewports.forEach(function (viewport) {
      viewport.repaint();
    });

    if (this.track.paintAxis) {
      this.track.paintAxis(this.controlCtx, $(this.controlCanvas).width(), $(this.controlCanvas).height());
    }
  };
  /**
   * Update viewports to reflect current genomic state, possibly loading additional data.
   */


  TrackView.prototype.updateViews =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(force) {
      var visibleViewports, rpV, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _vp3, isDragging, allFeatures, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, vp, referenceFrame, start, end, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _vp, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _vp2;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (this.browser && this.browser.genomicStateList) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              visibleViewports = this.viewports.filter(function (vp) {
                return vp.isVisible();
              });
              visibleViewports.forEach(function (viewport) {
                viewport.shift();
              }); // List of viewports that need reloading

              rpV = viewportsToReload.call(this, force);
              _iteratorNormalCompletion2 = true;
              _didIteratorError2 = false;
              _iteratorError2 = undefined;
              _context.prev = 8;
              _iterator2 = rpV[Symbol.iterator]();

            case 10:
              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                _context.next = 18;
                break;
              }

              _vp3 = _step2.value;
              _context.next = 14;
              return _vp3.loadFeatures();

            case 14:
              if (_vp3.tile && _vp3.tile.features && _vp3.tile.features.length === 0 && 'all' === _vp3.genomicState.referenceFrame.chrName) {
                _vp3.checkZoomIn();
              }

            case 15:
              _iteratorNormalCompletion2 = true;
              _context.next = 10;
              break;

            case 18:
              _context.next = 24;
              break;

            case 20:
              _context.prev = 20;
              _context.t0 = _context["catch"](8);
              _didIteratorError2 = true;
              _iteratorError2 = _context.t0;

            case 24:
              _context.prev = 24;
              _context.prev = 25;

              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }

            case 27:
              _context.prev = 27;

              if (!_didIteratorError2) {
                _context.next = 30;
                break;
              }

              throw _iteratorError2;

            case 30:
              return _context.finish(27);

            case 31:
              return _context.finish(24);

            case 32:
              isDragging = this.browser.isDragging;

              if (!(!isDragging && this.track.autoscale)) {
                _context.next = 55;
                break;
              }

              allFeatures = [];
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context.prev = 38;

              for (_iterator3 = visibleViewports[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                vp = _step3.value;
                referenceFrame = vp.genomicState.referenceFrame;
                start = referenceFrame.start;
                end = start + referenceFrame.toBP($(vp.contentDiv).width());

                if (vp.tile && vp.tile.features) {
                  allFeatures = allFeatures.concat(FeatureUtils.findOverlapping(vp.tile.features, start, end));
                }
              }

              _context.next = 46;
              break;

            case 42:
              _context.prev = 42;
              _context.t1 = _context["catch"](38);
              _didIteratorError3 = true;
              _iteratorError3 = _context.t1;

            case 46:
              _context.prev = 46;
              _context.prev = 47;

              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }

            case 49:
              _context.prev = 49;

              if (!_didIteratorError3) {
                _context.next = 52;
                break;
              }

              throw _iteratorError3;

            case 52:
              return _context.finish(49);

            case 53:
              return _context.finish(46);

            case 54:
              if (typeof this.track.doAutoscale === 'function') {
                this.track.doAutoscale(allFeatures);
              } else {
                this.track.dataRange = doAutoscale(allFeatures);
              }

            case 55:
              if (!(!isDragging && (this.track.autoscale || this.track.autoscaleGroup))) {
                _context.next = 77;
                break;
              }

              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context.prev = 59;

              for (_iterator4 = visibleViewports[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                _vp = _step4.value;

                _vp.repaint();
              }

              _context.next = 67;
              break;

            case 63:
              _context.prev = 63;
              _context.t2 = _context["catch"](59);
              _didIteratorError4 = true;
              _iteratorError4 = _context.t2;

            case 67:
              _context.prev = 67;
              _context.prev = 68;

              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                _iterator4.return();
              }

            case 70:
              _context.prev = 70;

              if (!_didIteratorError4) {
                _context.next = 73;
                break;
              }

              throw _iteratorError4;

            case 73:
              return _context.finish(70);

            case 74:
              return _context.finish(67);

            case 75:
              _context.next = 96;
              break;

            case 77:
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context.prev = 80;

              for (_iterator5 = rpV[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                _vp2 = _step5.value;

                _vp2.repaint();
              }

              _context.next = 88;
              break;

            case 84:
              _context.prev = 84;
              _context.t3 = _context["catch"](80);
              _didIteratorError5 = true;
              _iteratorError5 = _context.t3;

            case 88:
              _context.prev = 88;
              _context.prev = 89;

              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                _iterator5.return();
              }

            case 91:
              _context.prev = 91;

              if (!_didIteratorError5) {
                _context.next = 94;
                break;
              }

              throw _iteratorError5;

            case 94:
              return _context.finish(91);

            case 95:
              return _context.finish(88);

            case 96:
              adjustTrackHeight.call(this);

            case 97:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[8, 20, 24, 32], [25,, 27, 31], [38, 42, 46, 54], [47,, 49, 53], [59, 63, 67, 75], [68,, 70, 74], [80, 84, 88, 96], [89,, 91, 95]]);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Return a promise to get all in-view features.  Used for group autoscaling.
   */


  TrackView.prototype.getInViewFeatures =
  /*#__PURE__*/
  function () {
    var _ref2 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(force) {
      var rpV, promises, allFeatures, _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, vp, referenceFrame, start, end;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (this.browser && this.browser.genomicStateList) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return", []);

            case 2:
              // List of viewports that need reloading
              rpV = viewportsToReload.call(this, force);
              promises = rpV.map(function (vp) {
                return vp.loadFeatures();
              });
              _context2.next = 6;
              return Promise.all(promises);

            case 6:
              allFeatures = [];
              _iteratorNormalCompletion6 = true;
              _didIteratorError6 = false;
              _iteratorError6 = undefined;
              _context2.prev = 10;

              for (_iterator6 = this.viewports[Symbol.iterator](); !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
                vp = _step6.value;

                if (vp.tile && vp.tile.features) {
                  referenceFrame = vp.genomicState.referenceFrame;
                  start = referenceFrame.start;
                  end = start + referenceFrame.toBP($(vp.contentDiv).width());
                  allFeatures = allFeatures.concat(FeatureUtils.findOverlapping(vp.tile.features, start, end));
                }
              }

              _context2.next = 18;
              break;

            case 14:
              _context2.prev = 14;
              _context2.t0 = _context2["catch"](10);
              _didIteratorError6 = true;
              _iteratorError6 = _context2.t0;

            case 18:
              _context2.prev = 18;
              _context2.prev = 19;

              if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
                _iterator6.return();
              }

            case 21:
              _context2.prev = 21;

              if (!_didIteratorError6) {
                _context2.next = 24;
                break;
              }

              throw _iteratorError6;

            case 24:
              return _context2.finish(21);

            case 25:
              return _context2.finish(18);

            case 26:
              return _context2.abrupt("return", allFeatures);

            case 27:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[10, 14, 18, 26], [19,, 21, 25]]);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }();

  function viewportsToReload(force) {
    // List of viewports that need reloading
    var rpV = this.viewports.filter(function (viewport) {
      if (!viewport.isVisible()) {
        return false;
      }

      if (!viewport.checkZoomIn()) {
        return false;
      } else {
        var referenceFrame = viewport.genomicState.referenceFrame;
        var chr = referenceFrame.chrName;
        var start = referenceFrame.start;
        var end = start + referenceFrame.toBP($(viewport.contentDiv).width());
        var bpPerPixel = referenceFrame.bpPerPixel;
        return force || !viewport.tile || viewport.tile.invalidate || !viewport.tile.containsRange(chr, start, end, bpPerPixel);
      }
    });
    return rpV;
  }

  TrackView.prototype.checkContentHeight = function () {
    this.viewports.forEach(function (vp) {
      vp.checkContentHeight();
    });
    adjustTrackHeight.call(this);
  };

  function adjustTrackHeight() {
    var maxHeight = this.maxContentHeight();

    if (this.track.autoHeight) {
      this.setTrackHeight(maxHeight, false);
    } else if (this.track.paintAxis) {
      // Avoid duplication, paintAxis is already called in setTrackHeight
      this.track.paintAxis(this.controlCtx, $(this.controlCanvas).width(), $(this.controlCanvas).height());
    }

    if (this.scrollbar) {
      var currentTop = this.viewports[0].getContentTop();
      var newTop = Math.min(0, this.$viewportContainer.height() - minContentHeight(this.viewports));

      if (currentTop < newTop) {
        this.viewports.forEach(function (viewport) {
          $(viewport.contentDiv).css("top", newTop + "px");
        });
      }

      this.scrollbar.update();
    }
  }

  TrackView.prototype.maxContentHeight = function () {
    return maxContentHeight(this.viewports);
  };

  function maxContentHeight(viewports) {
    var heights = viewports.map(function (viewport) {
      return viewport.getContentHeight();
    });
    return Math.max.apply(Math, _toConsumableArray(heights));
  }

  function minContentHeight(viewports) {
    var heights = viewports.map(function (viewport) {
      return viewport.getContentHeight();
    });
    return Math.min.apply(Math, _toConsumableArray(heights));
  }
  /**
   * Do any cleanup here
   */


  TrackView.prototype.dispose = function () {
    var self = this;

    if (this.$trackManipulationHandle) {
      this.$trackManipulationHandle.off();
    }

    if (this.$innerScroll) {
      this.$innerScroll.off();
    }

    if (this.scrollbar) {
      this.scrollbar.dispose();
    }

    $(document).off(this.namespace);

    if (typeof this.track.dispose === "function") {
      this.track.dispose();
    }

    var track = this.track;

    if (typeof track.dispose === 'function') {
      track.dispose();
    }

    Object.keys(track).forEach(function (key) {
      track[key] = undefined;
    });
    this.viewports.forEach(function (viewport) {
      viewport.dispose();
    });

    Object.keys(this).forEach(function (key) {
      self[key] = undefined;
    });
  };

  TrackView.prototype.scrollBy = function (delta) {
    this.scrollbar.moveScrollerBy(delta);
  };

  var TrackScrollbar = function TrackScrollbar($viewportContainer, viewports, rootDiv) {
    var self = this;
    var lastY;
    var namespace = '.trackscrollbar' + guid();
    this.namespace = namespace;
    var $outerScroll = $('<div class="igv-scrollbar-outer-div">');
    this.$outerScroll = $outerScroll;
    this.$innerScroll = $('<div>');
    this.$outerScroll.append(this.$innerScroll);
    this.$viewportContainer = $viewportContainer;
    this.viewports = viewports;
    this.$innerScroll.on("mousedown", mouseDown);
    this.$innerScroll.on("click", function (event) {
      event.stopPropagation();
    });
    this.$outerScroll.on("click", function (event) {
      self.moveScrollerBy(event.offsetY - self.$innerScroll.height() / 2);
      event.stopPropagation();
    });

    function mouseDown(event) {
      event.preventDefault();
      var page = pageCoordinates(event);
      lastY = page.y;
      $(document).on('mousemove' + namespace, mouseMove);
      $(document).on('mouseup' + namespace, mouseUp);
      $(document).on('mouseleave' + namespace, mouseUp); // prevents start of horizontal track panning)

      event.stopPropagation();
    }

    function mouseMove(event) {
      event.preventDefault();
      event.stopPropagation();
      var page = pageCoordinates(event);
      self.moveScrollerBy(page.y - lastY);
      lastY = page.y;
    }

    function mouseUp(event) {
      $(document).off(self.namespace);
    }
  };

  TrackScrollbar.prototype.moveScrollerBy = function (delta) {
    var y = this.$innerScroll.position().top + delta;
    this.moveScrollerTo(y);
  };

  TrackScrollbar.prototype.moveScrollerTo = function (y) {
    var outerScrollHeight = this.$outerScroll.height();
    var innerScrollHeight = this.$innerScroll.height();
    var newTop = Math.min(Math.max(0, y), outerScrollHeight - innerScrollHeight);
    var contentDivHeight = maxContentHeight(this.viewports);
    var contentTop = -Math.round(newTop * (contentDivHeight / this.$viewportContainer.height()));
    this.$innerScroll.css("top", newTop + "px");
    this.viewports.forEach(function (viewport) {
      viewport.setTop(contentTop);
    });
  };

  TrackScrollbar.prototype.dispose = function () {
    $(window).off(this.namespace);
  };

  TrackScrollbar.prototype.update = function () {
    var viewportContainerHeight, contentHeight, newInnerHeight;
    viewportContainerHeight = this.$viewportContainer.height();
    contentHeight = maxContentHeight(this.viewports);
    newInnerHeight = Math.round(viewportContainerHeight / contentHeight * viewportContainerHeight);

    if (contentHeight > viewportContainerHeight) {
      this.$outerScroll.show();
      this.$innerScroll.height(newInnerHeight);
    } else {
      this.$outerScroll.hide();
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  function getDataWrapper(data) {
    if (typeof data == 'string' || data instanceof String) {
      return new StringDataWrapper(data);
    } else {
      return new ByteArrayDataWrapper(data);
    }
  } // Data might be a string, or an UInt8Array


  var StringDataWrapper = function StringDataWrapper(string) {
    this.data = string;
    this.ptr = 0;
  };

  StringDataWrapper.prototype.nextLine = function () {
    //return this.split(/\r\n|\n|\r/gm);
    var start = this.ptr,
        idx = this.data.indexOf('\n', start);

    if (idx > 0) {
      this.ptr = idx + 1; // Advance pointer for next line

      return idx === start ? undefined : this.data.substring(start, idx).trim();
    } else {
      // Last line
      this.ptr = this.data.length;
      return start >= this.data.length ? undefined : this.data.substring(start).trim();
    }
  }; // For use in applications where whitespace carries meaning
  // Returns "" for an empty row (not undefined like nextLine), since this is needed in AED


  StringDataWrapper.prototype.nextLineNoTrim = function () {
    var start = this.ptr,
        idx = this.data.indexOf('\n', start),
        data = this.data;

    if (idx > 0) {
      this.ptr = idx + 1; // Advance pointer for next line

      if (idx > start && data.charAt(idx - 1) === '\r') {
        // Trim CR manually in CR/LF sequence
        return data.substring(start, idx - 1);
      }

      return data.substring(start, idx);
    } else {
      var length = data.length;
      this.ptr = length; // Return undefined only at the very end of the data

      return start >= length ? undefined : data.substring(start);
    }
  };

  var ByteArrayDataWrapper = function ByteArrayDataWrapper(array) {
    this.data = array;
    this.length = this.data.length;
    this.ptr = 0;
  };

  ByteArrayDataWrapper.prototype.nextLine = function () {
    var c, result;
    result = "";
    if (this.ptr >= this.length) return undefined;

    for (var i = this.ptr; i < this.length; i++) {
      c = String.fromCharCode(this.data[i]);
      if (c === '\r') continue;
      if (c === '\n') break;
      result = result + c;
    }

    this.ptr = i + 1;
    return result;
  }; // The ByteArrayDataWrapper does not do any trimming by default, can reuse the function


  ByteArrayDataWrapper.prototype.nextLineNoTrim = ByteArrayDataWrapper.prototype.nextLine;

  var FileFormats = {
    gwascatalog: {
      fields: ['bin', 'chr', 'start', 'end', 'name', 'pubMedID', 'author', 'pubDate', 'journal', 'title', 'trait', 'initSample', 'replSample', 'region', 'genes', 'riskAllele', 'riskAlFreq', 'pValue', 'pValueDesc', 'orOrBeta', 'ci95', 'platform', 'cnv']
    },
    wgrna: {
      fields: ['bin', 'chr', 'start', 'end', 'name', 'score', 'strand', 'thickStart', 'thickEnd', 'type']
    },
    cpgislandext: {
      fields: ['bin', 'chr', 'start', 'end', 'name', 'length', 'cpgNum', 'gcNum', 'perCpg', 'perGc', 'obsExp']
    },
    clinVarMain: {
      fields: ['chr1', 'start', 'end', 'name', 'score', 'strand', 'thickStart', 'thickEnd', 'reserved', 'blockCount', // Number of blocks
      'blockSizes', // Comma separated list of block sizes
      'chromStarts', // Start positions relative to chromStart
      'origName', // NM_198053.2(CD247):c.462C>T (p.Asp154=)	ClinVar Variation Report
      'clinSign', // Likely benign	Clinical significance
      'reviewStatus', // 	based on: criteria provided,single submitter	Review Status
      'type', // single nucleotide variant	Type of Variant
      'geneId', // CD247	Gene Symbol
      'snpId', //	181656780	dbSNP ID
      'nsvId', //		dbVar ID
      'rcvAcc', //	RCV000642347	ClinVar Allele Submission
      'testedInGtr', //	N	Genetic Testing Registry
      'phenotypeList', //	Immunodeficiency due to defect in cd3-zeta	Phenotypes
      'phenotype', //	MedGen:C1857798, OMIM:610163	Phenotype identifiers
      'origin', //	germline	Data origin
      'assembly', //	GRCh37	Genome assembly
      'cytogenetic', //	1q24.2	Cytogenetic status
      'hgvsCod', //	NM_198053.2:c.462C>T	Nucleotide HGVS
      'hgvsProt', //	NP_932170.1:p.Asp154=	Protein HGVS
      'numSubmit', //	1	Number of submitters
      'lastEval', //	Dec 19,2017	Last evaluation
      'guidelines', //		Guidelines
      'otherIds']
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var knownFileExtensions = new Set(["narrowpeak", "broadpeak", "peaks", "bedgraph", "wig", "gff3", "gff", "gtf", "fusionjuncspan", "refflat", "seg", "aed", "bed", "vcf", "bb", "bigbed", "bw", "bigwig", "bam", "tdf", "refgene", "genepred", "genepredext", "bedpe", "bp", "snp", "rmsk", "cram"]);
  /**
   * Return a custom format object with the given name.
   * @param name
   * @returns {*}
   */

  function getFormat(name) {
    // if (igv.browser && igv.browser.formats && igv.browser.format[name]) {
    //     return expandFormat(igv.browser.formats[name]);
    // } else
    if (FileFormats && FileFormats[name]) {
      return expandFormat(FileFormats[name]);
    } else {
      return undefined;
    }

    function expandFormat(format) {
      var fields = format.fields;
      var keys = ['chr', 'start', 'end'];

      for (var i = 0; i < fields.length; i++) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;

            if (key === fields[i]) {
              format[key] = i;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      return format;
    }
  }

  function inferTrackTypes(config) {
    // function inferFileFormat(config) {
    //
    //     var path;
    //
    //     if (config.format) {
    //         config.format = config.format.toLowerCase();
    //         return;
    //     }
    //
    //     path = isFilePath(config.url) ? config.url.name : config.url;
    //
    //     config.format = inferFileFormat(path);
    // }
    translateDeprecatedTypes(config);

    if (undefined === config.sourceType && config.url) {
      config.sourceType = "file";
    }

    if ("file" === config.sourceType) {
      if (undefined === config.format) {
        var path = isFilePath(config.url) ? config.url.name : config.url;
        config.format = inferFileFormat(path);
      } else {
        config.format = config.format.toLowerCase();
      }
    }

    if (undefined === config.type) {
      if (config.type) return;

      if (config.format) {
        switch (config.format.toLowerCase()) {
          case "bw":
          case "bigwig":
          case "wig":
          case "bedgraph":
          case "tdf":
            config.type = "wig";
            break;

          case "vcf":
            config.type = "variant";
            break;

          case "seg":
            config.type = "seg";
            break;

          case "bam":
          case "cram":
            config.type = "alignment";
            break;

          case "bedpe":
          case "bedpe-loop":
            config.type = "interaction";
            break;

          case "bp":
            config.type = "arc";
            break;

          default:
            config.type = "annotation";
        }
      }
    }
  }

  function inferFileFormat(fn) {
    var idx, ext;
    fn = fn.toLowerCase(); // Special case -- UCSC refgene files

    if (fn.endsWith("refgene.txt.gz") || fn.endsWith("refgene.txt.bgz") || fn.endsWith("refgene.txt") || fn.endsWith("refgene.sorted.txt.gz") || fn.endsWith("refgene.sorted.txt.bgz")) {
      return "refgene";
    } //Strip parameters -- handle local files later


    idx = fn.indexOf("?");

    if (idx > 0) {
      fn = fn.substr(0, idx);
    } //Strip aux extensions .gz, .tab, and .txt


    if (fn.endsWith(".gz")) {
      fn = fn.substr(0, fn.length - 3);
    }

    if (fn.endsWith(".txt") || fn.endsWith(".tab") || fn.endsWith(".bgz")) {
      fn = fn.substr(0, fn.length - 4);
    }

    idx = fn.lastIndexOf(".");
    ext = idx < 0 ? fn : fn.substr(idx + 1);

    switch (ext) {
      case "bw":
        return "bigwig";

      case "bb":
        return "bigbed";

      default:
        if (knownFileExtensions.has(ext)) {
          return ext;
        } else {
          return undefined;
        }

    }
  }

  function inferIndexPath(url, extension) {
    var idx;

    if (url instanceof File) {
      throw new Error("Cannot infer an index path for a local File.  Please select explicitly");
    }

    if (url.includes("?")) {
      idx = url.indexOf("?");
      return url.substring(0, idx) + "." + extension + url.substring(idx);
    } else {
      return url + "." + extension;
    }
  }

  function translateDeprecatedTypes(config) {
    if (config.featureType) {
      // Translate deprecated "feature" type
      config.type = config.type || config.featureType;
      config.featureType = undefined;
    }

    if ("bed" === config.type) {
      config.type = "annotation";
      config.format = config.format || "bed";
    } else if ("annotations" === config.type) {
      config.type = "annotation";
    } else if ("alignments" === config.type) {
      config.type = "alignment";
    } else if ("bam" === config.type) {
      config.type = "alignment";
      config.format = "bam";
    } else if ("vcf" === config.type) {
      config.type = "variant";
      config.format = "vcf";
    } else if ("t2d" === config.type) {
      config.type = "gwas";
    } else if ("FusionJuncSpan" === config.type && !config.format) {
      config.format = "fusionjuncspan";
    } else if ("aed" === config.type) {
      config.type = "annotation";
      config.format = config.format || "aed";
    }
  }
  /**
   * Parse a locus string and return a range object.  Locus string is of the form chr:start-end.  End is optional
   *
   */


  function parseLocusString(string) {
    var t1 = string.split(":");
    var t2 = t1[1].split("-");
    var range = {
      chr: t1[0],
      start: Number.parseInt(t2[0]) - 1
    };

    if (t2.length > 1) {
      range.end = Number.parseInt(t2[1]);
    } else {
      range.end = range.start + 1;
    }

    return range;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /**
   *  Define parsers for bed-like files  (.bed, .gff, .vcf, etc).  A parser should implement 2 methods
   *
   *     parseHeader(data) - return an object representing a header or metadata.  Details are format specific
   *
   *     parseFeatures(data) - return an array of features
   *
   */

  var maxFeatureCount = Number.MAX_VALUE; // For future use,  controls downsampling

  var gffNameFields = ["Name", "gene_name", "gene", "gene_id", "alias", "locus"];
  var aedRegexpNoNamespace = new RegExp("([^:]*)\\(([^)]*)\\)"); // name(type) for AED parsing (namespace undefined)

  var aedRegexpNamespace = new RegExp("([^:]*):([^(]*)\\(([^)]*)\\)"); // namespace:name(type) for AED parsing

  /**
   * Return a parser for the given file format.
   */

  var FeatureParser = function FeatureParser(format, decode, config) {
    var customFormat;

    if (format !== undefined) {
      this.format = format.toLowerCase();
    }

    this.nameField = config ? config.nameField : undefined;
    this.skipRows = 0; // The number of fixed header rows to skip.  Override for specific types as needed

    if (decode) {
      this.decode = decode;
    } else {
      switch (this.format) {
        case "narrowpeak":
        case "broadpeak":
        case "peaks":
          this.decode = decodePeak;
          this.delimiter = /\s+/;
          break;

        case "bedgraph":
          this.decode = decodeBedGraph;
          this.delimiter = /\s+/;
          break;

        case "wig":
          this.decode = decodeWig;
          this.delimiter = /\s+/;
          break;

        case "gff3":
        case "gff":
        case "gtf":
          this.decode = decodeGFF;
          this.delimiter = "\t";
          break;

        case "fusionjuncspan":
          // bhaas, needed for FusionInspector view
          this.decode = decodeFusionJuncSpan;
          this.delimiter = /\s+/;
          break;

        case "gtexgwas":
          this.skipRows = 1;
          this.decode = decodeGtexGWAS;
          this.delimiter = "\t";
          break;

        case "refflat":
          this.decode = decodeReflat;
          this.delimiter = /\s+/;
          break;

        case "genepred":
          this.decode = decodeGenePred;
          this.delimiter = /\s+/;
          break;

        case "genepredext":
          this.decode = decodeGenePredExt;
          this.delimiter = /\s+/;
          break;

        case "ensgene":
          this.decode = decodeGenePred;
          this.shift = 1;
          this.delimiter = /\s+/;
          break;

        case "refgene":
          this.decode = decodeGenePredExt;
          this.delimiter = /\s+/;
          this.shift = 1;
          break;

        case "aed":
          this.decode = decodeAed;
          this.delimiter = "\t";
          break;

        case "bed":
          this.decode = decodeBed;
          this.delimiter = config.delimiter || /\s+/;
          break;

        case "bedpe":
          this.skipRows = 1;
          this.decode = decodeBedpe;
          this.delimiter = /\s+/;
          break;

        case "bedpe-domain":
          this.decode = decodeBedpeDomain;
          this.headerLine = true;
          this.delimiter = /\s+/;
          break;

        case "bedpe-loop":
          this.decode = decodeBedpe;
          this.delimiter = /\s+/;
          this.skipRows = 1;
          this.header = {
            colorColumn: 7
          };
          break;

        case "snp":
          this.decode = decodeSNP;
          this.delimiter = "\t";
          break;

        case "rmsk":
          this.decode = decodeRepeatMasker;
          this.delimiter = "\t";
          break;

        default:
          customFormat = getFormat(this.format);

          if (customFormat !== undefined) {
            this.decode = decodeCustom;
            this.format = customFormat;
            this.delimiter = customFormat.delimiter || "\t";
          } else {
            this.decode = decodeBed;
            this.delimiter = /\s+/;
          }

      }
    }
  };

  FeatureParser.prototype.parseHeader = function (data) {
    var line, header, dataWrapper;
    dataWrapper = getDataWrapper(data);

    while (line = dataWrapper.nextLine()) {
      if (line.startsWith("track") || line.startsWith("#") || line.startsWith("browser")) {
        if (line.startsWith("track") || line.startsWith("#track")) {
          var h = parseTrackLine(line);

          if (header) {
            Object.assign(header, h);
          } else {
            header = h;
          }
        } else if (line.startsWith("#columns")) {
          var _h = parseColumnsDirective(line);

          if (header) {
            Object.assign(header, _h);
          } else {
            header = _h;
          }
        } else if (line.startsWith("##gff-version 3")) {
          this.format = "gff3";
          if (!header) header = {};
          header["format"] = "gff3";
        }
      } else {
        break;
      }
    }

    this.header = header; // Directives might be needed for parsing lines

    return header;
  };

  FeatureParser.prototype.parseFeatures = function (data) {
    if (!data) return null;
    var dataWrapper,
        wig,
        feature,
        tokens,
        allFeatures = [],
        line,
        i,
        cnt = 0,
        j,
        decode = this.decode,
        format = this.format,
        delimiter = this.delimiter || "\t",
        nextLine; // Double quoted strings can contain newlines in AED
    // "" is an escape for a ".
    // Parse all this, clean it up, split into tokens in a custom way

    function readTokensAed() {
      var tokens = [],
          token = "",
          quotedString = false,
          n,
          c;

      while (line || line === '') {
        for (n = 0; n < line.length; n++) {
          c = line.charAt(n);

          if (c === delimiter) {
            if (!quotedString) {
              tokens.push(token);
              token = "";
            } else {
              token += c;
            }
          } else if (c === "\"") {
            // Look ahead to the next character
            if (n + 1 < line.length && line.charAt(n + 1) === "\"") {
              if (quotedString) {
                // Turn "" into a single " in the output string
                token += "\"";
              } // "" on its own means empty string, ignore
              // Skip the next double quote


              n++;
            } else {
              // We know the next character is NOT a double quote, flip our state
              quotedString = !quotedString;
            }
          } else {
            token += c;
          }
        } // We are at the end of the line


        if (quotedString) {
          token += '\n'; // Add newline to the token

          line = nextLine(); // Keep going
        } else {
          // We can end the loop
          break;
        }
      } // Push the last token


      tokens.push(token);
      return tokens;
    }

    dataWrapper = getDataWrapper(data);

    if (format === 'aed') {
      nextLine = dataWrapper.nextLineNoTrim.bind(dataWrapper);
    } else {
      nextLine = dataWrapper.nextLine.bind(dataWrapper);
    }

    i = 0;

    while (line = nextLine()) {
      i++;
      if (i <= this.skipRows) continue;

      if (line.startsWith("track") || line.startsWith("#") || line.startsWith("browser")) {
        continue;
      } else if (format === "wig" && line.startsWith("fixedStep")) {
        wig = parseFixedStep(line);
        continue;
      } else if (format === "wig" && line.startsWith("variableStep")) {
        wig = parseVariableStep(line);
        continue;
      }

      if (format !== "aed" || line.indexOf("\"") === -1) {
        tokens = line.split(delimiter);
      } else {
        tokens = readTokensAed();
      }

      if (tokens.length < 1) {
        continue;
      }

      if (format === "aed") {
        if (!this.aed) {
          // Store information about the aed header in the parser itself
          // This is done only once - on the first row
          this.aed = parseAedHeaderRow(tokens);
          continue;
        }
      }

      feature = decode.call(this, tokens, wig);

      if (feature) {
        if (allFeatures.length < maxFeatureCount) {
          allFeatures.push(feature);
        } else {
          // Reservoir sampling,  conditionally replace existing feature with new one.
          j = Math.floor(Math.random() * cnt);

          if (j < maxFeatureCount) {
            allFeatures[j] = feature;
          }
        }

        cnt++;
      }
    }

    return allFeatures;
  };

  function parseFixedStep(line) {
    var tokens = line.split(/\s+/),
        cc = tokens[1].split("=")[1],
        ss = parseInt(tokens[2].split("=")[1], 10) - 1,
        step = parseInt(tokens[3].split("=")[1], 10),
        span = tokens.length > 4 ? parseInt(tokens[4].split("=")[1], 10) : 1;
    return {
      format: "fixedStep",
      chrom: cc,
      start: ss,
      step: step,
      span: span,
      index: 0
    };
  }

  function parseVariableStep(line) {
    var tokens = line.split(/\s+/),
        cc = tokens[1].split("=")[1],
        span = tokens.length > 2 ? parseInt(tokens[2].split("=")[1], 10) : 1;
    return {
      format: "variableStep",
      chrom: cc,
      span: span
    };
  }

  function parseAedToken(value) {
    // Example: refseq:accessionNumber(aed:String)
    // refseq - namespace, will be declared later
    // accessionNumber - name of the field
    // aed:String - type of the field
    // The namespace part may be missing
    var match = aedRegexpNamespace.exec(value);

    if (match) {
      return {
        namespace: match[1],
        name: match[2],
        type: match[3]
      };
    }

    match = aedRegexpNoNamespace.exec(value);

    if (match) {
      return {
        namespace: '?',
        name: match[1],
        type: match[2]
      };
    } else {
      throw new Error("Error parsing the header row of AED file - column not in ns:name(ns:type) format");
    }
  }

  function parseAedHeaderRow(tokens) {
    // First row of AED file defines column names
    // Each header item is an aed token - see parseAedToken
    var aed, k, token, aedToken; // Initialize aed section to be filled in

    aed = {
      columns: [// Information about the namespace, name and type of each column
        // Example entry:
        // { namespace: 'bio', name: 'start', type: 'aed:Integer' }
      ],
      metadata: {// Metadata about the entire AED file
        // Example:
        // {
        //    aed: {
        //       application: { value: "CHaS Browser 3.3.0.139 (r10838)", type: "aed:String" },
        //       created: { value: "2018-01-02T10:20:30.123+01:00", type: "aed:DateTime" },
        //       modified: { value: "2018-03-04T11:22:33.456+01:00", type: "aed:DateTime" },
        //    }
        //    affx: {
        //       ucscGenomeVersion: { value: "hg19", type: "aed:String" }
        //    },
        //    namespace: {
        //       omim: { value: "http://affymetrix.com/ontology/www.ncbi.nlm.nih.gov/omim/", type: "aed:URI" },
        //       affx: { value: "http://affymetrix.com/ontology/", type: "aed:URI" },
        //       refseq: { value: "http://affymetrix.com/ontology/www.ncbi.nlm.nih.gov/RefSeq/", type: "aed:URI" }
        //    }
        // }
      }
    };

    for (k = 0; k < tokens.length; k++) {
      token = tokens[k];
      aedToken = parseAedToken(token);
      aed.columns.push(aedToken);
    }

    return aed;
  }

  function parseTrackLine(line) {
    var properties = {};
    var tokens = line.split(/(?:")([^"]+)(?:")|([^\s"]+)(?=\s+|$)/g); // Clean up tokens array

    var curr;
    var tmp = [];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var tk = _step.value;
        if (!tk || tk.trim().length === 0) continue;

        if (tk.endsWith("=") > 0) {
          curr = tk;
        } else if (curr) {
          tmp.push(curr + tk);
          curr = undefined;
        } else {
          tmp.push(tk);
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    for (var _i = 0, _tmp = tmp; _i < _tmp.length; _i++) {
      var str = _tmp[_i];
      if (!str) return;
      var kv = str.split('=', 2);

      if (kv.length === 2) {
        var key = kv[0].trim();
        var value = kv[1].trim();
        properties[key] = value;
      }
    }

    return properties;
  }

  function parseColumnsDirective(line) {
    var properties = {};
    var t1 = line.split(/\s+/);

    if (t1.length === 2) {
      var t2 = t1[1].split(";");
      t2.forEach(function (keyValue) {
        var t = keyValue.split("=");

        if (t[0] === "color") {
          properties.colorColumn = Number.parseInt(t[1]) - 1;
        } else if (t[0] === "thickness") {
          properties.thicknessColumn = Number.parseInt(t[1]) - 1;
        }
      });
    }

    return properties;
  }
  /**
   * Decode the "standard" UCSC bed format
   * @param tokens
   * @param ignore
   * @returns decoded feature, or null if this is not a valid record
   */


  function decodeBed(tokens, ignore) {
    var chr, start, end, exonCount, exonSizes, exonStarts, exons, feature, eStart, eEnd;
    if (tokens.length < 3) return undefined;
    chr = tokens[0];
    start = parseInt(tokens[1]);
    end = tokens.length > 2 ? parseInt(tokens[2]) : start + 1;
    feature = {
      chr: chr,
      start: start,
      end: end,
      score: 1000
    };

    if (tokens.length > 3) {
      // Note: these are very special rules for the gencode gene files.
      // tmp = tokens[3].replace(/"/g, '');
      // idName = tmp.split(';');
      // for (var i = 0; i < idName.length; i++) {
      //     var kv = idName[i].split('=');
      //     if (kv[0] == "gene_id") {
      //         id = kv[1];
      //     }
      //     if (kv[0] == "gene_name") {
      //         name = kv[1];
      //     }
      // }
      // feature.id = id ? id : tmp;
      // feature.name = name ? name : tmp;
      feature.name = tokens[3];
    }

    if (tokens.length > 4) {
      feature.score = parseFloat(tokens[4]);
    }

    if (tokens.length > 5) {
      feature.strand = tokens[5];
    }

    if (tokens.length > 6) {
      feature.cdStart = parseInt(tokens[6]);
    }

    if (tokens.length > 7) {
      feature.cdEnd = parseInt(tokens[7]);
    }

    if (tokens.length > 8) {
      if (tokens[8] !== "." && tokens[8] !== "0") feature.color = IGVColor.createColorString(tokens[8]);
    }

    if (tokens.length > 11) {
      exonCount = parseInt(tokens[9]);
      exonSizes = tokens[10].split(',');
      exonStarts = tokens[11].split(',');
      exons = [];

      for (var i = 0; i < exonCount; i++) {
        eStart = start + parseInt(exonStarts[i]);
        eEnd = eStart + parseInt(exonSizes[i]);
        exons.push({
          start: eStart,
          end: eEnd
        });
      }

      findUTRs(exons, feature.cdStart, feature.cdEnd);
      feature.exons = exons;
    } // Optional extra columns


    if (this.header) {
      var thicknessColumn = this.header.thicknessColumn;
      var colorColumn = this.header.colorColumn;

      if (colorColumn && colorColumn < tokens.length) {
        feature.color = IGVColor.createColorString(tokens[colorColumn]);
      }

      if (thicknessColumn && thicknessColumn < tokens.length) {
        feature.thickness = tokens[thicknessColumn];
      }
    }

    return feature;
  }
  /**
   * Decode a UCSC repeat masker record.
   *
   * Columns, from UCSC documentation
   *
   * 0  bin    585    smallint(5) unsigned    Indexing field to speed chromosome range queries.
   * 1  swScore    1504    int(10) unsigned    Smith Waterman alignment score
   * 2  milliDiv    13    int(10) unsigned    Base mismatches in parts per thousand
   * 3  milliDel    4    int(10) unsigned    Bases deleted in parts per thousand
   * 4  milliIns    13    int(10) unsigned    Bases inserted in parts per thousand
   * 5  genoName    chr1    varchar(255)    Genomic sequence name
   * 6  genoStart    10000    int(10) unsigned    Start in genomic sequence
   * 7  genoEnd    10468    int(10) unsigned    End in genomic sequence
   * 8  genoLeft    -249240153    int(11)    -#bases after match in genomic sequence
   * 9  strand    +    char(1)    Relative orientation + or -
   * 10 repName    (CCCTAA)n    varchar(255)    Name of repeat
   * 11 repClass    Simple_repeat    varchar(255)    Class of repeat
   * 12 repFamily    Simple_repeat    varchar(255)    Family of repeat
   * 13 repStart    1    int(11)    Start (if strand is +) or -#bases after match (if strand is -) in repeat sequence
   * 14 repEnd    463    int(11)    End in repeat sequence
   * 15 repLeft    0    int(11)    -#bases after match (if strand is +) or start (if strand is -) in repeat sequence
   * 16 id    1    char(1)    First digit of id field in RepeatMasker .out file. Best ignored.
   */


  function decodeRepeatMasker(tokens, ignore) {
    if (tokens.length < 15) return undefined;
    var feature = {
      swScore: Number.parseInt(tokens[1]),
      milliDiv: Number.parseInt(tokens[2]),
      milliDel: Number.parseInt(tokens[3]),
      milliIns: Number.parseInt(tokens[4]),
      chr: tokens[5],
      start: Number.parseInt(tokens[6]),
      end: Number.parseInt(tokens[7]),
      //genoLeft: tokens[8],
      strand: tokens[9],
      repName: tokens[10],
      repClass: tokens[11],
      repFamily: tokens[12],
      repStart: Number.parseInt(tokens[13]),
      repEnd: Number.parseInt(tokens[14]),
      repLeft: Number.parseInt(tokens[15])
    };
    return feature;
  }
  /**
   * Decode a UCSC "genePred" record.
   *
   * @param tokens
   * @param ignore
   * @returns {*}
   */


  function decodeGenePred(tokens, ignore) {
    var shift = this.shift === undefined ? 0 : 1;
    if (tokens.length < 9 + shift) return undefined;
    var cdStart = parseInt(tokens[5 + shift]);
    var cdEnd = parseInt(tokens[6 + shift]);
    var feature = {
      name: tokens[0 + shift],
      chr: tokens[1 + shift],
      strand: tokens[2 + shift],
      start: parseInt(tokens[3 + shift]),
      end: parseInt(tokens[4 + shift]),
      cdStart: cdStart,
      cdEnd: cdEnd,
      id: tokens[0 + shift]
    },
        exonCount = parseInt(tokens[7 + shift]),
        exonStarts = tokens[8 + shift].split(','),
        exonEnds = tokens[9 + shift].split(','),
        exons = [];

    for (var i = 0; i < exonCount; i++) {
      var start = parseInt(exonStarts[i]);
      var end = parseInt(exonEnds[i]);
      exons.push({
        start: start,
        end: end
      });
    }

    findUTRs(exons, cdStart, cdEnd);
    feature.exons = exons;
    return feature;
  }
  /**
   * Decode a UCSC "genePredExt" record.  refGene files are in this format.
   *
   * @param tokens
   * @param ignore
   * @returns {*}
   */


  function decodeGenePredExt(tokens, ignore) {
    var shift = this.shift === undefined ? 0 : 1;
    if (tokens.length < 11 + shift) return undefined;
    var cdStart = parseInt(tokens[5 + shift]);
    var cdEnd = parseInt(tokens[6 + shift]);
    var feature = {
      name: tokens[11 + shift],
      chr: tokens[1 + shift],
      strand: tokens[2 + shift],
      start: parseInt(tokens[3 + shift]),
      end: parseInt(tokens[4 + shift]),
      cdStart: cdStart,
      cdEnd: cdEnd,
      id: tokens[0 + shift]
    },
        exonCount = parseInt(tokens[7 + shift]),
        exonStarts = tokens[8 + shift].split(','),
        exonEnds = tokens[9 + shift].split(','),
        exons = [];

    for (var i = 0; i < exonCount; i++) {
      var start = parseInt(exonStarts[i]);
      var end = parseInt(exonEnds[i]);
      exons.push({
        start: start,
        end: end
      });
    }

    findUTRs(exons, cdStart, cdEnd);
    feature.exons = exons;
    return feature;
  }
  /**
   * Decode a UCSC "refFlat" record
   * @param tokens
   * @param ignore
   * @returns {*}
   */


  function decodeReflat(tokens, ignore) {
    var shift = this.shift === undefined ? 0 : 1;
    if (tokens.length < 10 + shift) return undefined;
    var cdStart = parseInt(tokens[6 + shift]);
    var cdEnd = parseInt(tokens[7 + shift]);
    var feature = {
      name: tokens[0 + shift],
      id: tokens[1 + shift],
      chr: tokens[2 + shift],
      strand: tokens[3 + shift],
      start: parseInt(tokens[4 + shift]),
      end: parseInt(tokens[5 + shift]),
      cdStart: cdStart,
      cdEnd: cdEnd
    },
        exonCount = parseInt(tokens[8 + shift]),
        exonStarts = tokens[9 + shift].split(','),
        exonEnds = tokens[10 + shift].split(','),
        exons = [];

    for (var i = 0; i < exonCount; i++) {
      var start = parseInt(exonStarts[i]);
      var end = parseInt(exonEnds[i]);
      exons.push({
        start: start,
        end: end
      });
    }

    findUTRs(exons, cdStart, cdEnd);
    feature.exons = exons;
    return feature;
  }

  function findUTRs(exons, cdStart, cdEnd) {
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = exons[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var exon = _step2.value;
        var end = exon.end;
        var start = exon.start;

        if (end < cdStart || start > cdEnd) {
          exon.utr = true;
        } else {
          if (cdStart >= start && cdStart <= end) {
            exon.cdStart = cdStart;
          }

          if (cdEnd >= start && cdEnd <= end) {
            exon.cdEnd = cdEnd;
          }
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }
  }

  function decodePeak(tokens, ignore) {
    var tokenCount, chr, start, end, strand, name, score, qValue, signal, pValue;
    tokenCount = tokens.length;

    if (tokenCount < 9) {
      return null;
    }

    chr = tokens[0];
    start = parseInt(tokens[1]);
    end = parseInt(tokens[2]);
    name = tokens[3];
    score = parseFloat(tokens[4]);
    strand = tokens[5].trim();
    signal = parseFloat(tokens[6]);
    pValue = parseFloat(tokens[7]);
    qValue = parseFloat(tokens[8]);
    if (score === 0) score = signal;
    return {
      chr: chr,
      start: start,
      end: end,
      name: name,
      score: score,
      strand: strand,
      signal: signal,
      pValue: pValue,
      qValue: qValue
    };
  }

  function decodeBedGraph(tokens, ignore) {
    var chr, start, end, value;
    if (tokens.length < 3) return null;
    chr = tokens[0];
    start = parseInt(tokens[1]);
    end = parseInt(tokens[2]);
    value = parseFloat(tokens[3]);
    var feature = {
      chr: chr,
      start: start,
      end: end,
      value: value
    }; // Optional extra columns

    if (this.header) {
      var colorColumn = this.header.colorColumn;

      if (colorColumn && colorColumn < tokens.length) {
        feature.color = IGVColor.createColorString(tokens[colorColumn]);
      }
    }

    return feature;
  }

  function decodeWig(tokens, wig) {
    var ss, ee, value;

    if (wig.format === "fixedStep") {
      ss = wig.index * wig.step + wig.start;
      ee = ss + wig.span;
      value = parseFloat(tokens[0]);
      ++wig.index;
      return isNaN(value) ? null : {
        chr: wig.chrom,
        start: ss,
        end: ee,
        value: value
      };
    } else if (wig.format === "variableStep") {
      if (tokens.length < 2) return null;
      ss = parseInt(tokens[0], 10) - 1;
      ee = ss + wig.span;
      value = parseFloat(tokens[1]);
      return isNaN(value) ? null : {
        chr: wig.chrom,
        start: ss,
        end: ee,
        value: value
      };
    } else {
      return decodeBedGraph(tokens);
    }
  }

  function decodeFusionJuncSpan(tokens, ignore) {
    /*
     Format:
      0       #scaffold
     1       fusion_break_name
     2       break_left
     3       break_right
     4       num_junction_reads
     5       num_spanning_frags
     6       spanning_frag_coords
      0       B3GNT1--NPSR1
     1       B3GNT1--NPSR1|2203-10182
     2       2203
     3       10182
     4       189
     5       1138
     6       1860-13757,1798-13819,1391-18127,1443-17174,...
      */
    //console.log("decoding fusion junc spans");
    var chr = tokens[0];
    var fusion_name = tokens[1];
    var junction_left = parseInt(tokens[2]);
    var junction_right = parseInt(tokens[3]);
    var num_junction_reads = parseInt(tokens[4]);
    var num_spanning_frags = parseInt(tokens[5]);
    var spanning_frag_coords_text = tokens[6];
    var feature = {
      chr: chr,
      name: fusion_name,
      junction_left: junction_left,
      junction_right: junction_right,
      num_junction_reads: num_junction_reads,
      num_spanning_frags: num_spanning_frags,
      spanning_frag_coords: [],
      start: -1,
      end: -1
    }; // set start and end later based on min/max of span coords

    var min_coord = junction_left;
    var max_coord = junction_right;

    if (num_spanning_frags > 0) {
      var coord_pairs = spanning_frag_coords_text.split(',');

      for (var i = 0; i < coord_pairs.length; i++) {
        var split_coords = coord_pairs[i].split('-');
        var span_left = split_coords[0];
        var span_right = split_coords[1];

        if (span_left < min_coord) {
          min_coord = span_left;
        }

        if (span_right > max_coord) {
          max_coord = span_right;
        }

        feature.spanning_frag_coords.push({
          left: span_left,
          right: span_right
        });
      }
    }

    feature.start = min_coord;
    feature.end = max_coord;
    return feature;
  }

  function decodeGtexGWAS(tokens, ignore) {
    //chrom	chromStart	chromEnd	Strongest SNP-risk allele	Disease/Phenotype	P-value	Odds ratio or beta	PUBMEDID
    //1	1247493	1247494	rs12103-A	Inflammatory bowel disease	8.00E-13	1.1	23128233
    var tokenCount = tokens.length;

    if (tokenCount < 7) {
      return null;
    }

    var feature = {
      chr: tokens[0],
      start: parseInt(tokens[1]) - 1,
      end: parseInt(tokens[2]),
      'Strongest SNP-risk allele': tokens[3],
      'Disease/Phenotype': tokens[4],
      'P-value': tokens[5],
      'Odds ratio or beta': tokens[6]
    };

    if (tokens.length > 6) {
      feature['PUBMEDID'] = "<a target = \"blank\" href = \"https://www.ncbi.nlm.nih.gov/pubmed/".concat(tokens[7], "\">").concat(tokens[7], "</a>");
    }

    return feature;
  }
  /**
   * Decode a single gff record (1 line in file).  Aggregations such as gene models are constructed at a higher level.
   *      ctg123 . mRNA            1050  9000  .  +  .  ID=mRNA00001;Parent=gene00001
   * @param tokens
   * @param ignore
   * @returns {*}
   */


  function decodeGFF(tokens, ignore) {
    var tokenCount,
        chr,
        start,
        end,
        strand,
        type,
        score,
        phase,
        attributeString,
        color,
        name,
        i,
        format = this.format;
    tokenCount = tokens.length;

    if (tokenCount < 9) {
      return null; // Not a valid gff record
    }

    chr = tokens[0];
    type = tokens[2];
    start = parseInt(tokens[3]) - 1;
    end = parseInt(tokens[4]);
    score = "." === tokens[5] ? 0 : parseFloat(tokens[5]);
    strand = tokens[6];
    phase = "." === tokens[7] ? 0 : parseInt(tokens[7]);
    attributeString = tokens[8]; // Find ID and Parent, or transcript_id

    var delim = 'gff3' === format ? '=' : /\s+/;
    var attributes = {};
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = attributeString.split(';')[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var kv = _step3.value;
        var t = kv.trim().split(delim, 2);

        if (t.length === 2) {
          var key = t[0].trim();
          var value = t[1].trim(); //Strip off quotes, if any

          if (value.startsWith('"') && value.endsWith('"')) {
            value = value.substr(1, value.length - 2);
          }

          var keyLower = key.toLowerCase();
          if ("color" === keyLower || "colour" === keyLower) color = IGVColor.createColorString(t[1]);else {
            if ('gff3' === format) {
              value = decodeURIComponent(value);
            }

            attributes[key] = value;
          }
        }
      } // Find name (label) property

    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    if (this.nameField) {
      name = attributes[this.nameField];
    } else {
      for (i = 0; i < gffNameFields.length; i++) {
        if (attributes.hasOwnProperty(gffNameFields[i])) {
          this.nameField = gffNameFields[i];
          name = attributes[this.nameField];
          break;
        }
      }
    }

    var id = attributes["ID"] || attributes["transcript_id"];
    var parent = attributes["Parent"];
    return new GFFFeature({
      id: id,
      parent: parent,
      name: name,
      type: type,
      chr: chr,
      start: start,
      end: end,
      score: score,
      strand: strand,
      color: color,
      attributeString: attributeString,
      delim: delim
    });
  }

  function GFFFeature(props) {
    Object.assign(this, props);
  }

  GFFFeature.prototype.popupData = function (genomicLocation) {
    var kvs = this.attributeString.split(';');
    var pd = [];
    pd.push({
      name: 'type',
      value: this.type
    });
    pd.push({
      name: 'start',
      value: this.start + 1
    });
    pd.push({
      name: 'end',
      value: this.end
    });
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = kvs[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var kv = _step4.value;
        var t = kv.trim().split(this.delim, 2);

        if (t.length === 2 && t[1] !== undefined) {
          var key = t[0].trim();
          var value = t[1].trim(); //Strip off quotes, if any

          if (value.startsWith('"') && value.endsWith('"')) {
            value = value.substr(1, value.length - 2);
          }

          pd.push({
            name: key,
            value: value
          });
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return pd;
  };
  /**
   * AED file feature.
   *
   * @param aed link to the AED file object containing file-level metadata and column descriptors
   * @param allColumns All columns as parsed from the AED
   *
   * Other values are parsed one by one
   */


  function AedFeature(aed, allColumns) {
    var token,
        aedColumn,
        aedColumns = aed.columns; // Link to AED file (for metadata)

    this.aed = aed; // Unparsed columns from AED file

    this.allColumns = allColumns; // Prepare space for the parsed values

    this.chr = null;
    this.start = null;
    this.end = null;
    this.score = 1000;
    this.strand = '.';
    this.cdStart = null;
    this.cdEnd = null;
    this.name = null;
    this.color = null;

    for (var i = 0; i < allColumns.length; i++) {
      token = allColumns[i];

      if (!token) {
        // Skip empty fields
        continue;
      }

      aedColumn = aedColumns[i];

      if (aedColumn.type === 'aed:Integer') {
        token = parseInt(token);
      }

      if (aedColumn.namespace === 'bio') {
        if (aedColumn.name === 'sequence') {
          this.chr = token;
        } else if (aedColumn.name === 'start') {
          this.start = token;
        } else if (aedColumn.name === 'end') {
          this.end = token;
        } else if (aedColumn.name === 'cdsMin') {
          this.cdStart = token;
        } else if (aedColumn.name === 'cdsMax') {
          this.cdEnd = token;
        } else if (aedColumn.name === 'strand') {
          this.strand = token;
        }
      } else if (aedColumn.namespace === 'aed') {
        if (aedColumn.name === 'name') {
          this.name = token;
        }
      } else if (aedColumn.namespace === 'style') {
        if (aedColumn.name === 'color') {
          this.color = IGVColor.createColorString(token);
        }
      }
    }
  }

  AedFeature.prototype.popupData = function () {
    var data = [],
        aed = this.aed; // Just dump everything we have for now

    for (var i = 0; i < this.allColumns.length; i++) {
      var featureValue = this.allColumns[i];
      var name = aed.columns[i].name; // Skip columns that are not interesting - you know the sequence, and you can see color

      if (name !== 'sequence' && name !== 'color') {
        if (featureValue) {
          data.push({
            name: name,
            value: featureValue
          });
        }
      }
    }

    return data;
  };
  /**
   * Decode the AED file format
   * @param tokens
   * @param ignore
   * @returns decoded feature, or null if this is not a valid record
   */


  function decodeAed(tokens, ignore) {
    var name,
        value,
        token,
        nonEmptyTokens = 0,
        aedColumns = this.aed.columns,
        aedColumn,
        aedKey,
        i; // Each aed row must match the exact number of columns or we skip it

    if (tokens.length !== aedColumns.length) {
      return undefined;
    }

    for (i = 0; i < tokens.length; i++) {
      aedColumn = aedColumns[i];
      token = tokens[i];

      if (token !== '') {
        nonEmptyTokens++;
      }

      if (aedColumn.name === 'name' && aedColumn.namespace === 'aed') {
        name = token;
      } else if (aedColumn.name === 'value' && aedColumn.namespace === 'aed') {
        value = token;
      }
    }

    if (nonEmptyTokens === 2 && name && value) {
      // Special row that defines metadata for the entire file
      aedKey = parseAedToken(name); // Store in the metadata section

      if (!this.aed.metadata[aedKey.namespace]) {
        this.aed.metadata[aedKey.namespace] = {};
      }

      if (!this.aed.metadata[aedKey.namespace][aedKey.name]) {
        this.aed.metadata[aedKey.namespace][aedKey.name] = {
          type: aedKey.type,
          value: value
        };
      } // Ignore this value


      return undefined;
    }

    var feature = new AedFeature(this.aed, tokens);

    if (!feature.chr || !feature.start || !feature.end) {
      return undefined;
    }

    return feature;
  }

  function decodeBedpe(tokens, ignore) {
    if (tokens.length < 6) {
      return undefined;
    }

    var feature = {
      chr1: tokens[0],
      start1: Number.parseInt(tokens[1]),
      end1: Number.parseInt(tokens[2]),
      chr2: tokens[3],
      start2: Number.parseInt(tokens[4]),
      end2: Number.parseInt(tokens[5])
    };

    if (tokens.length > 6) {
      feature.name = tokens[6];
    }

    if (tokens.length > 7) {
      feature.score = tokens[7];
    }

    feature.chr = feature.chr1 === feature.chr2 ? feature.chr1 : "MIXED"; // Start and end for the feature as a whole.  This needs revisited for interchr features

    feature.start = Math.min(feature.start1, feature.start2);
    feature.end = Math.max(feature.end1, feature.end2); // Midpoints

    var m1 = (feature.start1 + feature.end1) / 2;
    var m2 = (feature.start2 + feature.end2) / 2;
    feature.m1 = m1 < m2 ? m1 : m2;
    feature.m2 = m1 < m2 ? m2 : m1; // Optional extra columns

    if (this.header) {
      var thicknessColumn = this.header.thicknessColumn;
      var colorColumn = this.header.colorColumn;

      if (colorColumn && colorColumn < tokens.length) {
        feature.color = IGVColor.createColorString(tokens[colorColumn]);
      }

      if (thicknessColumn && thicknessColumn < tokens.length) {
        feature.thickness = tokens[thicknessColumn];
      }
    }

    return feature;
  }
  /**
   * Special decoder for Hic Domain files.   In these files feature1 == feature2, they are really bed records.
   * @param tokens
   * @param ignore
   * @returns {*}
   */


  function decodeBedpeDomain(tokens, ignore) {
    return {
      chr: tokens[0],
      start: Number.parseInt(tokens[1]),
      end: Number.parseInt(tokens[2]),
      color: IGVColor.createColorString(tokens[6]),
      score: Number.parseFloat(tokens[7])
    };
  }

  function decodeSNP(tokens, ignore) {
    var autoSql = ['bin', 'chr', 'start', 'end', 'name', 'score', 'strand', 'refNCBI', 'refUCSC', 'observed', 'molType', 'class', 'valid', 'avHet', 'avHetSE', 'func', 'locType', 'weight', 'exceptions', 'submitterCount', 'submitters', 'alleleFreqCount', 'alleles', 'alleleNs', 'alleleFreqs', 'bitfields'];
    var feature = {
      chr: tokens[1],
      start: Number.parseInt(tokens[2]),
      end: Number.parseInt(tokens[3]),
      name: tokens[4],
      score: Number.parseInt(tokens[5])
    };
    var n = Math.min(tokens.length, autoSql.length);

    for (var i = 6; i < n; i++) {
      feature[autoSql[i]] = tokens[i];
    }

    return feature;
  }
  /**
   * Decode a custom columnar format.  Required columns are 'chr' and 'start'
   *
   * @param tokens
   * @param ignore
   * @returns decoded feature, or null if this is not a valid record
   */


  function decodeCustom(tokens, ignore) {
    var format = this.format; // "this" refers to FeatureParser instance

    var coords = format.coords || 0; // Insure that chr and start fields are defined.
    //if(!this.format.chr && this.format.start) {
    //}

    var chr = tokens[format.chr];
    var start = parseInt(tokens[format.start]) - coords;
    var end = format.end !== undefined ? parseInt(tokens[format.end]) : start + 1;
    var feature = {
      chr: chr,
      start: start,
      end: end
    };

    if (format.fields) {
      format.fields.forEach(function (field, index) {
        if (index !== format.chr && index !== format.start && index !== format.end) {
          feature[field] = tokens[index];
        }
      });
    }

    return feature;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /**
   *  Define parser for seg files  (.bed, .gff, .vcf, etc).  A parser should implement 2 methods
   *
   *     parseHeader(data) - return an object representing a header.  Details are format specific
   *
   *     parseFeatures(data) - return a list of features
   *
   */

  var sampleKeyColumn = 0,
      sampleColumn = 0,
      chrColumn = 1,
      startColumn = 2,
      endColumn = 3;

  var SegParser = function SegParser() {};

  SegParser.prototype.parseHeader = function (data) {
    var lines = splitLines(data),
        len = lines.length,
        line,
        i,
        tokens;

    for (i = 0; i < len; i++) {
      line = lines[i];

      if (line.startsWith("#")) ; else {
        tokens = line.split("\t");
        this.header = {
          headings: tokens,
          lineCount: i + 1
        };
        break;
      }
    }

    return this.header;
  };

  SegParser.prototype.parseFeatures = function (data) {
    var lines = data ? splitLines(data) : [],
        len = lines.length,
        tokens,
        allFeatures = [],
        line,
        i,
        dataColumn;

    if (!this.header) {
      this.header = this.parseHeader(data);
    }

    dataColumn = this.header.headings.length - 1;

    for (i = this.header.lineCount; i < len; i++) {
      line = lines[i];
      tokens = lines[i].split("\t");

      if (tokens.length > dataColumn) {
        allFeatures.push({
          sampleKey: tokens[sampleKeyColumn],
          sample: tokens[sampleColumn],
          chr: tokens[chrColumn],
          start: parseInt(tokens[startColumn]),
          end: parseInt(tokens[endColumn]),
          value: parseFloat(tokens[dataColumn])
        });
      }
    }

    return allFeatures;
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2018 Regents of the University of California
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /**
   * A collection of properties and methods shared by all (or most) track types.   Used as a mixin
   * by prototype chaining.
   *
   * @param config
   * @param browser
   * @constructor
   */

  var TrackBase = function TrackBase(config, browser) {
    if (config.displayMode) {
      config.displayMode = config.displayMode.toUpperCase();
    }

    this.config = config;
    this.browser = browser;
    this.url = config.url;
    this.type = config.type;
    this.supportHiDPI = config.supportHiDPI === undefined ? true : config.supportHiDPI;
    config.name = config.name || config.label; // synonym for name, label is deprecated

    if (config.name) {
      this.name = config.name;
    } else {
      if (isFilePath(config.url)) this.name = config.url.name;else this.name = config.url;
    }

    this.order = config.order;

    if ("civic-ws" === config.sourceType) {
      // Ugly proxy for specialized track type
      this.color = "rgb(155,20,20)";
    } else {
      this.color = config.color || config.defaultColor || "rgb(0,0,150)";
    }

    this.autoscaleGroup = config.autoscaleGroup;
    this.removable = config.removable === undefined ? true : config.removable; // Defaults to true

    this.height = config.height || 100;
    this.autoHeight = config.autoHeight === undefined ? config.height === undefined : config.autoHeight;
    this.minHeight = config.minHeight || Math.min(25, this.height);
    this.maxHeight = config.maxHeight || Math.max(1000, this.height);
    this.visibilityWindow = config.visibilityWindow;
  };
  /**
   * Default implementation -- return the current state of the "this" object, which should be a this.  Used
   * to create session object for bookmarking, sharing.  Updates the track "config" object to reflect the
   * current state.  Only simple properties (string, number, boolean) are updated.
   */


  TrackBase.prototype.getState = function () {
    var config = Object.assign({}, this.config);
    var self = this;
    Object.keys(config).forEach(function (key) {
      var value = self[key];

      if (value && (isSimpleType(value) || typeof value === "boolean")) {
        config[key] = value;
      }
    });
    return config;
  };

  TrackBase.prototype.supportsWholeGenome = function () {
    return false;
  };

  TrackBase.prototype.clickedFeatures = function (clickState) {
    // We use the cached features rather than method to avoid async load.  If the
    // feature is not already loaded this won't work,  but the user wouldn't be mousing over it either.
    var features = clickState.viewport.getCachedFeatures();

    if (!features || features.length === 0) {
      return [];
    }

    var genomicLocation = clickState.genomicLocation; // When zoomed out we need some tolerance around genomicLocation

    var tolerance = clickState.referenceFrame.bpPerPixel > 0.2 ? 3 * clickState.referenceFrame.bpPerPixel : 0;
    var ss = Math.floor(genomicLocation) - tolerance;
    var ee = Math.floor(genomicLocation) + tolerance;
    return FeatureUtils.findOverlapping(features, ss, ee);
  };
  /**
   * Set certain track properties, usually from a "track" line.  Not all UCSC properties are supported.
   * @param properties
   */


  TrackBase.prototype.setTrackProperties = function (properties) {
    for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {
      var key = _Object$keys[_i];

      switch (key) {
        case "name":
        case "useScore":
          this[key] = properties[key];
          break;

        case "visibility":
          //0 - hide, 1 - dense, 2 - full, 3 - pack, and 4 - squish
          switch (properties[key]) {
            case "2":
            case "3":
            case "pack":
            case "full":
              this.displayMode = "EXPANDED";
              break;

            case "4":
            case "squish":
              this.displayMode = "SQUISHED";
              break;

            case "1":
            case "dense":
              this.displayMode = "COLLAPSED";
          }

          break;

        case "color":
        case "altColor":
          this[key] = "rgb(" + properties[key] + ")";
          break;

        case "featureVisiblityWindow":
          this.visibilityWindow = Number.parseInt(properties[key]);
      }
    }
  };

  TrackBase.prototype.getVisibilityWindow = function () {
    return this.visibilityWindow;
  };
  /**
   * Default popup text function -- just extracts string and number properties in random order.
   * @param feature
   * @returns {Array}
   */


  TrackBase.extractPopupData = function (feature, genomeId) {
    var filteredProperties = new Set(['row', 'color']);
    var data = [];
    var alleles, alleleFreqs;

    for (var property in feature) {
      if (feature.hasOwnProperty(property) && !filteredProperties.has(property) && isSimpleType(feature[property])) {
        data.push({
          name: property,
          value: feature[property]
        });

        if (property === "alleles") {
          alleles = feature[property];
        } else if (property === "alleleFreqs") {
          alleleFreqs = feature[property];
        }
      }
    } //const genomeId = this.getGenomeId()


    if (alleles && alleleFreqs) {
      if (alleles.endsWith(",")) {
        alleles = alleles.substr(0, alleles.length - 1);
      }

      if (alleleFreqs.endsWith(",")) {
        alleleFreqs = alleleFreqs.substr(0, alleleFreqs.length - 1);
      }

      var a = alleles.split(",");
      var af = alleleFreqs.split(",");

      if (af.length > 1) {
        var b = [];

        for (var i = 0; i < af.length; i++) {
          b.push({
            a: a[i],
            af: Number.parseFloat(af[i])
          });
        }

        b.sort(function (x, y) {
          return x.af - y.af;
        });
        var ref = b[b.length - 1].a;

        if (ref.length === 1) {
          for (var _i2 = b.length - 2; _i2 >= 0; _i2--) {
            var alt = b[_i2].a;

            if (alt.length === 1) {
              var cravatLink = TrackBase.getCravatLink(feature.chr, feature.start + 1, ref, alt, genomeId);

              if (cravatLink) {
                data.push("<hr/>");
                data.push(cravatLink);
              }
            }
          }
        }
      }
    }

    return data;
  };

  TrackBase.prototype.getGenomeId = function () {
    return this.browser.genome ? this.browser.genome.id : undefined;
  };

  TrackBase.getCravatLink = function (chr, position, ref, alt, genomeID) {
    if ("hg38" === genomeID || "GRCh38" === genomeID) {
      var cravatChr = chr.startsWith("chr") ? chr : "chr" + chr;
      return "<a target='_blank' " + "href='https://www.cravat.us/CRAVAT/variant.html?variant=" + cravatChr + "_" + position + "_+_" + ref + "_" + alt + "'>Cravat " + ref + "->" + alt + "</a>";
    } else {
      return undefined;
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /**
   * Parser for VCF files.
   */

  function createVCFVariant(tokens) {
    var variant = new Variant();
    variant.chr = tokens[0]; // TODO -- use genome aliases

    variant.pos = parseInt(tokens[1]);
    variant.names = tokens[2]; // id in VCF

    variant.referenceBases = tokens[3];
    variant.alternateBases = tokens[4];
    variant.quality = tokens[5];
    variant.filter = tokens[6];
    variant.info = getInfoObject(tokens[7]);
    init$1(variant);
    return variant;
  }

  function getInfoObject(infoStr) {
    if (!infoStr) {
      return undefined;
    }

    var info = {};
    infoStr.split(';').forEach(function (elem) {
      var element = elem.split('=');
      info[element[0]] = element[1];
    });
    return info;
  }

  function init$1(variant) {
    var ref = variant.referenceBases;
    var altBases = variant.alternateBases;

    if (variant.info) {
      if (variant.info["VT"]) {
        variant.type = variant.info["VT"];
      } else if (variant.info["SVTYPE"]) {
        variant.type = "SV";
      } else if (variant.info["PERIOD"]) {
        variant.type = "STR";
      } else {
        variant.type = determineType(altBases);
      }
    } // Check for reference block


    if (variant.type === "NONVARIANT") {
      variant.heterozygosity = 0;
      variant.start = variant.pos - 1; // convert to 0-based coordinate convention

      variant.end = variant.start + ref.length; // might be overwritten by "END" attribute
    }

    if (variant.info["END"]) {
      variant.start = variant.pos - 1;
      variant.end = Number.parseInt(variant.info["END"]);
    } else {
      var altTokens = altBases.split(",").filter(function (token) {
        return token.length > 0;
      });
      variant.alleles = [];
      variant.start = variant.pos;
      variant.end = variant.pos;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = altTokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var alt = _step.value;
          variant.alleles.push(alt); // We don't yet handle  SV and other special alt representations

          if ("SV" !== variant.type && isKnownAlt(alt)) {
            var altLength = alt.length;
            var lengthOnRef = ref.length; // Trim off matching bases.  Try first match, then right -> left,  then any remaining left -> right

            var s = 0;

            if (ref.charCodeAt(0) === alt.charCodeAt(0)) {
              s++;
              altLength--;
              lengthOnRef--;
            } // right -> left from end


            while (altLength > 0 && lengthOnRef > 0) {
              if (alt.charCodeAt(s + altLength - 1) === ref.charCodeAt(s + lengthOnRef - 1)) {
                altLength--;
                lengthOnRef--;
              } else {
                break;
              }
            } // if any remaining, left -> right


            while (altLength > 0 && lengthOnRef > 0) {
              if (alt.charCodeAt(s + altLength - 1) === ref.charCodeAt(s + lengthOnRef - 1)) {
                s++;
                altLength--;
                lengthOnRef--;
              } else {
                break;
              }
            }

            var alleleStart = variant.pos + s - 1; // -1 for zero based coordinates

            var alleleEnd = alleleStart + Math.max(1, lengthOnRef); // insertions have zero length on ref, but we give them 1

            variant.start = Math.min(variant.start, alleleStart);
            variant.end = Math.max(variant.end, alleleEnd);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }

  var knownAltBases = new Set(["A", "C", "T", "G"].map(function (c) {
    return c.charCodeAt(0);
  }));

  function isKnownAlt(alt) {
    for (var i = 0; i < alt.length; i++) {
      if (!knownAltBases.has(alt.charCodeAt(i))) {
        return false;
      }
    }

    return true;
  }

  var Variant = function Variant() {};

  Variant.prototype.popupData = function (genomicLocation, genomeId) {
    var self = this,
        fields,
        gt;
    var posString = this.end === this.pos ? this.pos : "".concat(this.pos, "-").concat(this.end);
    fields = [{
      name: "Chr",
      value: this.chr
    }, {
      name: "Pos",
      value: posString
    }, {
      name: "Names",
      value: this.names ? this.names : ""
    }, {
      name: "Ref",
      value: this.referenceBases
    }, {
      name: "Alt",
      value: this.alternateBases.replace("<", "&lt;")
    }, {
      name: "Qual",
      value: this.quality
    }, {
      name: "Filter",
      value: this.filter
    }];

    if (this.referenceBases.length === 1 && !determineType(this.alternateBases)) {
      var ref = this.referenceBases;

      if (ref.length === 1) {
        var altArray = this.alternateBases.split(",");

        for (var i = 0; i < altArray.length; i++) {
          var alt = this.alternateBases[i];

          if (alt.length === 1) {
            var l = TrackBase.getCravatLink(this.chr, this.pos, ref, alt, genomeId);

            if (l) {
              fields.push("<hr/>");
              fields.push(l);
            }
          }
        }
      }
    }

    if (this.hasOwnProperty("heterozygosity")) {
      fields.push({
        name: "Heterozygosity",
        value: this.heterozygosity
      });
    }

    if (this.info) {
      fields.push('<hr>');
      Object.keys(this.info).forEach(function (key) {
        fields.push({
          name: key,
          value: arrayToString(self.info[key])
        });
      });
    } // Special case of VCF with a single sample


    if (this.calls && this.calls.length === 1) {
      fields.push('<hr>');
      gt = this.alleles[this.calls[0].genotype[0]] + this.alleles[this.calls[0].genotype[1]];
      fields.push({
        name: "Genotype",
        value: gt
      });
    }

    return fields;
  };

  Variant.prototype.isRefBlock = function () {
    return "NONVARIANT" === this.type;
  };

  function determineType(altAlleles) {
    if (altAlleles === undefined) {
      return "UNKNOWN";
    } else if (altAlleles.trim().length === 0 || altAlleles === "<NON_REF>" || altAlleles === "<*>") {
      return "NONVARIANT";
    } else {
      var alleles = altAlleles.split(",");
      var types = alleles.map(function (a) {
        return "<NON_REF>" === a ? "NONVARIANT" : "OTHER";
      });
      var type = types[0];
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = types[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var t = _step2.value;

          if (t !== type) {
            return "MIXED";
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return type;
    }
  }

  function arrayToString(value, delim) {
    if (delim === undefined) delim = ",";

    if (!Array.isArray(value)) {
      return value;
    }

    return value.join(delim);
  }
  /**
   * @deprecated - the GA4GH API has been deprecated.  This code no longer maintained.
   * @param json
   * @returns {Variant}
   */


  function createGAVariant(json) {
    var variant = new Variant();
    variant.chr = json.referenceName;
    variant.start = parseInt(json.start); // Might get overriden below

    variant.end = parseInt(json.end); // Might get overriden below

    variant.pos = variant.start + 1; // GA4GH is 0 based.

    variant.names = arrayToString(json.names, "; ");
    variant.referenceBases = json.referenceBases;
    variant.alternateBases = arrayToString(json.alternateBases);
    variant.quality = json.quality;
    variant.filter = arrayToString(json.filter); // Flatten GA4GH attributes array

    variant.info = {};

    if (json.info) {
      Object.keys(json.info).forEach(function (key) {
        var value,
            valueArray = json.info[key];

        if (Array.isArray(valueArray)) {
          value = valueArray.join(",");
        } else {
          value = valueArray;
        }

        variant.info[key] = value;
      });
    } // Need to build a hash of calls for fast lookup
    // Note from the GA4GH spec on call ID:
    //
    // The ID of the call set this variant call belongs to. If this field is not present,
    // the ordering of the call sets from a SearchCallSetsRequest over this GAVariantSet
    // is guaranteed to match the ordering of the calls on this GAVariant.
    // The number of results will also be the same.


    variant.calls = {};
    var id;

    if (json.calls) {
      json.calls.forEach(function (call) {
        id = call.callSetId;
        variant.calls[id] = call;
      });
    }

    init$1(variant);
    return variant;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /**
   * Parser for VCF files.
   */

  var VcfParser = function VcfParser() {};

  VcfParser.prototype.parseHeader = function (data) {
    var dataWrapper,
        tokens,
        line,
        j,
        header = {},
        id,
        values,
        ltIdx,
        gtIdx,
        type;
    dataWrapper = getDataWrapper(data); // First line must be file format

    line = dataWrapper.nextLine();

    if (line.startsWith("##fileformat")) {
      header.version = line.substr(13);
    } else {
      throw new Error("Invalid VCF file: missing fileformat line");
    }

    while (line = dataWrapper.nextLine()) {
      if (line.startsWith("#")) {
        id = null;
        values = {};

        if (line.startsWith("##")) {
          if (line.startsWith("##INFO") || line.startsWith("##FILTER") || line.startsWith("##FORMAT")) {
            ltIdx = line.indexOf("<");
            gtIdx = line.lastIndexOf(">");

            if (!(ltIdx > 2 && gtIdx > 0)) {
              continue;
            }

            type = line.substring(2, ltIdx - 1);
            if (!header[type]) header[type] = {}; //##INFO=<ID=AF,Number=A,Type=Float,Description="Allele frequency based on Flow Evaluator observation counts">
            // ##FILTER=<ID=NOCALL,Description="Generic filter. Filtering details stored in FR info tag.">
            // ##FORMAT=<ID=AF,Number=A,Type=Float,Description="Allele frequency based on Flow Evaluator observation counts">

            tokens = splitStringRespectingQuotes(line.substring(ltIdx + 1, gtIdx - 1), ",");
            tokens.forEach(function (token) {
              var kv = token.split("=");

              if (kv.length > 1) {
                if (kv[0] === "ID") {
                  id = kv[1];
                } else {
                  values[kv[0]] = kv[1];
                }
              }
            });

            if (id) {
              header[type][id] = values;
            }
          }
        } else if (line.startsWith("#CHROM")) {
          tokens = line.split("\t");

          if (tokens.length > 8) {
            // call set names -- use column index for id
            header.callSets = [];

            for (j = 9; j < tokens.length; j++) {
              header.callSets.push({
                id: j,
                name: tokens[j]
              });
            }
          }
        }
      } else {
        break;
      }
    }

    this.header = header; // Will need to intrepret genotypes and info field

    return header;
  };

  function extractCallFields(tokens) {
    var callFields = {
      genotypeIndex: -1,
      fields: tokens
    },
        i;

    for (i = 0; i < tokens.length; i++) {
      if ("GT" === tokens[i]) {
        callFields.genotypeIndex = i;
      }
    }

    return callFields;
  }
  /**
   * Parse data as a collection of Variant objects.
   *
   * @param data
   * @returns {Array}
   */


  VcfParser.prototype.parseFeatures = function (data) {
    var dataWrapper,
        line,
        allFeatures = [],
        callSets = this.header.callSets,
        variant,
        tokens,
        callFields,
        index,
        token;
    dataWrapper = getDataWrapper(data);

    while (line = dataWrapper.nextLine()) {
      if (!line.startsWith("#")) {
        tokens = line.split("\t");

        if (tokens.length >= 8) {
          variant = createVCFVariant(tokens);
          variant.header = this.header; // Keep a pointer to the header to interpret fields for popup text

          allFeatures.push(variant);

          if (tokens.length > 9) {
            // Format
            callFields = extractCallFields(tokens[8].split(":"));
            variant.calls = {};

            for (index = 9; index < tokens.length; index++) {
              token = tokens[index];
              var callSet = callSets[index - 9],
                  call = {
                callSetName: callSet.name,
                info: {}
              };
              variant.calls[callSet.id] = call;
              token.split(":").forEach(function (callToken, idx) {
                switch (idx) {
                  case callFields.genotypeIndex:
                    call.genotype = [];
                    callToken.split(/[\|\/]/).forEach(function (s) {
                      call.genotype.push(parseInt(s));
                    });
                    break;

                  default:
                    call.info[callFields.fields[idx]] = callToken;
                }
              });
            }
          }
        }
      }
    }

    return allFeatures;
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  // TODO -- big endian
  var BinaryParser = function BinaryParser(dataView, littleEndian) {
    this.littleEndian = littleEndian !== undefined ? littleEndian : true;
    this.position = 0;
    this.view = dataView;
    this.length = dataView.byteLength;
  };

  BinaryParser.prototype.available = function () {
    return this.length - this.position;
  };

  BinaryParser.prototype.remLength = function () {
    return this.length - this.position;
  };

  BinaryParser.prototype.hasNext = function () {
    return this.position < this.length - 1;
  };

  BinaryParser.prototype.getByte = function () {
    var retValue = this.view.getUint8(this.position, this.littleEndian);
    this.position++;
    return retValue;
  };

  BinaryParser.prototype.getShort = function () {
    var retValue = this.view.getInt16(this.position, this.littleEndian);
    this.position += 2;
    return retValue;
  };

  BinaryParser.prototype.getUShort = function () {
    // var byte1 = this.getByte(),
    //     byte2 = this.getByte(),
    //     retValue = ((byte2 << 24 >>> 16) + (byte1 << 24 >>> 24));
    //     return retValue;
    //
    var retValue = this.view.getUint16(this.position, this.littleEndian);
    this.position += 2;
    return retValue;
  };

  BinaryParser.prototype.getInt = function () {
    var retValue = this.view.getInt32(this.position, this.littleEndian);
    this.position += 4;
    return retValue;
  };

  BinaryParser.prototype.getUInt = function () {
    var retValue = this.view.getUint32(this.position, this.littleEndian);
    this.position += 4;
    return retValue;
  };

  BinaryParser.prototype.getLong = function () {
    // DataView doesn't support long. So we'll try manually
    var b = [];
    b[0] = this.view.getUint8(this.position);
    b[1] = this.view.getUint8(this.position + 1);
    b[2] = this.view.getUint8(this.position + 2);
    b[3] = this.view.getUint8(this.position + 3);
    b[4] = this.view.getUint8(this.position + 4);
    b[5] = this.view.getUint8(this.position + 5);
    b[6] = this.view.getUint8(this.position + 6);
    b[7] = this.view.getUint8(this.position + 7);
    var value = 0;

    if (this.littleEndian) {
      for (var i = b.length - 1; i >= 0; i--) {
        value = value * 256 + b[i];
      }
    } else {
      for (var _i = 0; _i < b.length; _i++) {
        value = value * 256 + b[_i];
      }
    }

    this.position += 8;
    return value;
  };

  BinaryParser.prototype.getString = function (len) {
    var s = "";
    var c;

    while ((c = this.view.getUint8(this.position++)) !== 0) {
      s += String.fromCharCode(c);
      if (len && s.length === len) break;
    }

    return s;
  };

  BinaryParser.prototype.getFixedLengthString = function (len) {
    var s = "";
    var i;
    var c;

    for (i = 0; i < len; i++) {
      c = this.view.getUint8(this.position++);

      if (c > 0) {
        s += String.fromCharCode(c);
      }
    }

    return s;
  };

  BinaryParser.prototype.getFixedLengthTrimmedString = function (len) {
    var s = "";
    var i;
    var c;

    for (i = 0; i < len; i++) {
      c = this.view.getUint8(this.position++);

      if (c > 32) {
        s += String.fromCharCode(c);
      }
    }

    return s;
  };

  BinaryParser.prototype.getFloat = function () {
    var retValue = this.view.getFloat32(this.position, this.littleEndian);
    this.position += 4;
    return retValue;
  };

  BinaryParser.prototype.getDouble = function () {
    var retValue = this.view.getFloat64(this.position, this.littleEndian);
    this.position += 8;
    return retValue;
  };

  BinaryParser.prototype.skip = function (n) {
    this.position += n;
    return this.position;
  };
  /**
   * Return a bgzip (bam and tabix) virtual pointer
   * TODO -- why isn't 8th byte used ?
   * @returns {*}
   */


  BinaryParser.prototype.getVPointer = function () {
    var position = this.position,
        offset = this.view.getUint8(position + 1) << 8 | this.view.getUint8(position),
        byte6 = (this.view.getUint8(position + 6) & 0xff) * 0x100000000,
        byte5 = (this.view.getUint8(position + 5) & 0xff) * 0x1000000,
        byte4 = (this.view.getUint8(position + 4) & 0xff) * 0x10000,
        byte3 = (this.view.getUint8(position + 3) & 0xff) * 0x100,
        byte2 = this.view.getUint8(position + 2) & 0xff,
        block = byte6 + byte5 + byte4 + byte3 + byte2;
    this.position += 8; //       if (block == 0 && offset == 0) {
    //           return null;
    //       } else {

    return new VPointer(block, offset); //       }
  };

  function VPointer(block, offset) {
    this.block = block;
    this.offset = offset;
  }

  VPointer.prototype.isLessThan = function (vp) {
    return this.block < vp.block || this.block === vp.block && this.offset < vp.offset;
  };

  VPointer.prototype.isGreaterThan = function (vp) {
    return this.block > vp.block || this.block === vp.block && this.offset > vp.offset;
  };

  VPointer.prototype.print = function () {
    return "" + this.block + ":" + this.offset;
  };

  var BAI_MAGIC = 21578050;
  var TABIX_MAGIC = 21578324;
  /**
   * @param indexURL
   * @param config
   * @param tabix
   *
   */

  function loadBamIndex(_x, _x2, _x3, _x4) {
    return _loadBamIndex.apply(this, arguments);
  }

  function _loadBamIndex() {
    _loadBamIndex = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(indexURL, config, tabix, genome) {
      var arrayBuffer, indices, blockMin, blockMax, inflate, parser, magic, sequenceIndexMap, nref, format, col_seq, col_beg, col_end, meta, skip, l_nm, i, seq_name, ref, binIndex, linearIndex, nbin, b, binNumber, nchnk, cs, ce, n_maped, nUnmapped, _nchnk, _i, _cs, _ce, nintv, _i2, _cs2;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return igvxhr.loadArrayBuffer(indexURL, buildOptions(config));

            case 2:
              arrayBuffer = _context.sent;
              indices = [];
              blockMin = Number.MAX_VALUE, blockMax = 0;

              if (arrayBuffer) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return");

            case 7:
              if (tabix) {
                inflate = new Zlib.Gunzip(new Uint8Array(arrayBuffer));
                arrayBuffer = inflate.decompress().buffer;
              }

              parser = new BinaryParser(new DataView(arrayBuffer));
              magic = parser.getInt();
              sequenceIndexMap = {};

              if (!(magic === BAI_MAGIC || tabix && magic === TABIX_MAGIC)) {
                _context.next = 17;
                break;
              }

              nref = parser.getInt();

              if (tabix) {
                // Tabix header parameters aren't used, but they must be read to advance the pointer
                format = parser.getInt();
                col_seq = parser.getInt();
                col_beg = parser.getInt();
                col_end = parser.getInt();
                meta = parser.getInt();
                skip = parser.getInt();
                l_nm = parser.getInt();

                for (i = 0; i < nref; i++) {
                  seq_name = parser.getString(); // Translate to "official" chr name.

                  if (genome) {
                    seq_name = genome.getChromosomeName(seq_name);
                  }

                  sequenceIndexMap[seq_name] = i;
                }
              }

              for (ref = 0; ref < nref; ref++) {
                binIndex = {};
                linearIndex = [];
                nbin = parser.getInt();

                for (b = 0; b < nbin; b++) {
                  binNumber = parser.getInt();

                  if (binNumber === 37450) {
                    // This is a psuedo bin, not used but we have to consume the bytes
                    nchnk = parser.getInt(); // # of chunks for this bin

                    cs = parser.getVPointer(); // unmapped beg

                    ce = parser.getVPointer(); // unmapped end

                    n_maped = parser.getLong();
                    nUnmapped = parser.getLong();
                  } else {
                    binIndex[binNumber] = [];
                    _nchnk = parser.getInt(); // # of chunks for this bin

                    for (_i = 0; _i < _nchnk; _i++) {
                      _cs = parser.getVPointer(); //chunk_beg

                      _ce = parser.getVPointer(); //chunk_end

                      if (_cs && _ce) {
                        if (_cs.block < blockMin) {
                          blockMin = _cs.block; // Block containing first alignment
                        }

                        if (_ce.block > blockMax) {
                          blockMax = _ce.block;
                        }

                        binIndex[binNumber].push([_cs, _ce]);
                      }
                    }
                  }
                }

                nintv = parser.getInt();

                for (_i2 = 0; _i2 < nintv; _i2++) {
                  _cs2 = parser.getVPointer();
                  linearIndex.push(_cs2); // Might be null
                }

                if (nbin > 0) {
                  indices[ref] = {
                    binIndex: binIndex,
                    linearIndex: linearIndex
                  };
                }
              }

              _context.next = 18;
              break;

            case 17:
              throw new Error(indexURL + " is not a " + (tabix ? "tabix" : "bai") + " file");

            case 18:
              return _context.abrupt("return", new BamIndex(indices, blockMin, blockMax, sequenceIndexMap, tabix));

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _loadBamIndex.apply(this, arguments);
  }

  var BamIndex = function BamIndex(indices, blockMin, blockMax, sequenceIndexMap, tabix) {
    this.firstAlignmentBlock = blockMin;
    this.lastAlignmentBlock = blockMax;
    this.indices = indices;
    this.sequenceIndexMap = sequenceIndexMap;
    this.tabix = tabix;
  };
  /**
   * Fetch blocks for a particular genomic range.  This method is public so it can be unit-tested.
   *
   * @param refId  the sequence dictionary index of the chromosome
   * @param min  genomic start position
   * @param max  genomic end position
   * @param return an array of {minv: {filePointer, offset}, {maxv: {filePointer, offset}}
   */


  BamIndex.prototype.blocksForRange = function (refId, min, max) {
    var bam = this;
    var ba = bam.indices[refId];

    if (!ba) {
      return [];
    } else {
      var overlappingBins = reg2bins(min, max); // List of bin #s that overlap min, max

      var chunks = []; // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned

      overlappingBins.forEach(function (bin) {
        if (ba.binIndex[bin]) {
          var binChunks = ba.binIndex[bin],
              nchnk = binChunks.length;

          for (var c = 0; c < nchnk; ++c) {
            var cs = binChunks[c][0];
            var ce = binChunks[c][1];
            chunks.push({
              minv: cs,
              maxv: ce,
              bin: bin
            });
          }
        }
      }); // Use the linear index to find minimum file position of chunks that could contain alignments in the region

      var nintv = ba.linearIndex.length;
      var lowest = null;
      var minLin = Math.min(min >> 14, nintv - 1);
      var maxLin = Math.min(max >> 14, nintv - 1);

      for (var i = minLin; i <= maxLin; ++i) {
        var vp = ba.linearIndex[i];

        if (vp) {
          // todo -- I think, but am not sure, that the values in the linear index have to be in increasing order.  So the first non-null should be minimum
          if (!lowest || vp.isLessThan(lowest)) {
            lowest = vp;
          }
        }
      }

      return optimizeChunks(chunks, lowest);
    }
  };

  function optimizeChunks(chunks, lowest) {
    var mergedChunks = [];
    var lastChunk = null;
    if (chunks.length === 0) return chunks;
    chunks.sort(function (c0, c1) {
      var dif = c0.minv.block - c1.minv.block;

      if (dif !== 0) {
        return dif;
      } else {
        return c0.minv.offset - c1.minv.offset;
      }
    });
    chunks.forEach(function (chunk) {
      if (!lowest || chunk.maxv.isGreaterThan(lowest)) {
        if (lastChunk === null) {
          mergedChunks.push(chunk);
          lastChunk = chunk;
        } else {
          if (canMerge(lastChunk, chunk)) {
            if (chunk.maxv.isGreaterThan(lastChunk.maxv)) {
              lastChunk.maxv = chunk.maxv;
            }
          } else {
            mergedChunks.push(chunk);
            lastChunk = chunk;
          }
        }
      }
    });
    return mergedChunks;
  }

  function canMerge(chunk1, chunk2) {
    return chunk2.minv.block - chunk1.maxv.block < 65000 && chunk2.maxv.block - chunk1.minv.block < 5000000; // lastChunk.minv.block === lastChunk.maxv.block &&
    // lastChunk.maxv.block === chunk.minv.block &&
    // chunk.minv.block === chunk.maxv.block
  }
  /**
   * Calculate the list of bins that overlap with region [beg, end]
   *
   */


  function reg2bins(beg, end) {
    var k;
    var list = [];
    if (end >= 1 << 29) end = 1 << 29;
    --end;
    list.push(0);

    for (k = 1 + (beg >> 26); k <= 1 + (end >> 26); ++k) {
      list.push(k);
    }

    for (k = 9 + (beg >> 23); k <= 9 + (end >> 23); ++k) {
      list.push(k);
    }

    for (k = 73 + (beg >> 20); k <= 73 + (end >> 20); ++k) {
      list.push(k);
    }

    for (k = 585 + (beg >> 17); k <= 585 + (end >> 17); ++k) {
      list.push(k);
    }

    for (k = 4681 + (beg >> 14); k <= 4681 + (end >> 14); ++k) {
      list.push(k);
    }

    return list;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  /**
   *
   * @param indexFile
   * @param config
   * @returns a Promise for the tribble-style (.idx) index.  The fulfill function takes the index as an argument
   */

  function loadTribbleIndex(indexFile, config, genome) {
    return new Promise(function (fullfill) {
      igvxhr.loadArrayBuffer(indexFile, buildOptions(config)).then(function (arrayBuffer) {
        if (arrayBuffer) {
          var index = {};
          var parser = new BinaryParser(new DataView(arrayBuffer));
          readHeader(parser);
          var nChrs = parser.getInt();

          while (nChrs-- > 0) {
            // todo -- support interval tree index, we're assuming its a linear index
            var chrIdx = readLinear(parser);
            index[chrIdx.chr] = chrIdx;
          }

          fullfill(new TribbleIndex(index));
        } else {
          fullfill(null);
        }
      }).catch(function (error) {
        fullfill(null);
      });

      function readHeader(parser) {
        //var magicString = view.getString(4);
        var magicNumber = parser.getInt(); //   view._getInt32(offset += 32, true);

        var type = parser.getInt();
        var version = parser.getInt();
        var indexedFile = parser.getString();
        var indexedFileSize = parser.getLong();
        var indexedFileTS = parser.getLong();
        var indexedFileMD5 = parser.getString();
        var flags = parser.getInt();

        if (version >= 3) {
          var nProperties = parser.getInt();

          while (nProperties-- > 0) {
            var key = parser.getString();
            var value = parser.getString();
          }
        }
      }

      function readLinear(parser) {
        var chr = parser.getString();
   // Translate to canonical name

        if (genome) chr = genome.getChromosomeName(chr);
        var binWidth = parser.getInt();
        var nBins = parser.getInt();
        var longestFeature = parser.getInt(); //largestBlockSize = parser.getInt();
        // largestBlockSize and totalBlockSize are old V3 index values.  largest block size should be 0 for
        // all newer V3 block.  This is a nasty hack that should be removed when we go to V4 (XML!) indices

        var OLD_V3_INDEX = parser.getInt() > 0;
        var nFeatures = parser.getInt(); // note the code below accounts for > 60% of the total time to read an index

        var pos = parser.getLong();
        var blocks = new Array();

        for (var binNumber = 0; binNumber < nBins; binNumber++) {
          var nextPos = parser.getLong();
          blocks.push({
            min: pos,
            max: nextPos
          }); //        {position: pos, size: size});

          pos = nextPos;
        }

        return {
          chr: chr,
          blocks: blocks,
          longestFeature: longestFeature,
          binWidth: binWidth
        };
      }
    });
  }

  var TribbleIndex = function TribbleIndex(chrIndexTable) {
    this.chrIndex = chrIndexTable; // Dictionary of chr -> tribble index
  };
  /**
   * Fetch blocks for a particular genomic range.
   *
   * TODO -- currently this returns all blocks for the chromosome, min and max are ignored.  Fix this.
   *
   * @param queryChr the sequence dictionary index of the chromosome
   * @param min  genomic start position
   * @param max  genomic end position
   */


  TribbleIndex.prototype.blocksForRange = function (queryChr, min, max) {
    var chrIdx = this.chrIndex[queryChr];

    if (chrIdx) {
      var blocks = chrIdx.blocks;
      var longestFeature = chrIdx.longestFeature;
      var binWidth = chrIdx.binWidth;
      var adjustedPosition = Math.max(min - longestFeature, 0);
      var startBinNumber = Math.floor(adjustedPosition / binWidth);
      if (startBinNumber >= blocks.length) // are we off the end of the bin list, so return nothing
        return [];else {
        var endBinNumber = Math.min(Math.floor((max - 1) / binWidth), blocks.length - 1); // By definition blocks are adjacent for the liner index.  Combine them into one merged block

        var startPos = blocks[startBinNumber].min;
        var endPos = blocks[endBinNumber].max;
        var size = endPos - startPos;

        if (size === 0) {
          return [];
        } else {
          var mergedBlock = {
            minv: {
              block: startPos,
              offset: 0
            },
            maxv: {
              block: endPos,
              offset: 0
            }
          };
          return [mergedBlock];
        } //  var blocks = chrIdx.blocks,
        //      lastBlock = blocks[blocks.length - 1],
        //     mergedBlock = {minv: {block: blocks[0].min, offset: 0}, maxv: {block: lastBlock.max, offset: 0}};
        // return [mergedBlock];

      }
    } else {
      return null;
    }
  };

  /**
   * Reader for "bed like" files (tab delimited files with 1 feature per line: bed, gff, vcf, etc)
   *
   * @param config
   * @constructor
   */

  var FeatureFileReader = function FeatureFileReader(config, genome) {
    var uriParts;
    this.config = config || {};
    this.genome = genome;
    this.indexURL = config.indexURL;
    this.indexed = config.indexed;

    if (isFilePath(this.config.url)) {
      this.filename = this.config.url.name;
    } else if (isString(this.config.url) && this.config.url.startsWith('data:')) {
      this.indexed = false; // by definition

      this.dataURI = config.url;
    } else {
      uriParts = parseUri(this.config.url);
      this.filename = config.filename || uriParts.file;
    }

    this.format = this.config.format;
    this.parser = this.getParser(this.format, this.config.decode, this.config);
  };
  /**
   * Return a promise to load features for the genomic interval
   * @param chr
   * @param start
   * @param end
   */


  FeatureFileReader.prototype.readFeatures =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(chr, start, end) {
      var index;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.getIndex();

            case 2:
              index = _context.sent;

              if (!index) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return", this.loadFeaturesWithIndex(chr, start, end));

            case 7:
              if (!this.dataURI) {
                _context.next = 11;
                break;
              }

              return _context.abrupt("return", this.loadFeaturesFromDataURI());

            case 11:
              return _context.abrupt("return", this.loadFeaturesNoIndex());

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  FeatureFileReader.prototype.readHeader =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    var header, features, index, maxSize, bsizeOptions, abuffer, bsize, options, data, _features;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (this.header) {
              _context2.next = 36;
              break;
            }

            if (!this.dataURI) {
              _context2.next = 9;
              break;
            }

            _context2.next = 4;
            return this.loadFeaturesFromDataURI(this.dataURI);

          case 4:
            features = _context2.sent;
            header = this.header || {};
            header.features = features;
            _context2.next = 36;
            break;

          case 9:
            if (!(this.config.indexURL || this.config.indexed)) {
              _context2.next = 28;
              break;
            }

            _context2.next = 12;
            return this.getIndex();

          case 12:
            index = _context2.sent;
            // Load the file header (not HTTP header) for an indexed file.
            maxSize = "vcf" === this.config.format ? 65000 : 1000;

            if (!index.tabix) {
              _context2.next = 21;
              break;
            }

            bsizeOptions = buildOptions(this.config, {
              range: {
                start: index.firstAlignmentBlock,
                size: 26
              }
            });
            _context2.next = 18;
            return igvxhr.loadArrayBuffer(this.config.url, bsizeOptions);

          case 18:
            abuffer = _context2.sent;
            bsize = bgzBlockSize(abuffer);
            maxSize = index.firstAlignmentBlock + bsize;

          case 21:
            options = buildOptions(this.config, {
              bgz: index.tabix,
              range: {
                start: 0,
                size: maxSize
              }
            });
            _context2.next = 24;
            return igvxhr.loadString(this.config.url, options);

          case 24:
            data = _context2.sent;
            header = this.parser.parseHeader(data);
            _context2.next = 33;
            break;

          case 28:
            _context2.next = 30;
            return this.loadFeaturesNoIndex();

          case 30:
            _features = _context2.sent;
            header = this.header || {};
            header.features = _features;

          case 33:
            if (header && this.parser) {
              this.parser.header = header;
            }

            this.header = header;
            return _context2.abrupt("return", header);

          case 36:
            return _context2.abrupt("return", this.header);

          case 37:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  FeatureFileReader.prototype.getParser = function (format, decode, config) {
    switch (format) {
      case "vcf":
        return new VcfParser(config);

      case "seg":
        return new SegParser();

      default:
        return new FeatureParser(format, decode, this.config);
    }
  };
  /**
   * Return a Promise for the async loaded index
   */


  FeatureFileReader.prototype.loadIndex =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3() {
    var idxFile;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            idxFile = this.config.indexURL;

            if (!(this.filename.endsWith('.gz') || this.filename.endsWith('.bgz'))) {
              _context3.next = 6;
              break;
            }

            if (!idxFile) {
              idxFile = this.config.url + '.tbi';
            }

            return _context3.abrupt("return", loadBamIndex(idxFile, this.config, true, this.genome));

          case 6:
            if (!idxFile) {
              idxFile = this.config.url + '.idx';
            }

            return _context3.abrupt("return", loadTribbleIndex(idxFile, this.config, this.genome));

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  FeatureFileReader.prototype.loadFeaturesNoIndex =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee4() {
    var options, data;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            options = buildOptions(this.config); // Add oauth token, if any

            _context4.next = 3;
            return igvxhr.loadString(this.config.url, options);

          case 3:
            data = _context4.sent;
            this.header = this.parser.parseHeader(data);

            if (this.header instanceof String && this.header.startsWith("##gff-version 3")) {
              this.format = 'gff3';
            }

            return _context4.abrupt("return", this.parser.parseFeatures(data));

          case 7:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  FeatureFileReader.prototype.loadFeaturesWithIndex =
  /*#__PURE__*/
  function () {
    var _ref5 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee6(chr, start, end) {
      var config, parser, tabix, refId, allFeatures, genome, blocks, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;

      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              //console.log("Using index");
              config = this.config;
              parser = this.parser;
              tabix = this.index.tabix;
              refId = tabix ? this.index.sequenceIndexMap[chr] : chr;
              allFeatures = [];
              genome = this.genome;
              blocks = this.index.blocksForRange(refId, start, end);

              if (!(!blocks || blocks.length === 0)) {
                _context6.next = 11;
                break;
              }

              return _context6.abrupt("return", []);

            case 11:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context6.prev = 14;
              _loop =
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee5() {
                var block, startPos, startOffset, endOffset, endPos, lastBlockSize, bsizeOptions, abuffer, options, data, inflated, _inflated, parse;

                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                  while (1) {
                    switch (_context5.prev = _context5.next) {
                      case 0:
                        parse = function _ref6(inflated) {
                          var slicedData = startOffset ? inflated.slice(startOffset) : inflated;
                          var slicedFeatures = parser.parseFeatures(slicedData); // Filter features not in requested range.

                          var _iteratorNormalCompletion2 = true;
                          var _didIteratorError2 = false;
                          var _iteratorError2 = undefined;

                          try {
                            for (var _iterator2 = slicedFeatures[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                              var f = _step2.value;

                              if (genome.getChromosomeName(f.chr) !== chr) {
                                if (allFeatures.length === 0) {
                                  continue; //adjacent chr to the left
                                } else {
                                    break; //adjacent chr to the right
                                  }
                              }

                              if (f.start > end) break;

                              if (f.end >= start && f.start <= end) {
                                allFeatures.push(f);
                              }
                            }
                          } catch (err) {
                            _didIteratorError2 = true;
                            _iteratorError2 = err;
                          } finally {
                            try {
                              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                                _iterator2.return();
                              }
                            } finally {
                              if (_didIteratorError2) {
                                throw _iteratorError2;
                              }
                            }
                          }
                        };

                        block = _step.value;
                        startPos = block.minv.block;
                        startOffset = block.minv.offset;
                        endOffset = block.maxv.offset;
                        endPos = void 0;

                        if (!tabix) {
                          _context5.next = 17;
                          break;
                        }

                        lastBlockSize = 0;

                        if (!(endOffset > 0)) {
                          _context5.next = 14;
                          break;
                        }

                        bsizeOptions = buildOptions(config, {
                          range: {
                            start: block.maxv.block,
                            size: 26
                          }
                        });
                        _context5.next = 12;
                        return igvxhr.loadArrayBuffer(config.url, bsizeOptions);

                      case 12:
                        abuffer = _context5.sent;
                        lastBlockSize = bgzBlockSize(abuffer);

                      case 14:
                        endPos = block.maxv.block + lastBlockSize;
                        _context5.next = 18;
                        break;

                      case 17:
                        endPos = block.maxv.block;

                      case 18:
                        options = buildOptions(config, {
                          range: {
                            start: startPos,
                            size: endPos - startPos + 1
                          }
                        });

                        if (!tabix) {
                          _context5.next = 27;
                          break;
                        }

                        _context5.next = 22;
                        return igvxhr.loadArrayBuffer(config.url, options);

                      case 22:
                        data = _context5.sent;
                        inflated = new Uint8Array(unbgzf(data));
                        parse(inflated);
                        _context5.next = 29;
                        break;

                      case 27:
                        _inflated = igvxhr.loadString(config.url, options);
                        parse(_inflated);

                      case 29:
                      case "end":
                        return _context5.stop();
                    }
                  }
                }, _callee5);
              });
              _iterator = blocks[Symbol.iterator]();

            case 17:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context6.next = 22;
                break;
              }

              return _context6.delegateYield(_loop(), "t0", 19);

            case 19:
              _iteratorNormalCompletion = true;
              _context6.next = 17;
              break;

            case 22:
              _context6.next = 28;
              break;

            case 24:
              _context6.prev = 24;
              _context6.t1 = _context6["catch"](14);
              _didIteratorError = true;
              _iteratorError = _context6.t1;

            case 28:
              _context6.prev = 28;
              _context6.prev = 29;

              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }

            case 31:
              _context6.prev = 31;

              if (!_didIteratorError) {
                _context6.next = 34;
                break;
              }

              throw _iteratorError;

            case 34:
              return _context6.finish(31);

            case 35:
              return _context6.finish(28);

            case 36:
              allFeatures.sort(function (a, b) {
                return a.start - b.start;
              });
              return _context6.abrupt("return", allFeatures);

            case 38:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[14, 24, 28, 36], [29,, 31, 35]]);
    }));

    return function (_x4, _x5, _x6) {
      return _ref5.apply(this, arguments);
    };
  }();

  FeatureFileReader.prototype.getIndex =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee7() {
    var indexOrUndefined;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            if (!(this.index !== undefined || this.indexed === false)) {
              _context7.next = 2;
              break;
            }

            return _context7.abrupt("return", this.index);

          case 2:
            if (!(false !== this.indexed)) {
              _context7.next = 18;
              break;
            }

            _context7.prev = 3;
            _context7.next = 6;
            return this.loadIndex();

          case 6:
            indexOrUndefined = _context7.sent;

            if (indexOrUndefined) {
              this.index = indexOrUndefined;
              this.indexed = true;
            } else {
              this.indexed = false;
            }

            return _context7.abrupt("return", this.index);

          case 11:
            _context7.prev = 11;
            _context7.t0 = _context7["catch"](3);

            if (!this.config.url) {
              _context7.next = 17;
              break;
            }

            throw _context7.t0;

          case 17:
            this.indexed = false;

          case 18:
            return _context7.abrupt("return", undefined);

          case 19:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this, [[3, 11]]);
  }));
  FeatureFileReader.prototype.loadFeaturesFromDataURI =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee8() {
    var plain, features;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            plain = decodeDataURI(this.dataURI);
            this.header = this.parser.parseHeader(plain);

            if (this.header instanceof String && this.header.startsWith("##gff-version 3")) {
              this.format = 'gff3';
            }

            features = this.parser.parseFeatures(plain);
            return _context8.abrupt("return", features);

          case 5:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));

  /**
   * Object for caching lists of features.  Supports effecient queries for sub-range  (chr, start, end)
   *
   * @param featureList
   * @param The genomic range spanned by featureList (optional)
   * @constructor
   */

  var FeatureCache = function FeatureCache(featureList, genome, range) {
    this.treeMap = this.buildTreeMap(featureList, genome);
    this.range = range;
    this.count = featureList.length;
  };

  FeatureCache.prototype.containsRange = function (genomicRange) {
    // No range means cache contains all features
    return this.range === undefined || this.range.contains(genomicRange.chr, genomicRange.start, genomicRange.end);
  };

  FeatureCache.prototype.queryFeatures = function (chr, start, end) {
    var tree = this.treeMap[chr];
    if (!tree) return [];
    var intervals = tree.findOverlapping(start, end);

    if (intervals.length === 0) {
      return [];
    } else {
      // Trim the list of features in the intervals to those
      // overlapping the requested range.
      // Assumption: features are sorted by start position
      var featureList = [];
      var all = this.allFeatures[chr];

      if (all) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = intervals[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var interval = _step.value;
            var indexRange = interval.value;

            for (var i = indexRange.start; i < indexRange.end; i++) {
              var feature = all[i];
              if (feature.start > end) break;else if (feature.end >= start) {
                featureList.push(feature);
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        featureList.sort(function (a, b) {
          return a.start - b.start;
        });
      }

      return featureList;
    }
  };
  /**
   * Returns all features, unsorted.
   *
   * @returns {Array}
   */


  FeatureCache.prototype.getAllFeatures = function () {
    return this.allFeatures;
  };

  FeatureCache.prototype.buildTreeMap = function (featureList, genome) {
    var treeMap = {};
    var chromosomes = [];
    this.allFeatures = {};

    if (featureList) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = featureList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var feature = _step2.value;
          var chr = feature.chr; // Translate to "official" name

          if (genome) {
            chr = genome.getChromosomeName(chr);
          }

          var geneList = this.allFeatures[chr];

          if (!geneList) {
            chromosomes.push(chr);
            geneList = [];
            this.allFeatures[chr] = geneList;
          }

          geneList.push(feature);
        } // Now build interval tree for each chromosome

      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = chromosomes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var _chr = _step3.value;
          var chrFeatures = this.allFeatures[_chr];
          chrFeatures.sort(function (f1, f2) {
            return f1.start === f2.start ? 0 : f1.start > f2.start ? 1 : -1;
          });
          treeMap[_chr] = buildIntervalTree$1(chrFeatures);
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }

    return treeMap;
  };
  /**
   * Build an interval tree from the feature list for fast interval based queries.   We lump features in groups
   * of 10, or total size / 100,   to reduce size of the tree.
   *
   * @param featureList
   */


  function buildIntervalTree$1(featureList) {
    var tree = new IntervalTree();
    var len = featureList.length;
    var chunkSize = Math.max(10, Math.round(len / 10));

    for (var i = 0; i < len; i += chunkSize) {
      var e = Math.min(len, i + chunkSize);
      var subArray = new IndexRange(i, e); //featureList.slice(i, e);

      var iStart = featureList[i].start; //

      var iEnd = iStart;

      for (var j = i; j < e; j++) {
        iEnd = Math.max(iEnd, featureList[j].end);
      }

      tree.insert(iStart, iEnd, subArray);
    }

    return tree;
  }

  var IndexRange = function IndexRange(start, end) {
    _classCallCheck(this, IndexRange);

    this.start = start;
    this.end = end;
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 University of California San Diego
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var CustomServiceReader = function CustomServiceReader(config) {
    this.config = config;
  };

  CustomServiceReader.prototype.readFeatures = function (chr, start, end) {
    var self = this,
        url = self.config.url,
        body = self.config.body;

    if (chr.toLowerCase() !== "all") {
      url = url.replace("$CHR", chr).replace("$START", start).replace("$END", end);

      if (body !== undefined) {
        self.config.body = self.config.body.replace("$CHR", chr).replace("$START", start).replace("$END", end);
      }
    }

    return igvxhr.load(url, self.config).then(function (data) {
      if (data) {
        if (typeof self.config.parser === "function") {
          return self.config.parser(data);
        } else if (isString(data)) {
          // TODO -- make this explict in config (returnType="json", "xml", etc)
          try {
            return JSON.parse(data);
          } catch (e) {
            // Apparently not json, just return data
            return data;
          }
        } else {
          return data;
        }
      } else {
        return [];
      }
    }).then(function (features) {
      if (self.config.mappings) {
        var mappingKeys = Object.keys(self.config.mappings);
        features.forEach(function (f) {
          mappingKeys.forEach(function (key) {
            f[key] = f[self.config.mappings[key]];
          });
        });
      }

      return features;
    });
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var UCSCServiceReader = function UCSCServiceReader(config, genome) {
    this.config = config;
    this.genome = genome;
    this.expandQueryInterval = false;
  };

  UCSCServiceReader.prototype.readFeatures = function (chr, start, end) {
    var s = Math.max(0, Math.floor(start));
    var e = Math.ceil(end);

    if (this.genome) {
      var c = this.genome.getChromosome(chr);

      if (c && e > c.bpLength) {
        e = c.bpLength;
      }
    }

    var url = this.config.url + '?db=' + this.config.db + '&table=' + this.config.tableName + '&chr=' + chr + '&start=' + s + '&end=' + e;
    return igvxhr.loadJson(url, this.config).then(function (data) {
      if (data) {
        data.forEach(function (sample) {
          if (sample.hasOwnProperty('exonStarts') && sample.hasOwnProperty('exonEnds') && sample.hasOwnProperty('exonCount') && sample.hasOwnProperty('cdsStart') && sample.hasOwnProperty('cdsEnd')) {
            addExons(sample);
          }
        });
        return data;
      } else {
        return null;
      }
    });
  };

  function addExons(sample) {
    var exonCount, exonStarts, exonEnds, exons, eStart, eEnd;
    exonCount = sample['exonCount'];
    exonStarts = sample['exonStarts'].split(',');
    exonEnds = sample['exonEnds'].split(',');
    exons = [];

    for (var i = 0; i < exonCount; i++) {
      eStart = parseInt(exonStarts[i]);
      eEnd = parseInt(exonEnds[i]);
      var exon = {
        start: eStart,
        end: eEnd
      };
      if (sample.cdsStart > eEnd || sample.cdsEnd < sample.cdsStart) exon.utr = true; // Entire exon is UTR

      if (sample.cdsStart >= eStart && sample.cdsStart <= eEnd) exon.cdStart = sample.cdsStart;
      if (sample.cdsEnd >= eStart && sample.cdsEnd <= eEnd) exon.cdEnd = sample.cdsEnd;
      exons.push(exon);
    }

    sample.exons = exons;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 University of California San Diego
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  /**
   * Created by jrobinson on 4/7/16.
   */
  var transcriptTypes = new Set(['transcript', 'primary_transcript', 'processed_transcript', 'mRNA', 'mrna']);
  var cdsTypes = new Set(['CDS', 'cds']);
  var codonTypes = new Set(['start_codon', 'stop_codon']);
  var utrTypes = new Set(['5UTR', '3UTR', 'UTR', 'five_prime_UTR', 'three_prime_UTR', "3'-UTR", "5'-UTR"]);
  var exonTypes = new Set(['exon', 'coding-exon']);

  var GFFHelper = function GFFHelper(options) {
    this.format = options.format;

    if (options.filterTypes) {
      this.filterTypes = new Set(options.filterTypes);
    }
  };

  GFFHelper.prototype.combineFeatures = function (features) {
    if ("gff3" === this.format) {
      return combineFeaturesGFF.call(this, features);
    } else {
      return combineFeaturesGTF.call(this, features);
    }
  };

  function combineFeaturesGTF(features) {
    var transcripts = Object.create(null);
    var combinedFeatures = [];
    var consumedFeatures = new Set();
    var filterTypes = this.filterTypes;
    features = features.filter(function (f) {
      return filterTypes === undefined || !filterTypes.has(f.type);
    }); // 1. Build dictionary of transcripts

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = features[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var f = _step.value;

        if (transcriptTypes.has(f.type)) {
          var transcriptId = f.id;

          if (undefined !== transcriptId) {
            var gffTranscript = new GFFTranscript(f);
            transcripts[transcriptId] = gffTranscript;
            combinedFeatures.push(gffTranscript);
            consumedFeatures.add(f);
          }
        }
      } // Add exons

    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = features[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var _f = _step2.value;

        if (exonTypes.has(_f.type)) {
          var id = _f.id; // transcript_id,  GTF groups all features with the same ID, does not have a parent/child hierarchy

          if (id) {
            var transcript = transcripts[id];

            if (transcript === undefined) {
              transcript = new GFFTranscript(_f); // GTF does not require an explicit transcript record

              transcripts[id] = transcript;
              combinedFeatures.push(transcript);
            }

            transcript.addExon(_f);
            consumedFeatures.add(_f);
          }
        }
      } // Apply CDS and UTR

    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = features[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var _f2 = _step3.value;

        if (cdsTypes.has(_f2.type) || utrTypes.has(_f2.type) || codonTypes.has(_f2.type)) {
          var _id = _f2.id;

          if (_id) {
            var _transcript = transcripts[_id];

            if (_transcript === undefined) {
              _transcript = new GFFTranscript(_f2);
              transcripts[_id] = _transcript;
              combinedFeatures.push(_transcript);
            }

            if (utrTypes.has(_f2.type)) {
              _transcript.addUTR(_f2);
            } else if (cdsTypes.has(_f2.type)) {
              _transcript.addCDS(_f2);
            } else if (codonTypes.has(_f2.type)) {// Ignore for now
            }

            consumedFeatures.add(_f2);
          }
        }
      } // Finish transcripts

    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    for (var _i = 0, _combinedFeatures = combinedFeatures; _i < _combinedFeatures.length; _i++) {
      var _f3 = _combinedFeatures[_i];

      if (typeof _f3.finish === "function") {
        _f3.finish();
      }
    } // Add other features


    var others = features.filter(function (f) {
      return !consumedFeatures.has(f);
    });
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = others[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var _f4 = _step4.value;
        combinedFeatures.push(_f4);
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    combinedFeatures.sort(function (a, b) {
      return a.start - b.start;
    });
    return combinedFeatures;
  }

  function combineFeaturesGFF(features) {
    // 1. Build dictionary of transcripts
    var transcripts = Object.create(null);
    var combinedFeatures = [];
    var consumedFeatures = new Set();
    var filterTypes = this.filterTypes;
    features = features.filter(function (f) {
      return filterTypes === undefined || !filterTypes.has(f.type);
    });
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = features[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var f = _step5.value;

        if (transcriptTypes.has(f.type)) {
          var transcriptId = f.id; // getAttribute(f.attributeString, "transcript_id", /\s+/);

          if (undefined !== transcriptId) {
            var gffTranscript = new GFFTranscript(f);
            transcripts[transcriptId] = gffTranscript;
            combinedFeatures.push(gffTranscript);
            consumedFeatures.add(f);
          }
        }
      } // Add exons

    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = features[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var _f5 = _step6.value;

        if (exonTypes.has(_f5.type)) {
          var parents = getParents(_f5);

          if (parents) {
            var _iteratorNormalCompletion9 = true;
            var _didIteratorError9 = false;
            var _iteratorError9 = undefined;

            try {
              for (var _iterator9 = parents[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
                var id = _step9.value;
                var transcript = transcripts[id];

                if (transcript !== undefined) {
                  transcript.addExon(_f5);
                  consumedFeatures.add(_f5);
                }
              }
            } catch (err) {
              _didIteratorError9 = true;
              _iteratorError9 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
                  _iterator9.return();
                }
              } finally {
                if (_didIteratorError9) {
                  throw _iteratorError9;
                }
              }
            }
          }
        }
      } // Apply CDS and UTR

    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }

    var _iteratorNormalCompletion7 = true;
    var _didIteratorError7 = false;
    var _iteratorError7 = undefined;

    try {
      for (var _iterator7 = features[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
        var _f6 = _step7.value;

        if (cdsTypes.has(_f6.type) || utrTypes.has(_f6.type) || codonTypes.has(_f6.type)) {
          var _parents = getParents(_f6);

          if (_parents) {
            var _iteratorNormalCompletion10 = true;
            var _didIteratorError10 = false;
            var _iteratorError10 = undefined;

            try {
              for (var _iterator10 = _parents[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
                var _id2 = _step10.value;
                var _transcript2 = transcripts[_id2];

                if (_transcript2 !== undefined) {
                  if (utrTypes.has(_f6.type)) {
                    _transcript2.addUTR(_f6);
                  } else if (cdsTypes.has(_f6.type)) {
                    _transcript2.addCDS(_f6);
                  } else if (codonTypes.has(_f6.type)) {// Ignore for now
                  }

                  consumedFeatures.add(_f6);
                }
              }
            } catch (err) {
              _didIteratorError10 = true;
              _iteratorError10 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
                  _iterator10.return();
                }
              } finally {
                if (_didIteratorError10) {
                  throw _iteratorError10;
                }
              }
            }
          }
        }
      } // Finish transcripts

    } catch (err) {
      _didIteratorError7 = true;
      _iteratorError7 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
          _iterator7.return();
        }
      } finally {
        if (_didIteratorError7) {
          throw _iteratorError7;
        }
      }
    }

    combinedFeatures.forEach(function (f) {
      if (typeof f.finish === "function") {
        f.finish();
      }
    }); // Add other features

    var others = features.filter(function (f) {
      return !consumedFeatures.has(f);
    });
    var _iteratorNormalCompletion8 = true;
    var _didIteratorError8 = false;
    var _iteratorError8 = undefined;

    try {
      for (var _iterator8 = others[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
        var _f7 = _step8.value;
        combinedFeatures.push(_f7);
      }
    } catch (err) {
      _didIteratorError8 = true;
      _iteratorError8 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
          _iterator8.return();
        }
      } finally {
        if (_didIteratorError8) {
          throw _iteratorError8;
        }
      }
    }

    combinedFeatures.sort(function (a, b) {
      return a.start - b.start;
    });
    return combinedFeatures;

    function getParents(f) {
      if (f.parent && f.parent.trim() !== "") {
        return f.parent.trim().split(",");
      } else {
        return null;
      }
    }
  }

  var GFFTranscript = function GFFTranscript(feature) {
    Object.assign(this, feature);
    this.exons = [];
  };

  GFFTranscript.prototype.addExon = function (feature) {
    this.exons.push(feature); // Expand feature --  for transcripts not explicitly represented in the file

    this.start = Math.min(this.start, feature.start);
    this.end = Math.max(this.end, feature.end);
  };

  GFFTranscript.prototype.addCDS = function (cds) {
    var exon;
    var exons = this.exons; // Find exon containing CDS

    for (var i = 0; i < exons.length; i++) {
      if (exons[i].start <= cds.start && exons[i].end >= cds.end) {
        exon = exons[i];
        break;
      }
    }

    if (exon) {
      exon.cdStart = exon.cdStart ? Math.min(cds.start, exon.cdStart) : cds.start;
      exon.cdEnd = exon.cdEnd ? Math.max(cds.end, exon.cdEnd) : cds.end;

      if (!exon.children) {
        exon.children = [];
      }

      exon.children.push(cds);
    } else {
      cds.cdStart = cds.start;
      cds.cdEnd = cds.end;
      exons.push(cds);
    } // Expand feature --  for transcripts not explicitly represented in the file (gtf files)


    this.start = Math.min(this.start, cds.start);
    this.end = Math.max(this.end, cds.end);
    this.cdStart = this.cdStart ? Math.min(cds.start, this.cdStart) : cds.start;
    this.cdEnd = this.cdEnd ? Math.max(cds.end, this.cdEnd) : cds.end;
  };

  GFFTranscript.prototype.addUTR = function (utr) {
    var exon;
    var exons = this.exons; // Find exon containing CDS

    for (var i = 0; i < exons.length; i++) {
      if (exons[i].start <= utr.start && exons[i].end >= utr.end) {
        exon = exons[i];
        break;
      }
    }

    if (exon) {
      if (utr.start === exon.start && utr.end === exon.end) {
        exon.utr = true;
      } else {
        if (utr.end < exon.end) {
          exon.cdStart = utr.end;
        }

        if (utr.start > exon.start) {
          exon.cdEnd = utr.start;
        }
      }

      if (!exon.children) {
        exon.children = [];
      }

      exon.children.push(utr);
    } else {
      utr.utr = true;
      exons.push(utr);
    } // Expand feature --  for transcripts not explicitly represented in the file


    this.start = Math.min(this.start, utr.start);
    this.end = Math.max(this.end, utr.end);
  };

  GFFTranscript.prototype.finish = function () {
    var cdStart = this.cdStart;
    var cdEnd = this.cdEnd;
    this.exons.sort(function (a, b) {
      return a.start - b.start;
    }); // Search for UTR exons that were not explicitly tagged

    if (cdStart) {
      this.exons.forEach(function (exon) {
        if (exon.end < cdStart || exon.start > cdEnd) exon.utr = true;
      });
    }
  };

  GFFTranscript.prototype.popupData = function (genomicLocation) {
    var kvs = this.attributeString.split(';');
    var pd = [];
    pd.push({
      name: 'type',
      value: this.type
    });
    pd.push({
      name: 'start',
      value: this.start + 1
    });
    pd.push({
      name: 'end',
      value: this.end
    });
    var _iteratorNormalCompletion11 = true;
    var _didIteratorError11 = false;
    var _iteratorError11 = undefined;

    try {
      for (var _iterator11 = kvs[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
        var kv = _step11.value;
        var t = kv.trim().split(this.delim, 2);

        if (t.length === 2 && t[1] !== undefined) {
          var key = t[0].trim();
          var value = t[1].trim(); //Strip off quotes, if any

          if (value.startsWith('"') && value.endsWith('"')) {
            value = value.substr(1, value.length - 2);
          }

          pd.push({
            name: key,
            value: value
          });
        }
      } // If clicked over an exon add its attributes

    } catch (err) {
      _didIteratorError11 = true;
      _iteratorError11 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion11 && _iterator11.return != null) {
          _iterator11.return();
        }
      } finally {
        if (_didIteratorError11) {
          throw _iteratorError11;
        }
      }
    }

    var _iteratorNormalCompletion12 = true;
    var _didIteratorError12 = false;
    var _iteratorError12 = undefined;

    try {
      for (var _iterator12 = this.exons[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
        var exon = _step12.value;

        if (genomicLocation >= exon.start && genomicLocation < exon.end) {
          pd.push("<hr>");
          var exonData = exon.popupData(genomicLocation);
          var _iteratorNormalCompletion13 = true;
          var _didIteratorError13 = false;
          var _iteratorError13 = undefined;

          try {
            for (var _iterator13 = exonData[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
              var _att = _step13.value;
              pd.push(_att);
            }
          } catch (err) {
            _didIteratorError13 = true;
            _iteratorError13 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion13 && _iterator13.return != null) {
                _iterator13.return();
              }
            } finally {
              if (_didIteratorError13) {
                throw _iteratorError13;
              }
            }
          }

          if (exon.children) {
            var _iteratorNormalCompletion14 = true;
            var _didIteratorError14 = false;
            var _iteratorError14 = undefined;

            try {
              for (var _iterator14 = exon.children[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                var c = _step14.value;
                pd.push("<hr>");

                var _exonData = c.popupData(genomicLocation);

                var _iteratorNormalCompletion15 = true;
                var _didIteratorError15 = false;
                var _iteratorError15 = undefined;

                try {
                  for (var _iterator15 = _exonData[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {
                    var att = _step15.value;
                    pd.push(att);
                  }
                } catch (err) {
                  _didIteratorError15 = true;
                  _iteratorError15 = err;
                } finally {
                  try {
                    if (!_iteratorNormalCompletion15 && _iterator15.return != null) {
                      _iterator15.return();
                    }
                  } finally {
                    if (_didIteratorError15) {
                      throw _iteratorError15;
                    }
                  }
                }
              }
            } catch (err) {
              _didIteratorError14 = true;
              _iteratorError14 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion14 && _iterator14.return != null) {
                  _iterator14.return();
                }
              } finally {
                if (_didIteratorError14) {
                  throw _iteratorError14;
                }
              }
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError12 = true;
      _iteratorError12 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion12 && _iterator12.return != null) {
          _iterator12.return();
        }
      } finally {
        if (_didIteratorError12) {
          throw _iteratorError12;
        }
      }
    }

    return pd;
  };

  var GtexReader = function GtexReader(config) {
    this.config = config;
    this.url = config.url;
    this.tissueId = config.tissueSiteDetailId;
    this.indexed = true;
    this.datasetId = config.datasetId || "gtex_v8";
  };

  GtexReader.prototype.readFeatures =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd) {
      var self, queryChr, queryStart, queryEnd, datasetId, queryURL, json;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              self = this, queryChr = chr.startsWith("chr") ? chr : "chr" + chr, queryStart = Math.floor(bpStart), queryEnd = Math.ceil(bpEnd), datasetId = this.datasetId, queryURL = this.url + "?chromosome=" + queryChr + "&start=" + queryStart + "&end=" + queryEnd + "&tissueSiteDetailId=" + this.tissueId + "&datasetId=" + datasetId;
              _context.next = 3;
              return igvxhr.loadJson(queryURL, {
                withCredentials: self.config.withCredentials
              });

            case 3:
              json = _context.sent;

              if (!(json && json.singleTissueEqtl)) {
                _context.next = 9;
                break;
              }

              //variants = json.variants;
              //variants.sort(function (a, b) {
              //    return a.POS - b.POS;
              //});
              //source.cache = new FeatureCache(chr, queryStart, queryEnd, variants);
              json.singleTissueEqtl.forEach(function (eqtl) {
                eqtl.chr = eqtl.chromosome;
                eqtl.position = eqtl.pos;
                eqtl.start = eqtl.pos - 1;
                eqtl.end = eqtl.start + 1;
                eqtl.snp = eqtl.snpId;
                eqtl.geneName = eqtl.geneSymbol;
                eqtl.geneId = eqtl.gencodeId;
              });
              return _context.abrupt("return", json.singleTissueEqtl);

            case 9:
              return _context.abrupt("return", undefined);

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  // http://immvar.broadinstitute.org:3000/load_data?chromosome=&start=&end=&categories=

  var ImmVarReader = function ImmVarReader(config) {
    this.config = config;
    this.url = config.url;
    this.cellConditionId = config.cellConditionId;
    this.valueThreshold = config.valueThreshold ? config.valueThreshold : 5E-2;
  };

  ImmVarReader.prototype.readFeatures = function (queryChr, queryStart, queryEnd) {
    var self = this,
        queryURL = this.url + "?chromosome=" + queryChr + "&start=" + queryStart + "&end=" + queryEnd + "&cell_condition_id=" + this.cellConditionId;
    return new Promise(function (fulfill, reject) {
      igvxhr.loadJson(queryURL, {
        withCredentials: self.config.withCredentials
      }).then(function (json) {
        if (json) {
          //variants = json.variants;
          //variants.sort(function (a, b) {
          //    return a.POS - b.POS;
          //});
          //source.cache = new FeatureCache(chr, queryStart, queryEnd, variants);
          json.eqtls.forEach(function (eqtl) {
            eqtl.chr = eqtl.chromosome;
            eqtl.start = eqtl.position;
            eqtl.end = eqtl.position + 1;
          });
          fulfill(json.eqtls);
        } else {
          fulfill(null);
        }
      }).catch(function (error) {
        reject(error);
      });
    });
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  function ga4ghGet(options) {
    var url = options.url + "/" + options.entity + "/" + options.entityId;
    options.headers = ga4ghHeaders();
    return igvxhr.loadJson(url, options); // Returns a promise
  }

  function ga4ghSearch(options) {
    return new Promise(function (fulfill, reject) {
      var results = options.results ? options.results : [],
          url = options.url,
          body = options.body,
          decode = options.decode,
          paramSeparator = "?",
          fields = options.fields; // Partial response

      if (fields) {
        url = url + paramSeparator + "fields=" + fields;
      } // Start the recursive load cycle.  Data is fetched in chunks, if more data is available a "nextPageToken" is returned.


      return loadChunk();

      function loadChunk(pageToken) {
        if (pageToken) {
          body.pageToken = pageToken;
        } else {
          if (body.pageToken !== undefined) delete body.pageToken; // Remove previous page token, if any
        }

        var sendData = JSON.stringify(body);
        igvxhr.loadJson(url, {
          sendData: sendData,
          contentType: "application/json",
          headers: ga4ghHeaders() //    oauthToken: ga4ghToken()

        }).then(function (json) {
          var nextPageToken, tmp;

          if (json) {
            tmp = decode ? decode(json) : json;

            if (tmp) {
              tmp.forEach(function (a) {

                {
                  results.push(a);
                }
              });
            }

            nextPageToken = json["nextPageToken"];

            if (nextPageToken) {
              loadChunk(nextPageToken);
            } else {
              fulfill(results);
            }
          } else {
            fulfill(results);
          }
        }).catch(function (error) {
          reject(error);
        });
      }
    });
  }

  function ga4ghHeaders() {
    return {
      "Cache-Control": "no-cache"
    };
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var Ga4ghVariantReader = function Ga4ghVariantReader(config, genome) {
    this.config = config;
    this.genome = genome;
    this.url = config.url;
    this.variantSetId = config.variantSetId;
    this.callSetIds = config.callSetIds;
    this.includeCalls = config.includeCalls === undefined ? true : config.includeCalls;
  }; // Simulate a VCF file header


  Ga4ghVariantReader.prototype.readHeader = function () {
    var self = this;

    if (self.header) {
      return Promise.resolve(self.header);
    } else {
      self.header = {};

      if (self.includeCalls === false) {
        return Promise.resolve(self.header);
      } else {
        var readURL = self.url + "/callsets/search";
        return ga4ghSearch({
          url: readURL,
          fields: "nextPageToken,callSets(id,name)",
          body: {
            "variantSetIds": Array.isArray(self.variantSetId) ? self.variantSetId : [self.variantSetId],
            "pageSize": "10000"
          },
          decode: function decode(json) {
            // If specific callSetIds are specified filter to those
            if (self.callSetIds) {
              var callSets = [],
                  csIdSet = new Set();
              self.callSetIds.forEach(function (csid) {
                csIdSet.add(csid);
              });
              json.callSets.forEach(function (cs) {
                if (csIdSet.has(cs.id)) {
                  callSets.push(cs);
                }
              });
              return callSets;
            } else {
              return json.callSets;
            }
          }
        }).then(function (callSets) {
          self.header.callSets = callSets;
          return self.header;
        });
      }
    }
  };

  Ga4ghVariantReader.prototype.readFeatures = function (chr, bpStart, bpEnd) {
    var self = this;
    var genome = this.genome;
    return self.readHeader().then(function (header) {
      return getChrAliasTable();
    }).then(function (chrAliasTable) {
      var queryChr = chrAliasTable.hasOwnProperty(chr) ? chrAliasTable[chr] : chr,
          readURL = self.url + "/variants/search";
      return ga4ghSearch({
        url: readURL,
        fields: self.includeCalls ? undefined : "nextPageToken,variants(id,variantSetId,names,referenceName,start,end,referenceBases,alternateBases,quality,filter,info)",
        body: {
          "variantSetIds": Array.isArray(self.variantSetId) ? self.variantSetId : [self.variantSetId],
          "callSetIds": self.callSetIds ? self.callSetIds : undefined,
          "referenceName": queryChr,
          "start": bpStart.toString(),
          "end": bpEnd.toString(),
          "pageSize": "10000"
        },
        decode: function decode(json) {
          var v;
          var variants = [];
          json.variants.forEach(function (json) {
            v = createGAVariant(json);

            if (!v.isRefBlock()) {
              variants.push(v);
            }
          });
          return variants;
        }
      });
    });

    function getChrAliasTable() {
      return new Promise(function (fulfill, reject) {
        if (self.chrAliasTable) {
          fulfill(self.chrAliasTable);
        } else {
          self.readMetadata().then(function (json) {
            self.metadata = json.metadata;
            self.chrAliasTable = {};

            if (json.referenceBounds && genome) {
              json.referenceBounds.forEach(function (rb) {
                var refName = rb.referenceName,
                    alias = genome.getChromosomeName(refName);
                self.chrAliasTable[alias] = refName;
              });
            }

            fulfill(self.chrAliasTable);
          });
        }
      });
    }
  };

  Ga4ghVariantReader.prototype.readMetadata = function () {
    return ga4ghGet({
      url: this.url,
      entity: "variantsets",
      entityId: this.variantSetId
    });
  };

  var CivicReader = function CivicReader(config) {
    this.config = config;
  };

  CivicReader.prototype.readFeatures = function (chr, start, end) {
    return igvxhr.loadJson(this.config.url + "/variants/?count=5000").then(function (json) {
      var records = json.records;
      var features = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = records[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var record = _step.value;

          if (record.coordinates) {
            var id = record.id;
            var coordinates = record.coordinates;

            if (coordinates.chromosome) {
              features.push(new CivicVariant(coordinates.chromosome, coordinates.start - 1, // UCSC 0 convention
              coordinates.stop, record));
            }

            if (coordinates.chromosome2) {
              features.push(new CivicVariant(coordinates.chromosome2, coordinates.start2 - 1, // UCSC 0 convention
              coordinates.stop2, record));
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return features;
    });
  };

  function CivicVariant(chr, start, end, record) {
    this.chr = chr;
    this.start = start;
    this.end = end;
    this.id = record.id;
    this.entrezName = record.entrez_name;
    this.name = record.name;
    this.actionabilityScore = record.civic_actionability_score;

    if (record.coordinates.reference_bases) {
      this.refBases = record.coordinates.reference_bases;
    }

    if (record.coordinates.variant_bases) {
      this.altBases = record.coordinates.variant_bases;
    }

    if (record.variant_types) {
      this.variant_types = record.variant_types;
    }

    this.locationString = this.chr + ":" + numberFormatter(this.start + 1) + "-" + numberFormatter(this.end); // Color based on actionability score

    if (this.actionabilityScore !== undefined) {
      var alpha;

      if (this.actionabilityScore <= 10) {
        alpha = 0.2;
      } else {
        var v = Math.min(30, this.actionabilityScore);
        alpha = 0.2 + 0.8 * Math.log10((v - 10) / 2);
      }

      this.alpha = alpha;
    }
  }

  CivicVariant.prototype.popupData = function () {
    var link = createLink("CIViC", "https://civicdb.org/links/variants/" + this.id);
    var isSnp = this.refBases !== this.altBases && this.refBases && this.refBases.length === 1 && this.altBases && this.altBases.length === 1;
    var pd = [link];
    pd.push({
      name: "Entrez",
      value: createLink(this.entrezName, "https://ghr.nlm.nih.gov/gene/" + this.entrezName)
    });
    pd.push({
      name: "Name",
      value: this.name
    });

    if (this.variant_types && this.variant_types.length > 0) {
      var name = this.variant_types.length === 1 ? "Type" : "Types";
      var typeString;
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.variant_types[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var vt = _step2.value;
          if (!typeString) typeString = vt.display_name;else typeString += ", " + vt.display_name;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      pd.push({
        name: name,
        value: typeString
      });
    }

    pd.push({
      name: "Actionability",
      value: this.actionabilityScore
    });
    pd.push({
      name: "Location",
      value: this.locationString
    });
    return pd;

    function createLink(text, href) {
      return "<a target='_blank' " + "href='" + href + "'>" + text + "</a>";
    }
  };

  var queryableFormats = new Set(["bigwig", "bw", "bigbed", "bb", "tdf"]);
  /**
   * feature source for "bed like" files (tab delimited files with 1 feature per line: bed, gff, vcf, etc)
   *
   * @param config
   * @constructor
   */

  var FeatureSource = function FeatureSource(config, genome) {
    this.config = config || {};
    this.genome = genome;
    this.sourceType = config.sourceType === undefined ? "file" : config.sourceType; // Default GFF filter -- these feature types will be filtered out

    if (undefined === config.filterTypes) {
      config.filterTypes = ['chromosome', 'gene'];
    }

    if (config.features && Array.isArray(config.features)) {
      var features = config.features;
      packFeatures(features);

      if (config.mappings) {
        mapProperties(features, config.mappings);
      }

      this.featureCache = new FeatureCache(features, genome);
      this.static = true;
    } else if (config.sourceType === "ga4gh") {
      this.reader = new Ga4ghVariantReader(config, genome);
      this.queryable = true;
    } else if (config.sourceType === "immvar") {
      this.reader = new ImmVarReader(config);
      this.queryable = true;
    } else if (config.type === "eqtl" && config.sourceType === "gtex-ws") {
      this.reader = new GtexReader(config);
      this.queryable = true;
    } else if (config.sourceType === 'ucscservice') {
      this.reader = new UCSCServiceReader(config.source);
      this.queryable = true;
    } else if (config.sourceType === 'custom' || config.source !== undefined) {
      // Second test for backward compatibility
      this.reader = new CustomServiceReader(config.source);
      this.queryable = config.source.queryable !== undefined ? config.source.queryable : true;
    } else if ("civic-ws" === config.sourceType) {
      this.reader = new CivicReader(config);
      this.queryable = false;
    } else {
      this.reader = new FeatureFileReader(config, genome);

      if (config.queryable !== undefined) {
        this.queryable = config.queryable;
      } else if (queryableFormats.has(config.format)) {
        this.queryable = queryableFormats.has(config.format) || this.reader.indexed;
      }
    }

    this.supportsWG = !this.queryable; // Can be dynamically changed
  };

  FeatureSource.prototype.supportsWholeGenome = function () {
    return this.supportsWG;
  };

  FeatureSource.prototype.getFileHeader =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var header, features;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (this.header) {
              _context.next = 10;
              break;
            }

            if (!(this.reader && typeof this.reader.readHeader === "function")) {
              _context.next = 9;
              break;
            }

            _context.next = 4;
            return this.reader.readHeader();

          case 4:
            header = _context.sent;

            if (header) {
              this.header = header; // Non-indexed readers will return features as a side effect (entire file is read).

              features = header.features;

              if (features) {
                this.ingestFeatures(features);
              }

              if (header.format) this.config.format = header.format;
            }

            this.header = header;
            _context.next = 10;
            break;

          case 9:
            this.header = {};

          case 10:
            return _context.abrupt("return", this.header);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function addFeaturesToDB(featureList) {
    var self = this;
    featureList.forEach(function (feature) {
      if (feature.name) {
        //TODO igv.browser => igv.Globals or igv.FeatureDB
        self.config.browser.featureDB[feature.name.toUpperCase()] = feature;
      }
    });
  }
  /**
   * Required function for all data source objects.  Fetches features for the
   * range requested.
   *
   * @param chr
   * @param bpStart
   * @param bpEnd
   * @param bpPerPixel
   */


  FeatureSource.prototype.getFeatures =
  /*#__PURE__*/
  function () {
    var _ref2 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(chr, bpStart, bpEnd, bpPerPixel, visibilityWindow) {
      var reader, genome, queryChr, featureCache, isQueryable, getFeatureCache, _getFeatureCache;

      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _getFeatureCache = function _ref4() {
                _getFeatureCache = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee2() {
                  var intervalStart, intervalEnd, genomicInterval, expansionWindow, featureList;
                  return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          intervalStart = bpStart;
                          intervalEnd = bpEnd;
                          genomicInterval = new GenomicInterval(queryChr, intervalStart, intervalEnd);

                          if (!(this.featureCache && (this.static || this.featureCache.containsRange(genomicInterval) || "all" === chr.toLowerCase()))) {
                            _context2.next = 7;
                            break;
                          }

                          return _context2.abrupt("return", this.featureCache);

                        case 7:
                          // If a visibility window is defined, potentially expand query interval.
                          // This can save re-queries as we zoom out.  Visibility window <= 0 is a special case
                          // indicating whole chromosome should be read at once.
                          if (undefined !== visibilityWindow) {
                            if (visibilityWindow <= 0) {
                              // Whole chromosome
                              intervalStart = 0;
                              intervalEnd = Number.MAX_VALUE;
                            } else if (visibilityWindow > bpEnd - bpStart) {
                              expansionWindow = Math.min(4.1 * (bpEnd - bpStart), visibilityWindow);
                              intervalStart = Math.max(0, (bpStart + bpEnd - expansionWindow) / 2);
                              intervalEnd = bpStart + expansionWindow;
                            }
                          }

                          genomicInterval = new GenomicInterval(queryChr, intervalStart, intervalEnd);
                          _context2.next = 11;
                          return reader.readFeatures(queryChr, genomicInterval.start, genomicInterval.end);

                        case 11:
                          featureList = _context2.sent;

                          if (this.queryable === undefined) {
                            this.queryable = reader.indexed;
                          }

                          if (featureList) {
                            this.ingestFeatures(featureList, genomicInterval);
                          } else {
                            this.featureCache = new FeatureCache(); // Empty cache
                          }

                          return _context2.abrupt("return", this.featureCache);

                        case 15:
                        case "end":
                          return _context2.stop();
                      }
                    }
                  }, _callee2, this);
                }));
                return _getFeatureCache.apply(this, arguments);
              };

              getFeatureCache = function _ref3() {
                return _getFeatureCache.apply(this, arguments);
              };

              reader = this.reader;
              genome = this.genome;
              queryChr = genome ? genome.getChromosomeName(chr) : chr;
              _context3.next = 7;
              return getFeatureCache.call(this);

            case 7:
              featureCache = _context3.sent;
              isQueryable = this.queryable;

              if (!("all" === chr.toLowerCase())) {
                _context3.next = 22;
                break;
              }

              if (!isQueryable) {
                _context3.next = 14;
                break;
              }

              return _context3.abrupt("return", []);

            case 14:
              if (!(featureCache.count > 500000)) {
                _context3.next = 19;
                break;
              }

              this.supportsWG = false;
              return _context3.abrupt("return", []);

            case 19:
              return _context3.abrupt("return", this.getWGFeatures(featureCache.getAllFeatures()));

            case 20:
              _context3.next = 23;
              break;

            case 22:
              return _context3.abrupt("return", featureCache.queryFeatures(queryChr, bpStart, bpEnd));

            case 23:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function (_x, _x2, _x3, _x4, _x5) {
      return _ref2.apply(this, arguments);
    };
  }();

  FeatureSource.prototype.ingestFeatures = function (featureList, genomicInterval) {
    if ("gtf" === this.config.format || "gff3" === this.config.format || "gff" === this.config.format) {
      featureList = new GFFHelper(this.config).combineFeatures(featureList);
    } // Assign overlapping features to rows


    if (this.config.format !== "wig") {
      var maxRows = this.config.maxRows || 500;
      packFeatures(featureList, maxRows);
    } // Note - replacing previous cache with new one


    this.featureCache = this.queryable ? new FeatureCache(featureList, this.genome, genomicInterval) : new FeatureCache(featureList, this.genome); // If track is marked "searchable"< cache features by name -- use this with caution, memory intensive

    if (this.config.searchable) {
      addFeaturesToDB.call(this, featureList);
    }
  };

  function packFeatures(features, maxRows) {
    maxRows = maxRows || 1000;

    if (features == null || features.length === 0) {
      return;
    } // Segregate by chromosome


    var chrFeatureMap = {},
        chrs = [];
    features.forEach(function (feature) {
      var chr = feature.chr,
          flist = chrFeatureMap[chr];

      if (!flist) {
        flist = [];
        chrFeatureMap[chr] = flist;
        chrs.push(chr);
      }

      flist.push(feature);
    }); // Loop through chrosomosomes and pack features;

    chrs.forEach(function (chr) {
      pack(chrFeatureMap[chr], maxRows);
    }); // Assigns a row # to each feature.  If the feature does not fit in any row and #rows == maxRows no
    // row number is assigned.

    function pack(featureList, maxRows) {
      var rows = [];
      featureList.sort(function (a, b) {
        return a.start - b.start;
      });
      rows.push(-1000);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = featureList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var feature = _step.value;
          var r = 0;
          var len = Math.min(rows.length, maxRows);

          for (r = 0; r < len; r++) {
            if (feature.start > rows[r]) {
              feature.row = r;
              rows[r] = feature.end;
              break;
            }
          }

          feature.row = r;
          rows[r] = feature.end;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  } // TODO -- filter by pixel size


  FeatureSource.prototype.getWGFeatures = function (allFeatures) {
    var genome = this.genome;
    var wgChromosomeNames = new Set(genome.wgChromosomeNames);
    var wgFeatures = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = genome.wgChromosomeNames[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var c = _step2.value;
        var features = allFeatures[c];

        if (features) {
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = features[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var f = _step3.value;

              var _queryChr = genome.getChromosomeName(f.chr);

              if (wgChromosomeNames.has(_queryChr)) {
                var wg = Object.create(Object.getPrototypeOf(f));
                Object.assign(wg, f);
                wg.realChr = f.chr;
                wg.realStart = f.start;
                wg.realEnd = f.end;
                wg.chr = "all";
                wg.start = genome.getGenomeCoordinate(f.chr, f.start);
                wg.end = genome.getGenomeCoordinate(f.chr, f.end); // Don't draw exons in whole genome view

                if (wg["exons"]) delete wg["exons"];

                wg.popupData = function (genomeLocation) {
                  var clonedObject = Object.assign({}, this);
                  clonedObject.chr = this.realChr;
                  clonedObject.start = this.realStart;
                  clonedObject.end = this.realEnd;
                  delete clonedObject.realChr;
                  delete clonedObject.realStart;
                  delete clonedObject.realEnd;
                  return TrackBase.extractPopupData(clonedObject, genome.id);
                };

                wgFeatures.push(wg);
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    wgFeatures.sort(function (a, b) {
      return a.start - b.start;
    });
    return wgFeatures;
  };

  function mapProperties(features, mappings) {
    var mappingKeys = Object.keys(mappings);
    features.forEach(function (f) {
      mappingKeys.forEach(function (key) {
        f[key] = f[mappings[key]];
      });
    });
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var BufferedReader = function BufferedReader(config, contentLength, bufferSize) {
    this.path = config.url;
    this.bufferSize = bufferSize ? bufferSize : 512000;
    this.range = {
      start: -1,
      size: -1
    };
    this.config = config;
  };
  /**
   *
   * @param requestedRange - byte rangeas {start, size}
   * @param fulfill - function to receive result
   * @param asUint8 - optional flag to return result as an UInt8Array
   */


  BufferedReader.prototype.dataViewForRange = function (requestedRange, asUint8) {
    var self = this;
    var hasData = self.data && self.range.start <= requestedRange.start && self.range.start + self.range.size >= requestedRange.start + requestedRange.size,
        bufferSize,
        loadRange;

    if (hasData) {
      return Promise.resolve(subbuffer(self, requestedRange, asUint8));
    } else {
      // If requested range size is specified, expand buffer size
      if (requestedRange.size) {
        bufferSize = Math.max(self.bufferSize, requestedRange.size);
      } else {
        bufferSize = self.bufferSize;
      }

      loadRange = {
        start: requestedRange.start,
        size: bufferSize
      };
      return igvxhr.loadArrayBuffer(self.path, buildOptions(self.config, {
        range: loadRange
      })).then(function (arrayBuffer) {
        self.data = arrayBuffer;
        self.range = loadRange;
        return subbuffer(self, requestedRange, asUint8);
      });
    }

    function subbuffer(bufferedReader, requestedRange, asUint8) {
      var len = bufferedReader.data.byteLength,
          bufferStart = requestedRange.start - bufferedReader.range.start,
          result = asUint8 ? new Uint8Array(bufferedReader.data, bufferStart, len - bufferStart) : new DataView(bufferedReader.data, bufferStart, len - bufferStart);
      return result;
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var BIGWIG_MAGIC_LTH = 0x888FFC26; // BigWig Magic Low to High

  var BIGWIG_MAGIC_HTL = 0x26FC8F66; // BigWig Magic High to Low

  var BIGBED_MAGIC_LTH = 0x8789F2EB; // BigBed Magic Low to High

  var BIGBED_MAGIC_HTL = 0xEBF28987; // BigBed Magic High to Low

  var BBFILE_HEADER_SIZE = 64;
  var RPTREE_HEADER_SIZE = 48;
  var RPTREE_NODE_LEAF_ITEM_SIZE = 32; // leaf item size

  var RPTREE_NODE_CHILD_ITEM_SIZE = 24; // child item size

  var BUFFER_SIZE = 512000; //  buffer

  var BWReader = function BWReader(config, genome) {
    this.path = config.url;
    this.genome = genome;
    this.rpTreeCache = {};
    this.config = config;
  };

  BWReader.prototype.readWGFeatures = function (bpPerPixel, windowFunction) {
    var self = this;
    var genome = this.genome;
    return self.getZoomHeaders().then(function (zoomLevelHeaders) {
      var chrIdx1, chrIdx2, chr1, chr2;
      chrIdx1 = 0;
      chrIdx2 = self.chromTree.idToChrom.length - 1;
      chr1 = self.chromTree.idToChrom[chrIdx1];
      chr2 = self.chromTree.idToChrom[chrIdx2];
      return self.readFeatures(chr1, 0, chr2, Number.MAX_VALUE, bpPerPixel, windowFunction);
    });
  };

  BWReader.prototype.readFeatures = function (chr1, bpStart, chr2, bpEnd, bpPerPixel, windowFunction) {
    var self = this,
        decodeFunction,
        chrIdx1,
        chrIdx2;
    return self.getZoomHeaders().then(function (zoomLevelHeaders) {
      // Select a biwig "zoom level" appropriate for the current resolution
      var zoomLevelHeader = zoomLevelForScale(bpPerPixel, zoomLevelHeaders),
          treeOffset;

      if (zoomLevelHeader) {
        treeOffset = zoomLevelHeader.indexOffset;
        decodeFunction = decodeZoomData;
      } else {
        treeOffset = self.header.fullIndexOffset;

        if (self.type === "BigWig") {
          decodeFunction = decodeWigData;
        } else {
          decodeFunction = decodeBedData;
        }
      }

      return self.loadRPTree(treeOffset);
    }).then(function (rpTree) {
      chrIdx1 = self.chromTree.chromToID[chr1];
      chrIdx2 = self.chromTree.chromToID[chr2];

      if (chrIdx1 === undefined || chrIdx2 === undefined) {
        return undefined;
      } else {
        return rpTree.findLeafItemsOverlapping(chrIdx1, bpStart, chrIdx2, bpEnd);
      }
    }).then(function (leafItems) {
      if (!leafItems || leafItems.length === 0) {
        return [];
      } else {
        // Consolidate leaf items and get all data at once
        var start = Number.MAX_VALUE;
        var end = 0;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = leafItems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var item = _step.value;
            start = Math.min(start, item.dataOffset);
            end = Math.max(end, item.dataOffset + item.dataSize);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var size = end - start;
        return igvxhr.loadArrayBuffer(self.config.url, buildOptions(self.config, {
          range: {
            start: start,
            size: size
          }
        })).then(function (arrayBuffer) {
          var allFeatures = [];
          var buffer = new Uint8Array(arrayBuffer);
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = leafItems[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var item = _step2.value;
              var uint8Array = buffer.subarray(item.dataOffset - start, item.dataOffset + item.dataSize);
              var plain = void 0;
              var isCompressed = self.header.uncompressBuffSize > 0;

              if (isCompressed) {
                var inflate = new Zlib.Inflate(uint8Array);
                plain = inflate.decompress();
              } else {
                plain = uint8Array;
              }

              decodeFunction(new DataView(plain.buffer), chrIdx1, bpStart, chrIdx2, bpEnd, allFeatures, self.chromTree.idToChrom, windowFunction);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }

          allFeatures.sort(function (a, b) {
            return a.start - b.start;
          });
          return allFeatures;
        });
      }
    });
  };

  BWReader.prototype.getZoomHeaders = function () {
    var self = this;

    if (self.zoomLevelHeaders) {
      return Promise.resolve(self.zoomLevelHeaders);
    } else {
      return self.loadHeader().then(function () {
        return self.zoomLevelHeaders;
      });
    }
  };

  BWReader.prototype.loadHeader = function () {
    var self = this;

    if (self.header) {
      return Promise.resolve(self.header);
    } else {
      return igvxhr.loadArrayBuffer(self.path, buildOptions(self.config, {
        range: {
          start: 0,
          size: BBFILE_HEADER_SIZE
        }
      })).then(function (data) {
        var header; // Assume low-to-high unless proven otherwise

        self.littleEndian = true;
        var binaryParser = new BinaryParser(new DataView(data));
        var magic = binaryParser.getUInt();

        if (magic === BIGWIG_MAGIC_LTH) {
          self.type = "BigWig";
        } else if (magic === BIGBED_MAGIC_LTH) {
          self.type = "BigBed";
        } else {
          //Try big endian order
          self.littleEndian = false;
          binaryParser.littleEndian = false;
          binaryParser.position = 0;

          var _magic = binaryParser.getUInt();

          if (_magic === BIGWIG_MAGIC_HTL) {
            self.type = "BigWig";
          } else if (_magic === BIGBED_MAGIC_HTL) {
            self.type = "BigBed";
          }
        } // Table 5  "Common header for BigWig and BigBed files"


        header = {};
        header.bwVersion = binaryParser.getUShort();
        header.nZoomLevels = binaryParser.getUShort();
        header.chromTreeOffset = binaryParser.getLong();
        header.fullDataOffset = binaryParser.getLong();
        header.fullIndexOffset = binaryParser.getLong();
        header.fieldCount = binaryParser.getUShort();
        header.definedFieldCount = binaryParser.getUShort();
        header.autoSqlOffset = binaryParser.getLong();
        header.totalSummaryOffset = binaryParser.getLong();
        header.uncompressBuffSize = binaryParser.getInt();
        header.reserved = binaryParser.getLong();
        return header;
      }).then(function (header) {
        self.header = header;
        return loadZoomHeadersAndChrTree.call(self);
      });
    }

    function loadZoomHeadersAndChrTree() {
      var self = this;
      var startOffset = BBFILE_HEADER_SIZE;
      var range = {
        start: startOffset,
        size: self.header.fullDataOffset - startOffset + 5
      };
      return igvxhr.loadArrayBuffer(self.path, buildOptions(self.config, {
        range: range
      })).then(function (data) {
        var nZooms = self.header.nZoomLevels;
        var binaryParser = new BinaryParser(new DataView(data));
        self.zoomLevelHeaders = [];
        self.firstZoomDataOffset = Number.MAX_VALUE;

        for (var i = 1; i <= nZooms; i++) {
          var zoomNumber = nZooms - i;
          var zlh = new ZoomLevelHeader(zoomNumber, binaryParser);
          self.firstZoomDataOffset = Math.min(zlh.dataOffset, self.firstZoomDataOffset);
          self.zoomLevelHeaders[zoomNumber] = zlh;
        } // Autosql


        if (self.header.autoSqlOffset > 0) {
          binaryParser.position = self.header.autoSqlOffset - startOffset;
          self.autoSql = binaryParser.getString();
        } // Total summary


        if (self.header.totalSummaryOffset > 0) {
          binaryParser.position = self.header.totalSummaryOffset - startOffset;
          self.totalSummary = new BWTotalSummary(binaryParser);
        } // Chrom data index


        if (self.header.chromTreeOffset > 0) {
          binaryParser.position = self.header.chromTreeOffset - startOffset;
          self.chromTree = new BPTree(binaryParser, startOffset, self.genome);
        } else {
          // TODO -- this is an error, not expected
          throw "BigWig chromosome tree offset <= 0";
        } //Finally total data count


        binaryParser.position = self.header.fullDataOffset - startOffset;
        self.header.dataCount = binaryParser.getInt();
        return self.header;
      });
    }
  };

  BWReader.prototype.loadRPTree = function (offset) {
    var self = this;
    var rpTree = self.rpTreeCache[offset];

    if (rpTree) {
      return Promise.resolve(rpTree);
    } else {
      rpTree = new RPTree(offset, self.config, self.littleEndian);
      return rpTree.load().then(function () {
        self.rpTreeCache[offset] = rpTree;
        return rpTree;
      });
    }
  };

  function ZoomLevelHeader(index, byteBuffer) {
    this.index = index;
    this.reductionLevel = byteBuffer.getInt();
    this.reserved = byteBuffer.getInt();
    this.dataOffset = byteBuffer.getLong();
    this.indexOffset = byteBuffer.getLong();
  }

  function RPTree(fileOffset, config, littleEndian) {
    this.config = config;
    this.fileOffset = fileOffset; // File offset to beginning of tree

    this.path = config.url;
    this.littleEndian = littleEndian;
  }

  RPTree.prototype.load = function () {
    var self = this;
    var rootNodeOffset = self.fileOffset + RPTREE_HEADER_SIZE,
        bufferedReader = new BufferedReader(self.config, BUFFER_SIZE);
    return self.readNode(rootNodeOffset, bufferedReader).then(function (node) {
      self.rootNode = node;
      return self;
    });
  };

  RPTree.prototype.readNode = function (filePosition, bufferedReader) {
    var self = this;
    var count, isLeaf;
    return bufferedReader.dataViewForRange({
      start: filePosition,
      size: 4
    }, false).then(function (dataView) {
      var binaryParser, type, reserved;
      binaryParser = new BinaryParser(dataView, self.littleEndian);
      type = binaryParser.getByte();
      isLeaf = type === 1;
      reserved = binaryParser.getByte();
      count = binaryParser.getUShort();
      filePosition += 4;
      var bytesRequired = count * (isLeaf ? RPTREE_NODE_LEAF_ITEM_SIZE : RPTREE_NODE_CHILD_ITEM_SIZE);
      var range2 = {
        start: filePosition,
        size: bytesRequired
      };
      return bufferedReader.dataViewForRange(range2, false);
    }).then(function (dataView) {
      var i,
          items = new Array(count),
          binaryParser = new BinaryParser(dataView);

      if (isLeaf) {
        for (i = 0; i < count; i++) {
          var item = {
            isLeaf: true,
            startChrom: binaryParser.getInt(),
            startBase: binaryParser.getInt(),
            endChrom: binaryParser.getInt(),
            endBase: binaryParser.getInt(),
            dataOffset: binaryParser.getLong(),
            dataSize: binaryParser.getLong()
          };
          items[i] = item;
        }

        return new RPTreeNode(items);
      } else {
        // non-leaf
        for (i = 0; i < count; i++) {
          var _item = {
            isLeaf: false,
            startChrom: binaryParser.getInt(),
            startBase: binaryParser.getInt(),
            endChrom: binaryParser.getInt(),
            endBase: binaryParser.getInt(),
            childOffset: binaryParser.getLong()
          };
          items[i] = _item;
        }

        return new RPTreeNode(items);
      }
    });
  };

  RPTree.prototype.findLeafItemsOverlapping = function (chrIdx1, startBase, chrIdx2, endBase) {
    var self = this;
    return new Promise(function (fulfill, reject) {
      var leafItems = [],
          processing = new Set(),
          bufferedReader = new BufferedReader(self.config, BUFFER_SIZE);
      processing.add(0); // Zero represents the root node

      findLeafItems(self.rootNode, 0);

      function findLeafItems(node, nodeId) {
        if (overlaps(node, chrIdx1, startBase, chrIdx2, endBase)) {
          var items = node.items;
          items.forEach(function (item) {
            if (overlaps(item, chrIdx1, startBase, chrIdx2, endBase)) {
              if (item.isLeaf) {
                leafItems.push(item);
              } else {
                if (item.childNode) {
                  findLeafItems(item.childNode);
                } else {
                  processing.add(item.childOffset); // Represent node to-be-loaded by its file position

                  self.readNode(item.childOffset, bufferedReader).then(function (node) {
                    item.childNode = node;
                    findLeafItems(node, item.childOffset);
                  }).catch(reject);
                }
              }
            }
          });
        }

        if (nodeId !== undefined) processing.delete(nodeId); // Wait until all nodes are processed

        if (processing.size === 0) {
          fulfill(leafItems);
        }
      }
    });
  };

  function RPTreeNode(items) {
    this.items = items;
    var minChromId = Number.MAX_VALUE,
        maxChromId = 0,
        minStartBase = Number.MAX_VALUE,
        maxEndBase = 0,
        i,
        item;

    for (i = 0; i < items.length; i++) {
      item = items[i];
      minChromId = Math.min(minChromId, item.startChrom);
      maxChromId = Math.max(maxChromId, item.endChrom);
      minStartBase = Math.min(minStartBase, item.startBase);
      maxEndBase = Math.max(maxEndBase, item.endBase);
    }

    this.startChrom = minChromId;
    this.endChrom = maxChromId;
    this.startBase = minStartBase;
    this.endBase = maxEndBase;
  }

  function BPTree(binaryParser, startOffset, genome) {
    var magic = binaryParser.getInt();
    var blockSize = binaryParser.getInt();
    var keySize = binaryParser.getInt();
    var valSize = binaryParser.getInt();
    var itemCount = binaryParser.getLong();
    var reserved = binaryParser.getLong();
    var chromToId = {};
    var idToChrom = [];
    this.header = {
      magic: magic,
      blockSize: blockSize,
      keySize: keySize,
      valSize: valSize,
      itemCount: itemCount,
      reserved: reserved
    };
    this.chromToID = chromToId;
    this.idToChrom = idToChrom; // Recursively walk tree to populate dictionary

    readTreeNode(binaryParser, -1);

    function readTreeNode(byteBuffer, offset) {
      if (offset >= 0) byteBuffer.position = offset;
      var type = byteBuffer.getByte(),
          reserved = byteBuffer.getByte(),
          count = byteBuffer.getUShort(),
          i,
          key,
          chromId,
          chromSize,
          childOffset,
          bufferOffset,
          currOffset;

      if (type === 1) {
        for (i = 0; i < count; i++) {
          key = byteBuffer.getFixedLengthTrimmedString(keySize);
          chromId = byteBuffer.getInt();
          chromSize = byteBuffer.getInt();
          if (genome) key = genome.getChromosomeName(key); // Translate to canonical chr name

          chromToId[key] = chromId;
          idToChrom[chromId] = key;
        }
      } else {
        // non-leaf
        for (i = 0; i < count; i++) {
          key = byteBuffer.getFixedLengthTrimmedString(keySize);
          childOffset = byteBuffer.getLong();
          bufferOffset = childOffset - startOffset;
          currOffset = byteBuffer.position;
          readTreeNode(byteBuffer, bufferOffset);
          byteBuffer.position = currOffset;
        }
      }
    }
  }
  /**
   * Return true if {chrIdx1:startBase-chrIdx2:endBase} overlaps item's interval
   * @returns {boolean}
   */


  function overlaps(item, chrIdx1, startBase, chrIdx2, endBase) {
    if (!item) {
      return false;
    }

    return (chrIdx2 > item.startChrom || chrIdx2 === item.startChrom && endBase >= item.startBase) && (chrIdx1 < item.endChrom || chrIdx1 === item.endChrom && startBase <= item.endBase);
  }

  function BWTotalSummary(byteBuffer) {
    if (byteBuffer) {
      this.basesCovered = byteBuffer.getLong();
      this.minVal = byteBuffer.getDouble();
      this.maxVal = byteBuffer.getDouble();
      this.sumData = byteBuffer.getDouble();
      this.sumSquares = byteBuffer.getDouble();
      computeStats.call(this);
    } else {
      this.basesCovered = 0;
      this.minVal = 0;
      this.maxVal = 0;
      this.sumData = 0;
      this.sumSquares = 0;
      this.mean = 0;
      this.stddev = 0;
    }
  }

  function computeStats() {
    var n = this.basesCovered;

    if (n > 0) {
      this.mean = this.sumData / n;
      this.stddev = Math.sqrt(this.sumSquares / (n - 1));
      var min = this.minVal < 0 ? this.mean - 2 * this.stddev : 0,
          max = this.maxVal > 0 ? this.mean + 2 * this.stddev : 0;
      this.defaultRange = {
        min: min,
        max: max
      };
    }
  }

  function zoomLevelForScale(bpPerPixel, zoomLevelHeaders) {
    var level = null,
        i,
        zl;

    for (i = 0; i < zoomLevelHeaders.length; i++) {
      zl = zoomLevelHeaders[i];

      if (zl.reductionLevel < bpPerPixel) {
        level = zl;
        break;
      }
    }

    return level;
  }

  function decodeWigData(data, chrIdx1, bpStart, chrIdx2, bpEnd, featureArray, chrDict) {
    var binaryParser = new BinaryParser(data),
        chromId = binaryParser.getInt(),
        chromStart = binaryParser.getInt(),
        chromEnd = binaryParser.getInt(),
        itemStep = binaryParser.getInt(),
        itemSpan = binaryParser.getInt(),
        type = binaryParser.getByte(),
        reserved = binaryParser.getByte(),
        itemCount = binaryParser.getUShort(),
        value,
        chr;

    if (chromId >= chrIdx1 && chromId <= chrIdx2) {
      while (itemCount-- > 0) {
        switch (type) {
          case 1:
            chromStart = binaryParser.getInt();
            chromEnd = binaryParser.getInt();
            value = binaryParser.getFloat();
            break;

          case 2:
            chromStart = binaryParser.getInt();
            value = binaryParser.getFloat();
            chromEnd = chromStart + itemSpan;
            break;

          case 3:
            // Fixed step
            value = binaryParser.getFloat();
            chromEnd = chromStart + itemSpan;
            chromStart += itemStep;
            break;
        }

        if (chromId < chrIdx1 || chromId === chrIdx1 && chromEnd < bpStart) continue;else if (chromId > chrIdx2 || chromId === chrIdx2 && chromStart >= bpEnd) break;

        if (Number.isFinite(value)) {
          chr = chrDict[chromId];
          featureArray.push({
            chr: chr,
            start: chromStart,
            end: chromEnd,
            value: value
          });
        }
      }
    }
  }

  function decodeBedData(data, chrIdx1, bpStart, chrIdx2, bpEnd, featureArray, chrDict) {
    var binaryParser = new BinaryParser(data),
        minSize = 3 * 4 + 1,
        // Minimum # of bytes required for a bed record
    chromId,
        chromStart,
        chromEnd,
        rest,
        tokens,
        feature,
        exonCount,
        exonSizes,
        exonStarts,
        exons,
        eStart,
        eEnd,
        chr;

    while (binaryParser.remLength() >= minSize) {
      chromId = binaryParser.getInt();
      chr = chrDict[chromId];
      chromStart = binaryParser.getInt();
      chromEnd = binaryParser.getInt();
      rest = binaryParser.getString();
      if (chromId < chrIdx1 || chromId === chrIdx1 && chromEnd < bpStart) continue;else if (chromId > chrIdx2 || chromId === chrIdx2 && chromStart >= bpEnd) break;
      feature = {
        chr: chr,
        start: chromStart,
        end: chromEnd
      };
      featureArray.push(feature);
      tokens = rest.split("\t");

      if (tokens.length > 0) {
        feature.name = tokens[0];
      }

      if (tokens.length > 1) {
        feature.score = parseFloat(tokens[1]);
      }

      if (tokens.length > 2) {
        feature.strand = tokens[2];
      }

      if (tokens.length > 3) {
        feature.cdStart = parseInt(tokens[3]);
      }

      if (tokens.length > 4) {
        feature.cdEnd = parseInt(tokens[4]);
      }

      if (tokens.length > 5) {
        if (tokens[5] !== "." && tokens[5] !== "0") feature.color = IGVColor.createColorString(tokens[5]);
      }

      if (tokens.length > 8) {
        exonCount = parseInt(tokens[6]);
        exonSizes = tokens[7].split(',');
        exonStarts = tokens[8].split(',');
        exons = [];

        for (var i = 0; i < exonCount; i++) {
          eStart = chromStart + parseInt(exonStarts[i]);
          eEnd = eStart + parseInt(exonSizes[i]);
          exons.push({
            start: eStart,
            end: eEnd
          });
        }

        feature.exons = exons;
      }
    }
  }

  function decodeZoomData(data, chrIdx1, bpStart, chrIdx2, bpEnd, featureArray, chrDict, windowFunction) {
    var binaryParser = new BinaryParser(data),
        minSize = 8 * 4,
        // Minimum # of bytes required for a zoom record
    chromId,
        chromStart,
        chromEnd,
        validCount,
        minVal,
        maxVal,
        sumData,
        sumSquares,
        value,
        chr;

    while (binaryParser.remLength() >= minSize) {
      chromId = binaryParser.getInt();
      chr = chrDict[chromId];
      chromStart = binaryParser.getInt();
      chromEnd = binaryParser.getInt();
      validCount = binaryParser.getInt();
      minVal = binaryParser.getFloat();
      maxVal = binaryParser.getFloat();
      sumData = binaryParser.getFloat();
      sumSquares = binaryParser.getFloat();

      switch (windowFunction) {
        case "min":
          value = minVal;
          break;

        case "max":
          value = maxVal;
          break;

        default:
          value = validCount === 0 ? 0 : sumData / validCount;
      }

      if (chromId < chrIdx1 || chromId === chrIdx1 && chromEnd < bpStart) continue;else if (chromId > chrIdx2 || chromId === chrIdx2 && chromStart >= bpEnd) break;

      if (Number.isFinite(value)) {
        featureArray.push({
          chr: chr,
          start: chromStart,
          end: chromEnd,
          value: value
        });
      }
    }
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var BWSource = function BWSource(config, genome) {
    this.reader = new BWReader(config, genome);
    this.genome = genome;
    this.wgValues = {};
  };

  BWSource.prototype.getFeatures = function (chr, bpStart, bpEnd, bpPerPixel, windowFunction) {
    var self = this;

    if (chr.toLowerCase() === "all") {
      return self.getWGValues(windowFunction);
    } else {
      return self.reader.readFeatures(chr, bpStart, chr, bpEnd, bpPerPixel, windowFunction);
    }
  };

  BWSource.prototype.getDefaultRange = function () {
    if (this.reader.totalSummary !== undefined) {
      return this.reader.totalSummary.defaultRange;
    } else {
      return undefined;
    }
  };

  BWSource.prototype.defaultVisibilityWindow = function () {
    if (this.reader.type === 'bigwig') {
      return Promise.resolve(undefined);
    } else {
      // bigbed
      var genomeSize = this.genome ? this.genome.getGenomeLength() : 3088286401;
      return this.reader.loadHeader().then(function (header) {
        // Estimate window size to return ~ 1,000 features, assuming even distribution across the genome
        return 1000 * (genomeSize / header.dataCount);
      });
    }
  };

  BWSource.prototype.getWGValues = function (windowFunction) {
    var self = this,
        bpPerPixel,
        nominalScreenWidth = 500; // This doesn't need to be precise

    var genome = this.genome;

    if (self.wgValues[windowFunction]) {
      return Promise.resolve(self.wgValues[windowFunction]);
    } else {
      bpPerPixel = genome.getGenomeLength() / nominalScreenWidth;
      return self.reader.readWGFeatures(bpPerPixel, windowFunction).then(function (features) {
        var wgValues = [];
        features.forEach(function (f) {
          var wgFeature, offset, chr;
          chr = f.chr;
          offset = genome.getCumulativeOffset(chr);
          wgFeature = Object.assign({}, f);
          wgFeature.chr = "all";
          wgFeature.start = offset + f.start;
          wgFeature.end = offset + f.end;
          wgValues.push(wgFeature);
        });
        self.wgValues[windowFunction] = wgValues;
        return wgValues;
      });
    }
  };

  BWSource.prototype.supportsWholeGenome = function () {
    return true;
  };

  var GtexUtils = {
    getTissueInfo: function getTissueInfo(datasetId, baseURL) {
      datasetId = datasetId || 'gtex_v8';
      baseURL = baseURL || 'https://gtexportal.org/rest/v1';
      var url = baseURL + '/dataset/tissueInfo?datasetId=' + datasetId;
      return igvxhr.loadJson(url, {});
    },
    //https://gtexportal.org/rest/v1/association/singleTissueEqtlByLocation?chromosome=7&start=98358766&end=101523798&tissueName=Liver&datasetId=gtex_v7
    //https://gtexportal.org/rest/v1/association/singleTissueEqtlByLocation?chromosome=7&start=98358766&end=101523798&tissueSiteDetailId=Liver&datasetId=gtex_v8
    trackConfiguration: function trackConfiguration(tissueSummary, baseURL) {
      baseURL = baseURL || 'https://gtexportal.org/rest/v1';
      return {
        type: "eqtl",
        sourceType: "gtex-ws",
        url: baseURL + '/association/singleTissueEqtlByLocation',
        tissueSiteDetailId: tissueSummary.tissueSiteDetailId,
        name: tissueSummary.tissueSiteDetailId.split('_').join(' '),
        visibilityWindow: 250000
      };
    }
  };

  var FeatureTrack = extend(TrackBase, function (config, browser) {
    this.type = "feature";
    TrackBase.call(this, config, browser); // Set maxRows -- protects against pathological feature packing cases (# of rows of overlapping feaures)

    if (config.maxRows === undefined) {
      config.maxRows = 500;
    }

    this.maxRows = config.maxRows;
    this.displayMode = config.displayMode || "EXPANDED"; // COLLAPSED | EXPANDED | SQUISHED

    this.labelDisplayMode = config.labelDisplayMode;
    var format = config.format ? config.format.toLowerCase() : undefined;

    if ('bigwig' === format || 'bigbed' === format) {
      this.featureSource = new BWSource(config, browser.genome);
    } else {
      this.featureSource = new FeatureSource(config, browser.genome);
    } // Set default heights


    this.autoHeight = config.autoHeight;
    this.margin = config.margin === undefined ? 10 : config.margin;
    this.featureHeight = config.featureHeight || 14;

    if ("FusionJuncSpan" === config.type) {
      this.squishedRowHeight = config.squishedRowHeight || 50;
      this.expandedRowHeight = config.expandedRowHeight || 50;
      this.height = config.height || this.margin + 2 * this.expandedRowHeight;
    } else if ('snp' === config.type) {
      this.expandedRowHeight = config.expandedRowHeight || 10;
      this.squishedRowHeight = config.squishedRowHeight || 5;
      this.height = config.height || 30;
    } else {
      this.squishedRowHeight = config.squishedRowHeight || 15;
      this.expandedRowHeight = config.expandedRowHeight || 30;
      this.height = config.height || this.margin + 2 * this.expandedRowHeight;
    } // Set the render function.  This can optionally be passed in the config


    if (config.render) {
      this.render = config.render;
    } else if ("FusionJuncSpan" === config.type) {
      this.render = renderFusionJuncSpan;
    } else if ('snp' === config.type) {
      this.render = renderSnp; // colors ordered based on priority least to greatest

      this.snpColors = ['rgb(0,0,0)', 'rgb(0,0,255)', 'rgb(0,255,0)', 'rgb(255,0,0)'];
      this.colorBy = 'function';
    } else {
      this.render = renderFeature;
      this.arrowSpacing = 30; // adjust label positions to make sure they're always visible

      monitorTrackDrag(this);
    }
  });
  FeatureTrack.prototype.postInit =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var header, format;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return this.readFileHeader();

          case 2:
            header = _context.sent;
            // Set properties from track line
            if (header) this.setTrackProperties(header);
            format = this.config.format;

            if (!(format && format.toLowerCase() === 'bigbed' && this.visibilityWindow === undefined && typeof this.featureSource.defaultVisibilityWindow === 'function')) {
              _context.next = 10;
              break;
            }

            _context.next = 8;
            return this.featureSource.defaultVisibilityWindow();

          case 8:
            this.visibilityWindow = _context.sent;
            this.featureSource.visibilityWindow = this.visibilityWindow;

          case 10:
            return _context.abrupt("return", this);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  FeatureTrack.prototype.supportsWholeGenome = function () {
    return this.config.indexed === false && this.config.supportsWholeGenome !== false;
  };

  FeatureTrack.prototype.readFileHeader =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(typeof this.featureSource.getFileHeader === "function")) {
              _context2.next = 4;
              break;
            }

            _context2.next = 3;
            return this.featureSource.getFileHeader();

          case 3:
            this.header = _context2.sent;

          case 4:
            return _context2.abrupt("return", this.header);

          case 5:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  FeatureTrack.prototype.getFeatures =
  /*#__PURE__*/
  function () {
    var _ref3 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(chr, bpStart, bpEnd, bpPerPixel) {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              return _context3.abrupt("return", this.featureSource.getFeatures(chr, bpStart, bpEnd, bpPerPixel, this.visibilityWindow));

            case 1:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function (_x, _x2, _x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * The required height in pixels required for the track content.   This is not the visible track height, which
   * can be smaller (with a scrollbar) or larger.
   *
   * @param features
   * @returns {*}
   */


  FeatureTrack.prototype.computePixelHeight = function (features) {
    if (this.displayMode === "COLLAPSED") {
      return this.margin + this.expandedRowHeight;
    } else {
      var maxRow = 0;

      if (features && typeof features.forEach === "function") {
        features.forEach(function (feature) {
          if (feature.row && feature.row > maxRow) {
            maxRow = feature.row;
          }
        });
      }

      var height = this.margin + (maxRow + 1) * ("SQUISHED" === this.displayMode ? this.squishedRowHeight : this.expandedRowHeight);
      return height;
    }
  };

  FeatureTrack.prototype.draw = function (options) {
    var self = this;
    var featureList = options.features;
    var ctx = options.context;
    var bpPerPixel = options.bpPerPixel;
    var bpStart = options.bpStart;
    var pixelWidth = options.pixelWidth;
    var pixelHeight = options.pixelHeight;
    var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;
    IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
      'fillStyle': "rgb(255, 255, 255)"
    });

    if (featureList) {
      var lastPxEnd = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = featureList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var feature = _step.value;
          if (feature.end < bpStart) continue;
          if (feature.start > bpEnd) break;
          var row = this.displayMode === 'COLLAPSED' ? 0 : feature.row;
          var pxEnd = Math.ceil((feature.end - bpStart) / bpPerPixel);
          var last = lastPxEnd[row];

          if (!last || pxEnd > last) {
            self.render.call(this, feature, bpStart, bpPerPixel, pixelHeight, ctx, options); // Ensure a visible gap between features

            var pxStart = Math.floor((feature.start - bpStart) / bpPerPixel);

            if (last && pxStart - last <= 0) {
              ctx.globalAlpha = 0.5;
              IGVGraphics.strokeLine(ctx, pxStart, 0, pxStart, pixelHeight, {
                'strokeStyle': "rgb(255, 255, 255)"
              });
              ctx.globalAlpha = 1.0;
            }

            lastPxEnd[row] = pxEnd;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  };

  FeatureTrack.prototype.clickedFeatures = function (clickState) {
    var y = clickState.y - this.margin;
    var allFeatures = TrackBase.prototype.clickedFeatures.call(this, clickState);
    var row;

    switch (this.displayMode) {
      case 'SQUISHED':
        row = Math.floor(y / this.squishedRowHeight);
        break;

      case 'EXPANDED':
        row = Math.floor(y / this.expandedRowHeight);
        break;

      default:
        row = undefined;
    }

    return allFeatures.filter(function (feature) {
      return row === undefined || feature.row === undefined || row === feature.row;
    });
  };
  /**
   * Return "popup data" for feature @ genomic location.  Data is an array of key-value pairs
   */


  FeatureTrack.prototype.popupData = function (clickState, features) {
    if (!features) features = this.clickedFeatures(clickState);
    var genomicLocation = clickState.genomicLocation;
    var data = [];
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = features[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var feature = _step2.value;
        var featureData = typeof feature.popupData === "function" ? feature.popupData(genomicLocation) : TrackBase.extractPopupData(feature, this.getGenomeId());

        if (featureData) {
          if (data.length > 0) {
            data.push("<HR>");
          }

          Array.prototype.push.apply(data, featureData);
        }
      }
    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return data;
  };

  FeatureTrack.prototype.menuItemList = function () {
    var self = this;
    var menuItems = [];

    if (this.render === renderSnp) {
      ["function", "class"].forEach(function (colorScheme) {
        menuItems.push({
          object: createCheckbox('Color by ' + colorScheme, colorScheme === self.colorBy),
          click: function click() {
            self.colorBy = colorScheme;
            self.trackView.repaintViews();
          }
        });
      });
      menuItems.push({
        object: $('<div class="igv-track-menu-border-top">')
      });
    }

    menuItems.push({
      object: $('<div class="igv-track-menu-border-top">')
    });
    ["COLLAPSED", "SQUISHED", "EXPANDED"].forEach(function (displayMode) {
      var lut = {
        "COLLAPSED": "Collapse",
        "SQUISHED": "Squish",
        "EXPANDED": "Expand"
      };
      menuItems.push({
        object: createCheckbox(lut[displayMode], displayMode === self.displayMode),
        click: function click() {
          self.displayMode = displayMode;
          self.config.displayMode = displayMode;
          self.trackView.checkContentHeight();
          self.trackView.repaintViews();
        }
      });
    });
    return menuItems;
  };

  FeatureTrack.prototype.description = function () {
    // if('snp' === this.type) {
    if (renderSnp === this.render) {
      var desc = "<html>" + this.name + "<hr>";
      desc += '<em>Color By Function:</em><br>';
      desc += '<span style="color:red">Red</span>: Coding-Non-Synonymous, Splice Site<br>';
      desc += '<span style="color:green">Green</span>: Coding-Synonymous<br>';
      desc += '<span style="color:blue">Blue</span>: Untranslated<br>';
      desc += '<span style="color:black">Black</span>: Intron, Locus, Unknown<br><br>';
      desc += '<em>Color By Class:</em><br>';
      desc += '<span style="color:red">Red</span>: Deletion<br>';
      desc += '<span style="color:green">Green</span>: MNP<br>';
      desc += '<span style="color:blue">Blue</span>: Microsatellite, Named<br>';
      desc += '<span style="color:black">Black</span>: Indel, Insertion, SNP';
      desc += "</html>";
      return desc;
    } else {
      return this.name;
    }
  };
  /**
   * Called when the track is removed.  Do any needed cleanup here
   */


  FeatureTrack.prototype.dispose = function () {
    this.trackView = undefined;
  };
  /**
   * Monitors track drag events, updates label position to ensure that they're always visible.
   * @param track
   */


  function monitorTrackDrag(track) {
    if (track.browser.on) {
      track.browser.on('trackdragend', onDragEnd);
      track.browser.on('trackremoved', unSubscribe);
    }

    function onDragEnd() {
      if (!track.trackView || !track.trackView.tile || track.displayMode === "SQUISHED") {
        return;
      }

      track.trackView.repaintViews();
    }

    function unSubscribe(removedTrack) {
      if (track.browser.un && track === removedTrack) {
        track.browser.un('trackdrag', onDragEnd);
        track.browser.un('trackremoved', unSubscribe);
      }
    }
  }
  /**
   * @param feature
   * @param bpStart  genomic location of the left edge of the current canvas
   * @param xScale  scale in base-pairs per pixel
   * @returns {{px: number, px1: number, pw: number, h: number, py: number}}
   */


  function calculateFeatureCoordinates(feature, bpStart, xScale) {
    var px = (feature.start - bpStart) / xScale;
    var px1 = (feature.end - bpStart) / xScale; //px = Math.round((feature.start - bpStart) / xScale),
    //px1 = Math.round((feature.end - bpStart) / xScale),

    var pw = px1 - px;

    if (pw < 3) {
      pw = 3;
      px -= 1.5;
    }

    return {
      px: px,
      px1: px1,
      pw: pw
    };
  }
  /**
   *
   * @param feature
   * @param bpStart  genomic location of the left edge of the current canvas
   * @param xScale  scale in base-pairs per pixel
   * @param pixelHeight  pixel height of the current canvas
   * @param ctx  the canvas 2d context
   * @param options  genomic state
   */


  function renderFeature(feature, bpStart, xScale, pixelHeight, ctx, options) {
    var browser = this.browser;
    var color = this.color; // default

    if (feature.alpha && feature.alpha !== 1) {
      color = IGVColor.addAlpha(this.color, feature.alpha);
    }

    if (this.config.colorBy) {
      var colorByValue = feature[this.config.colorBy.field];

      if (colorByValue) {
        color = this.config.colorBy.pallete[colorByValue];
      }
    } else if (feature.color) {
      color = feature.color;
    }

    ctx.fillStyle = color;
    ctx.strokeStyle = color;
    var h;
    var py;

    if (this.displayMode === "SQUISHED" && feature.row !== undefined) {
      h = this.featureHeight / 2;
      py = this.margin + this.squishedRowHeight * feature.row;
    } else if (this.displayMode === "EXPANDED" && feature.row !== undefined) {
      h = this.featureHeight;
      py = this.margin + this.expandedRowHeight * feature.row;
    } else {
      // collapsed
      h = this.featureHeight;
      py = this.margin;
    }

    var cy = py + h / 2;
    var h2 = h / 2;
    var py2 = cy - h2 / 2;
    var exonCount = feature.exons ? feature.exons.length : 0;
    var coord = calculateFeatureCoordinates(feature, bpStart, xScale);
    var step = this.arrowSpacing;
    var direction = feature.strand === '+' ? 1 : feature.strand === '-' ? -1 : 0;

    if (exonCount === 0) {
      // single-exon transcript
      ctx.fillRect(coord.px, py, coord.pw, h); // Arrows
      // Do not draw if strand is not +/-

      if (direction !== 0) {
        ctx.fillStyle = "white";
        ctx.strokeStyle = "white";

        for (var x = coord.px + step / 2; x < coord.px1; x += step) {
          // draw arrowheads along central line indicating transcribed orientation
          IGVGraphics.strokeLine(ctx, x - direction * 2, cy - 2, x, cy);
          IGVGraphics.strokeLine(ctx, x - direction * 2, cy + 2, x, cy);
        }

        ctx.fillStyle = color;
        ctx.strokeStyle = color;
      }
    } else {
      // multi-exon transcript
      IGVGraphics.strokeLine(ctx, coord.px + 1, cy, coord.px1 - 1, cy); // center line for introns

      var pixelWidth = options.pixelWidth;
      var xLeft = Math.max(0, coord.px) + step / 2;
      var xRight = Math.min(pixelWidth, coord.px1);

      for (var _x5 = xLeft; _x5 < xRight; _x5 += step) {
        // draw arrowheads along central line indicating transcribed orientation
        IGVGraphics.strokeLine(ctx, _x5 - direction * 2, cy - 2, _x5, cy);
        IGVGraphics.strokeLine(ctx, _x5 - direction * 2, cy + 2, _x5, cy);
      }

      for (var e = 0; e < exonCount; e++) {
        // draw the exons
        var exon = feature.exons[e];
        var ePx = Math.round((exon.start - bpStart) / xScale);
        var ePx1 = Math.round((exon.end - bpStart) / xScale);
        var ePw = Math.max(1, ePx1 - ePx);
        var ePxU = void 0;

        if (ePx + ePw < 0) {
          continue; // Off the left edge
        }

        if (ePx > pixelWidth) {
          break; // Off the right edge
        }

        if (exon.utr) {
          ctx.fillRect(ePx, py2, ePw, h2); // Entire exon is UTR
        } else {
          if (exon.cdStart) {
            ePxU = Math.round((exon.cdStart - bpStart) / xScale);
            ctx.fillRect(ePx, py2, ePxU - ePx, h2); // start is UTR

            ePw -= ePxU - ePx;
            ePx = ePxU;
          }

          if (exon.cdEnd) {
            ePxU = Math.round((exon.cdEnd - bpStart) / xScale);
            ctx.fillRect(ePxU, py2, ePx1 - ePxU, h2); // start is UTR

            ePw -= ePx1 - ePxU;
            ePx1 = ePxU;
          }

          ctx.fillRect(ePx, py, ePw, h); // Arrows

          if (ePw > step + 5 && direction !== 0) {
            ctx.fillStyle = "white";
            ctx.strokeStyle = "white";

            for (var _x6 = ePx + step / 2; _x6 < ePx1; _x6 += step) {
              // draw arrowheads along central line indicating transcribed orientation
              IGVGraphics.strokeLine(ctx, _x6 - direction * 2, cy - 2, _x6, cy);
              IGVGraphics.strokeLine(ctx, _x6 - direction * 2, cy + 2, _x6, cy);
            }

            ctx.fillStyle = color;
            ctx.strokeStyle = color;
          }
        }
      }
    }

    var windowX = Math.round(options.viewportContainerX);
    var nLoci = browser.genomicStateList ? browser.genomicStateList.length : 1;
    var windowX1 = windowX + options.viewportContainerWidth / nLoci;
    renderFeatureLabels.call(this, ctx, feature, coord.px, coord.px1, py, windowX, windowX1, options.genomicState, options);
  }
  /**
   * @param ctx       the canvas 2d context
   * @param feature
   * @param featureX  feature start x-coordinate
   * @param featureX1 feature end x-coordinate
   * @param featureY  feature y-coordinate
   * @param windowX   visible window start x-coordinate
   * @param windowX1  visible window end x-coordinate
   * @param genomicState  genomic state
   * @param options  options
   */


  function renderFeatureLabels(ctx, feature, featureX, featureX1, featureY, windowX, windowX1, genomicState, options) {
    var geneColor, geneFontStyle, transform, boxX, boxX1, // label should be centered between these two x-coordinates
    labelX, labelY, textFitsInBox; // feature outside of viewable window

    if (featureX1 < windowX || featureX > windowX1) {
      boxX = featureX;
      boxX1 = featureX1;
    } else {
      // center label within visible portion of the feature
      boxX = Math.max(featureX, windowX);
      boxX1 = Math.min(featureX1, windowX1);
    }

    if (genomicState.selection && GtexUtils.gtexLoaded && feature.name !== undefined) {
      // TODO -- for gtex, figure out a better way to do this
      geneColor = genomicState.selection.colorForGene(feature.name);
    }

    textFitsInBox = boxX1 - boxX > ctx.measureText(feature.name).width;

    if ( //(feature.name !== undefined && feature.name.toUpperCase() === selectedFeatureName) ||
    (textFitsInBox || geneColor) && this.displayMode !== "SQUISHED" && feature.name !== undefined) {
      geneFontStyle = {
        // font: '10px PT Sans',
        textAlign: 'center',
        fillStyle: geneColor || feature.color || this.color,
        strokeStyle: geneColor || feature.color || this.color
      };

      if (this.displayMode === "COLLAPSED" && this.labelDisplayMode === "SLANT") {
        transform = {
          rotate: {
            angle: 45
          }
        };
        delete geneFontStyle.textAlign;
      }

      labelX = boxX + (boxX1 - boxX) / 2;
      labelY = getFeatureLabelY(featureY, transform); // TODO: This is for compatibility with JuiceboxJS.

      if (options.labelTransform) {
        ctx.save();
        options.labelTransform(ctx, labelX);
        IGVGraphics.fillText(ctx, feature.name, labelX, labelY, geneFontStyle, undefined);
        ctx.restore();
      } else {
        IGVGraphics.fillText(ctx, feature.name, labelX, labelY, geneFontStyle, transform);
      }
    }
  }

  function getFeatureLabelY(featureY, transform) {
    return transform ? featureY + 20 : featureY + 25;
  }
  /**
   *
   * @param feature
   * @param bpStart  genomic location of the left edge of the current canvas
   * @param xScale  scale in base-pairs per pixel
   * @param pixelHeight  pixel height of the current canvas
   * @param ctx  the canvas 2d context
   */


  function renderFusionJuncSpan(feature, bpStart, xScale, pixelHeight, ctx) {
    var py;
    var rowHeight = this.displayMode === "EXPANDED" ? this.squishedRowHeight : this.expandedRowHeight;

    if (this.display === "COLLAPSED") {
      py = this.margin;
    }

    if (this.displayMode === "SQUISHED" && feature.row !== undefined) {
      py = this.margin + rowHeight * feature.row;
    } else if (this.displayMode === "EXPANDED" && feature.row !== undefined) {
      py = this.margin + rowHeight * feature.row;
    }

    var cy = py + 0.5 * rowHeight;
    var top_y = cy - 0.5 * rowHeight;
    var bottom_y = cy + 0.5 * rowHeight; // draw the junction arc

    var junction_left_px = Math.round((feature.junction_left - bpStart) / xScale);
    var junction_right_px = Math.round((feature.junction_right - bpStart) / xScale);
    ctx.beginPath();
    ctx.moveTo(junction_left_px, cy);
    ctx.bezierCurveTo(junction_left_px, top_y, junction_right_px, top_y, junction_right_px, cy);
    ctx.lineWidth = 1 + Math.log(feature.num_junction_reads) / Math.log(2);
    ctx.strokeStyle = 'blue';
    ctx.stroke(); // draw the spanning arcs

    var spanning_coords = feature.spanning_frag_coords;

    for (var i = 0; i < spanning_coords.length; i++) {
      var spanning_info = spanning_coords[i];
      var span_left_px = Math.round((spanning_info.left - bpStart) / xScale);
      var span_right_px = Math.round((spanning_info.right - bpStart) / xScale);
      ctx.beginPath();
      ctx.moveTo(span_left_px, cy);
      ctx.bezierCurveTo(span_left_px, bottom_y, span_right_px, bottom_y, span_right_px, cy);
      ctx.lineWidth = 1;
      ctx.strokeStyle = 'purple';
      ctx.stroke();
    }
  } // SNP constants


  var codingNonSynonSet = new Set(['nonsense', 'missense', 'stop-loss', 'frameshift', 'cds-indel']);
  var codingSynonSet = new Set(['coding-synon']);
  var spliceSiteSet = new Set(['splice-3', 'splice-5']);
  var untranslatedSet = new Set(['untranslated-5', 'untranslated-3']);
  /**
   *
   * @param snp
   * @param bpStart  genomic location of the left edge of the current canvas
   * @param xScale  scale in base-pairs per pixel
   * @param pixelHeight  pixel height of the current canvas
   * @param ctx  the canvas 2d context
   */

  function renderSnp(snp, bpStart, xScale, pixelHeight, ctx) {
    var coord = calculateFeatureCoordinates(snp, bpStart, xScale),
        py = this.margin,
        h,
        colorArrLength = this.snpColors.length,
        colorPriority;
    h = this.displayMode === "squished" ? this.squishedRowHeight : this.expandedRowHeight;

    switch (this.colorBy) {
      case 'function':
        colorPriority = colorByFunc(snp.func);
        break;

      case 'class':
        colorPriority = colorByClass(snp['class']);
    }

    ctx.fillStyle = this.snpColors[colorPriority];
    ctx.fillRect(coord.px, py, coord.pw, h); // Coloring functions, convert a value to a priority

    function colorByFunc(theFunc) {
      var priorities;
      var funcArray = theFunc.split(','); // possible func values

      priorities = funcArray.map(function (func) {
        if (codingNonSynonSet.has(func) || spliceSiteSet.has(func)) {
          return colorArrLength - 1;
        } else if (codingSynonSet.has(func)) {
          return colorArrLength - 2;
        } else if (untranslatedSet.has(func)) {
          return colorArrLength - 3;
        } else {
          // locusSet.has(func) || intronSet.has(func)
          return 0;
        }
      });
      return priorities.reduce(function (a, b) {
        return Math.max(a, b);
      });
    }

    function colorByClass(cls) {
      if (cls === 'deletion') {
        return colorArrLength - 1;
      } else if (cls === 'mnp') {
        return colorArrLength - 2;
      } else if (cls === 'microsatellite' || cls === 'named') {
        return colorArrLength - 3;
      } else {
        // cls === 'single' || cls === 'in-del' || cls === 'insertion'
        return 0;
      }
    }
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var SequenceTrack = function SequenceTrack(config, browser) {
    this.type = "sequence";
    this.browser = browser;
    this.removable = false;
    this.config = config;
    this.name = "";
    this.id = "sequence";
    this.sequenceType = config.sequenceType || "dna"; //   dna | rna | prot

    this.height = 25;
    this.disableButtons = false;
    this.order = config.order || -Number.MAX_VALUE;
    this.ignoreTrackMenu = false;
    this.removable = false;
    this.reversed = false;
    this.frameTranslate = false;
    this.complement = {
      'A': 'T',
      'C': 'G',
      'G': 'C',
      'T': 'A'
    };
    this.translationDict = {
      'TTT': 'F',
      'TTC': 'F',
      'TTA': 'L',
      'TTG': 'L',
      'CTT': 'L',
      'CTC': 'L',
      'CTA': 'L',
      'CTG': 'L',
      'ATT': 'I',
      'ATC': 'I',
      'ATA': 'I',
      'ATG': 'M',
      'GTT': 'V',
      'GTC': 'V',
      'GTA': 'V',
      'GTG': 'V',
      'TCT': 'S',
      'TCC': 'S',
      'TCA': 'S',
      'TCG': 'S',
      'CCT': 'P',
      'CCC': 'P',
      'CCA': 'P',
      'CCG': 'P',
      'ACT': 'T',
      'ACC': 'T',
      'ACA': 'T',
      'ACG': 'T',
      'GCT': 'A',
      'GCC': 'A',
      'GCA': 'A',
      'GCG': 'A',
      'TAT': 'Y',
      'TAC': 'Y',
      'TAA': 'STOP',
      'TAG': 'STOP',
      'CAT': 'H',
      'CAC': 'H',
      'CAA': 'Q',
      'CAG': 'Q',
      'AAT': 'N',
      'AAC': 'N',
      'AAA': 'K',
      'AAG': 'K',
      'GAT': 'D',
      'GAC': 'D',
      'GAA': 'E',
      'GAG': 'E',
      'TGT': 'C',
      'TGC': 'C',
      'TGA': 'STOP',
      'TGG': 'W',
      'CGT': 'R',
      'CGC': 'R',
      'CGA': 'R',
      'CGG': 'R',
      'AGT': 'S',
      'AGC': 'S',
      'AGA': 'R',
      'AGG': 'R',
      'GGT': 'G',
      'GGC': 'G',
      'GGA': 'G',
      'GGG': 'G'
    };
  };

  SequenceTrack.prototype.menuItemList = function () {
    var self = this;
    return [{
      name: self.reversed ? "Forward" : "Reverse",
      click: function click() {
        self.reversed = !self.reversed;
        self.trackView.repaintViews();
      }
    }, {
      name: self.frameTranslate ? "Close Translation" : "Three-frame Translate",
      click: function click() {
        self.frameTranslate = !self.frameTranslate;

        if (self.frameTranslate) {
          self.trackView.viewports.forEach(function (vp) {
            vp.setContentHeight(115);
          });
          self.trackView.setTrackHeight(115);
        } else {
          self.trackView.viewports.forEach(function (vp) {
            vp.setContentHeight(25);
          });
          self.trackView.setTrackHeight(25);
        }

        self.trackView.repaintViews();
      }
    }];
  };

  SequenceTrack.prototype.translateSequence = function (seq) {
    var threeFrame = [[], [], []];
    var self = this;
    [0, 1, 2].forEach(function (fNum) {
      var idx = fNum;
      var obj, st;

      while (seq.length - idx >= 3) {
        obj = {};
        st = seq.slice(idx, idx + 3);

        if (self.reversed) {
          st = st.split('').reverse().join('');
        }

        obj.codons = st;
        obj.aminoA = self.translationDict[st.toUpperCase()];
        threeFrame[fNum].push(obj);
        obj = null;
        idx += 3;
      }
    });
    return threeFrame;
  };

  SequenceTrack.prototype.getFeatures = function (chr, bpStart, bpEnd, bpPerPixel) {
    var browser = this.browser;

    if (bpPerPixel && bpPerPixel > 1) {
      return Promise.resolve(null);
    } else {
      return browser.genome.sequence.getSequence(chr, bpStart, bpEnd).then(function (sequence) {
        return {
          bpStart: bpStart,
          sequence: sequence
        };
      });
    }
  };

  SequenceTrack.prototype.draw = function (options) {
    var self = this;
    var ctx = options.context;

    if (options.features) {
      var sequence = options.features.sequence;
      var sequenceBpStart = options.features.bpStart;
      var bpEnd = 1 + options.bpStart + options.pixelWidth * options.bpPerPixel;
      var height = 15;

      for (var bp = sequenceBpStart; bp <= bpEnd; bp++) {
        var seqOffsetBp = Math.floor(bp - sequenceBpStart);

        if (seqOffsetBp < sequence.length) {
          var letter = sequence[seqOffsetBp];

          if (this.reversed) {
            letter = this.complement[letter.toUpperCase()];
          }

          var offsetBP = bp - options.bpStart;
          var aPixel = offsetBP / options.bpPerPixel;
          var bPixel = (offsetBP + 1) / options.bpPerPixel;
          var color = fillColor.call(this, letter);

          if (options.bpPerPixel > 1 / 10) {
            IGVGraphics.fillRect(ctx, aPixel, 5, bPixel - aPixel, height - 5, {
              fillStyle: color
            });
          } else {
            var xPixel = 0.5 * (aPixel + bPixel - ctx.measureText(letter).width);
            IGVGraphics.strokeText(ctx, letter, xPixel, height, {
              strokeStyle: color
            });
          }
        }
      }

      if (this.frameTranslate) {
        var transSeq;

        if (this.reversed) {
          transSeq = sequence.split('').map(function (cv) {
            return self.complement[cv];
          });
          transSeq = transSeq.join('');
        } else {
          transSeq = sequence;
        }

        var y = height;
        var translatedSequence = this.translateSequence(transSeq);
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = translatedSequence[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var arr = _step.value;
            var i = translatedSequence.indexOf(arr);
            var fNum = i;
            var h = 25;
            y = i === 0 ? y + 10 : y + 30; //Little less room at first.

            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var cv = _step2.value;
                var aaS = void 0;
                var idx = arr.indexOf(cv);
                var xSeed = idx + fNum + 2 * idx;

                var _color = 0 === idx % 2 ? 'rgb(160,160,160)' : 'rgb(224,224,224)';

                var p0 = Math.floor(xSeed / options.bpPerPixel);
                var p1 = Math.floor((xSeed + 3) / options.bpPerPixel);
                var pc = Math.round((p0 + p1) / 2);

                if (cv.aminoA.indexOf('STOP') > -1) {
                  _color = 'rgb(255, 0, 0)';
                  aaS = 'STOP'; //Color blind accessible
                } else {
                  aaS = cv.aminoA;
                }

                if (cv.aminoA === 'M') {
                  _color = 'rgb(0, 153, 0)';
                  aaS = 'START'; //Color blind accessible
                }

                IGVGraphics.fillRect(ctx, p0, y, p1 - p0, h, {
                  fillStyle: _color
                });

                if (options.bpPerPixel <= 1 / 10) {
                  IGVGraphics.strokeText(ctx, aaS, pc - ctx.measureText(aaS).width / 2, y + 15);
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  };

  function fillColor(index) {
    if (this.color) {
      return this.color;
    } else if ("dna" === this.sequenceType) {
      return nucleotideColors[index] || 'gray';
    } else {
      return 'rgb(0, 0, 150)';
    }
  }

  SequenceTrack.prototype.supportsWholeGenome = function () {
    return false;
  };

  SequenceTrack.prototype.computePixelHeight = function (ignore) {
    return this.height;
  };

  var GZIP_FLAG = 0x1;

  var TDFReader = function TDFReader(config, genome) {
    this.config = config;
    this.genome = genome;
    this.path = config.url;
    this.groupCache = {};
    this.datasetCache = {};
  };

  TDFReader.prototype.readHeader =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var data, binaryParser, headerSize, nWindowFunctions, nTracks, nEntries, _name, pos, size, _name2, _pos, _size;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(this.magic !== undefined)) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", this);

          case 2:
            _context.next = 4;
            return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
              range: {
                start: 0,
                size: 64000
              }
            }));

          case 4:
            data = _context.sent;
            binaryParser = new BinaryParser(new DataView(data));
            this.magic = binaryParser.getInt();
            this.version = binaryParser.getInt();
            this.indexPos = binaryParser.getLong();
            this.indexSize = binaryParser.getInt();
            headerSize = binaryParser.getInt();

            if (this.version >= 2) {
              nWindowFunctions = binaryParser.getInt();
              this.windowFunctions = [];

              while (nWindowFunctions-- > 0) {
                this.windowFunctions.push(binaryParser.getString());
              }
            }

            this.trackType = binaryParser.getString();
            this.trackLine = binaryParser.getString();
            nTracks = binaryParser.getInt();
            this.trackNames = [];

            while (nTracks-- > 0) {
              this.trackNames.push(binaryParser.getString());
            }

            this.genomeID = binaryParser.getString();
            this.flags = binaryParser.getInt();
            this.compressed = (this.flags & GZIP_FLAG) !== 0; // Now read index

            _context.next = 22;
            return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
              range: {
                start: this.indexPos,
                size: this.indexSize
              }
            }));

          case 22:
            data = _context.sent;
            binaryParser = new BinaryParser(new DataView(data));
            this.datasetIndex = {};
            nEntries = binaryParser.getInt();

            while (nEntries-- > 0) {
              _name = binaryParser.getString();
              pos = binaryParser.getLong();
              size = binaryParser.getInt();
              this.datasetIndex[_name] = {
                position: pos,
                size: size
              };
            }

            this.groupIndex = {};
            nEntries = binaryParser.getInt();

            while (nEntries-- > 0) {
              _name2 = binaryParser.getString();
              _pos = binaryParser.getLong();
              _size = binaryParser.getInt();
              this.groupIndex[_name2] = {
                position: _pos,
                size: _size
              };
            }

            return _context.abrupt("return", this);

          case 31:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  TDFReader.prototype.readDataset =
  /*#__PURE__*/
  function () {
    var _ref2 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(chr, windowFunction, zoom) {
      var key, wf, zoomString, dsName, indexEntry, data, binaryParser, nAttributes, attributes, dataType, tileWidth, nTiles, tiles, dataset;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              key = chr + "_" + windowFunction + "_" + zoom;

              if (!this.datasetCache[key]) {
                _context2.next = 5;
                break;
              }

              return _context2.abrupt("return", this.datasetCache[key]);

            case 5:
              _context2.next = 7;
              return this.readHeader();

            case 7:
              wf = this.version < 2 ? "" : "/" + windowFunction;
              zoomString = chr.toLowerCase() === "all" || zoom === undefined ? "0" : zoom.toString();

              if (windowFunction === "raw") {
                dsName = "/" + chr + "/raw";
              } else {
                dsName = "/" + chr + "/z" + zoomString + wf;
              }

              indexEntry = this.datasetIndex[dsName];

              if (!(indexEntry === undefined)) {
                _context2.next = 13;
                break;
              }

              return _context2.abrupt("return", undefined);

            case 13:
              _context2.next = 15;
              return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
                range: {
                  start: indexEntry.position,
                  size: indexEntry.size
                }
              }));

            case 15:
              data = _context2.sent;

              if (data) {
                _context2.next = 18;
                break;
              }

              return _context2.abrupt("return", undefined);

            case 18:
              binaryParser = new BinaryParser(new DataView(data));
              nAttributes = binaryParser.getInt();
              attributes = {};

              while (nAttributes-- > 0) {
                attributes[binaryParser.getString()] = binaryParser.getString();
              }

              dataType = binaryParser.getString();
              tileWidth = binaryParser.getFloat();
              nTiles = binaryParser.getInt();
              tiles = [];

              while (nTiles-- > 0) {
                tiles.push({
                  position: binaryParser.getLong(),
                  size: binaryParser.getInt()
                });
              }

              dataset = {
                name: dsName,
                attributes: attributes,
                dataType: dataType,
                tileWidth: tileWidth,
                tiles: tiles
              };
              this.datasetCache[key] = dataset;
              return _context2.abrupt("return", dataset);

            case 30:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function (_x, _x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }();

  TDFReader.prototype.readRootGroup =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3() {
    var genome, rootGroup, group, names, maxZoomString;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            genome = this.genome;
            rootGroup = this.groupCache["/"];

            if (!rootGroup) {
              _context3.next = 6;
              break;
            }

            return _context3.abrupt("return", rootGroup);

          case 6:
            _context3.next = 8;
            return this.readGroup("/");

          case 8:
            group = _context3.sent;
            names = group["chromosomes"];
            maxZoomString = group["maxZoom"]; // Now parse out interesting attributes.  This is a side effect, but the alternative is messy as well.

            if (maxZoomString) {
              this.maxZoom = Number(maxZoomString);
            } // Chromosome names


            this.chrAliasTable = {};

            if (names) {
              names.split(",").forEach(function (chr) {
                var canonicalName = genome.getChromosomeName(chr);
                this.chrAliasTable[canonicalName] = chr;
              });
            }

            this.groupCache["/"] = group;
            return _context3.abrupt("return", group);

          case 16:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  TDFReader.prototype.readGroup =
  /*#__PURE__*/
  function () {
    var _ref4 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4(name) {
      var group, indexEntry, data, binaryParser, _group, nAttributes, key, value;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              group = this.groupCache[name];

              if (!group) {
                _context4.next = 5;
                break;
              }

              return _context4.abrupt("return", group);

            case 5:
              _context4.next = 7;
              return this.readHeader();

            case 7:
              indexEntry = this.groupIndex[name];

              if (!(indexEntry === undefined)) {
                _context4.next = 10;
                break;
              }

              return _context4.abrupt("return", undefined);

            case 10:
              _context4.next = 12;
              return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
                range: {
                  start: indexEntry.position,
                  size: indexEntry.size
                }
              }));

            case 12:
              data = _context4.sent;

              if (data) {
                _context4.next = 15;
                break;
              }

              return _context4.abrupt("return", undefined);

            case 15:
              binaryParser = new BinaryParser(new DataView(data));
              _group = {
                name: name
              };
              nAttributes = binaryParser.getInt();

              while (nAttributes-- > 0) {
                key = binaryParser.getString();
                value = binaryParser.getString();
                _group[key] = value;
              }

              this.groupCache[name] = _group;
              return _context4.abrupt("return", _group);

            case 21:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));

    return function (_x4) {
      return _ref4.apply(this, arguments);
    };
  }();

  function createFixedStep(binaryParser, nTracks) {
    var nPositions = binaryParser.getInt();
    var start = binaryParser.getInt();
    var span = binaryParser.getFloat();
    var data = [];
    var nt = nTracks;

    while (nt-- > 0) {
      var np = nPositions;
      var dtrack = [];

      while (np-- > 0) {
        dtrack.push(binaryParser.getFloat());
      }

      data.push(dtrack);
    }

    return {
      type: "fixedStep",
      start: start,
      span: span,
      data: data,
      nTracks: nTracks,
      nPositions: nPositions
    };
  }

  function createVariableStep(binaryParser, nTracks) {
    var tileStart = binaryParser.getInt();
    var span = binaryParser.getFloat();
    var nPositions = binaryParser.getInt();
    var start = [];
    var np = nPositions;

    while (np-- > 0) {
      start.push(binaryParser.getInt());
    }

    var nS = binaryParser.getInt(); // # of samples, ignored but should === nTracks

    var data = [];
    var nt = nTracks;

    while (nt-- > 0) {
      np = nPositions;
      var dtrack = [];

      while (np-- > 0) {
        dtrack.push(binaryParser.getFloat());
      }

      data.push(dtrack);
    }

    return {
      type: "variableStep",
      tileStart: tileStart,
      span: span,
      start: start,
      data: data,
      nTracks: nTracks,
      nPositions: nPositions
    };
  }

  function createBed(binaryParser, nTracks, type) {
    var nPositions = binaryParser.getInt();
    var n = nPositions;
    var start = [];

    while (n-- > 0) {
      start.push(binaryParser.getInt());
    }

    n = nPositions;
    var end = [];

    while (n-- > 0) {
      end.push(binaryParser.getInt());
    }

    var nS = binaryParser.getInt(); // # of samples, ignored but should === nTracks

    var data = [];
    var nt = nTracks;

    while (nt-- > 0) {
      var np = nPositions;
      var dtrack = [];

      while (np-- > 0) {
        dtrack.push(binaryParser.getFloat());
      }

      data.push(dtrack);
    }

    if (type === "bedWithName") {
      n = nPositions;
      var _name3 = [];

      while (n-- > 0) {
        _name3.push(binaryParser.getString());
      }
    }

    return {
      type: type,
      start: start,
      end: end,
      data: data,
      name: name,
      nTracks: nTracks,
      nPositions: nPositions
    };
  }

  TDFReader.prototype.readTiles =
  /*#__PURE__*/
  function () {
    var _ref5 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee5(tileIndeces, nTracks) {
      var firstEntry, lastEntry, position, size, data, tiles, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, indexEntry, start, _size2, tileData, inflate, plain, binaryParser, type, tile;

      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              tileIndeces.sort(function (a, b) {
                return a.position - b.position;
              });
              tileIndeces = tileIndeces.filter(function (idx) {
                return idx.size > 0;
              });

              if (!(tileIndeces.length === 0)) {
                _context5.next = 4;
                break;
              }

              return _context5.abrupt("return", Promise.resolve([]));

            case 4:
              firstEntry = tileIndeces[0];
              lastEntry = tileIndeces[tileIndeces.length - 1];
              position = firstEntry.position;
              size = lastEntry.position + lastEntry.size - position;
              _context5.next = 10;
              return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
                range: {
                  start: position,
                  size: size
                }
              }));

            case 10:
              data = _context5.sent;
              tiles = []; // Loop through and decode tiles

              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context5.prev = 15;
              _iterator = tileIndeces[Symbol.iterator]();

            case 17:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context5.next = 41;
                break;
              }

              indexEntry = _step.value;
              start = indexEntry.position - position;
              _size2 = indexEntry.size;

              if (!(_size2 > 0)) {
                _context5.next = 38;
                break;
              }

              tileData = void 0;

              if (this.compressed) {
                inflate = new Zlib.Inflate(new Uint8Array(data, start, _size2));
                plain = inflate.decompress();
                tileData = plain.buffer;
              } else {
                tileData = data.slice(start, start + _size2);
              }

              binaryParser = new BinaryParser(new DataView(tileData));
              type = binaryParser.getString();
              tile = void 0;
              _context5.t0 = type;
              _context5.next = _context5.t0 === "fixedStep" ? 30 : _context5.t0 === "variableStep" ? 32 : _context5.t0 === "bed" ? 34 : _context5.t0 === "bedWithName" ? 34 : 36;
              break;

            case 30:
              tile = createFixedStep(binaryParser, nTracks);
              return _context5.abrupt("break", 37);

            case 32:
              tile = createVariableStep(binaryParser, nTracks);
              return _context5.abrupt("break", 37);

            case 34:
              tile = createBed(binaryParser, nTracks, type);
              return _context5.abrupt("break", 37);

            case 36:
              throw "Unknown tile type: " + type;

            case 37:
              tiles.push(tile);

            case 38:
              _iteratorNormalCompletion = true;
              _context5.next = 17;
              break;

            case 41:
              _context5.next = 47;
              break;

            case 43:
              _context5.prev = 43;
              _context5.t1 = _context5["catch"](15);
              _didIteratorError = true;
              _iteratorError = _context5.t1;

            case 47:
              _context5.prev = 47;
              _context5.prev = 48;

              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }

            case 50:
              _context5.prev = 50;

              if (!_didIteratorError) {
                _context5.next = 53;
                break;
              }

              throw _iteratorError;

            case 53:
              return _context5.finish(50);

            case 54:
              return _context5.finish(47);

            case 55:
              return _context5.abrupt("return", tiles);

            case 56:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[15, 43, 47, 55], [48,, 50, 54]]);
    }));

    return function (_x5, _x6) {
      return _ref5.apply(this, arguments);
    };
  }();

  TDFReader.prototype.readTile =
  /*#__PURE__*/
  function () {
    var _ref6 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee6(indexEntry, nTracks) {
      var data, inflate, plain, binaryParser, type;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return igvxhr.loadArrayBuffer(this.path, buildOptions(this.config, {
                range: {
                  start: indexEntry.position,
                  size: indexEntry.size
                }
              }));

            case 2:
              data = _context6.sent;

              if (this.compressed) {
                inflate = new Zlib.Inflate(new Uint8Array(data));
                plain = inflate.decompress();
                data = plain.buffer;
              }

              binaryParser = new BinaryParser(new DataView(data));
              type = binaryParser.getString();
              _context6.t0 = type;
              _context6.next = _context6.t0 === "fixedStep" ? 9 : _context6.t0 === "variableStep" ? 10 : _context6.t0 === "bed" ? 11 : _context6.t0 === "bedWithName" ? 11 : 12;
              break;

            case 9:
              return _context6.abrupt("return", createFixedStep(binaryParser, nTracks));

            case 10:
              return _context6.abrupt("return", createVariableStep(binaryParser, nTracks));

            case 11:
              return _context6.abrupt("return", createBed(binaryParser, nTracks, type));

            case 12:
              throw "Unknown tile type: " + type;

            case 13:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    return function (_x7, _x8) {
      return _ref6.apply(this, arguments);
    };
  }();

  var TDFSource = function TDFSource(config, genome) {
    this.genome = genome;
    this.windowFunction = config.windowFunction || "mean";
    this.reader = new TDFReader(config, genome);
  };

  TDFSource.prototype.getFeatures =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(chr, bpStart, bpEnd, bpPerPixel) {
      var genomicInterval, genome, group, zoom, queryChr, maxZoom, wf, dataset, tileWidth, startTile, endTile, NTRACKS, tiles, features, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, tile, getRootGroup, _getRootGroup;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _getRootGroup = function _ref3() {
                _getRootGroup = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee() {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          if (!this.rootGroup) {
                            _context.next = 4;
                            break;
                          }

                          return _context.abrupt("return", this.rootGroup);

                        case 4:
                          _context.next = 6;
                          return this.reader.readRootGroup();

                        case 6:
                          this.rootGroup = _context.sent;
                          return _context.abrupt("return", this.rootGroup);

                        case 8:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, this);
                }));
                return _getRootGroup.apply(this, arguments);
              };

              getRootGroup = function _ref2() {
                return _getRootGroup.apply(this, arguments);
              };

              _context2.next = 4;
              return getRootGroup().call(this);

            case 4:
              genomicInterval = new GenomicInterval(chr, bpStart, bpEnd);
              genome = this.genome;

              if (!(chr.toLowerCase() === "all")) {
                _context2.next = 8;
                break;
              }

              return _context2.abrupt("return", []);

            case 8:
              genomicInterval.bpPerPixel = bpPerPixel;
              _context2.next = 11;
              return getRootGroup();

            case 11:
              group = _context2.sent;
              zoom = zoomLevelForScale$1(chr, bpPerPixel, genome);
              queryChr = this.reader.chrAliasTable[chr];
              maxZoom = this.reader.maxZoom;
              if (queryChr === undefined) queryChr = chr;
              if (maxZoom === undefined) maxZoom = -1;
              wf = zoom > maxZoom ? "raw" : this.windowFunction;
              _context2.next = 20;
              return this.reader.readDataset(queryChr, wf, zoom);

            case 20:
              dataset = _context2.sent;

              if (!(dataset == null)) {
                _context2.next = 23;
                break;
              }

              return _context2.abrupt("return", []);

            case 23:
              tileWidth = dataset.tileWidth;
              startTile = Math.floor(bpStart / tileWidth);
              endTile = Math.floor(bpEnd / tileWidth);
              NTRACKS = 1; // TODO read this

              _context2.next = 29;
              return this.reader.readTiles(dataset.tiles.slice(startTile, endTile + 1), NTRACKS);

            case 29:
              tiles = _context2.sent;
              features = [];
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context2.prev = 34;
              _iterator = tiles[Symbol.iterator]();

            case 36:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context2.next = 51;
                break;
              }

              tile = _step.value;
              _context2.t0 = tile.type;
              _context2.next = _context2.t0 === "bed" ? 41 : _context2.t0 === "variableStep" ? 43 : _context2.t0 === "fixedStep" ? 45 : 47;
              break;

            case 41:
              decodeBedTile(tile, chr, bpStart, bpEnd, bpPerPixel, features);
              return _context2.abrupt("break", 48);

            case 43:
              decodeVaryTile(tile, chr, bpStart, bpEnd, bpPerPixel, features);
              return _context2.abrupt("break", 48);

            case 45:
              decodeFixedTile(tile, chr, bpStart, bpEnd, bpPerPixel, features);
              return _context2.abrupt("break", 48);

            case 47:
              throw "Unknown tile type: " + tile.type;

            case 48:
              _iteratorNormalCompletion = true;
              _context2.next = 36;
              break;

            case 51:
              _context2.next = 57;
              break;

            case 53:
              _context2.prev = 53;
              _context2.t1 = _context2["catch"](34);
              _didIteratorError = true;
              _iteratorError = _context2.t1;

            case 57:
              _context2.prev = 57;
              _context2.prev = 58;

              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }

            case 60:
              _context2.prev = 60;

              if (!_didIteratorError) {
                _context2.next = 63;
                break;
              }

              throw _iteratorError;

            case 63:
              return _context2.finish(60);

            case 64:
              return _context2.finish(57);

            case 65:
              features.sort(function (a, b) {
                return a.start - b.start;
              });
              return _context2.abrupt("return", features);

            case 67:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[34, 53, 57, 65], [58,, 60, 64]]);
    }));

    return function (_x, _x2, _x3, _x4) {
      return _ref.apply(this, arguments);
    };
  }();

  TDFSource.prototype.supportsWholeGenome = function () {
    return false;
  };

  function decodeBedTile(tile, chr, bpStart, bpEnd, bpPerPixel, features) {
    var nPositions = tile.nPositions;
    var starts = tile.start;
    var ends = tile.end;
    var data = tile.data[0]; // Single track for now

    for (var i = 0; i < nPositions; i++) {
      var s = starts[i];
      var e = ends[i];
      if (e < bpStart) continue;
      if (s > bpEnd) break;
      features.push({
        chr: chr,
        start: s,
        end: e,
        value: data[i]
      });
    }
  }

  function decodeVaryTile(tile, chr, bpStart, bpEnd, bpPerPixel, features) {
    var nPositions = tile.nPositions;
    var starts = tile.start;
    var span = tile.span;
    var data = tile.data[0]; // Single track for now

    for (var i = 0; i < nPositions; i++) {
      var s = starts[i];
      var e = s + span;
      if (e < bpStart) continue;
      if (s > bpEnd) break;
      features.push({
        chr: chr,
        start: s,
        end: e,
        value: data[i]
      });
    }
  }

  function decodeFixedTile(tile, chr, bpStart, bpEnd, bpPerPixel, features) {
    var nPositions = tile.nPositions;
    var s = tile.start;
    var span = tile.span;
    var data = tile.data[0]; // Single track for now

    for (var i = 0; i < nPositions; i++) {
      var e = s + span;
      if (s > bpEnd) break;

      if (e >= bpStart) {
        if (!Number.isNaN(data[i])) {
          features.push({
            chr: chr,
            start: s,
            end: e,
            value: data[i]
          });
        }
      }

      s = e;
    }
  }

  var log2 = Math.log(2);

  function zoomLevelForScale$1(chr, bpPerPixel, genome) {
    // Convert bpPerPixel to IGV "zoom" level.   This is a bit convoluted,  IGV computes zoom levels assuming
    // display in a 700 pixel window.  The fully zoomed out view of a chromosome is zoom level "0".
    // Zoom level 1 is magnified 2X,  and so forth
    var chrSize = genome.getChromosome(chr).bpLength;
    return Math.ceil(Math.log(Math.max(0, chrSize / (bpPerPixel * 700))) / log2);
  }

  function paintAxis(ctx, pixelWidth, pixelHeight) {
    var x1,
        x2,
        y1,
        y2,
        a,
        b,
        reference,
        shim,
        font = {
      'font': 'normal 10px Arial',
      'textAlign': 'right',
      'strokeStyle': "black"
    };

    if (undefined === this.dataRange || undefined === this.dataRange.max || undefined === this.dataRange.min) {
      return;
    }

    IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
      'fillStyle': "rgb(255, 255, 255)"
    });
    reference = 0.95 * pixelWidth;
    x1 = reference - 8;
    x2 = reference; //shim = 0.5 * 0.125;

    shim = .01;
    y1 = y2 = shim * pixelHeight;
    a = {
      x: x2,
      y: y1
    }; // tick

    IGVGraphics.strokeLine(ctx, x1, y1, x2, y2, font);
    IGVGraphics.fillText(ctx, prettyPrint(this.dataRange.max), x1 + 4, y1 + 12, font); //shim = 0.25 * 0.125;

    y1 = y2 = (1.0 - shim) * pixelHeight;
    b = {
      x: x2,
      y: y1
    }; // tick

    IGVGraphics.strokeLine(ctx, x1, y1, x2, y2, font);
    IGVGraphics.fillText(ctx, prettyPrint(this.dataRange.min), x1 + 4, y1 - 4, font);
    IGVGraphics.strokeLine(ctx, a.x, a.y, b.x, b.y, font);

    function prettyPrint(number) {
      // if number >= 100, show whole number
      // if >= 1 show 1 significant digits
      // if <  1 show 2 significant digits
      if (number === 0) {
        return "0";
      } else if (Math.abs(number) >= 10) {
        return number.toFixed();
      } else if (Math.abs(number) >= 1) {
        return number.toFixed(1);
      } else {
        return number.toFixed(2);
      }
    }
  }

  var dataRangeMenuItem = MenuUtils.dataRangeMenuItem;
  var WigTrack = extend(TrackBase, function (config, browser) {
    this.type = "wig";
    this.featureType = 'numeric'; // Default color, might be overridden by track line

    if (config.color === undefined) {
      config.color = "rgb(150,150,150)";
    }

    if (config.height === undefined) {
      config.height = 50;
    }

    TrackBase.call(this, config, browser);
    var format = config.format ? config.format.toLowerCase() : config.format;

    if ("bigwig" === format) {
      this.featureSource = new BWSource(config, browser.genome);
    } else if ("tdf" === format) {
      this.featureSource = new TDFSource(config, browser.genome);
    } else {
      this.featureSource = new FeatureSource(config, browser.genome);
    }

    this.autoscale = config.autoscale || config.max === undefined;

    if (!this.autoscale) {
      this.dataRange = {
        min: config.min || 0,
        max: config.max
      };
    }

    this.windowFunction = config.windowFunction || "mean";
    this.paintAxis = paintAxis;
    this.graphType = config.graphType || "bar";
  });
  WigTrack.prototype.postInit =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var header;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return this.getFileHeader();

          case 2:
            header = _context.sent;
            if (header) this.setTrackProperties(header);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  WigTrack.prototype.getFeatures =
  /*#__PURE__*/
  function () {
    var _ref2 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(chr, bpStart, bpEnd, bpPerPixel) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", this.featureSource.getFeatures(chr, bpStart, bpEnd, bpPerPixel, this.windowFunction));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function (_x, _x2, _x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();

  WigTrack.prototype.menuItemList = function () {
    var self = this,
        menuItems = [];
    menuItems.push(dataRangeMenuItem(this.trackView));
    menuItems.push({
      object: createCheckbox("Autoscale", self.autoscale),
      click: function click() {
        var $fa = $(this).find('i');
        self.autoscale = !self.autoscale;

        if (true === self.autoscale) {
          $fa.removeClass('igv-fa-check-hidden');
          $fa.addClass('igv-fa-check-visible');
        } else {
          $fa.removeClass('igv-fa-check-visible');
          $fa.addClass('igv-fa-check-hidden');
        }

        self.config.autoscale = self.autoscale;
        self.trackView.setDataRange(undefined, undefined, self.autoscale);
      }
    });
    return menuItems;
  };

  WigTrack.prototype.getFileHeader =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee3() {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!(typeof this.featureSource.getFileHeader === "function")) {
              _context3.next = 4;
              break;
            }

            _context3.next = 3;
            return this.featureSource.getFileHeader();

          case 3:
            this.header = _context3.sent;

          case 4:
            return _context3.abrupt("return", this.header);

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  WigTrack.prototype.draw = function (options) {
    var self = this;
    var features = options.features;
    var ctx = options.context;
    var bpPerPixel = options.bpPerPixel;
    var bpStart = options.bpStart;
    var pixelWidth = options.pixelWidth;
    var pixelHeight = options.pixelHeight;
    var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;
    var lastXPixel = -1;
    var lastValue = -1;
    var lastNegValue = 1;
    var baselineColor;

    if (typeof self.color === "string" && self.color.startsWith("rgb(")) {
      baselineColor = IGVColor.addAlpha(self.color, 0.1);
    }

    if (features && features.length > 0) {
      if (self.dataRange.min === undefined) self.dataRange.min = 0;
      var featureValueMinimum = self.dataRange.min;
      var featureValueMaximum = self.dataRange.max; // Max can be less than min if config.min is set but max left to autoscale.   If that's the case there is
      // nothing to paint.

      if (featureValueMaximum > featureValueMinimum) {
        if (renderFeature.end < bpStart) return;
        if (renderFeature.start > bpEnd) return;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = features[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var f = _step.value;
            renderFeature(f, this.dataRange);
          } // If the track includes negative values draw a baseline

        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        if (featureValueMinimum < 0) {
          var basepx = featureValueMaximum / (featureValueMaximum - featureValueMinimum) * options.pixelHeight;
          IGVGraphics.strokeLine(ctx, 0, basepx, options.pixelWidth, basepx, {
            strokeStyle: baselineColor
          });
        }
      }
    }

    function renderFeature(feature, dataRange) {
      var featureValueMinimum = self.dataRange.min;
      var featureValueMaximum = self.dataRange.max;
      var featureValueRange = featureValueMaximum - featureValueMinimum;
      var x = Math.floor((feature.start - bpStart) / bpPerPixel);
      var rectEnd = Math.ceil((feature.end - bpStart) / bpPerPixel);
      var width = Math.max(1, rectEnd - x);
      var y = (featureValueMaximum - feature.value) / featureValueRange;
      var yb;

      if (featureValueMinimum > 0) {
        yb = 1;
      } else if (featureValueMaximum < 0) {
        yb = 0;
      } else {
        yb = featureValueMaximum / featureValueRange;
      }

      var yUnitless = Math.min(y, yb);
      var y2 = Math.max(y, yb);
      var heightUnitLess = y2 - yUnitless;
      if (yUnitless >= 1 || y2 <= 0) return; //  Value < minimum

      var c = feature.value < 0 && self.altColor ? self.altColor : self.color;
      var color = typeof c === "function" ? c(feature.value) : c;

      if (self.graphType === "points") {
        var pointSize = self.config.pointSize || 3;
        var py = feature.value < 0 ? (yUnitless + heightUnitLess) * pixelHeight : yUnitless * pixelHeight;
        var px = x + width / 2;

        if (isNaN(x)) ; else {
          IGVGraphics.fillCircle(ctx, px, py, pointSize / 2);
        }
      } else {
        // Draw optimization important for many points -- don't draw if the peak will be occluded by previously drawn features
        if (x > lastXPixel || feature.value > 0 && feature.value > lastValue || feature.value < 0 && feature.value < lastNegValue) {
          IGVGraphics.fillRect(ctx, x, yUnitless * pixelHeight, width, heightUnitLess * pixelHeight, {
            fillStyle: color
          });
          lastXPixel = x;

          if (feature.value > 0) {
            lastValue = feature.value;
          } else if (feature.value < 0) {
            lastNegValue = feature.value;
          }
        }
      }
    }
  };

  WigTrack.prototype.popupData = function (clickState, features) {
    // We use the featureCache property rather than method to avoid async load.  If the
    // feature is not already loaded this won't work,  but the user wouldn't be mousing over it either.
    if (!features) features = this.clickedFeatures(clickState);

    if (features && features.length > 0) {
      var genomicLocation = clickState.genomicLocation;
      var referenceFrame = clickState.viewport.genomicState.referenceFrame;
      var popupData = []; // We need some tolerance around genomicLocation, start with +/- 2 pixels

      var tolerance = 2 * referenceFrame.bpPerPixel;
      var selectedFeature = binarySearch(features, genomicLocation, tolerance);

      if (selectedFeature) {
        var posString = selectedFeature.end - selectedFeature.start === 1 ? numberFormatter(selectedFeature.start + 1) : numberFormatter(selectedFeature.start + 1) + "-" + numberFormatter(selectedFeature.end);
        popupData.push({
          name: "Position:",
          value: posString
        });
        popupData.push({
          name: "Value:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;",
          value: numberFormatter(selectedFeature.value)
        });
      }

      return popupData;
    } else {
      return [];
    }
  };
  /**
   * Called when the track is removed.  Do any needed cleanup here
   */


  WigTrack.prototype.dispose = function () {
    this.trackView = undefined;
  };
  /**
   * Return the closest feature to the genomic position +/- the specified tolerance.  Closest is defined
   * by the minimum of the distance between position and start or end of the feature.
   *
   * @param features
   * @param position
   * @returns {*}
   */


  function binarySearch(features, position, tolerance) {
    var startIndex = 0,
        stopIndex = features.length - 1,
        index = startIndex + stopIndex >> 1,
        candidateFeature,
        tmp; // Use binary search to get the index of at least 1 feature in the click tolerance bounds

    while (!test(features[index], position, tolerance) && startIndex < stopIndex) {
      if (position < features[index].start) {
        stopIndex = index - 1;
      } else if (position > features[index].end) {
        startIndex = index + 1;
      }

      index = startIndex + stopIndex >> 1;
    }

    if (test(features[index], position, tolerance)) {
      candidateFeature = features[index];
      if (test(candidateFeature, position, 0)) return candidateFeature; // Else, find closest feature to click

      tmp = index;

      while (tmp-- >= 0) {
        if (!test(features[tmp]), tolerance) {
          break;
        }

        if (test(features[tmp], position, 0)) {
          return features[tmp];
        }

        if (delta(features[tmp], position) < delta(candidateFeature, position)) {
          candidateFeature = features[tmp];
        }

        tmp = index;

        while (tmp++ < features.length) {
          if (!test(features[tmp]), tolerance) {
            break;
          }

          if (test(features[tmp], position, 0)) {
            return features[tmp];
          }

          if (delta(features[tmp], position) < delta(candidateFeature, position)) {
            candidateFeature = features[tmp];
          }
        }
      }

      return candidateFeature;
    } else {
      return undefined;
    }

    function test(feature, position, tolerance) {
      return position >= feature.start - tolerance && position <= feature.end + tolerance;
    }

    function delta(feature, position) {
      return Math.min(Math.abs(feature.start - position), Math.abs(feature.end - position));
    }
  }

  WigTrack.prototype.getState = function () {
    var config = this.config;
    config.autoscale = this.autoscale;

    if (!this.autoscale && this.dataRange) {
      config.min = this.dataRange.min;
      config.max = this.dataRange.max;
    }

    return config;
  };

  WigTrack.prototype.supportsWholeGenome = function () {
    if (typeof this.featureSource.supportsWholeGenome === 'function') {
      return this.featureSource.supportsWholeGenome();
    } else {
      return false;
    }
  };

  /**
   *
   * @param cs - object containing
   * 1) array of threshold values defining bin boundaries in ascending order
   * 2) array of colors for bins  (length == thresholds.length + 1)
   * @constructor
   */
  function BinnedColorScale(cs) {
    this.thresholds = cs.thresholds;
    this.colors = cs.colors;
  }

  BinnedColorScale.prototype.getColor = function (value) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.thresholds[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var threshold = _step.value;

        if (value < threshold) {
          return this.colors[this.thresholds.indexOf(threshold)];
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return this.colors[this.colors.length - 1];
  };
  /**
   *
   * @param scale - object with the following properties
   *           low
   *           lowR
   *           lowG
   *           lowB
   *           high
   *           highR
   *           highG
   *           highB
   *
   * @constructor
   */


  function GradientColorScale(scale) {
    this.scale = scale;
    this.lowColor = "rgb(" + scale.lowR + "," + scale.lowG + "," + scale.lowB + ")";
    this.highColor = "rgb(" + scale.highR + "," + scale.highG + "," + scale.highB + ")";
    this.diff = scale.high - scale.low;
  }

  GradientColorScale.prototype.getColor = function (value) {
    var scale = this.scale,
        r,
        g,
        b,
        frac;
    if (value <= scale.low) return this.lowColor;else if (value >= scale.high) return this.highColor;
    frac = (value - scale.low) / this.diff;
    r = Math.floor(scale.lowR + frac * (scale.highR - scale.lowR));
    g = Math.floor(scale.lowG + frac * (scale.highG - scale.lowG));
    b = Math.floor(scale.lowB + frac * (scale.highB - scale.lowB));
    return "rgb(" + r + "," + g + "," + b + ")";
  };

  var SegTrack = extend(TrackBase, function (config, browser) {
    TrackBase.call(this, config, browser);
    this.isLog = config.isLog;
    this.displayMode = config.displayMode || "SQUISHED"; // EXPANDED | SQUISHED

    this.maxHeight = config.maxHeight || 500;
    this.squishedRowHeight = config.sampleSquishHeight || config.squishedRowHeight || 2;
    this.expandedRowHeight = config.sampleExpandHeight || config.expandedRowHeight || 12;
    this.posColorScale = config.posColorScale || new GradientColorScale({
      low: 0.1,
      lowR: 255,
      lowG: 255,
      lowB: 255,
      high: 1.5,
      highR: 255,
      highG: 0,
      highB: 0
    });
    this.negColorScale = config.negColorScale || new GradientColorScale({
      low: -1.5,
      lowR: 0,
      lowG: 0,
      lowB: 255,
      high: -0.1,
      highR: 255,
      highG: 255,
      highB: 255
    });
    this.sampleKeys = []; //   this.featureSource = config.sourceType === "bigquery" ?
    //       new igv.BigQueryFeatureSource(this.config) :

    this.featureSource = new FeatureSource(this.config, browser.genome);

    if (config.sort) {
      var sort = config.sort;
      this.sortSamples(sort.chr, sort.start, sort.end, sort.direction);
    }
  });

  SegTrack.prototype.menuItemList = function () {
    var self = this;
    var menuItems = [];
    var lut = {
      "SQUISHED": "Squish",
      "EXPANDED": "Expand",
      "FILL": "Fill"
    };
    menuItems.push("<hr/>");
    menuItems.push("Sample Height");
    ["SQUISHED", "EXPANDED", "FILL"].forEach(function (displayMode) {
      menuItems.push({
        object: createCheckbox(lut[displayMode], displayMode === self.displayMode),
        click: function click() {
          self.displayMode = displayMode;
          self.config.displayMode = displayMode;
          self.trackView.checkContentHeight();
          self.trackView.repaintViews();
        }
      });
    });
    return menuItems;
  };

  SegTrack.prototype.getFeatures = function (chr, bpStart, bpEnd) {
    return this.featureSource.getFeatures(chr, bpStart, bpEnd);
  };

  SegTrack.prototype.draw = function (options) {
    var self = this;
    var ctx = options.context;
    var pixelWidth = options.pixelWidth;
    var pixelHeight = options.pixelHeight;
    IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
      'fillStyle': "rgb(255, 255, 255)"
    });
    var featureList = options.features;

    if (featureList && featureList.length > 0) {
      if (self.isLog === undefined) checkForLog(featureList);
      var bpPerPixel = options.bpPerPixel;
      var bpStart = options.bpStart;
      var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;
      var xScale = bpPerPixel;
      this.updateSampleKeys(featureList); // Create a map for fast id -> row lookup

      var samples = {};
      this.sampleKeys.forEach(function (id, index) {
        samples[id] = index;
      });
      var sampleHeight;
      var border;

      switch (this.displayMode) {
        case "FILL":
          sampleHeight = options.pixelHeight / this.sampleKeys.length;
          border = 0;
          break;

        case "SQUISHED":
          sampleHeight = this.squishedRowHeight;
          border = 0;
          break;

        default:
          // EXPANDED
          sampleHeight = this.expandedRowHeight;
          border = 1;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = featureList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var segment = _step.value;
          if (segment.end < bpStart) continue;
          if (segment.start > bpEnd) break;
          var sampleKey = segment.sampleKey || segment.sample;
          segment.row = samples[sampleKey];
          var y = samples[sampleKey] * sampleHeight + border;
          var value = segment.value;

          if (!self.isLog) {
            value = IGVMath.log2(value / 2);
          }

          var color = void 0;

          if (value < -0.1) {
            color = self.negColorScale.getColor(value);
          } else if (value > 0.1) {
            color = self.posColorScale.getColor(value);
          } else {
            color = "white";
          }

          var segmentStart = Math.max(segment.start, bpStart); // const segmentStart = segment.start;

          var px = Math.round((segmentStart - bpStart) / xScale);
          var segmentEnd = Math.min(segment.end, bpEnd); // const segmentEnd = segment.end;

          var px1 = Math.round((segmentEnd - bpStart) / xScale);
          var pw = Math.max(1, px1 - px); // const sign = px < 0 ? '-' : '+';
          // console.log('start ' + sign + numberFormatter(Math.abs(px)) + ' width ' + numberFormatter(pw) + ' end ' + numberFormatter(px + pw));

          ctx.fillStyle = color; // Enhance the contrast of sub-pixel displays (FILL mode) by adjusting sample height.

          var sh = sampleHeight;

          if (sampleHeight < 0.25) {
            var f = 0.1 + 2 * Math.abs(value);
            sh = Math.min(1, f * sampleHeight);
          }

          segment.pixelRect = {
            x: px,
            y: y,
            w: pw,
            h: sh - 2 * border
          };
          ctx.fillRect(px, y, pw, sh - 2 * border); //IGVGraphics.fillRect(ctx, px, y, pw, sampleHeight - 2 * border, {fillStyle: color});
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    function checkForLog(featureList) {
      if (self.isLog === undefined) {
        self.isLog = false;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = featureList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var feature = _step2.value;

            if (feature.value < 0) {
              self.isLog = true;
              return;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  };
  /**
   * Optional method to compute pixel height to accomodate the list of features.  The implementation below
   * has side effects (modifiying the samples hash).  This is unfortunate, but harmless.
   *
   * @param features
   * @returns {number}
   */


  SegTrack.prototype.computePixelHeight = function (features) {
    if (!features) return 0;
    var sampleHeight = "SQUISHED" === this.displayMode ? this.squishedRowHeight : this.expandedRowHeight;
    this.updateSampleKeys(features);
    return this.sampleKeys.length * sampleHeight;
  };
  /**
   * Sort samples by the average value over the genomic range in the direction indicated (1 = ascending, -1 descending)
   */


  SegTrack.prototype.sortSamples =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd, direction) {
      var featureList, scores, bpLength, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, segment, min, max, f, sampleKey, s, d2;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.featureSource.getFeatures(chr, bpStart, bpEnd);

            case 2:
              featureList = _context.sent;
              this.updateSampleKeys(featureList);
              scores = {};
              bpLength = bpEnd - bpStart + 1; // Compute weighted average score for each sample

              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context.prev = 9;
              _iterator3 = featureList[Symbol.iterator]();

            case 11:
              if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                _context.next = 26;
                break;
              }

              segment = _step3.value;

              if (!(segment.end < bpStart)) {
                _context.next = 15;
                break;
              }

              return _context.abrupt("continue", 23);

            case 15:
              if (!(segment.start > bpEnd)) {
                _context.next = 17;
                break;
              }

              return _context.abrupt("break", 26);

            case 17:
              min = Math.max(bpStart, segment.start);
              max = Math.min(bpEnd, segment.end);
              f = (max - min) / bpLength;
              sampleKey = segment.sampleKey || segment.sample;
              s = scores[sampleKey] || 0;
              scores[sampleKey] = s + f * segment.value;

            case 23:
              _iteratorNormalCompletion3 = true;
              _context.next = 11;
              break;

            case 26:
              _context.next = 32;
              break;

            case 28:
              _context.prev = 28;
              _context.t0 = _context["catch"](9);
              _didIteratorError3 = true;
              _iteratorError3 = _context.t0;

            case 32:
              _context.prev = 32;
              _context.prev = 33;

              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }

            case 35:
              _context.prev = 35;

              if (!_didIteratorError3) {
                _context.next = 38;
                break;
              }

              throw _iteratorError3;

            case 38:
              return _context.finish(35);

            case 39:
              return _context.finish(32);

            case 40:
              // Now sort sample names by score
              d2 = direction === "ASC" ? 1 : -1;
              this.sampleKeys.sort(function (a, b) {
                var s1 = scores[a];
                var s2 = scores[b];
                if (!s1) s1 = d2 * Number.MAX_VALUE;
                if (!s2) s2 = d2 * Number.MAX_VALUE;
                if (s1 === s2) return 0;else if (s1 > s2) return d2;else return d2 * -1;
              });
              this.trackView.repaintViews(); // self.trackView.$viewport.scrollTop(0);

            case 43:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[9, 28, 32, 40], [33,, 35, 39]]);
    }));

    return function (_x, _x2, _x3, _x4) {
      return _ref.apply(this, arguments);
    };
  }();

  SegTrack.prototype.clickedFeatures = function (clickState) {
    var allFeatures = TrackBase.prototype.clickedFeatures.call(this, clickState);
    return filterByRow(allFeatures, clickState.y);

    function filterByRow(features, y) {
      return features.filter(function (feature) {
        var rect = feature.pixelRect;
        return rect && y >= rect.y && y <= rect.y + rect.h;
      });
    }
  };

  SegTrack.prototype.popupData = function (clickState, featureList) {
    if (!featureList) featureList = this.clickedFeatures(clickState);
    var items = [];
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = featureList[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var f = _step4.value;
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    featureList.forEach(function (f) {
      extractPopupData(f, items);
    });
    return items;

    function extractPopupData(feature, data) {
      var filteredProperties = new Set(['row', 'color', 'sampleKey', 'uniqueSampleKey', 'uniquePatientKey']); // hack for whole genome properties

      var f;

      if (feature.hasOwnProperty('realChr')) {
        f = Object.assign({}, feature);
        f.chr = feature.realChr;
        f.start = feature.realStart;
        f.end = feature.realEnd;
        delete f.realChr;
        delete f.realStart;
        delete f.realEnd;
      } else {
        f = feature;
      }

      for (var _i = 0, _Object$keys = Object.keys(f); _i < _Object$keys.length; _i++) {
        var property = _Object$keys[_i];

        if (!filteredProperties.has(property) && isSimpleType(f[property])) {
          data.push({
            name: property,
            value: f[property]
          });
        }
      }
    }
  };

  SegTrack.prototype.contextMenuItemList = function (clickState) {
    var self = this;
    var referenceFrame = clickState.viewport.genomicState.referenceFrame;
    var genomicLocation = clickState.genomicLocation; // Define a region 5 "pixels" wide in genomic coordinates

    var sortDirection = this.config.sort ? this.config.sort.direction === "ASC" ? "DESC" : "ASC" : // Toggle from previous sort
    "DESC";
    var bpWidth = referenceFrame.toBP(2.5);

    function sortHandler(sort) {
      self.sortSamples(sort.chr, sort.start, sort.end, sort.direction);
    }

    return [{
      label: 'Sort by value',
      click: function click(e) {
        var sort = {
          direction: sortDirection,
          chr: referenceFrame.chrName,
          start: genomicLocation - bpWidth,
          end: genomicLocation + bpWidth
        };
        sortHandler(sort);
        self.config.sort = sort;
      }
    }];
  };

  SegTrack.prototype.supportsWholeGenome = function () {
    return this.featureSource.supportsWholeGenome();
  };

  SegTrack.prototype.updateSampleKeys = function (featureList) {
    var samples = new Set(this.sampleKeys);
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = featureList[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var feature = _step5.value;
        var sampleKey = feature.sampleKey || feature.sample;

        if (!samples.has(sampleKey)) {
          samples.add(sampleKey);
          this.sampleKeys.push(sampleKey);
        }
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var MergedTrack = extend(TrackBase, function (config, browser) {
    var self = this;

    if (!config.tracks) {
      return;
    }

    if (config.height === undefined) {
      config.height = 50;
    }

    TrackBase.call(this, config, browser);
    this.tracks = [];
    config.tracks.forEach(function (tconf) {
      if (!tconf.type) inferTrackTypes(tconf);
      var t = browser.createTrack(tconf);

      if (t) {
        t.autoscale = false; // Scaling done from merged track

        self.tracks.push(t);
      }
    });
  });

  MergedTrack.prototype.getFeatures = function (chr, bpStart, bpEnd, bpPerPixel) {
    var promises = this.tracks.map(function (t) {
      return t.getFeatures(chr, bpStart, bpEnd, bpPerPixel);
    });
    return Promise.all(promises);
  };

  MergedTrack.prototype.draw = function (options) {
    var i, len, mergedFeatures, trackOptions, dataRange;
    mergedFeatures = options.features; // Array of feature arrays, 1 for each track

    dataRange = autoscale(options.genomicState.chromosome.name, mergedFeatures);

    for (i = 0, len = this.tracks.length; i < len; i++) {
      trackOptions = Object.assign({}, options);
      trackOptions.features = mergedFeatures[i];
      this.tracks[i].dataRange = dataRange;
      this.tracks[i].draw(trackOptions);
    }
  };

  MergedTrack.prototype.paintAxis = function (ctx, pixelWidth, pixelHeight) {
    var i, len, autoscale, track;
    autoscale = true; // Hardcoded for now

    for (i = 0, len = this.tracks.length; i < len; i++) {
      track = this.tracks[i];

      if (typeof track.paintAxis === 'function') {
        track.paintAxis(ctx, pixelWidth, pixelHeight);
        if (autoscale) break;
      }
    }
  };

  function autoscale(chr, featureArrays) {
    var min = 0,
        max = -Number.MAX_VALUE;
   // if (chr === 'all') {
    //     allValues = [];
    //     featureArrays.forEach(function (features) {
    //         features.forEach(function (f) {
    //             if (!Number.isNaN(f.value)) {
    //                 allValues.push(f.value);
    //             }
    //         });
    //     });
    //
    //     min = Math.min(0, IGVMath.percentile(allValues, .1));
    //     max = IGVMath.percentile(allValues, 99.9);
    //
    // }
    // else {

    featureArrays.forEach(function (features) {
      features.forEach(function (f) {
        if (!Number.isNaN(f.value)) {
          min = Math.min(min, f.value);
          max = Math.max(max, f.value);
        }
      });
    }); //  }

    return {
      min: min,
      max: max
    };
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 University of California San Diego
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var PairedAlignment = function PairedAlignment(firstAlignment) {
    this.paired = true;
    this.firstAlignment = firstAlignment;
    this.chr = firstAlignment.chr;
    this.readName = firstAlignment.readName;

    if (firstAlignment.start < firstAlignment.mate.position) {
      this.start = firstAlignment.start;
      this.scStart = firstAlignment.scStart;
      this.connectingStart = firstAlignment.start + firstAlignment.lengthOnRef;
      this.connectingEnd = firstAlignment.mate.position;
    } else {
      this.start = firstAlignment.mate.position;
      this.scStart = this.start;
      this.connectingStart = firstAlignment.mate.position;
      this.connectingEnd = firstAlignment.start;
    }

    this.end = Math.max(firstAlignment.mate.position, firstAlignment.start + firstAlignment.lengthOnRef); // Approximate

    this.lengthOnRef = this.end - this.start;
    var scEnd = Math.max(this.end, firstAlignment.scStart + firstAlignment.scLengthOnRef);
    this.scLengthOnRef = scEnd - this.scStart;
  };

  PairedAlignment.prototype.setSecondAlignment = function (secondAlignment) {
    // TODO -- check the chrs are equal,  error otherwise
    this.secondAlignment = secondAlignment;
    var firstAlignment = this.firstAlignment;

    if (secondAlignment.start > firstAlignment.start) {
      this.connectingEnd = secondAlignment.start;
    } else {
      this.connectingStart = secondAlignment.start + secondAlignment.lengthOnRef;
    }

    this.start = Math.min(firstAlignment.start, secondAlignment.start);
    this.end = Math.max(firstAlignment.start + firstAlignment.lengthOnRef, secondAlignment.start + secondAlignment.lengthOnRef);
    this.lengthOnRef = this.end - this.start;
    this.scStart = Math.min(firstAlignment.scStart, secondAlignment.scStart);
    var scEnd = Math.max(firstAlignment.scStart + firstAlignment.scLengthOnRef, secondAlignment.scStart + secondAlignment.scLengthOnRef);
    this.scLengthOnRef = scEnd - this.scStart;
  };

  PairedAlignment.prototype.popupData = function (genomicLocation) {
    var nameValues = [];
    nameValues = nameValues.concat(this.firstAlignment.popupData(genomicLocation));

    if (this.secondAlignment) {
      nameValues.push("-------------------------------");
      nameValues = nameValues.concat(this.secondAlignment.popupData(genomicLocation));
    }

    return nameValues;
  };

  PairedAlignment.prototype.isPaired = function () {
    return true; // By definition
  };

  PairedAlignment.prototype.firstOfPairStrand = function () {
    if (this.firstAlignment.isFirstOfPair()) {
      return this.firstAlignment.strand;
    } else if (this.secondAlignment && this.secondAlignment.isFirstOfPair()) {
      return this.secondAlignment.strand;
    } else {
      return this.firstAlignment.mate.strand; // Assumption is mate is first-of-pair
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 University of California San Diego
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  function canBePaired(alignment) {
    return alignment.isPaired() && alignment.mate && alignment.isMateMapped() && alignment.chr === alignment.mate.chr && (alignment.isFirstOfPair() || alignment.isSecondOfPair()) && !(alignment.isSecondary() || alignment.isSupplementary());
  }

  var AlignmentContainer = function AlignmentContainer(chr, start, end, samplingWindowSize, samplingDepth, pairsSupported, alleleFreqThreshold) {
    this.chr = chr;
    this.start = Math.floor(start);
    this.end = Math.ceil(end);
    this.length = end - start;
    this.alleleFreqThreshold = alleleFreqThreshold;
    this.coverageMap = new CoverageMap(chr, start, end, this.alleleFreqThreshold);
    this.alignments = [];
    this.downsampledIntervals = [];
    this.samplingWindowSize = samplingWindowSize === undefined ? 100 : samplingWindowSize;
    this.samplingDepth = samplingDepth === undefined ? 1000 : samplingDepth;
    this.pairsSupported = pairsSupported === undefined ? true : pairsSupported;
    this.paired = false; // false until proven otherwise

    this.pairsCache = {}; // working cache of paired alignments by read name

    this.downsampledReads = new Set();
    this.currentBucket = new DownsampleBucket(this.start, this.start + this.samplingWindowSize, this);

    this.filter = function filter(alignment) {
      // TODO -- pass this in
      return alignment.isMapped() && !alignment.isFailsVendorQualityCheck();
    };

    this.pairedEndStats = new PairedEndStats();
  };

  AlignmentContainer.prototype.push = function (alignment) {
    if (this.filter(alignment) === false) return;

    if (alignment.isPaired()) {
      this.pairedEndStats.push(alignment);
    }

    this.coverageMap.incCounts(alignment); // Count coverage before any downsampling

    if (this.pairsSupported && this.downsampledReads.has(alignment.readName)) {
      return; // Mate already downsampled -- pairs are treated as a single alignment for downsampling
    }

    if (alignment.start >= this.currentBucket.end) {
      finishBucket.call(this);
      this.currentBucket = new DownsampleBucket(alignment.start, alignment.start + this.samplingWindowSize, this);
    }

    this.currentBucket.addAlignment(alignment);
  };

  AlignmentContainer.prototype.forEach = function (callback) {
    this.alignments.forEach(callback);
  };

  AlignmentContainer.prototype.finish = function () {
    if (this.currentBucket !== undefined) {
      finishBucket.call(this);
    }

    this.alignments.sort(function (a, b) {
      return a.start - b.start;
    });
    this.pairsCache = undefined;
    this.downsampledReads = undefined;
    this.pairedEndStats.compute();
  };

  AlignmentContainer.prototype.contains = function (chr, start, end) {
    return this.chr === chr && this.start <= start && this.end >= end;
  };

  AlignmentContainer.prototype.hasDownsampledIntervals = function () {
    return this.downsampledIntervals && this.downsampledIntervals.length > 0;
  };

  function finishBucket() {
    this.alignments = this.alignments.concat(this.currentBucket.alignments);

    if (this.currentBucket.downsampledCount > 0) {
      this.downsampledIntervals.push(new DownsampledInterval(this.currentBucket.start, this.currentBucket.end, this.currentBucket.downsampledCount));
    }

    this.paired = this.paired || this.currentBucket.paired;
  }

  function DownsampleBucket(start, end, alignmentContainer) {
    this.start = start;
    this.end = end;
    this.alignments = [];
    this.downsampledCount = 0;
    this.samplingDepth = alignmentContainer.samplingDepth;
    this.pairsSupported = alignmentContainer.pairsSupported;
    this.downsampledReads = alignmentContainer.downsampledReads;
    this.pairsCache = alignmentContainer.pairsCache;
  }

  DownsampleBucket.prototype.addAlignment = function (alignment) {
    var idx, replacedAlignment, pairedAlignment;

    if (this.pairsSupported && canBePaired(alignment)) {
      pairedAlignment = this.pairsCache[alignment.readName];

      if (pairedAlignment) {
        // Not subject to downsampling, just update the existing alignment
        pairedAlignment.setSecondAlignment(alignment);
        this.pairsCache[alignment.readName] = undefined; // Don't need to track this anymore. NOTE: Don't "delete", causes runtime performance issues

        return;
      }
    }

    if (this.alignments.length < this.samplingDepth) {
      if (this.pairsSupported && canBePaired(alignment)) {
        // First alignment in a pair
        pairedAlignment = new PairedAlignment(alignment);
        this.paired = true;
        this.pairsCache[alignment.readName] = pairedAlignment;
        this.alignments.push(pairedAlignment);
      } else {
        this.alignments.push(alignment);
      }
    } else {
      idx = Math.floor(Math.random() * (this.samplingDepth + this.downsampledCount - 1));

      if (idx < this.samplingDepth) {
        // Keep the new item
        //  idx = Math.floor(Math.random() * (this.alignments.length - 1));
        replacedAlignment = this.alignments[idx]; // To be replaced

        if (this.pairsSupported && canBePaired(alignment)) {
          if (this.pairsCache[replacedAlignment.readName] !== undefined) {
            this.pairsCache[replacedAlignment.readName] = undefined;
          }

          pairedAlignment = new PairedAlignment(alignment);
          this.paired = true;
          this.pairsCache[alignment.readName] = pairedAlignment;
          this.alignments[idx] = pairedAlignment;
        } else {
          this.alignments[idx] = alignment;
        }

        this.downsampledReads.add(replacedAlignment.readName);
      } else {
        this.downsampledReads.add(alignment.readName);
      }

      this.downsampledCount++;
    }
  }; // TODO -- refactor this to use an object, rather than an array,  if end-start is > some threshold


  function CoverageMap(chr, start, end, alleleFreqThreshold) {
    this.chr = chr;
    this.bpStart = start;
    this.length = end - start;
    this.coverage = new Array(this.length);
    this.maximum = 0;
    this.threshold = alleleFreqThreshold;
    this.qualityWeight = true;
  }

  CoverageMap.prototype.incCounts = function (alignment) {
    var self = this;

    if (alignment.blocks === undefined) {
      incBlockCount(alignment);
    } else {
      alignment.blocks.forEach(function (block) {
        incBlockCount(block);
      });
    }

    if (alignment.deletions) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = alignment.deletions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var del = _step.value;
          var offset = del.start - self.bpStart;

          for (var i = offset; i < offset + del.len; i++) {
            if (i < 0) continue;

            if (!this.coverage[i]) {
              this.coverage[i] = new Coverage(self.threshold);
            }

            this.coverage[i].del++;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    if (alignment.insertions) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = alignment.insertions[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _del = _step2.value;

          var _i = _del.start - this.bpStart;

          if (_i < 0) continue;

          if (!this.coverage[_i]) {
            this.coverage[_i] = new Coverage(self.threshold);
          }

          this.coverage[_i].ins++;
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    function incBlockCount(block) {
      if ('S' === block.type) return;
      var seq = alignment.seq;
      var qual = alignment.qual;
      var seqOffset = block.seqOffset;

      for (var _i2 = block.start - self.bpStart, j = 0; j < block.len; _i2++, j++) {
        if (!self.coverage[_i2]) {
          self.coverage[_i2] = new Coverage(self.threshold);
        }

        var base = seq.charAt(seqOffset + j);
        var key = alignment.strand ? "pos" + base : "neg" + base;
        var q = qual && seqOffset + j < qual.length ? qual[seqOffset + j] : 30;
        self.coverage[_i2][key] += 1;
        self.coverage[_i2]["qual" + base] += q;
        self.coverage[_i2].total += 1;
        self.coverage[_i2].qual += q;
        self.maximum = Math.max(self.coverage[_i2].total, self.maximum);
      }
    }
  };

  function Coverage(alleleThreshold) {
    this.posA = 0;
    this.negA = 0;
    this.posT = 0;
    this.negT = 0;
    this.posC = 0;
    this.negC = 0;
    this.posG = 0;
    this.negG = 0;
    this.posN = 0;
    this.negN = 0;
    this.pos = 0;
    this.neg = 0;
    this.qualA = 0;
    this.qualT = 0;
    this.qualC = 0;
    this.qualG = 0;
    this.qualN = 0;
    this.qual = 0;
    this.total = 0;
    this.del = 0;
    this.ins = 0;
    this.t = alleleThreshold;
  }

  Coverage.prototype.isMismatch = function (refBase) {
    var myself = this,
        mismatchQualitySum,
        threshold = this.t * ( this.qual ? this.qual : this.total);
    mismatchQualitySum = 0;
    ["A", "T", "C", "G"].forEach(function (base) {
      if (base !== refBase) {
        mismatchQualitySum +=  myself.qual ? myself["qual" + base] : myself["pos" + base] + myself["neg" + base];
      }
    });
    return mismatchQualitySum >= threshold;
  };

  function DownsampledInterval(start, end, counts) {
    this.start = start;
    this.end = end;
    this.counts = counts;
  }

  DownsampledInterval.prototype.popupData = function (genomicLocation) {
    return [{
      name: "start",
      value: this.start + 1
    }, {
      name: "end",
      value: this.end
    }, {
      name: "# downsampled:",
      value: this.counts
    }];
  };

  function PairedEndStats(lowerPercentile, upperPercentile) {
    this.totalCount = 0;
    this.frCount = 0;
    this.rfCount = 0;
    this.ffCount = 0;
    this.sumF = 0;
    this.sumF2 = 0; //this.lp = lowerPercentile === undefined ? 0.005 : lowerPercentile;
    //this.up = upperPercentile === undefined ? 0.995 : upperPercentile;
    //this.digest = new Digest();
  }

  PairedEndStats.prototype.push = function (alignment) {
    if (alignment.isProperPair()) {
      var fragmentLength = Math.abs(alignment.fragmentLength); //this.digest.push(fragmentLength);

      this.sumF += fragmentLength;
      this.sumF2 += fragmentLength * fragmentLength;
      var po = alignment.pairOrientation;

      if (typeof po === "string" && po.length === 4) {
        var tmp = '' + po.charAt(0) + po.charAt(2);

        switch (tmp) {
          case 'FF':
          case 'RR':
            this.ffCount++;
            break;

          case "FR":
            this.frCount++;
            break;

          case "RF":
            this.rfCount++;
        }
      }

      this.totalCount++;
    }
  };

  PairedEndStats.prototype.compute = function () {
    if (this.totalCount > 100) {
      if (this.ffCount / this.totalCount > 0.9) this.orienation = "ff";else if (this.frCount / this.totalCount > 0.9) this.orienation = "fr";else if (this.rfCount / this.totalCount > 0.9) this.orienation = "rf";
      var fMean = this.sumF / this.totalCount;
      var stdDev = Math.sqrt((this.totalCount * this.sumF2 - this.sumF * this.sumF) / (this.totalCount * this.totalCount));
      this.lowerFragmentLength = fMean - 3 * stdDev;
      this.upperFragmentLength = fMean + 3 * stdDev; //this.lowerFragmentLength = this.digest.percentile(this.lp);
      //this.upperFragmentLength = this.digest.percentile(this.up);
      //this.digest = undefined;
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var READ_PAIRED_FLAG = 0x1;
  var PROPER_PAIR_FLAG = 0x2;
  var READ_UNMAPPED_FLAG = 0x4;
  var MATE_UNMAPPED_FLAG = 0x8;
  var READ_STRAND_FLAG = 0x10;
  var MATE_STRAND_FLAG = 0x20;
  var FIRST_OF_PAIR_FLAG = 0x40;
  var SECOND_OF_PAIR_FLAG = 0x80;
  var SECONDARY_ALIGNMNET_FLAG = 0x100;
  var READ_FAILS_VENDOR_QUALITY_CHECK_FLAG = 0x200;
  var DUPLICATE_READ_FLAG = 0x400;
  var SUPPLEMENTARY_ALIGNMENT_FLAG = 0x800;
  /**
   * readName
   * chr
   * cigar
   * lengthOnRef
   * start
   * seq
   * qual
   * mq
   * strand
   * blocks
   */

  function BamAlignment() {
    this.hidden = false;
  }

  BamAlignment.prototype.isMapped = function () {
    return (this.flags & READ_UNMAPPED_FLAG) === 0;
  };

  BamAlignment.prototype.isPaired = function () {
    return (this.flags & READ_PAIRED_FLAG) !== 0;
  };

  BamAlignment.prototype.isProperPair = function () {
    return (this.flags & PROPER_PAIR_FLAG) !== 0;
  };

  BamAlignment.prototype.isFirstOfPair = function () {
    return (this.flags & FIRST_OF_PAIR_FLAG) !== 0;
  };

  BamAlignment.prototype.isSecondOfPair = function () {
    return (this.flags & SECOND_OF_PAIR_FLAG) !== 0;
  };

  BamAlignment.prototype.isSecondary = function () {
    return (this.flags & SECONDARY_ALIGNMNET_FLAG) !== 0;
  };

  BamAlignment.prototype.isSupplementary = function () {
    return (this.flags & SUPPLEMENTARY_ALIGNMENT_FLAG) !== 0;
  };

  BamAlignment.prototype.isFailsVendorQualityCheck = function () {
    return (this.flags & READ_FAILS_VENDOR_QUALITY_CHECK_FLAG) !== 0;
  };

  BamAlignment.prototype.isDuplicate = function () {
    return (this.flags & DUPLICATE_READ_FLAG) !== 0;
  };

  BamAlignment.prototype.isMateMapped = function () {
    return (this.flags & MATE_UNMAPPED_FLAG) === 0;
  };

  BamAlignment.prototype.isNegativeStrand = function () {
    return (this.flags & READ_STRAND_FLAG) !== 0;
  };

  BamAlignment.prototype.isMateNegativeStrand = function () {
    return (this.flags & MATE_STRAND_FLAG) !== 0;
  };

  BamAlignment.prototype.tags = function () {
    if (!this.tagDict) {
      if (this.tagBA) {
        this.tagDict = decodeTags(this.tagBA);
        this.tagBA = undefined;
      } else {
        this.tagDict = {}; // Mark so we don't try again.  The record has no tags
      }
    }

    return this.tagDict;

    function decodeTags(ba) {
      var p = 0,
          len = ba.length,
          tags = {};

      while (p < len) {
        var tag = String.fromCharCode(ba[p]) + String.fromCharCode(ba[p + 1]);
        var type = String.fromCharCode(ba[p + 2]);
        var value;

        if (type === 'A') {
          value = String.fromCharCode(ba[p + 3]);
          p += 4;
        } else if (type === 'i' || type === 'I') {
          value = readInt(ba, p + 3);
          p += 7;
        } else if (type === 'c' || type === 'C') {
          value = ba[p + 3];
          p += 4;
        } else if (type === 's' || type === 'S') {
          value = readShort(ba, p + 3);
          p += 5;
        } else if (type === 'f') {
          value = readFloat(ba, p + 3);
          p += 7;
        } else if (type === 'Z') {
          p += 3;
          value = '';

          for (;;) {
            var cc = ba[p++];

            if (cc === 0) {
              break;
            } else {
              value += String.fromCharCode(cc);
            }
          }
        } else {
          //'Unknown type ' + type;
          value = 'Error unknown type: ' + type;
          tags[tag] = value;
          break;
        }

        tags[tag] = value;
      }

      return tags;
    }
  };

  BamAlignment.prototype.popupData = function (genomicLocation) {
    // if the user clicks on a base next to an insertion, show just the
    // inserted bases in a popup (like in desktop IGV).
    var nameValues = []; // Consert genomic location to int

    genomicLocation = Math.floor(genomicLocation);

    if (this.insertions) {
      var seq = this.seq;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.insertions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var insertion = _step.value;
          var ins_start = insertion.start;

          if (genomicLocation === ins_start || genomicLocation === ins_start - 1) {
            nameValues.push({
              name: 'Insertion',
              value: seq.substr(insertion.seqOffset, insertion.len)
            });
            nameValues.push({
              name: 'Location',
              value: ins_start
            });
            return nameValues;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    nameValues.push({
      name: 'Read Name',
      value: this.readName
    }); // Sample
    // Read group

    nameValues.push("<hr>"); // Add 1 to genomic location to map from 0-based computer units to user-based units

    nameValues.push({
      name: 'Alignment Start',
      value: numberFormatter(1 + this.start),
      borderTop: true
    });
    nameValues.push({
      name: 'Read Strand',
      value: true === this.strand ? '(+)' : '(-)',
      borderTop: true
    });
    nameValues.push({
      name: 'Cigar',
      value: this.cigar
    });
    nameValues.push({
      name: 'Mapped',
      value: yesNo(this.isMapped())
    });
    nameValues.push({
      name: 'Mapping Quality',
      value: this.mq
    });
    nameValues.push({
      name: 'Secondary',
      value: yesNo(this.isSecondary())
    });
    nameValues.push({
      name: 'Supplementary',
      value: yesNo(this.isSupplementary())
    });
    nameValues.push({
      name: 'Duplicate',
      value: yesNo(this.isDuplicate())
    });
    nameValues.push({
      name: 'Failed QC',
      value: yesNo(this.isFailsVendorQualityCheck())
    });

    if (this.isPaired()) {
      nameValues.push("<hr>");
      nameValues.push({
        name: 'First in Pair',
        value: !this.isSecondOfPair(),
        borderTop: true
      });
      nameValues.push({
        name: 'Mate is Mapped',
        value: yesNo(this.isMateMapped())
      });

      if (this.pairOrientation) {
        nameValues.push({
          name: 'Pair Orientation',
          value: this.pairOrientation
        });
      }

      if (this.isMateMapped()) {
        nameValues.push({
          name: 'Mate Chromosome',
          value: this.mate.chr
        });
        nameValues.push({
          name: 'Mate Start',
          value: this.mate.position + 1
        });
        nameValues.push({
          name: 'Mate Strand',
          value: true === this.mate.strand ? '(+)' : '(-)'
        });
        nameValues.push({
          name: 'Insert Size',
          value: this.fragmentLength
        }); // Mate Start
        // Mate Strand
        // Insert Size
      } // First in Pair
      // Pair Orientation

    }

    nameValues.push("<hr>");
    var tagDict = this.tags();
    var isFirst = true;

    for (var key in tagDict) {
      if (tagDict.hasOwnProperty(key)) {
        if (isFirst) {
          nameValues.push({
            name: key,
            value: tagDict[key],
            borderTop: true
          });
          isFirst = false;
        } else {
          nameValues.push({
            name: key,
            value: tagDict[key]
          });
        }
      }
    }

    nameValues.push("<hr>");
    nameValues.push({
      name: 'Genomic Location: ',
      value: numberFormatter(1 + genomicLocation)
    });
    nameValues.push({
      name: 'Read Base:',
      value: this.readBaseAt(genomicLocation)
    });
    nameValues.push({
      name: 'Base Quality:',
      value: this.readBaseQualityAt(genomicLocation)
    });
    return nameValues;

    function yesNo(bool) {
      return bool ? 'Yes' : 'No';
    }
  };

  BamAlignment.prototype.readBaseAt = function (genomicLocation) {
    var block = blockAtGenomicLocation(this.blocks, genomicLocation);

    if (block) {
      if ("*" === this.seq) {
        return "*";
      } else {
        var idx = block.seqIndexAt(genomicLocation); // if (idx >= 0 && idx < this.seq.length) {

        return this.seq[idx]; //  }
      }
    } else {
      return undefined;
    }
  };

  BamAlignment.prototype.readBaseQualityAt = function (genomicLocation) {
    var block = blockAtGenomicLocation(this.blocks, genomicLocation);

    if (block) {
      if ("*" === this.qual) {
        return 30;
      } else {
        var idx = block.seqIndexAt(genomicLocation);

        if (idx >= 0 && this.qual && idx < this.qual.length) {
          return this.qual[idx];
        } else {
          return 30;
        }
      }
    } else {
      return undefined;
    }
  };

  function blockAtGenomicLocation(blocks, genomicLocation) {
    for (var i = 0; i < blocks.length; i++) {
      var block = blocks[i];

      if (genomicLocation >= block.start && genomicLocation < block.start + block.len) {
        return block;
      }
    }

    return undefined;
  }

  function readInt(ba, offset) {
    return ba[offset + 3] << 24 | ba[offset + 2] << 16 | ba[offset + 1] << 8 | ba[offset];
  }

  function readShort(ba, offset) {
    return ba[offset + 1] << 8 | ba[offset];
  }

  function readFloat(ba, offset) {
    var dataView = new DataView(ba.buffer),
        littleEndian = true;
    return dataView.getFloat32(offset, littleEndian);
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  /**
   * Created by jrobinso on 4/5/18.
   */
  var AlignmentBlock = function AlignmentBlock(b) {
    if (b) {
      Object.assign(this, b);
    }
  };

  AlignmentBlock.prototype.seqIndexAt = function (genomicLocation) {
    return Math.floor(genomicLocation) - this.start + this.seqOffset;
  };

  function BamFilter(options) {
    if (!options) options = {};
    this.vendorFailed = options.vendorFailed === undefined ? true : options.vendorFailed;
    this.duplicates = options.duplicates === undefined ? true : options.duplicates;
    this.secondary = options.secondary || false;
    this.supplementary = options.supplementary || false;
    this.mqThreshold = options.mqThreshold === undefined ? 0 : options.mqThreshold;

    if (options.readgroups) {
      this.readgroups = new Set(options.readgroups);
    }
  }

  BamFilter.prototype.pass = function (alignment) {
    if (this.vendorFailed && alignment.isFailsVendorQualityCheck()) return false;
    if (this.duplicates && alignment.isDuplicate()) return false;
    if (this.secondary && alignment.isSecondary()) return false;
    if (this.supplementary && alignment.isSupplementary()) return false;
    if (alignment.mq < this.mqThreshold) return false;

    if (this.readgroups) {
      var rg = alignment.tags()['RG'];
      return this.readgroups.has(rg);
    }

    return true;
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /**
   * This code is based on the Biodalliance BAM reader by Thomas Down,  2011
   *
   * https://github.com/dasmoth/dalliance/blob/master/js/bam.js
   */

  var SEQ_DECODER = ['=', 'A', 'C', 'x', 'G', 'x', 'x', 'x', 'T', 'x', 'x', 'x', 'x', 'x', 'x', 'N'];
  var CIGAR_DECODER = ['M', 'I', 'D', 'N', 'S', 'H', 'P', '=', 'X', '?', '?', '?', '?', '?', '?', '?'];
  var READ_STRAND_FLAG$1 = 0x10;
  var MATE_STRAND_FLAG$1 = 0x20;
  var BAM1_MAGIC_BYTES = new Uint8Array([0x42, 0x41, 0x4d, 0x01]); // BAM\1

  var BAM1_MAGIC_NUMBER = readInt$1(BAM1_MAGIC_BYTES, 0);
  var DEFAULT_ALLELE_FREQ_THRESHOLD = 0.2;
  var DEFAULT_SAMPLING_WINDOW_SIZE = 100;
  var DEFAULT_SAMPLING_DEPTH = 500;
  var MAXIMUM_SAMPLING_DEPTH = 10000;
  var BamUtils = {
    readHeader: function readHeader(url, options, genome) {
      return igvxhr.loadArrayBuffer(url, options).then(function (compressedBuffer) {
        var header, unc, uncba;
        unc = unbgzf(compressedBuffer);
        uncba = new Uint8Array(unc);
        header = BamUtils.decodeBamHeader(uncba, genome);
        return header;
      });
    },

    /**
     *
     * @param ba  bytes to decode as a UInt8Array
     * @param genome  optional igv genome object
     * @returns {{ magicNumer: number, size: number, chrNames: Array, chrToIndex: ({}|*), chrAliasTable: ({}|*) }}
     */
    decodeBamHeader: function decodeBamHeader(ba, genome) {
      var magic, samHeaderLen, samHeader, chrToIndex, chrNames, chrAliasTable, alias;
      magic = readInt$1(ba, 0);

      if (magic !== BAM1_MAGIC_NUMBER) {
        throw new Error('BAM header errror: bad magic number.  This could be caused by either a corrupt or missing file.');
      }

      samHeaderLen = readInt$1(ba, 4);
      samHeader = '';

      for (var i = 0; i < samHeaderLen; ++i) {
        samHeader += String.fromCharCode(ba[i + 8]);
      }

      var nRef = readInt$1(ba, samHeaderLen + 8);
      var p = samHeaderLen + 12;
      chrToIndex = {};
      chrNames = [];
      chrAliasTable = {};

      for (i = 0; i < nRef; ++i) {
        var lName = readInt$1(ba, p);
        var name = '';

        for (var j = 0; j < lName - 1; ++j) {
          name += String.fromCharCode(ba[p + 4 + j]);
        }

        var lRef = readInt$1(ba, p + lName + 4); //dlog(name + ': ' + lRef);

        chrToIndex[name] = i;
        chrNames[i] = name;

        if (genome) {
          alias = genome.getChromosomeName(name);
          chrAliasTable[alias] = name;
        }

        p = p + 8 + lName;
      }

      return {
        magicNumber: magic,
        size: p,
        chrNames: chrNames,
        chrToIndex: chrToIndex,
        chrAliasTable: chrAliasTable
      };
    },
    bam_tag2cigar: function bam_tag2cigar(ba, block_end, seq_offset, lseq, al, cigarArray) {
      function type2size(x) {
        if (x === 'C' || x === 'c' || x === 'A') return 1;else if (x === 'S' || x === 's') return 2;else if (x === 'I' || x === 'i' || x === 'f') return 4;else return 0;
      } // test if the real CIGAR is encoded in a CG:B,I tag


      if (cigarArray.length !== 1 || al.start < 0) return false;
      var p = seq_offset + (lseq + 1 >> 1) + lseq;

      while (p + 4 < block_end) {
        var tag = String.fromCharCode(ba[p]) + String.fromCharCode(ba[p + 1]);
        if (tag === 'CG') break;
        var type = String.fromCharCode(ba[p + 2]);

        if (type === 'B') {
          // the binary array type
          type = String.fromCharCode(ba[p + 3]);
          var size = type2size(type);
          var len = readInt$1(ba, p + 4);
          p += 8 + size * len;
        } else if (type === 'Z' || type === 'H') {
          // 0-terminated string
          p += 3;

          while (ba[p++] !== 0) {}
        } else {
          // other atomic types
          p += 3 + type2size(type);
        }
      }

      if (p >= block_end) return false; // no CG tag

      if (String.fromCharCode(ba[p + 2]) !== 'B' || String.fromCharCode(ba[p + 3]) !== 'I') return false; // not of type B,I
      // now we know the real CIGAR length and its offset in the binary array

      var cigar_len = readInt$1(ba, p + 4);
      var cigar_offset = p + 8; // 4 for "CGBI" and 4 for length

      if (cigar_offset + cigar_len * 4 > block_end) return false; // out of bound
      // decode CIGAR

      var cigar = '';
      var lengthOnRef = 0;
      cigarArray.length = 0; // empty the old array

      p = cigar_offset;

      for (var k = 0; k < cigar_len; ++k, p += 4) {
        var cigop = readInt$1(ba, p);
        var opLen = cigop >> 4;
        var opLtr = CIGAR_DECODER[cigop & 0xf];
        if (opLtr === 'M' || opLtr === 'EQ' || opLtr === 'X' || opLtr === 'D' || opLtr === 'N' || opLtr === '=') lengthOnRef += opLen;
        cigar = cigar + opLen + opLtr;
        cigarArray.push({
          len: opLen,
          ltr: opLtr
        });
      } // update alignment record. We are not updating bin, as apparently it is not used.


      al.cigar = cigar;
      al.lengthOnRef = lengthOnRef;
      return true;
    },

    /**
     *
     * @param ba                 bytes to decode as an UInt8Array
     * @param offset             offset position of ba array to start decoding
     * @param alignmentContainer container to receive the decoded alignments
     * @param min                minimum genomic position
     * @param max                maximum genomic position
     * @param chrIdx             chromosome index
     * @param chrNames            array of chromosome names
     * @param filter             a BamFilter object
     *
     * @return true if we have moved beyond the right end of the genomic range.
     */
    decodeBamRecords: function decodeBamRecords(ba, offset, alignmentContainer, chrNames, chrIdx, min, max, filter) {
      while (offset < ba.length) {
        var blockSize = readInt$1(ba, offset);
        var blockEnd = offset + blockSize + 4;
        var alignment = new BamAlignment();
        var refID = readInt$1(ba, offset + 4);
        var pos = readInt$1(ba, offset + 8);

        if (blockEnd > ba.length) {
          return;
        }

        if (refID < 0) {
          offset = blockEnd;
          continue; // unmapped read
        } else if (chrIdx !== undefined && (refID > chrIdx || pos > max)) {
          return true; // off right edge, we're done
        } else if (chrIdx !== undefined && refID < chrIdx) {
          offset = blockEnd;
          continue; // ref ID to left of start, not sure this is possible
        }

        var bin_mq_nl = readInt$1(ba, offset + 12);
        var mq = (bin_mq_nl & 0xff00) >> 8;
        var nl = bin_mq_nl & 0xff;
        var flag_nc = readInt$1(ba, offset + 16);
        var flag = (flag_nc & 0xffff0000) >> 16;
        var nc = flag_nc & 0xffff;
        var lseq = readInt$1(ba, offset + 20);
        var mateChrIdx = readInt$1(ba, offset + 24);
        var matePos = readInt$1(ba, offset + 28);
        var tlen = readInt$1(ba, offset + 32);
        var readName = [];

        for (var j = 0; j < nl - 1; ++j) {
          readName.push(String.fromCharCode(ba[offset + 36 + j]));
        }

        readName = readName.join('');
        var lengthOnRef = 0;
        var cigar = '';
        var p = offset + 36 + nl;
        var cigarArray = [];

        for (var c = 0; c < nc; ++c) {
          var cigop = readInt$1(ba, p);
          var opLen = cigop >> 4;
          var opLtr = CIGAR_DECODER[cigop & 0xf];
          if (opLtr === 'M' || opLtr === 'EQ' || opLtr === 'X' || opLtr === 'D' || opLtr === 'N' || opLtr === '=') lengthOnRef += opLen;
          cigar = cigar + opLen + opLtr;
          p += 4;
          cigarArray.push({
            len: opLen,
            ltr: opLtr
          });
        }

        alignment.chr = chrNames[refID];
        alignment.start = pos;
        alignment.flags = flag;
        alignment.strand = !(flag & READ_STRAND_FLAG$1);
        alignment.readName = readName;
        alignment.cigar = cigar;
        alignment.lengthOnRef = lengthOnRef;
        alignment.fragmentLength = tlen;
        alignment.mq = mq;
        BamUtils.bam_tag2cigar(ba, blockEnd, p, lseq, alignment, cigarArray);
        alignment.end = alignment.start + alignment.lengthOnRef;

        if (alignment.end < min) {
          offset = blockEnd;
          continue;
        } // Record out-of-range "to the left", skip to next one


        var seq = [];
        var seqBytes = lseq + 1 >> 1;

        for (var _j = 0; _j < seqBytes; ++_j) {
          var sb = ba[p + _j];
          seq.push(SEQ_DECODER[(sb & 0xf0) >> 4]);
          seq.push(SEQ_DECODER[sb & 0x0f]);
        }

        seq = seq.slice(0, lseq).join(''); // seq might have one extra character (if lseq is an odd number)

        p += seqBytes;
        var qualArray = [];

        for (var _j2 = 0; _j2 < lseq; ++_j2) {
          qualArray.push(ba[p + _j2]);
        }

        p += lseq;

        if (mateChrIdx >= 0) {
          alignment.mate = {
            chr: chrNames[mateChrIdx],
            position: matePos,
            strand: !(flag & MATE_STRAND_FLAG$1)
          };
        }

        alignment.seq = seq;
        alignment.qual = qualArray;
        alignment.tagBA = new Uint8Array(ba.buffer.slice(p, blockEnd)); // decode these on demand

        this.setPairOrientation(alignment);

        if (undefined === filter || filter.pass(alignment)) {
          makeBlocks(alignment, cigarArray);
          alignmentContainer.push(alignment);
        }

        offset = blockEnd;
      }
    },
    decodeSamRecords: function decodeSamRecords(sam, alignmentContainer, chr, min, max, filter) {
      var lines, i, j, len, tokens, qualString, rnext, lengthOnRef, alignment, cigarArray, started;
      lines = splitLines(sam);
      len = lines.length;
      started = false;

      for (i = 0; i < len; i++) {
        tokens = lines[i].split('\t');
        alignment = new BamAlignment();
        alignment.chr = tokens[2];
        alignment.start = Number.parseInt(tokens[3]) - 1;
        alignment.flags = Number.parseInt(tokens[1]);
        alignment.readName = tokens[0];
        alignment.strand = !(alignment.flags & READ_STRAND_FLAG$1);
        alignment.mq = Number.parseInt(tokens[4]);
        alignment.cigar = tokens[5];
        alignment.fragmentLength = Number.parseInt(tokens[8]);
        alignment.seq = tokens[9];
        if (alignment.chr === '*' || !alignment.isMapped()) continue; // Unmapped

        if (alignment.chr !== chr) {
          if (started) break; // Off the right edge, we're done
          else continue; // Possibly to the left, skip but keep looping
        } else if (alignment.start > max) {
          break; // off right edge, we're done
        }

        lengthOnRef = 0;
        cigarArray = buildOperators(alignment.cigar);
        cigarArray.forEach(function (op) {
          var opLen = op.len;
          var opLtr = op.ltr;
          if (opLtr === 'M' || opLtr === 'EQ' || opLtr === 'X' || opLtr === 'D' || opLtr === 'N' || opLtr === '=') lengthOnRef += opLen;
        });
        alignment.lengthOnRef = lengthOnRef; // TODO for lh3: parse the CG:B,I tag in SAM here

        if (alignment.start + lengthOnRef < min) {
          continue; // To the left, skip and continue
        }

        qualString = tokens[10];
        alignment.qual = [];

        for (j = 0; j < qualString.length; j++) {
          alignment.qual[j] = qualString.charCodeAt(j) - 33;
        }

        alignment.tagDict = tokens.length < 11 ? {} : decodeSamTags(tokens.slice(11));

        if (alignment.isMateMapped()) {
          rnext = tokens[6];
          alignment.mate = {
            chr: rnext === '=' ? alignment.chr : rnext,
            position: Number.parseInt(tokens[7]),
            strand: !(alignment.flags & MATE_STRAND_FLAG$1)
          };
        }

        this.setPairOrientation(alignment);

        if (undefined === filter || filter.pass(alignment)) {
          makeBlocks(alignment, cigarArray);
          alignmentContainer.push(alignment);
        }
      }
    },
    setReaderDefaults: function setReaderDefaults(reader, config) {
      reader.filter = new BamFilter(config.filter);

      if (config.readgroup) {
        reader.filter.readgroups = new Set([config.readgroup]);
      }

      reader.alleleFreqThreshold = config.alleleFreqThreshold === undefined ? DEFAULT_ALLELE_FREQ_THRESHOLD : config.alleleFreqThreshold;
      reader.samplingWindowSize = config.samplingWindowSize === undefined ? DEFAULT_SAMPLING_WINDOW_SIZE : config.samplingWindowSize;
      reader.samplingDepth = config.samplingDepth === undefined ? DEFAULT_SAMPLING_DEPTH : config.samplingDepth;

      if (reader.samplingDepth > MAXIMUM_SAMPLING_DEPTH) {
        reader.samplingDepth = MAXIMUM_SAMPLING_DEPTH;
      }

      if (config.viewAsPairs) {
        reader.pairsSupported = true;
      } else {
        reader.pairsSupported = config.pairsSupported === undefined ? true : config.pairsSupported;
      }
    },
    setPairOrientation: function setPairOrientation(alignment) {
      if (alignment.isMapped() && alignment.mate && alignment.isMateMapped() && alignment.mate.chr === alignment.chr) {
        var s1 = alignment.strand ? 'F' : 'R';
        var mate = alignment.mate;
        var s2 = mate.strand ? 'F' : 'R';
        var o1 = ' ';
        var o2 = ' ';

        if (alignment.isFirstOfPair()) {
          o1 = '1';
          o2 = '2';
        } else if (alignment.isSecondOfPair()) {
          o1 = '2';
          o2 = '1';
        }

        var tmp = [];
        var isize = alignment.fragmentLength;
        var estReadLen = alignment.end - alignment.start;

        if (isize === 0) {
          //isize not recorded.  Need to estimate.  This calculation was validated against an Illumina
          // -> <- library bam.
          var estMateEnd = alignment.start < mate.position ? mate.position + estReadLen : mate.position - estReadLen;
          isize = estMateEnd - alignment.start;
        } //if (isize > estReadLen) {


        if (isize > 0) {
          tmp[0] = s1;
          tmp[1] = o1;
          tmp[2] = s2;
          tmp[3] = o2;
        } else {
          tmp[2] = s1;
          tmp[3] = o1;
          tmp[0] = s2;
          tmp[1] = o2;
        } // }


        alignment.pairOrientation = tmp.join('');
      }
    }
  };
  /**
   * Split the alignment record into blocks as specified in the cigarArray.  Each aligned block contains
   * its portion of the read sequence and base quality strings.  A read sequence or base quality string
   * of "*" indicates the value is not recorded.  In all other cases the length of the block sequence (block.seq)
   * and quality string (block.qual) must == the block length.
   *
   * @param alignment
   * @param cigarArray
   * @returns array of blocks
   */

  function makeBlocks(alignment, cigarArray) {
    var blocks = [];
    var insertions;
    var deletions;
    var seqOffset = 0;
    var pos = alignment.start;
    var gapType;
    alignment.scStart = alignment.start;
    alignment.scLengthOnRef = alignment.lengthOnRef;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = cigarArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var c = _step.value;
        var scPos = void 0;

        switch (c.ltr) {
          case 'H':
            break;
          // ignore hard clips

          case 'P':
            break;
          // ignore pads

          case 'S':
            scPos = pos;
            alignment.scLengthOnRef += c.len;

            if (blocks.length === 0) {
              alignment.scStart -= c.len;
              scPos -= c.len;
            }

            blocks.push(new AlignmentBlock({
              start: scPos,
              seqOffset: seqOffset,
              len: c.len,
              type: 'S'
            }));
            seqOffset += c.len;
            gapType = 'I';
            break;
          // soft clip read bases

          case 'N':
            pos += c.len;
            gapType = 'N';
            break;
          // reference skip

          case 'D':
            if (deletions === undefined) {
              deletions = [];
            }

            deletions.push({
              start: pos,
              len: c.len
            });
            pos += c.len;
            gapType = 'D';
            break;

          case 'I':
            if (insertions === undefined) {
              insertions = [];
            }

            insertions.push(new AlignmentBlock({
              start: pos,
              len: c.len,
              seqOffset: seqOffset,
              type: 'I'
            }));
            seqOffset += c.len;
            gapType = 'I';
            break;

          case 'M':
          case 'EQ':
          case '=':
          case 'X':
            blocks.push(new AlignmentBlock({
              start: pos,
              seqOffset: seqOffset,
              len: c.len,
              type: 'M',
              gapType: gapType
            }));
            seqOffset += c.len;
            pos += c.len;
            break;

          default:
            void 0;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    alignment.blocks = blocks;
    alignment.insertions = insertions;
    alignment.deletions = deletions;
  }

  function readInt$1(ba, offset) {
    return ba[offset + 3] << 24 | ba[offset + 2] << 16 | ba[offset + 1] << 8 | ba[offset];
  }
  /**
   * Build a list of cigar operators from a cigarString.  Removes padding operators and concatenates consecutive
   * operators of the same type
   *
   * @param cigarString
   * @return
   */


  function buildOperators(cigarString) {
    var operators, buffer, i, len, prevOp, next, op, nBases;
    operators = [];
    buffer = []; // Create list of cigar operators

    prevOp = null;
    len = cigarString.length;

    for (i = 0; i < len; i++) {
      next = cigarString.charAt(i);

      if (isDigit(next)) {
        buffer.push(next);
      } else {
        op = next;
        nBases = Number.parseInt(buffer.join(''));
        buffer = [];

        if (prevOp !== null && prevOp.ltr === op) {
          prevOp.len += nBases;
        } else {
          prevOp = {
            len: nBases,
            ltr: op
          };
          operators.push(prevOp);
        }
      }
    }

    return operators;
  }

  function isDigit(a) {
    var charCode = a.charCodeAt(0);
    return charCode >= 48 && charCode <= 57; // 0-9
  }

  function decodeSamTags(tags) {
    var tagDict = {};
    tags.forEach(function (tag) {
      var tokens = tag.split(':');
      tagDict[tokens[0]] = tokens[2];
    });
    return tagDict;
  }

  /**
   * Class for reading a bam file
   *
   * @param config
   * @constructor
   */

  var BamReaderNonIndexed = function BamReaderNonIndexed(config, genome) {
    this.config = config;
    this.genome = genome;
    this.bamPath = config.url;
    this.isDataUri = isString(config.url) && config.url.startsWith("data:");
    BamUtils.setReaderDefaults(this, config);
  }; // Return an alignment container


  BamReaderNonIndexed.prototype.readAlignments =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd) {
      var genome, header, queryChr, qAlignments, alignmentContainer, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, a, data, unc, arrayBuffer, _unc, parseAlignments, fetchAlignments;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              fetchAlignments = function _ref3(chr, bpStart, bpEnd) {
                var header, queryChr, qAlignments, alignmentContainer;
                header = this.header;
                queryChr = header.chrAliasTable.hasOwnProperty(chr) ? header.chrAliasTable[chr] : chr;
                qAlignments = this.alignmentCache.queryFeatures(queryChr, bpStart, bpEnd);
                alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, this.samplingWindowSize, this.samplingDepth, this.pairsSupported);
                qAlignments.forEach(function (a) {
                  alignmentContainer.push(a);
                });
                alignmentContainer.finish();
                return alignmentContainer;
              };

              parseAlignments = function _ref2(data) {
                var alignments = [];
                this.header = BamUtils.decodeBamHeader(data);
                BamUtils.decodeBamRecords(data, this.header.size, alignments, this.header.chrNames);
                this.alignmentCache = new FeatureCache(alignments, genome);
              };

              genome = this.genome;

              if (!this.alignmentCache) {
                _context.next = 31;
                break;
              }

              header = this.header;
              queryChr = header.chrAliasTable.hasOwnProperty(chr) ? header.chrAliasTable[chr] : chr;
              qAlignments = this.alignmentCache.queryFeatures(queryChr, bpStart, bpEnd);
              alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, this.samplingWindowSize, this.samplingDepth, this.pairsSupported, this.alleleFreqThreshold);
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 11;

              for (_iterator = qAlignments[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                a = _step.value;
                alignmentContainer.push(a);
              }

              _context.next = 19;
              break;

            case 15:
              _context.prev = 15;
              _context.t0 = _context["catch"](11);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 19:
              _context.prev = 19;
              _context.prev = 20;

              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }

            case 22:
              _context.prev = 22;

              if (!_didIteratorError) {
                _context.next = 25;
                break;
              }

              throw _iteratorError;

            case 25:
              return _context.finish(22);

            case 26:
              return _context.finish(19);

            case 27:
              alignmentContainer.finish();
              return _context.abrupt("return", alignmentContainer);

            case 31:
              if (!this.isDataUri) {
                _context.next = 38;
                break;
              }

              data = decodeDataURI$1(this.bamPath);
              unc = unbgzf(data.buffer);
              parseAlignments.call(this, new Uint8Array(unc));
              return _context.abrupt("return", fetchAlignments.call(this, chr, bpStart, bpEnd));

            case 38:
              _context.next = 40;
              return igvxhr.loadArrayBuffer(this.bamPath, buildOptions(this.config));

            case 40:
              arrayBuffer = _context.sent;
              _unc = unbgzf(arrayBuffer);
              parseAlignments.call(this, new Uint8Array(_unc));
              return _context.abrupt("return", fetchAlignments.call(this, chr, bpStart, bpEnd));

            case 44:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[11, 15, 19, 27], [20,, 22, 26]]);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  function decodeDataURI$1(dataURI) {
    var split = dataURI.split(',');
    var info = split[0].split(':')[1];
    var dataString = split[1];

    if (info.indexOf('base64') >= 0) {
      dataString = atob(dataString);
    } else {
      dataString = decodeURI(dataString);
    }

    var bytes = new Uint8Array(dataString.length);

    for (var i = 0; i < dataString.length; i++) {
      bytes[i] = dataString.charCodeAt(i);
    }

    return bytes;
  }

  /**
   * Class for reading a bam file
   *
   * @param config
   * @constructor
   */

  var BamReader = function BamReader(config, genome) {
    this.config = config;
    this.genome = genome;
    this.bamPath = config.url; // Todo - deal with Picard convention.  WHY DOES THERE HAVE TO BE 2?

    this.baiPath = config.indexURL || inferIndexPath(this.bamPath, "bai"); // If there is an indexURL provided, use it!

    BamUtils.setReaderDefaults(this, config);
  };

  BamReader.prototype.readAlignments =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd) {
      var chrToIndex, queryChr, chrId, alignmentContainer, bamIndex, chunks, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, c, lastBlockSize, bsizeOptions, abuffer, fetchMin, fetchMax, range, compressed, ba, done;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return getChrIndex.call(this);

            case 2:
              chrToIndex = _context.sent;
              queryChr = this.chrAliasTable.hasOwnProperty(chr) ? this.chrAliasTable[chr] : chr;
              chrId = chrToIndex[queryChr];
              alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, this.samplingWindowSize, this.samplingDepth, this.pairsSupported, this.alleleFreqThreshold);

              if (!(chrId === undefined)) {
                _context.next = 10;
                break;
              }

              return _context.abrupt("return", alignmentContainer);

            case 10:
              _context.next = 12;
              return getIndex.call(this);

            case 12:
              bamIndex = _context.sent;
              chunks = bamIndex.blocksForRange(chrId, bpStart, bpEnd);

              if (!(!chunks || chunks.length === 0)) {
                _context.next = 16;
                break;
              }

              return _context.abrupt("return", alignmentContainer);

            case 16:
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 20;
              _iterator = chunks[Symbol.iterator]();

            case 22:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context.next = 48;
                break;
              }

              c = _step.value;
              lastBlockSize = void 0;

              if (!(c.maxv.offset === 0)) {
                _context.next = 29;
                break;
              }

              lastBlockSize = 0; // Don't need to read the last block.

              _context.next = 34;
              break;

            case 29:
              bsizeOptions = buildOptions(this.config, {
                range: {
                  start: c.maxv.block,
                  size: 26
                }
              });
              _context.next = 32;
              return igvxhr.loadArrayBuffer(this.bamPath, bsizeOptions);

            case 32:
              abuffer = _context.sent;
              lastBlockSize = bgzBlockSize(abuffer);

            case 34:
              fetchMin = c.minv.block;
              fetchMax = c.maxv.block + lastBlockSize;
              range = {
                start: fetchMin,
                size: fetchMax - fetchMin + 1
              };
              _context.next = 39;
              return igvxhr.loadArrayBuffer(this.bamPath, buildOptions(this.config, {
                range: range
              }));

            case 39:
              compressed = _context.sent;
              ba = new Uint8Array(unbgzf(compressed)); //new Uint8Array(unbgzf(compressed)); //, c.maxv.block - c.minv.block + 1));

              done = BamUtils.decodeBamRecords(ba, c.minv.offset, alignmentContainer, this.indexToChr, chrId, bpStart, bpEnd, this.filter);

              if (!done) {
                _context.next = 44;
                break;
              }

              return _context.abrupt("break", 48);

            case 44:


            case 45:
              _iteratorNormalCompletion = true;
              _context.next = 22;
              break;

            case 48:
              _context.next = 54;
              break;

            case 50:
              _context.prev = 50;
              _context.t0 = _context["catch"](20);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 54:
              _context.prev = 54;
              _context.prev = 55;

              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }

            case 57:
              _context.prev = 57;

              if (!_didIteratorError) {
                _context.next = 60;
                break;
              }

              throw _iteratorError;

            case 60:
              return _context.finish(57);

            case 61:
              return _context.finish(54);

            case 62:
              alignmentContainer.finish();
              return _context.abrupt("return", alignmentContainer);

            case 64:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[20, 50, 54, 62], [55,, 57, 61]]);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  function getHeader() {
    return _getHeader.apply(this, arguments);
  }

  function _getHeader() {
    _getHeader = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2() {
      var genome, index, bsizeOptions, abuffer, bsize, len, options;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (this.header) {
                _context2.next = 15;
                break;
              }

              genome = this.genome;
              _context2.next = 4;
              return getIndex.call(this);

            case 4:
              index = _context2.sent;
              bsizeOptions = buildOptions(this.config, {
                range: {
                  start: index.firstAlignmentBlock,
                  size: 26
                }
              });
              _context2.next = 8;
              return igvxhr.loadArrayBuffer(this.bamPath, bsizeOptions);

            case 8:
              abuffer = _context2.sent;
              bsize = bgzBlockSize(abuffer);
              len = index.firstAlignmentBlock + bsize; // Insure we get the complete compressed block containing the header

              options = buildOptions(this.config, {
                range: {
                  start: 0,
                  size: len
                }
              });
              _context2.next = 14;
              return BamUtils.readHeader(this.bamPath, options, genome);

            case 14:
              this.header = _context2.sent;

            case 15:
              return _context2.abrupt("return", this.header);

            case 16:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));
    return _getHeader.apply(this, arguments);
  }

  function getIndex() {
    return _getIndex.apply(this, arguments);
  }

  function _getIndex() {
    _getIndex = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3() {
      var genome;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              genome = this.genome;

              if (this.index) {
                _context3.next = 6;
                break;
              }

              _context3.next = 4;
              return loadBamIndex(this.baiPath, this.config, false, genome);

            case 4:
              this.index = _context3.sent;
              return _context3.abrupt("return", this.index);

            case 6:
              return _context3.abrupt("return", this.index);

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));
    return _getIndex.apply(this, arguments);
  }

  function getChrIndex() {
    return _getChrIndex.apply(this, arguments);
  }

  function _getChrIndex() {
    _getChrIndex = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4() {
      var header;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              if (!this.chrToIndex) {
                _context4.next = 4;
                break;
              }

              return _context4.abrupt("return", this.chrToIndex);

            case 4:
              _context4.next = 6;
              return getHeader.call(this);

            case 6:
              header = _context4.sent;
              this.chrToIndex = header.chrToIndex;
              this.indexToChr = header.chrNames;
              this.chrAliasTable = header.chrAliasTable;
              return _context4.abrupt("return", this.chrToIndex);

            case 11:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this);
    }));
    return _getChrIndex.apply(this, arguments);
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California 
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var ShardedBamReader = function ShardedBamReader(config, genome) {
    this.config = config;
    this.genome = genome;
    var bamReaders = {};
    var chrAliasTable = {};
    config.sources.sequences.forEach(function (chr) {
      bamReaders[chr] = null; // Placeholder

      if (genome) {
        var alias = genome.getChromosomeName(chr);
        chrAliasTable[alias] = chr;
      }
    });
    this.chrAliasTable = chrAliasTable;
    this.bamReaders = bamReaders;
    BamUtils.setReaderDefaults(this, config);
  };

  ShardedBamReader.prototype.readAlignments = function (chr, start, end) {
    var genome = this.genome;
    var self = this;
    var queryChr = self.chrAliasTable.hasOwnProperty(chr) ? self.chrAliasTable[chr] : chr;

    if (!this.bamReaders.hasOwnProperty(queryChr) || "none" === this.bamReaders[queryChr]) {
      return Promise.resolve(new AlignmentContainer(chr, start, end));
    } else {
      var reader = self.bamReaders[queryChr];
      var tmp;

      if (!reader) {
        tmp = {
          url: self.config.sources.url.replace("$CHR", queryChr)
        };

        if (self.config.sources.indexURL) {
          tmp.indexURL = self.config.sources.indexURL.replace("$CHR", queryChr);
        }

        var bamConfig = Object.assign(self.config, tmp);
        reader = new BamReader(bamConfig);
        self.bamReaders[queryChr] = reader;
      }

      return reader.readAlignments(queryChr, start, end).catch(function (error) {
        console.error(error);
        Alert.presentAlert("Error reading BAM or index file for: " + tmp ? tmp.url : "");
        self.bamReaders[queryChr] = "none";
        return new AlignmentContainer(chr, start, end); // Empty alignment container
      });
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  /**
   * Class for reading bam records from an igv.js-flask server
   *
   * @param config
   * @constructor
   */

  var BamWebserviceReader = function BamWebserviceReader(config, genome) {
    this.config = config;
    this.genome = genome;
    BamUtils.setReaderDefaults(this, config);
  }; // Example http://localhost:5000/alignments/?reference=/Users/jrobinso/hg19mini.fa&file=/Users/jrobinso/cram_with_crai_index.cram&region=1:100-2000


  BamWebserviceReader.prototype.readAlignments = function (chr, bpStart, bpEnd) {
    var self = this;
    return getHeader$1.call(self).then(function (header) {
      var queryChr, url;
      queryChr = header.chrAliasTable.hasOwnProperty(chr) ? header.chrAliasTable[chr] : chr;
      url = self.config.url + "?reference=" + self.config.referenceFile + "&file=" + self.config.alignmentFile + "" + "&region=" + queryChr + ":" + bpStart + "-" + bpEnd;
      return igvxhr.loadString(url, buildOptions(self.config)).then(function (sam) {
        var alignmentContainer, chrId;
        chrId = header.chrToIndex[queryChr];
        alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, self.samplingWindowSize, self.samplingDepth, self.pairsSupported, self.alleleFreqThreshold);
        BamUtils.decodeSamRecords(sam, alignmentContainer, queryChr, bpStart, bpEnd, self.filter);
        return alignmentContainer;
      });
    });
  }; // Example  http://localhost:5000/alignments/?reference=/Users/jrobinso/hg19mini.fa&file=/Users/jrobinso/cram_with_crai_index.cram&options=-b%20-H


  function getHeader$1() {
    var self = this;
    var genome = this.genome;

    if (this.header) {
      return Promise.resolve(this.header);
    } else {
      var url = this.config.url + "?file=" + this.config.alignmentFile + "&options=-b,-H";
      var options = buildOptions(this.config);
      return BamUtils.readHeader(url, options, genome).then(function (header) {
        self.header = header;
        return header;
      });
    }
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var HtsgetReader = function HtsgetReader(config, genome) {
    this.config = config;
    this.genome = genome;
    BamUtils.setReaderDefaults(this, config);
  };

  HtsgetReader.prototype.readAlignments = function (chr, start, end, retryCount) {
    var self = this;
    var genome = this.genome;
    var queryChr;

    if (self.header) {
      queryChr = self.header.chrAliasTable.hasOwnProperty(chr) ? self.header.chrAliasTable[chr] : chr;
    } else {
      queryChr = chr;
    }

    var url = self.config.endpoint + '/reads/' + self.config.id + '?format=BAM' + '&referenceName=' + queryChr + '&start=' + start + '&end=' + end;
    return igvxhr.loadJson(url, self.config).then(function (data) {
      return loadUrls(data.htsget.urls);
    }).then(function (dataArr) {
      var compressedData = concatArrays(dataArr); // In essence a complete bam file

      var unc = unbgzf(compressedData.buffer);
      var ba = new Uint8Array(unc);

      if (!self.header) {
        self.header = BamUtils.decodeBamHeader(ba, genome);
      }

      var chrIdx = self.header.chrToIndex[chr];
      var alignmentContainer = new AlignmentContainer(chr, start, end, self.samplingWindowSize, self.samplingDepth, self.pairsSupported, self.alleleFreqThreshold);
      BamUtils.decodeBamRecords(ba, self.header.size, alignmentContainer, self.header.chrNames, chrIdx, start, end);
      alignmentContainer.finish();

      if (alignmentContainer.alignments.length === 0) {
        return tryChrAlias(chr, start, end);
      } else {
        return alignmentContainer;
      }

      function tryChrAlias(chr, start, end) {
        if (chrIdx === undefined && self.header.chrAliasTable.hasOwnProperty(chr) && !retryCount) {
          queryChr = self.header.chrAliasTable[chr];
          return self.readAlignments(queryChr, start, end, 1);
        } else {
          return alignmentContainer;
        }
      }
    });
  };

  function loadUrls(urls) {
    var promiseArray = [];
    urls.forEach(function (urlData) {
      if (urlData.url.startsWith('data:')) {
        // this is a data-uri
        promiseArray.push(Promise.resolve(dataUriToBytes(urlData.url)));
      } else {
        var options = {};

        if (urlData.headers) {
          options.headers = urlData.headers;

          if (options.headers.hasOwnProperty("referer")) {
            delete options.headers["referer"];
          }
        }

        promiseArray.push(new Promise(function (fulfill, reject) {
          igvxhr.loadArrayBuffer(urlData.url, options).then(function (buffer) {
            fulfill(new Uint8Array(buffer));
          });
        }));
      }
    });
    return Promise.all(promiseArray);
  }
  /**
   * Concatenate a list of Uint8Arrays
   * @param arrays
   */


  function concatArrays(arrays) {
    var len = 0;
    arrays.forEach(function (a) {
      len += a.length;
    });
    var offset = 0;
    var newArray = new Uint8Array(len);
    arrays.forEach(function (a) {
      newArray.set(a, offset);
      offset += a.length;
    });
    return newArray;
  }

  function dataUriToBytes(dataUri) {
    var split = dataUri.split(',');
    var info = split[0].split(':')[1];
    var dataString = split[1];

    if (info.indexOf('base64') >= 0) {
      dataString = atob(dataString);
    } else {
      dataString = decodeURI(dataString);
    }

    var bytes = new Uint8Array(dataString.length);

    for (var i = 0; i < dataString.length; i++) {
      bytes[i] = dataString.charCodeAt(i);
    }

    return bytes;
  }

  var eval2 = eval;

  var gmodCRAM = function (e) {
    var t = {};

    function r(n) {
      if (t[n]) return t[n].exports;
      var i = t[n] = {
        i: n,
        l: !1,
        exports: {}
      };
      return e[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
    }

    return r.m = e, r.c = t, r.d = function (e, t, n) {
      r.o(e, t) || Object.defineProperty(e, t, {
        enumerable: !0,
        get: n
      });
    }, r.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(e, "__esModule", {
        value: !0
      });
    }, r.t = function (e, t) {
      if (1 & t && (e = r(e)), 8 & t) return e;
      if (4 & t && "object" == _typeof(e) && e && e.__esModule) return e;
      var n = Object.create(null);
      if (r.r(n), Object.defineProperty(n, "default", {
        enumerable: !0,
        value: e
      }), 2 & t && "string" != typeof e) for (var i in e) {
        r.d(n, i, function (t) {
          return e[t];
        }.bind(null, i));
      }
      return n;
    }, r.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };
      return r.d(t, "a", t), t;
    }, r.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, r.p = "", r(r.s = 35);
  }([function (e, t) {
    var r =
    /*#__PURE__*/
    function (_Error) {
      _inherits(r, _Error);

      function r() {
        _classCallCheck(this, r);

        return _possibleConstructorReturn(this, _getPrototypeOf(r).apply(this, arguments));
      }

      return r;
    }(_wrapNativeSuper(Error));

    var n =
    /*#__PURE__*/
    function (_r) {
      _inherits(n, _r);

      function n() {
        _classCallCheck(this, n);

        return _possibleConstructorReturn(this, _getPrototypeOf(n).apply(this, arguments));
      }

      return n;
    }(r);

    e.exports = {
      CramBufferOverrunError:
      /*#__PURE__*/
      function (_n) {
        _inherits(CramBufferOverrunError, _n);

        function CramBufferOverrunError() {
          _classCallCheck(this, CramBufferOverrunError);

          return _possibleConstructorReturn(this, _getPrototypeOf(CramBufferOverrunError).apply(this, arguments));
        }

        return CramBufferOverrunError;
      }(n),
      CramMalformedError: n,
      CramUnimplementedError:
      /*#__PURE__*/
      function (_Error2) {
        _inherits(CramUnimplementedError, _Error2);

        function CramUnimplementedError() {
          _classCallCheck(this, CramUnimplementedError);

          return _possibleConstructorReturn(this, _getPrototypeOf(CramUnimplementedError).apply(this, arguments));
        }

        return CramUnimplementedError;
      }(_wrapNativeSuper(Error)),
      CramSizeLimitError:
      /*#__PURE__*/
      function (_r2) {
        _inherits(CramSizeLimitError, _r2);

        function CramSizeLimitError() {
          _classCallCheck(this, CramSizeLimitError);

          return _possibleConstructorReturn(this, _getPrototypeOf(CramSizeLimitError).apply(this, arguments));
        }

        return CramSizeLimitError;
      }(r),
      CramArgumentError:
      /*#__PURE__*/
      function (_r3) {
        _inherits(CramArgumentError, _r3);

        function CramArgumentError() {
          _classCallCheck(this, CramArgumentError);

          return _possibleConstructorReturn(this, _getPrototypeOf(CramArgumentError).apply(this, arguments));
        }

        return CramArgumentError;
      }(r)
    };
  }, function (e, t, r) {

    (function (e) {
      /*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
       * @license  MIT
       */
      var n = r(37),
          i = r(38),
          o = r(19);

      function s() {
        return h.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
      }

      function a(e, t) {
        if (s() < t) throw new RangeError("Invalid typed array length");
        return h.TYPED_ARRAY_SUPPORT ? (e = new Uint8Array(t)).__proto__ = h.prototype : (null === e && (e = new h(t)), e.length = t), e;
      }

      function h(e, t, r) {
        if (!(h.TYPED_ARRAY_SUPPORT || this instanceof h)) return new h(e, t, r);

        if ("number" == typeof e) {
          if ("string" == typeof t) throw new Error("If encoding is specified then the first argument must be a string");
          return c(this, e);
        }

        return f(this, e, t, r);
      }

      function f(e, t, r, n) {
        if ("number" == typeof t) throw new TypeError('"value" argument must not be a number');
        return "undefined" != typeof ArrayBuffer && t instanceof ArrayBuffer ? function (e, t, r, n) {
          if (t.byteLength, r < 0 || t.byteLength < r) throw new RangeError("'offset' is out of bounds");
          if (t.byteLength < r + (n || 0)) throw new RangeError("'length' is out of bounds");
          t = void 0 === r && void 0 === n ? new Uint8Array(t) : void 0 === n ? new Uint8Array(t, r) : new Uint8Array(t, r, n);
          h.TYPED_ARRAY_SUPPORT ? (e = t).__proto__ = h.prototype : e = l(e, t);
          return e;
        }(e, t, r, n) : "string" == typeof t ? function (e, t, r) {
          "string" == typeof r && "" !== r || (r = "utf8");
          if (!h.isEncoding(r)) throw new TypeError('"encoding" must be a valid string encoding');
          var n = 0 | p(t, r),
              i = (e = a(e, n)).write(t, r);
          i !== n && (e = e.slice(0, i));
          return e;
        }(e, t, r) : function (e, t) {
          if (h.isBuffer(t)) {
            var r = 0 | d(t.length);
            return 0 === (e = a(e, r)).length ? e : (t.copy(e, 0, 0, r), e);
          }

          if (t) {
            if ("undefined" != typeof ArrayBuffer && t.buffer instanceof ArrayBuffer || "length" in t) return "number" != typeof t.length || (n = t.length) != n ? a(e, 0) : l(e, t);
            if ("Buffer" === t.type && o(t.data)) return l(e, t.data);
          }

          var n;
          throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
        }(e, t);
      }

      function u(e) {
        if ("number" != typeof e) throw new TypeError('"size" argument must be a number');
        if (e < 0) throw new RangeError('"size" argument must not be negative');
      }

      function c(e, t) {
        if (u(t), e = a(e, t < 0 ? 0 : 0 | d(t)), !h.TYPED_ARRAY_SUPPORT) for (var r = 0; r < t; ++r) {
          e[r] = 0;
        }
        return e;
      }

      function l(e, t) {
        var r = t.length < 0 ? 0 : 0 | d(t.length);
        e = a(e, r);

        for (var n = 0; n < r; n += 1) {
          e[n] = 255 & t[n];
        }

        return e;
      }

      function d(e) {
        if (e >= s()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s().toString(16) + " bytes");
        return 0 | e;
      }

      function p(e, t) {
        if (h.isBuffer(e)) return e.length;
        if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(e) || e instanceof ArrayBuffer)) return e.byteLength;
        "string" != typeof e && (e = "" + e);
        var r = e.length;
        if (0 === r) return 0;

        for (var n = !1;;) {
          switch (t) {
            case "ascii":
            case "latin1":
            case "binary":
              return r;

            case "utf8":
            case "utf-8":
            case void 0:
              return D(e).length;

            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return 2 * r;

            case "hex":
              return r >>> 1;

            case "base64":
              return j(e).length;

            default:
              if (n) return D(e).length;
              t = ("" + t).toLowerCase(), n = !0;
          }
        }
      }

      function g(e, t, r) {
        var n = e[t];
        e[t] = e[r], e[r] = n;
      }

      function m(e, t, r, n, i) {
        if (0 === e.length) return -1;

        if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = i ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
          if (i) return -1;
          r = e.length - 1;
        } else if (r < 0) {
          if (!i) return -1;
          r = 0;
        }

        if ("string" == typeof t && (t = h.from(t, n)), h.isBuffer(t)) return 0 === t.length ? -1 : _(e, t, r, n, i);
        if ("number" == typeof t) return t &= 255, h.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : _(e, [t], r, n, i);
        throw new TypeError("val must be string, number or Buffer");
      }

      function _(e, t, r, n, i) {
        var o,
            s = 1,
            a = e.length,
            h = t.length;

        if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
          if (e.length < 2 || t.length < 2) return -1;
          s = 2, a /= 2, h /= 2, r /= 2;
        }

        function f(e, t) {
          return 1 === s ? e[t] : e.readUInt16BE(t * s);
        }

        if (i) {
          var u = -1;

          for (o = r; o < a; o++) {
            if (f(e, o) === f(t, -1 === u ? 0 : o - u)) {
              if (-1 === u && (u = o), o - u + 1 === h) return u * s;
            } else -1 !== u && (o -= o - u), u = -1;
          }
        } else for (r + h > a && (r = a - h), o = r; o >= 0; o--) {
          for (var c = !0, l = 0; l < h; l++) {
            if (f(e, o + l) !== f(t, l)) {
              c = !1;
              break;
            }
          }

          if (c) return o;
        }

        return -1;
      }

      function y(e, t, r, n) {
        r = Number(r) || 0;
        var i = e.length - r;
        n ? (n = Number(n)) > i && (n = i) : n = i;
        var o = t.length;
        if (o % 2 != 0) throw new TypeError("Invalid hex string");
        n > o / 2 && (n = o / 2);

        for (var s = 0; s < n; ++s) {
          var a = parseInt(t.substr(2 * s, 2), 16);
          if (isNaN(a)) return s;
          e[r + s] = a;
        }

        return s;
      }

      function b(e, t, r, n) {
        return q(D(t, e.length - r), e, r, n);
      }

      function w(e, t, r, n) {
        return q(function (e) {
          for (var t = [], r = 0; r < e.length; ++r) {
            t.push(255 & e.charCodeAt(r));
          }

          return t;
        }(t), e, r, n);
      }

      function v(e, t, r, n) {
        return w(e, t, r, n);
      }

      function E(e, t, r, n) {
        return q(j(t), e, r, n);
      }

      function S(e, t, r, n) {
        return q(function (e, t) {
          for (var r, n, i, o = [], s = 0; s < e.length && !((t -= 2) < 0); ++s) {
            r = e.charCodeAt(s), n = r >> 8, i = r % 256, o.push(i), o.push(n);
          }

          return o;
        }(t, e.length - r), e, r, n);
      }

      function A(e, t, r) {
        return 0 === t && r === e.length ? n.fromByteArray(e) : n.fromByteArray(e.slice(t, r));
      }

      function k(e, t, r) {
        r = Math.min(e.length, r);

        for (var n = [], i = t; i < r;) {
          var o,
              s,
              a,
              h,
              f = e[i],
              u = null,
              c = f > 239 ? 4 : f > 223 ? 3 : f > 191 ? 2 : 1;
          if (i + c <= r) switch (c) {
            case 1:
              f < 128 && (u = f);
              break;

            case 2:
              128 == (192 & (o = e[i + 1])) && (h = (31 & f) << 6 | 63 & o) > 127 && (u = h);
              break;

            case 3:
              o = e[i + 1], s = e[i + 2], 128 == (192 & o) && 128 == (192 & s) && (h = (15 & f) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (h < 55296 || h > 57343) && (u = h);
              break;

            case 4:
              o = e[i + 1], s = e[i + 2], a = e[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (h = (15 & f) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && h < 1114112 && (u = h);
          }
          null === u ? (u = 65533, c = 1) : u > 65535 && (u -= 65536, n.push(u >>> 10 & 1023 | 55296), u = 56320 | 1023 & u), n.push(u), i += c;
        }

        return function (e) {
          var t = e.length;
          if (t <= x) return String.fromCharCode.apply(String, e);
          var r = "",
              n = 0;

          for (; n < t;) {
            r += String.fromCharCode.apply(String, e.slice(n, n += x));
          }

          return r;
        }(n);
      }

      t.Buffer = h, t.SlowBuffer = function (e) {
        +e != e && (e = 0);
        return h.alloc(+e);
      }, t.INSPECT_MAX_BYTES = 50, h.TYPED_ARRAY_SUPPORT = void 0 !== e.TYPED_ARRAY_SUPPORT ? e.TYPED_ARRAY_SUPPORT : function () {
        try {
          var e = new Uint8Array(1);
          return e.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function foo() {
              return 42;
            }
          }, 42 === e.foo() && "function" == typeof e.subarray && 0 === e.subarray(1, 1).byteLength;
        } catch (e) {
          return !1;
        }
      }(), t.kMaxLength = s(), h.poolSize = 8192, h._augment = function (e) {
        return e.__proto__ = h.prototype, e;
      }, h.from = function (e, t, r) {
        return f(null, e, t, r);
      }, h.TYPED_ARRAY_SUPPORT && (h.prototype.__proto__ = Uint8Array.prototype, h.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && h[Symbol.species] === h && Object.defineProperty(h, Symbol.species, {
        value: null,
        configurable: !0
      })), h.alloc = function (e, t, r) {
        return function (e, t, r, n) {
          return u(t), t <= 0 ? a(e, t) : void 0 !== r ? "string" == typeof n ? a(e, t).fill(r, n) : a(e, t).fill(r) : a(e, t);
        }(null, e, t, r);
      }, h.allocUnsafe = function (e) {
        return c(null, e);
      }, h.allocUnsafeSlow = function (e) {
        return c(null, e);
      }, h.isBuffer = function (e) {
        return !(null == e || !e._isBuffer);
      }, h.compare = function (e, t) {
        if (!h.isBuffer(e) || !h.isBuffer(t)) throw new TypeError("Arguments must be Buffers");
        if (e === t) return 0;

        for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) {
          if (e[i] !== t[i]) {
            r = e[i], n = t[i];
            break;
          }
        }

        return r < n ? -1 : n < r ? 1 : 0;
      }, h.isEncoding = function (e) {
        switch (String(e).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return !0;

          default:
            return !1;
        }
      }, h.concat = function (e, t) {
        if (!o(e)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (0 === e.length) return h.alloc(0);
        var r;
        if (void 0 === t) for (t = 0, r = 0; r < e.length; ++r) {
          t += e[r].length;
        }
        var n = h.allocUnsafe(t),
            i = 0;

        for (r = 0; r < e.length; ++r) {
          var s = e[r];
          if (!h.isBuffer(s)) throw new TypeError('"list" argument must be an Array of Buffers');
          s.copy(n, i), i += s.length;
        }

        return n;
      }, h.byteLength = p, h.prototype._isBuffer = !0, h.prototype.swap16 = function () {
        var e = this.length;
        if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");

        for (var t = 0; t < e; t += 2) {
          g(this, t, t + 1);
        }

        return this;
      }, h.prototype.swap32 = function () {
        var e = this.length;
        if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");

        for (var t = 0; t < e; t += 4) {
          g(this, t, t + 3), g(this, t + 1, t + 2);
        }

        return this;
      }, h.prototype.swap64 = function () {
        var e = this.length;
        if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");

        for (var t = 0; t < e; t += 8) {
          g(this, t, t + 7), g(this, t + 1, t + 6), g(this, t + 2, t + 5), g(this, t + 3, t + 4);
        }

        return this;
      }, h.prototype.toString = function () {
        var e = 0 | this.length;
        return 0 === e ? "" : 0 === arguments.length ? k(this, 0, e) : function (e, t, r) {
          var n = !1;
          if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
          if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
          if ((r >>>= 0) <= (t >>>= 0)) return "";

          for (e || (e = "utf8");;) {
            switch (e) {
              case "hex":
                return T(this, t, r);

              case "utf8":
              case "utf-8":
                return k(this, t, r);

              case "ascii":
                return C(this, t, r);

              case "latin1":
              case "binary":
                return R(this, t, r);

              case "base64":
                return A(this, t, r);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return I(this, t, r);

              default:
                if (n) throw new TypeError("Unknown encoding: " + e);
                e = (e + "").toLowerCase(), n = !0;
            }
          }
        }.apply(this, arguments);
      }, h.prototype.equals = function (e) {
        if (!h.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
        return this === e || 0 === h.compare(this, e);
      }, h.prototype.inspect = function () {
        var e = "",
            r = t.INSPECT_MAX_BYTES;
        return this.length > 0 && (e = this.toString("hex", 0, r).match(/.{2}/g).join(" "), this.length > r && (e += " ... ")), "<Buffer " + e + ">";
      }, h.prototype.compare = function (e, t, r, n, i) {
        if (!h.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
        if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), t < 0 || r > e.length || n < 0 || i > this.length) throw new RangeError("out of range index");
        if (n >= i && t >= r) return 0;
        if (n >= i) return -1;
        if (t >= r) return 1;
        if (this === e) return 0;

        for (var o = (i >>>= 0) - (n >>>= 0), s = (r >>>= 0) - (t >>>= 0), a = Math.min(o, s), f = this.slice(n, i), u = e.slice(t, r), c = 0; c < a; ++c) {
          if (f[c] !== u[c]) {
            o = f[c], s = u[c];
            break;
          }
        }

        return o < s ? -1 : s < o ? 1 : 0;
      }, h.prototype.includes = function (e, t, r) {
        return -1 !== this.indexOf(e, t, r);
      }, h.prototype.indexOf = function (e, t, r) {
        return m(this, e, t, r, !0);
      }, h.prototype.lastIndexOf = function (e, t, r) {
        return m(this, e, t, r, !1);
      }, h.prototype.write = function (e, t, r, n) {
        if (void 0 === t) n = "utf8", r = this.length, t = 0;else if (void 0 === r && "string" == typeof t) n = t, r = this.length, t = 0;else {
          if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
          t |= 0, isFinite(r) ? (r |= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);
        }
        var i = this.length - t;
        if ((void 0 === r || r > i) && (r = i), e.length > 0 && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
        n || (n = "utf8");

        for (var o = !1;;) {
          switch (n) {
            case "hex":
              return y(this, e, t, r);

            case "utf8":
            case "utf-8":
              return b(this, e, t, r);

            case "ascii":
              return w(this, e, t, r);

            case "latin1":
            case "binary":
              return v(this, e, t, r);

            case "base64":
              return E(this, e, t, r);

            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return S(this, e, t, r);

            default:
              if (o) throw new TypeError("Unknown encoding: " + n);
              n = ("" + n).toLowerCase(), o = !0;
          }
        }
      }, h.prototype.toJSON = function () {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      var x = 4096;

      function C(e, t, r) {
        var n = "";
        r = Math.min(e.length, r);

        for (var i = t; i < r; ++i) {
          n += String.fromCharCode(127 & e[i]);
        }

        return n;
      }

      function R(e, t, r) {
        var n = "";
        r = Math.min(e.length, r);

        for (var i = t; i < r; ++i) {
          n += String.fromCharCode(e[i]);
        }

        return n;
      }

      function T(e, t, r) {
        var n = e.length;
        (!t || t < 0) && (t = 0), (!r || r < 0 || r > n) && (r = n);

        for (var i = "", o = t; o < r; ++o) {
          i += z(e[o]);
        }

        return i;
      }

      function I(e, t, r) {
        for (var n = e.slice(t, r), i = "", o = 0; o < n.length; o += 2) {
          i += String.fromCharCode(n[o] + 256 * n[o + 1]);
        }

        return i;
      }

      function B(e, t, r) {
        if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
        if (e + t > r) throw new RangeError("Trying to access beyond buffer length");
      }

      function L(e, t, r, n, i, o) {
        if (!h.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (t > i || t < o) throw new RangeError('"value" argument is out of bounds');
        if (r + n > e.length) throw new RangeError("Index out of range");
      }

      function N(e, t, r, n) {
        t < 0 && (t = 65535 + t + 1);

        for (var i = 0, o = Math.min(e.length - r, 2); i < o; ++i) {
          e[r + i] = (t & 255 << 8 * (n ? i : 1 - i)) >>> 8 * (n ? i : 1 - i);
        }
      }

      function F(e, t, r, n) {
        t < 0 && (t = 4294967295 + t + 1);

        for (var i = 0, o = Math.min(e.length - r, 4); i < o; ++i) {
          e[r + i] = t >>> 8 * (n ? i : 3 - i) & 255;
        }
      }

      function M(e, t, r, n, i, o) {
        if (r + n > e.length) throw new RangeError("Index out of range");
        if (r < 0) throw new RangeError("Index out of range");
      }

      function O(e, t, r, n, o) {
        return o || M(e, 0, r, 4), i.write(e, t, r, n, 23, 4), r + 4;
      }

      function P(e, t, r, n, o) {
        return o || M(e, 0, r, 8), i.write(e, t, r, n, 52, 8), r + 8;
      }

      h.prototype.slice = function (e, t) {
        var r,
            n = this.length;
        if ((e = ~~e) < 0 ? (e += n) < 0 && (e = 0) : e > n && (e = n), (t = void 0 === t ? n : ~~t) < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n), t < e && (t = e), h.TYPED_ARRAY_SUPPORT) (r = this.subarray(e, t)).__proto__ = h.prototype;else {
          var i = t - e;
          r = new h(i, void 0);

          for (var o = 0; o < i; ++o) {
            r[o] = this[o + e];
          }
        }
        return r;
      }, h.prototype.readUIntLE = function (e, t, r) {
        e |= 0, t |= 0, r || B(e, t, this.length);

        for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) {
          n += this[e + o] * i;
        }

        return n;
      }, h.prototype.readUIntBE = function (e, t, r) {
        e |= 0, t |= 0, r || B(e, t, this.length);

        for (var n = this[e + --t], i = 1; t > 0 && (i *= 256);) {
          n += this[e + --t] * i;
        }

        return n;
      }, h.prototype.readUInt8 = function (e, t) {
        return t || B(e, 1, this.length), this[e];
      }, h.prototype.readUInt16LE = function (e, t) {
        return t || B(e, 2, this.length), this[e] | this[e + 1] << 8;
      }, h.prototype.readUInt16BE = function (e, t) {
        return t || B(e, 2, this.length), this[e] << 8 | this[e + 1];
      }, h.prototype.readUInt32LE = function (e, t) {
        return t || B(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
      }, h.prototype.readUInt32BE = function (e, t) {
        return t || B(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
      }, h.prototype.readIntLE = function (e, t, r) {
        e |= 0, t |= 0, r || B(e, t, this.length);

        for (var n = this[e], i = 1, o = 0; ++o < t && (i *= 256);) {
          n += this[e + o] * i;
        }

        return n >= (i *= 128) && (n -= Math.pow(2, 8 * t)), n;
      }, h.prototype.readIntBE = function (e, t, r) {
        e |= 0, t |= 0, r || B(e, t, this.length);

        for (var n = t, i = 1, o = this[e + --n]; n > 0 && (i *= 256);) {
          o += this[e + --n] * i;
        }

        return o >= (i *= 128) && (o -= Math.pow(2, 8 * t)), o;
      }, h.prototype.readInt8 = function (e, t) {
        return t || B(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
      }, h.prototype.readInt16LE = function (e, t) {
        t || B(e, 2, this.length);
        var r = this[e] | this[e + 1] << 8;
        return 32768 & r ? 4294901760 | r : r;
      }, h.prototype.readInt16BE = function (e, t) {
        t || B(e, 2, this.length);
        var r = this[e + 1] | this[e] << 8;
        return 32768 & r ? 4294901760 | r : r;
      }, h.prototype.readInt32LE = function (e, t) {
        return t || B(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
      }, h.prototype.readInt32BE = function (e, t) {
        return t || B(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
      }, h.prototype.readFloatLE = function (e, t) {
        return t || B(e, 4, this.length), i.read(this, e, !0, 23, 4);
      }, h.prototype.readFloatBE = function (e, t) {
        return t || B(e, 4, this.length), i.read(this, e, !1, 23, 4);
      }, h.prototype.readDoubleLE = function (e, t) {
        return t || B(e, 8, this.length), i.read(this, e, !0, 52, 8);
      }, h.prototype.readDoubleBE = function (e, t) {
        return t || B(e, 8, this.length), i.read(this, e, !1, 52, 8);
      }, h.prototype.writeUIntLE = function (e, t, r, n) {
        (e = +e, t |= 0, r |= 0, n) || L(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
        var i = 1,
            o = 0;

        for (this[t] = 255 & e; ++o < r && (i *= 256);) {
          this[t + o] = e / i & 255;
        }

        return t + r;
      }, h.prototype.writeUIntBE = function (e, t, r, n) {
        (e = +e, t |= 0, r |= 0, n) || L(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
        var i = r - 1,
            o = 1;

        for (this[t + i] = 255 & e; --i >= 0 && (o *= 256);) {
          this[t + i] = e / o & 255;
        }

        return t + r;
      }, h.prototype.writeUInt8 = function (e, t, r) {
        return e = +e, t |= 0, r || L(this, e, t, 1, 255, 0), h.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[t] = 255 & e, t + 1;
      }, h.prototype.writeUInt16LE = function (e, t, r) {
        return e = +e, t |= 0, r || L(this, e, t, 2, 65535, 0), h.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : N(this, e, t, !0), t + 2;
      }, h.prototype.writeUInt16BE = function (e, t, r) {
        return e = +e, t |= 0, r || L(this, e, t, 2, 65535, 0), h.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : N(this, e, t, !1), t + 2;
      }, h.prototype.writeUInt32LE = function (e, t, r) {
        return e = +e, t |= 0, r || L(this, e, t, 4, 4294967295, 0), h.TYPED_ARRAY_SUPPORT ? (this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e) : F(this, e, t, !0), t + 4;
      }, h.prototype.writeUInt32BE = function (e, t, r) {
        return e = +e, t |= 0, r || L(this, e, t, 4, 4294967295, 0), h.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : F(this, e, t, !1), t + 4;
      }, h.prototype.writeIntLE = function (e, t, r, n) {
        if (e = +e, t |= 0, !n) {
          var i = Math.pow(2, 8 * r - 1);
          L(this, e, t, r, i - 1, -i);
        }

        var o = 0,
            s = 1,
            a = 0;

        for (this[t] = 255 & e; ++o < r && (s *= 256);) {
          e < 0 && 0 === a && 0 !== this[t + o - 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;
        }

        return t + r;
      }, h.prototype.writeIntBE = function (e, t, r, n) {
        if (e = +e, t |= 0, !n) {
          var i = Math.pow(2, 8 * r - 1);
          L(this, e, t, r, i - 1, -i);
        }

        var o = r - 1,
            s = 1,
            a = 0;

        for (this[t + o] = 255 & e; --o >= 0 && (s *= 256);) {
          e < 0 && 0 === a && 0 !== this[t + o + 1] && (a = 1), this[t + o] = (e / s >> 0) - a & 255;
        }

        return t + r;
      }, h.prototype.writeInt8 = function (e, t, r) {
        return e = +e, t |= 0, r || L(this, e, t, 1, 127, -128), h.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
      }, h.prototype.writeInt16LE = function (e, t, r) {
        return e = +e, t |= 0, r || L(this, e, t, 2, 32767, -32768), h.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8) : N(this, e, t, !0), t + 2;
      }, h.prototype.writeInt16BE = function (e, t, r) {
        return e = +e, t |= 0, r || L(this, e, t, 2, 32767, -32768), h.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 8, this[t + 1] = 255 & e) : N(this, e, t, !1), t + 2;
      }, h.prototype.writeInt32LE = function (e, t, r) {
        return e = +e, t |= 0, r || L(this, e, t, 4, 2147483647, -2147483648), h.TYPED_ARRAY_SUPPORT ? (this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24) : F(this, e, t, !0), t + 4;
      }, h.prototype.writeInt32BE = function (e, t, r) {
        return e = +e, t |= 0, r || L(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), h.TYPED_ARRAY_SUPPORT ? (this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e) : F(this, e, t, !1), t + 4;
      }, h.prototype.writeFloatLE = function (e, t, r) {
        return O(this, e, t, !0, r);
      }, h.prototype.writeFloatBE = function (e, t, r) {
        return O(this, e, t, !1, r);
      }, h.prototype.writeDoubleLE = function (e, t, r) {
        return P(this, e, t, !0, r);
      }, h.prototype.writeDoubleBE = function (e, t, r) {
        return P(this, e, t, !1, r);
      }, h.prototype.copy = function (e, t, r, n) {
        if (r || (r = 0), n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t || (t = 0), n > 0 && n < r && (n = r), n === r) return 0;
        if (0 === e.length || 0 === this.length) return 0;
        if (t < 0) throw new RangeError("targetStart out of bounds");
        if (r < 0 || r >= this.length) throw new RangeError("sourceStart out of bounds");
        if (n < 0) throw new RangeError("sourceEnd out of bounds");
        n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
        var i,
            o = n - r;
        if (this === e && r < t && t < n) for (i = o - 1; i >= 0; --i) {
          e[i + t] = this[i + r];
        } else if (o < 1e3 || !h.TYPED_ARRAY_SUPPORT) for (i = 0; i < o; ++i) {
          e[i + t] = this[i + r];
        } else Uint8Array.prototype.set.call(e, this.subarray(r, r + o), t);
        return o;
      }, h.prototype.fill = function (e, t, r, n) {
        if ("string" == typeof e) {
          if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), 1 === e.length) {
            var i = e.charCodeAt(0);
            i < 256 && (e = i);
          }

          if (void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
          if ("string" == typeof n && !h.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
        } else "number" == typeof e && (e &= 255);

        if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
        if (r <= t) return this;
        var o;
        if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, e || (e = 0), "number" == typeof e) for (o = t; o < r; ++o) {
          this[o] = e;
        } else {
          var s = h.isBuffer(e) ? e : D(new h(e, n).toString()),
              a = s.length;

          for (o = 0; o < r - t; ++o) {
            this[o + t] = s[o % a];
          }
        }
        return this;
      };
      var U = /[^+\/0-9A-Za-z-_]/g;

      function z(e) {
        return e < 16 ? "0" + e.toString(16) : e.toString(16);
      }

      function D(e, t) {
        var r;
        t = t || 1 / 0;

        for (var n = e.length, i = null, o = [], s = 0; s < n; ++s) {
          if ((r = e.charCodeAt(s)) > 55295 && r < 57344) {
            if (!i) {
              if (r > 56319) {
                (t -= 3) > -1 && o.push(239, 191, 189);
                continue;
              }

              if (s + 1 === n) {
                (t -= 3) > -1 && o.push(239, 191, 189);
                continue;
              }

              i = r;
              continue;
            }

            if (r < 56320) {
              (t -= 3) > -1 && o.push(239, 191, 189), i = r;
              continue;
            }

            r = 65536 + (i - 55296 << 10 | r - 56320);
          } else i && (t -= 3) > -1 && o.push(239, 191, 189);

          if (i = null, r < 128) {
            if ((t -= 1) < 0) break;
            o.push(r);
          } else if (r < 2048) {
            if ((t -= 2) < 0) break;
            o.push(r >> 6 | 192, 63 & r | 128);
          } else if (r < 65536) {
            if ((t -= 3) < 0) break;
            o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
          } else {
            if (!(r < 1114112)) throw new Error("Invalid code point");
            if ((t -= 4) < 0) break;
            o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
          }
        }

        return o;
      }

      function j(e) {
        return n.toByteArray(function (e) {
          if ((e = function (e) {
            return e.trim ? e.trim() : e.replace(/^\s+|\s+$/g, "");
          }(e).replace(U, "")).length < 2) return "";

          for (; e.length % 4 != 0;) {
            e += "=";
          }

          return e;
        }(e));
      }

      function q(e, t, r, n) {
        for (var i = 0; i < n && !(i + r >= t.length || i >= e.length); ++i) {
          t[i + r] = e[i];
        }

        return i;
      }
    }).call(this, r(2));
  }, function (e, t) {
    var r;

    r = function () {
      return this;
    }();

    try {
      r = r || new Function("return this")();
    } catch (e) {
      "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && (r = window);
    }

    e.exports = r;
  }, function (e, t) {
    var r,
        n,
        i = e.exports = {};

    function o() {
      throw new Error("setTimeout has not been defined");
    }

    function s() {
      throw new Error("clearTimeout has not been defined");
    }

    function a(e) {
      if (r === setTimeout) return setTimeout(e, 0);
      if ((r === o || !r) && setTimeout) return r = setTimeout, setTimeout(e, 0);

      try {
        return r(e, 0);
      } catch (t) {
        try {
          return r.call(null, e, 0);
        } catch (t) {
          return r.call(this, e, 0);
        }
      }
    }

    !function () {
      try {
        r = "function" == typeof setTimeout ? setTimeout : o;
      } catch (e) {
        r = o;
      }

      try {
        n = "function" == typeof clearTimeout ? clearTimeout : s;
      } catch (e) {
        n = s;
      }
    }();
    var h,
        f = [],
        u = !1,
        c = -1;

    function l() {
      u && h && (u = !1, h.length ? f = h.concat(f) : c = -1, f.length && d());
    }

    function d() {
      if (!u) {
        var e = a(l);
        u = !0;

        for (var t = f.length; t;) {
          for (h = f, f = []; ++c < t;) {
            h && h[c].run();
          }

          c = -1, t = f.length;
        }

        h = null, u = !1, function (e) {
          if (n === clearTimeout) return clearTimeout(e);
          if ((n === s || !n) && clearTimeout) return n = clearTimeout, clearTimeout(e);

          try {
            n(e);
          } catch (t) {
            try {
              return n.call(null, e);
            } catch (t) {
              return n.call(this, e);
            }
          }
        }(e);
      }
    }

    function p(e, t) {
      this.fun = e, this.array = t;
    }

    function g() {}

    i.nextTick = function (e) {
      var t = new Array(arguments.length - 1);
      if (arguments.length > 1) for (var r = 1; r < arguments.length; r++) {
        t[r - 1] = arguments[r];
      }
      f.push(new p(e, t)), 1 !== f.length || u || a(d);
    }, p.prototype.run = function () {
      this.fun.apply(null, this.array);
    }, i.title = "browser", i.browser = !0, i.env = {}, i.argv = [], i.version = "", i.versions = {}, i.on = g, i.addListener = g, i.once = g, i.off = g, i.removeListener = g, i.removeAllListeners = g, i.emit = g, i.prependListener = g, i.prependOnceListener = g, i.listeners = function (e) {
      return [];
    }, i.binding = function (e) {
      throw new Error("process.binding is not supported");
    }, i.cwd = function () {
      return "/";
    }, i.chdir = function (e) {
      throw new Error("process.chdir is not supported");
    }, i.umask = function () {
      return 0;
    };
  }, function (e, t) {
    "function" == typeof Object.create ? e.exports = function (e, t) {
      e.super_ = t, e.prototype = Object.create(t.prototype, {
        constructor: {
          value: e,
          enumerable: !1,
          writable: !0,
          configurable: !0
        }
      });
    } : e.exports = function (e, t) {
      e.super_ = t;

      var r = function r() {};

      r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e;
    };
  }, function (e, t, r) {

    var n = r(9),
        i = Object.keys || function (e) {
      var t = [];

      for (var r in e) {
        t.push(r);
      }

      return t;
    };

    e.exports = c;
    var o = r(7);
    o.inherits = r(4);
    var s = r(21),
        a = r(16);
    o.inherits(c, s);

    for (var h = i(a.prototype), f = 0; f < h.length; f++) {
      var u = h[f];
      c.prototype[u] || (c.prototype[u] = a.prototype[u]);
    }

    function c(e) {
      if (!(this instanceof c)) return new c(e);
      s.call(this, e), a.call(this, e), e && !1 === e.readable && (this.readable = !1), e && !1 === e.writable && (this.writable = !1), this.allowHalfOpen = !0, e && !1 === e.allowHalfOpen && (this.allowHalfOpen = !1), this.once("end", l);
    }

    function l() {
      this.allowHalfOpen || this._writableState.ended || n.nextTick(d, this);
    }

    function d(e) {
      e.end();
    }

    Object.defineProperty(c.prototype, "writableHighWaterMark", {
      enumerable: !1,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    }), Object.defineProperty(c.prototype, "destroyed", {
      get: function get() {
        return void 0 !== this._readableState && void 0 !== this._writableState && this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(e) {
        void 0 !== this._readableState && void 0 !== this._writableState && (this._readableState.destroyed = e, this._writableState.destroyed = e);
      }
    }), c.prototype._destroy = function (e, t) {
      this.push(null), this.end(), n.nextTick(t, e);
    };
  }, function (e, t, r) {
    var _r4 = r(0),
        n = _r4.CramBufferOverrunError,
        i = {
      int: !0,
      byte: !0,
      long: !0,
      byteArray: !0,
      byteArrayBlock: !0
    };

    e.exports =
    /*#__PURE__*/
    function () {
      function _class() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var t = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck(this, _class);

        if (this.parameters = e, this.dataType = t, !t) throw new TypeError("must provide a data type to codec constructor");
        if (!i[t]) throw new TypeError("invalid data type ".concat(t));
      }

      _createClass(_class, [{
        key: "_getBits",
        value: function _getBits(e, t, r) {
          var i = 0;
          if (t.bytePosition + (7 - t.bitPosition + r) / 8 > e.length) throw new n("read error during decoding. the file seems to be truncated.");

          for (var _n2 = r; _n2; _n2 -= 1) {
            i <<= 1, i |= e[t.bytePosition] >> t.bitPosition & 1, t.bitPosition -= 1, t.bitPosition < 0 && (t.bytePosition += 1), t.bitPosition &= 7;
          }

          return i;
        }
      }]);

      return _class;
    }();
  }, function (e, t, r) {
    (function (e) {
      function r(e) {
        return Object.prototype.toString.call(e);
      }

      t.isArray = function (e) {
        return Array.isArray ? Array.isArray(e) : "[object Array]" === r(e);
      }, t.isBoolean = function (e) {
        return "boolean" == typeof e;
      }, t.isNull = function (e) {
        return null === e;
      }, t.isNullOrUndefined = function (e) {
        return null == e;
      }, t.isNumber = function (e) {
        return "number" == typeof e;
      }, t.isString = function (e) {
        return "string" == typeof e;
      }, t.isSymbol = function (e) {
        return "symbol" == _typeof(e);
      }, t.isUndefined = function (e) {
        return void 0 === e;
      }, t.isRegExp = function (e) {
        return "[object RegExp]" === r(e);
      }, t.isObject = function (e) {
        return "object" == _typeof(e) && null !== e;
      }, t.isDate = function (e) {
        return "[object Date]" === r(e);
      }, t.isError = function (e) {
        return "[object Error]" === r(e) || e instanceof Error;
      }, t.isFunction = function (e) {
        return "function" == typeof e;
      }, t.isPrimitive = function (e) {
        return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == _typeof(e) || void 0 === e;
      }, t.isBuffer = e.isBuffer;
    }).call(this, r(1).Buffer);
  }, function (e, t, r) {
    var n = r(72),
        _r5 = r(0),
        i = _r5.CramBufferOverrunError;

    e.exports = {
      itf8Size: function itf8Size(e) {
        return -128 & e ? -16384 & e ? -2097152 & e ? -268435456 & e ? 5 : 4 : 3 : 2 : 1;
      },
      parseItf8: function parseItf8(e, t) {
        var r = t;
        var n = e[r];
        var o;
        if (n < 128 ? (o = n, r += 1) : n < 192 ? (o = 16383 & (n << 8 | e[r + 1]), r += 2) : n < 224 ? (o = 2097151 & (n << 16 | e[r + 1] << 8 | e[r + 2]), r += 3) : n < 240 ? (o = 268435455 & (n << 24 | e[r + 1] << 16 | e[r + 2] << 8 | e[r + 3]), r += 4) : (o = (15 & n) << 28 | e[r + 1] << 20 | e[r + 2] << 12 | e[r + 3] << 4 | 15 & e[r + 4], r += 5), r > e.length) throw new i("Attempted to read beyond end of buffer; this file seems truncated.");
        return [o, r - t];
      },
      parseItem: function parseItem(e, t) {
        var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

        var _t$parse = t.parse(e),
            i = _t$parse.offset,
            o = _t$parse.result;

        return o._endPosition = i + n, o._size = i - r, o;
      },
      tinyMemoize: function tinyMemoize(e, t) {
        var r = e.prototype[t],
            n = "_memo_".concat(t);

        e.prototype[t] = function () {
          return n in this || (this[n] = r.call(this)), this[n];
        };
      },
      sequenceMD5: function sequenceMD5(e) {
        return n(e.toUpperCase().replace(/[^\x21-\x7e]/g, ""));
      }
    };
  }, function (e, t, r) {

    (function (t) {
      !t.version || 0 === t.version.indexOf("v0.") || 0 === t.version.indexOf("v1.") && 0 !== t.version.indexOf("v1.8.") ? e.exports = {
        nextTick: function nextTick(e, r, n, i) {
          if ("function" != typeof e) throw new TypeError('"callback" argument must be a function');
          var o,
              s,
              a = arguments.length;

          switch (a) {
            case 0:
            case 1:
              return t.nextTick(e);

            case 2:
              return t.nextTick(function () {
                e.call(null, r);
              });

            case 3:
              return t.nextTick(function () {
                e.call(null, r, n);
              });

            case 4:
              return t.nextTick(function () {
                e.call(null, r, n, i);
              });

            default:
              for (o = new Array(a - 1), s = 0; s < o.length;) {
                o[s++] = arguments[s];
              }

              return t.nextTick(function () {
                e.apply(null, o);
              });
          }
        }
      } : e.exports = t;
    }).call(this, r(3));
  }, function (e, t, r) {
    var n = r(1),
        i = n.Buffer;

    function o(e, t) {
      for (var r in e) {
        t[r] = e[r];
      }
    }

    function s(e, t, r) {
      return i(e, t, r);
    }

    i.from && i.alloc && i.allocUnsafe && i.allocUnsafeSlow ? e.exports = n : (o(n, t), t.Buffer = s), o(i, s), s.from = function (e, t, r) {
      if ("number" == typeof e) throw new TypeError("Argument must not be a number");
      return i(e, t, r);
    }, s.alloc = function (e, t, r) {
      if ("number" != typeof e) throw new TypeError("Argument must be a number");
      var n = i(e);
      return void 0 !== t ? "string" == typeof r ? n.fill(t, r) : n.fill(t) : n.fill(0), n;
    }, s.allocUnsafe = function (e) {
      if ("number" != typeof e) throw new TypeError("Argument must be a number");
      return i(e);
    }, s.allocUnsafeSlow = function (e) {
      if ("number" != typeof e) throw new TypeError("Argument must be a number");
      return n.SlowBuffer(e);
    };
  }, function (e, t, r) {

    var n = "undefined" != typeof Uint8Array && "undefined" != typeof Uint16Array && "undefined" != typeof Int32Array;

    function i(e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }

    t.assign = function (e) {
      for (var t = Array.prototype.slice.call(arguments, 1); t.length;) {
        var r = t.shift();

        if (r) {
          if ("object" != _typeof(r)) throw new TypeError(r + "must be non-object");

          for (var n in r) {
            i(r, n) && (e[n] = r[n]);
          }
        }
      }

      return e;
    }, t.shrinkBuf = function (e, t) {
      return e.length === t ? e : e.subarray ? e.subarray(0, t) : (e.length = t, e);
    };
    var o = {
      arraySet: function arraySet(e, t, r, n, i) {
        if (t.subarray && e.subarray) e.set(t.subarray(r, r + n), i);else for (var o = 0; o < n; o++) {
          e[i + o] = t[r + o];
        }
      },
      flattenChunks: function flattenChunks(e) {
        var t, r, n, i, o, s;

        for (n = 0, t = 0, r = e.length; t < r; t++) {
          n += e[t].length;
        }

        for (s = new Uint8Array(n), i = 0, t = 0, r = e.length; t < r; t++) {
          o = e[t], s.set(o, i), i += o.length;
        }

        return s;
      }
    },
        s = {
      arraySet: function arraySet(e, t, r, n, i) {
        for (var o = 0; o < n; o++) {
          e[i + o] = t[r + o];
        }
      },
      flattenChunks: function flattenChunks(e) {
        return [].concat.apply([], e);
      }
    };
    t.setTyped = function (e) {
      e ? (t.Buf8 = Uint8Array, t.Buf16 = Uint16Array, t.Buf32 = Int32Array, t.assign(t, o)) : (t.Buf8 = Array, t.Buf16 = Array, t.Buf32 = Array, t.assign(t, s));
    }, t.setTyped(n);
  }, function (e, t, r) {
    var _r6 = r(0),
        n = _r6.CramMalformedError,
        i = r(13);

    var o = function o() {
      _classCallCheck(this, o);

      this.F = void 0, this.C = void 0;
    };

    function s(e, t, r, n) {
      return r * (e >> n) + (e & (1 << n) - 1) - t;
    }

    var a = {
      FC: o,
      AriDecoder: function AriDecoder() {
        _classCallCheck(this, AriDecoder);

        this.fc = new Array(256);

        for (var _e2 = 0; _e2 < this.fc.length; _e2 += 1) {
          this.fc[_e2] = new o();
        }

        this.R = null;
      },
      Symbol: function _Symbol() {
        _classCallCheck(this, _Symbol);

        this.start = void 0, this.freq = void 0;
      },
      symbolInit: function symbolInit(e, t, r) {
        if (!(t <= 65536)) throw new n("assertion failed: start <= 1<<16");
        if (!(r <= 65536 - t)) throw new n("assertion failed: freq <= 1<<16");
        e.start = t, e.freq = r;
      },
      advanceStep: s,
      advanceSymbolStep: function advanceSymbolStep(e, t, r) {
        return s(e, t.start, t.freq, r);
      },
      get: function get(e, t) {
        return e & (1 << t) - 1;
      },
      advanceSymbol: function advanceSymbol(e, t, r, n) {
        return function (e, t, r, n, o) {
          if ((e = n * (e >> o) + (e & (1 << o) - 1) - r) < i.RANS_BYTE_L) do {
            e = e << 8 | 255 & t.get();
          } while (e < i.RANS_BYTE_L);
          return e;
        }(e, t, r.start, r.freq, n);
      },
      renormalize: function renormalize(e, t) {
        if (e < i.RANS_BYTE_L) do {
          e = e << 8 | 255 & t.get();
        } while (e < i.RANS_BYTE_L);
        return e;
      }
    };
    e.exports = a;
  }, function (e, t) {
    e.exports = {
      TF_SHIFT: 12,
      TOTFREQ: 4096,
      RANS_BYTE_L: 1 << 23
    };
  }, function (e, t) {
    function r() {
      this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
    }

    function n(e) {
      return "function" == typeof e;
    }

    function i(e) {
      return "object" == _typeof(e) && null !== e;
    }

    function o(e) {
      return void 0 === e;
    }

    e.exports = r, r.EventEmitter = r, r.prototype._events = void 0, r.prototype._maxListeners = void 0, r.defaultMaxListeners = 10, r.prototype.setMaxListeners = function (e) {
      if ("number" != typeof e || e < 0 || isNaN(e)) throw TypeError("n must be a positive number");
      return this._maxListeners = e, this;
    }, r.prototype.emit = function (e) {
      var t, r, s, a, h, f;

      if (this._events || (this._events = {}), "error" === e && (!this._events.error || i(this._events.error) && !this._events.error.length)) {
        if ((t = arguments[1]) instanceof Error) throw t;
        var u = new Error('Uncaught, unspecified "error" event. (' + t + ")");
        throw u.context = t, u;
      }

      if (o(r = this._events[e])) return !1;
      if (n(r)) switch (arguments.length) {
        case 1:
          r.call(this);
          break;

        case 2:
          r.call(this, arguments[1]);
          break;

        case 3:
          r.call(this, arguments[1], arguments[2]);
          break;

        default:
          a = Array.prototype.slice.call(arguments, 1), r.apply(this, a);
      } else if (i(r)) for (a = Array.prototype.slice.call(arguments, 1), s = (f = r.slice()).length, h = 0; h < s; h++) {
        f[h].apply(this, a);
      }
      return !0;
    }, r.prototype.addListener = function (e, t) {
      var s;
      if (!n(t)) throw TypeError("listener must be a function");
      return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", e, n(t.listener) ? t.listener : t), this._events[e] ? i(this._events[e]) ? this._events[e].push(t) : this._events[e] = [this._events[e], t] : this._events[e] = t, i(this._events[e]) && !this._events[e].warned && (s = o(this._maxListeners) ? r.defaultMaxListeners : this._maxListeners) && s > 0 && this._events[e].length > s && (this._events[e].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[e].length), "function" == typeof console.trace && console.trace()), this;
    }, r.prototype.on = r.prototype.addListener, r.prototype.once = function (e, t) {
      if (!n(t)) throw TypeError("listener must be a function");
      var r = !1;

      function i() {
        this.removeListener(e, i), r || (r = !0, t.apply(this, arguments));
      }

      return i.listener = t, this.on(e, i), this;
    }, r.prototype.removeListener = function (e, t) {
      var r, o, s, a;
      if (!n(t)) throw TypeError("listener must be a function");
      if (!this._events || !this._events[e]) return this;
      if (s = (r = this._events[e]).length, o = -1, r === t || n(r.listener) && r.listener === t) delete this._events[e], this._events.removeListener && this.emit("removeListener", e, t);else if (i(r)) {
        for (a = s; a-- > 0;) {
          if (r[a] === t || r[a].listener && r[a].listener === t) {
            o = a;
            break;
          }
        }

        if (o < 0) return this;
        1 === r.length ? (r.length = 0, delete this._events[e]) : r.splice(o, 1), this._events.removeListener && this.emit("removeListener", e, t);
      }
      return this;
    }, r.prototype.removeAllListeners = function (e) {
      var t, r;
      if (!this._events) return this;
      if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[e] && delete this._events[e], this;

      if (0 === arguments.length) {
        for (t in this._events) {
          "removeListener" !== t && this.removeAllListeners(t);
        }

        return this.removeAllListeners("removeListener"), this._events = {}, this;
      }

      if (n(r = this._events[e])) this.removeListener(e, r);else if (r) for (; r.length;) {
        this.removeListener(e, r[r.length - 1]);
      }
      return delete this._events[e], this;
    }, r.prototype.listeners = function (e) {
      return this._events && this._events[e] ? n(this._events[e]) ? [this._events[e]] : this._events[e].slice() : [];
    }, r.prototype.listenerCount = function (e) {
      if (this._events) {
        var t = this._events[e];
        if (n(t)) return 1;
        if (t) return t.length;
      }

      return 0;
    }, r.listenerCount = function (e, t) {
      return e.listenerCount(t);
    };
  }, function (e, t, r) {
    (t = e.exports = r(21)).Stream = t, t.Readable = t, t.Writable = r(16), t.Duplex = r(5), t.Transform = r(25), t.PassThrough = r(46);
  }, function (e, t, r) {

    (function (t, n, i) {
      var o = r(9);

      function s(e) {
        var t = this;
        this.next = null, this.entry = null, this.finish = function () {
          !function (e, t, r) {
            var n = e.entry;
            e.entry = null;

            for (; n;) {
              var i = n.callback;
              t.pendingcb--, i(r), n = n.next;
            }

            t.corkedRequestsFree ? t.corkedRequestsFree.next = e : t.corkedRequestsFree = e;
          }(t, e);
        };
      }

      e.exports = y;
      var a,
          h = !t.browser && ["v0.10", "v0.9."].indexOf(t.version.slice(0, 5)) > -1 ? n : o.nextTick;
      y.WritableState = _;
      var f = r(7);
      f.inherits = r(4);

      var u = {
        deprecate: r(45)
      },
          c = r(22),
          l = r(10).Buffer,
          d = i.Uint8Array || function () {};

      var p,
          g = r(23);

      function m() {}

      function _(e, t) {
        a = a || r(5), e = e || {};
        var n = t instanceof a;
        this.objectMode = !!e.objectMode, n && (this.objectMode = this.objectMode || !!e.writableObjectMode);
        var i = e.highWaterMark,
            f = e.writableHighWaterMark,
            u = this.objectMode ? 16 : 16384;
        this.highWaterMark = i || 0 === i ? i : n && (f || 0 === f) ? f : u, this.highWaterMark = Math.floor(this.highWaterMark), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
        var c = !1 === e.decodeStrings;
        this.decodeStrings = !c, this.defaultEncoding = e.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function (e) {
          !function (e, t) {
            var r = e._writableState,
                n = r.sync,
                i = r.writecb;
            if (function (e) {
              e.writing = !1, e.writecb = null, e.length -= e.writelen, e.writelen = 0;
            }(r), t) !function (e, t, r, n, i) {
              --t.pendingcb, r ? (o.nextTick(i, n), o.nextTick(A, e, t), e._writableState.errorEmitted = !0, e.emit("error", n)) : (i(n), e._writableState.errorEmitted = !0, e.emit("error", n), A(e, t));
            }(e, r, n, t, i);else {
              var s = E(r);
              s || r.corked || r.bufferProcessing || !r.bufferedRequest || v(e, r), n ? h(w, e, r, s, i) : w(e, r, s, i);
            }
          }(t, e);
        }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new s(this);
      }

      function y(e) {
        if (a = a || r(5), !(p.call(y, this) || this instanceof a)) return new y(e);
        this._writableState = new _(e, this), this.writable = !0, e && ("function" == typeof e.write && (this._write = e.write), "function" == typeof e.writev && (this._writev = e.writev), "function" == typeof e.destroy && (this._destroy = e.destroy), "function" == typeof e.final && (this._final = e.final)), c.call(this);
      }

      function b(e, t, r, n, i, o, s) {
        t.writelen = n, t.writecb = s, t.writing = !0, t.sync = !0, r ? e._writev(i, t.onwrite) : e._write(i, o, t.onwrite), t.sync = !1;
      }

      function w(e, t, r, n) {
        r || function (e, t) {
          0 === t.length && t.needDrain && (t.needDrain = !1, e.emit("drain"));
        }(e, t), t.pendingcb--, n(), A(e, t);
      }

      function v(e, t) {
        t.bufferProcessing = !0;
        var r = t.bufferedRequest;

        if (e._writev && r && r.next) {
          var n = t.bufferedRequestCount,
              i = new Array(n),
              o = t.corkedRequestsFree;
          o.entry = r;

          for (var a = 0, h = !0; r;) {
            i[a] = r, r.isBuf || (h = !1), r = r.next, a += 1;
          }

          i.allBuffers = h, b(e, t, !0, t.length, i, "", o.finish), t.pendingcb++, t.lastBufferedRequest = null, o.next ? (t.corkedRequestsFree = o.next, o.next = null) : t.corkedRequestsFree = new s(t), t.bufferedRequestCount = 0;
        } else {
          for (; r;) {
            var f = r.chunk,
                u = r.encoding,
                c = r.callback;
            if (b(e, t, !1, t.objectMode ? 1 : f.length, f, u, c), r = r.next, t.bufferedRequestCount--, t.writing) break;
          }

          null === r && (t.lastBufferedRequest = null);
        }

        t.bufferedRequest = r, t.bufferProcessing = !1;
      }

      function E(e) {
        return e.ending && 0 === e.length && null === e.bufferedRequest && !e.finished && !e.writing;
      }

      function S(e, t) {
        e._final(function (r) {
          t.pendingcb--, r && e.emit("error", r), t.prefinished = !0, e.emit("prefinish"), A(e, t);
        });
      }

      function A(e, t) {
        var r = E(t);
        return r && (!function (e, t) {
          t.prefinished || t.finalCalled || ("function" == typeof e._final ? (t.pendingcb++, t.finalCalled = !0, o.nextTick(S, e, t)) : (t.prefinished = !0, e.emit("prefinish")));
        }(e, t), 0 === t.pendingcb && (t.finished = !0, e.emit("finish"))), r;
      }

      f.inherits(y, c), _.prototype.getBuffer = function () {
        for (var e = this.bufferedRequest, t = []; e;) {
          t.push(e), e = e.next;
        }

        return t;
      }, function () {
        try {
          Object.defineProperty(_.prototype, "buffer", {
            get: u.deprecate(function () {
              return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
          });
        } catch (e) {}
      }(), "function" == typeof Symbol && Symbol.hasInstance && "function" == typeof Function.prototype[Symbol.hasInstance] ? (p = Function.prototype[Symbol.hasInstance], Object.defineProperty(y, Symbol.hasInstance, {
        value: function value(e) {
          return !!p.call(this, e) || this === y && e && e._writableState instanceof _;
        }
      })) : p = function p(e) {
        return e instanceof this;
      }, y.prototype.pipe = function () {
        this.emit("error", new Error("Cannot pipe, not readable"));
      }, y.prototype.write = function (e, t, r) {
        var n,
            i = this._writableState,
            s = !1,
            a = !i.objectMode && (n = e, l.isBuffer(n) || n instanceof d);
        return a && !l.isBuffer(e) && (e = function (e) {
          return l.from(e);
        }(e)), "function" == typeof t && (r = t, t = null), a ? t = "buffer" : t || (t = i.defaultEncoding), "function" != typeof r && (r = m), i.ended ? function (e, t) {
          var r = new Error("write after end");
          e.emit("error", r), o.nextTick(t, r);
        }(this, r) : (a || function (e, t, r, n) {
          var i = !0,
              s = !1;
          return null === r ? s = new TypeError("May not write null values to stream") : "string" == typeof r || void 0 === r || t.objectMode || (s = new TypeError("Invalid non-string/buffer chunk")), s && (e.emit("error", s), o.nextTick(n, s), i = !1), i;
        }(this, i, e, r)) && (i.pendingcb++, s = function (e, t, r, n, i, o) {
          if (!r) {
            var s = function (e, t, r) {
              e.objectMode || !1 === e.decodeStrings || "string" != typeof t || (t = l.from(t, r));
              return t;
            }(t, n, i);

            n !== s && (r = !0, i = "buffer", n = s);
          }

          var a = t.objectMode ? 1 : n.length;
          t.length += a;
          var h = t.length < t.highWaterMark;
          h || (t.needDrain = !0);

          if (t.writing || t.corked) {
            var f = t.lastBufferedRequest;
            t.lastBufferedRequest = {
              chunk: n,
              encoding: i,
              isBuf: r,
              callback: o,
              next: null
            }, f ? f.next = t.lastBufferedRequest : t.bufferedRequest = t.lastBufferedRequest, t.bufferedRequestCount += 1;
          } else b(e, t, !1, a, n, i, o);

          return h;
        }(this, i, a, e, t, r)), s;
      }, y.prototype.cork = function () {
        this._writableState.corked++;
      }, y.prototype.uncork = function () {
        var e = this._writableState;
        e.corked && (e.corked--, e.writing || e.corked || e.finished || e.bufferProcessing || !e.bufferedRequest || v(this, e));
      }, y.prototype.setDefaultEncoding = function (e) {
        if ("string" == typeof e && (e = e.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + e);
        return this._writableState.defaultEncoding = e, this;
      }, Object.defineProperty(y.prototype, "writableHighWaterMark", {
        enumerable: !1,
        get: function get() {
          return this._writableState.highWaterMark;
        }
      }), y.prototype._write = function (e, t, r) {
        r(new Error("_write() is not implemented"));
      }, y.prototype._writev = null, y.prototype.end = function (e, t, r) {
        var n = this._writableState;
        "function" == typeof e ? (r = e, e = null, t = null) : "function" == typeof t && (r = t, t = null), null != e && this.write(e, t), n.corked && (n.corked = 1, this.uncork()), n.ending || n.finished || function (e, t, r) {
          t.ending = !0, A(e, t), r && (t.finished ? o.nextTick(r) : e.once("finish", r));
          t.ended = !0, e.writable = !1;
        }(this, n, r);
      }, Object.defineProperty(y.prototype, "destroyed", {
        get: function get() {
          return void 0 !== this._writableState && this._writableState.destroyed;
        },
        set: function set(e) {
          this._writableState && (this._writableState.destroyed = e);
        }
      }), y.prototype.destroy = g.destroy, y.prototype._undestroy = g.undestroy, y.prototype._destroy = function (e, t) {
        this.end(), t(e);
      };
    }).call(this, r(3), r(43).setImmediate, r(2));
  }, function (e, t) {
    e.exports = {
      CRAM_FLAG_PRESERVE_QUAL_SCORES: 1,
      CRAM_FLAG_DETACHED: 2,
      CRAM_FLAG_MATE_DOWNSTREAM: 4,
      CRAM_FLAG_NO_SEQ: 8,
      CRAM_FLAG_MASK: 15,
      CRAM_M_REVERSE: 1,
      CRAM_M_UNMAP: 2,
      BAM_FPAIRED: 1,
      BAM_FPROPER_PAIR: 2,
      BAM_FUNMAP: 4,
      BAM_FMUNMAP: 8,
      BAM_FREVERSE: 16,
      BAM_FMREVERSE: 32,
      BAM_FREAD1: 64,
      BAM_FREAD2: 128,
      BAM_FSECONDARY: 256,
      BAM_FQCFAIL: 512,
      BAM_FDUP: 1024,
      BAM_FSUPPLEMENTARY: 2048,
      BAM_CMATCH: 0,
      BAM_CINS: 1,
      BAM_CDEL: 2,
      BAM_CREF_SKIP: 3,
      BAM_CSOFT_CLIP: 4,
      BAM_CHARD_CLIP: 5,
      BAM_CPAD: 6,
      BAM_CEQUAL: 7,
      BAM_CDIFF: 8,
      BAM_CBACK: 9,
      BAM_CIGAR_STR: "MIDNSHP:XB",
      BAM_CIGAR_SHIFT: 4,
      BAM_CIGAR_MASK: 15,
      BAM_CIGAR_TYPE: 246183
    };
  }, function (e, t, r) {
    var n = r(36);
    e.exports = n;
  }, function (e, t) {
    var r = {}.toString;

    e.exports = Array.isArray || function (e) {
      return "[object Array]" == r.call(e);
    };
  }, function (e, t, r) {

    (function (e) {
      var n = r(1).Buffer,
          i = r(39).Transform,
          o = r(51),
          s = r(27),
          a = r(26).ok,
          h = r(1).kMaxLength,
          f = "Cannot create final Buffer. It would be larger than 0x" + h.toString(16) + " bytes";
      o.Z_MIN_WINDOWBITS = 8, o.Z_MAX_WINDOWBITS = 15, o.Z_DEFAULT_WINDOWBITS = 15, o.Z_MIN_CHUNK = 64, o.Z_MAX_CHUNK = 1 / 0, o.Z_DEFAULT_CHUNK = 16384, o.Z_MIN_MEMLEVEL = 1, o.Z_MAX_MEMLEVEL = 9, o.Z_DEFAULT_MEMLEVEL = 8, o.Z_MIN_LEVEL = -1, o.Z_MAX_LEVEL = 9, o.Z_DEFAULT_LEVEL = o.Z_DEFAULT_COMPRESSION;

      for (var u = Object.keys(o), c = 0; c < u.length; c++) {
        var l = u[c];
        l.match(/^Z/) && Object.defineProperty(t, l, {
          enumerable: !0,
          value: o[l],
          writable: !1
        });
      }

      for (var d = {
        Z_OK: o.Z_OK,
        Z_STREAM_END: o.Z_STREAM_END,
        Z_NEED_DICT: o.Z_NEED_DICT,
        Z_ERRNO: o.Z_ERRNO,
        Z_STREAM_ERROR: o.Z_STREAM_ERROR,
        Z_DATA_ERROR: o.Z_DATA_ERROR,
        Z_MEM_ERROR: o.Z_MEM_ERROR,
        Z_BUF_ERROR: o.Z_BUF_ERROR,
        Z_VERSION_ERROR: o.Z_VERSION_ERROR
      }, p = Object.keys(d), g = 0; g < p.length; g++) {
        var m = p[g];
        d[d[m]] = m;
      }

      function _(e, t, r) {
        var i = [],
            o = 0;

        function s() {
          for (var t; null !== (t = e.read());) {
            i.push(t), o += t.length;
          }

          e.once("readable", s);
        }

        function a() {
          var t,
              s = null;
          o >= h ? s = new RangeError(f) : t = n.concat(i, o), i = [], e.close(), r(s, t);
        }

        e.on("error", function (t) {
          e.removeListener("end", a), e.removeListener("readable", s), r(t);
        }), e.on("end", a), e.end(t), s();
      }

      function y(e, t) {
        if ("string" == typeof t && (t = n.from(t)), !n.isBuffer(t)) throw new TypeError("Not a string or buffer");
        var r = e._finishFlushFlag;
        return e._processChunk(t, r);
      }

      function b(e) {
        if (!(this instanceof b)) return new b(e);
        C.call(this, e, o.DEFLATE);
      }

      function w(e) {
        if (!(this instanceof w)) return new w(e);
        C.call(this, e, o.INFLATE);
      }

      function v(e) {
        if (!(this instanceof v)) return new v(e);
        C.call(this, e, o.GZIP);
      }

      function E(e) {
        if (!(this instanceof E)) return new E(e);
        C.call(this, e, o.GUNZIP);
      }

      function S(e) {
        if (!(this instanceof S)) return new S(e);
        C.call(this, e, o.DEFLATERAW);
      }

      function A(e) {
        if (!(this instanceof A)) return new A(e);
        C.call(this, e, o.INFLATERAW);
      }

      function k(e) {
        if (!(this instanceof k)) return new k(e);
        C.call(this, e, o.UNZIP);
      }

      function x(e) {
        return e === o.Z_NO_FLUSH || e === o.Z_PARTIAL_FLUSH || e === o.Z_SYNC_FLUSH || e === o.Z_FULL_FLUSH || e === o.Z_FINISH || e === o.Z_BLOCK;
      }

      function C(e, r) {
        var s = this;
        if (this._opts = e = e || {}, this._chunkSize = e.chunkSize || t.Z_DEFAULT_CHUNK, i.call(this, e), e.flush && !x(e.flush)) throw new Error("Invalid flush flag: " + e.flush);
        if (e.finishFlush && !x(e.finishFlush)) throw new Error("Invalid flush flag: " + e.finishFlush);
        if (this._flushFlag = e.flush || o.Z_NO_FLUSH, this._finishFlushFlag = void 0 !== e.finishFlush ? e.finishFlush : o.Z_FINISH, e.chunkSize && (e.chunkSize < t.Z_MIN_CHUNK || e.chunkSize > t.Z_MAX_CHUNK)) throw new Error("Invalid chunk size: " + e.chunkSize);
        if (e.windowBits && (e.windowBits < t.Z_MIN_WINDOWBITS || e.windowBits > t.Z_MAX_WINDOWBITS)) throw new Error("Invalid windowBits: " + e.windowBits);
        if (e.level && (e.level < t.Z_MIN_LEVEL || e.level > t.Z_MAX_LEVEL)) throw new Error("Invalid compression level: " + e.level);
        if (e.memLevel && (e.memLevel < t.Z_MIN_MEMLEVEL || e.memLevel > t.Z_MAX_MEMLEVEL)) throw new Error("Invalid memLevel: " + e.memLevel);
        if (e.strategy && e.strategy != t.Z_FILTERED && e.strategy != t.Z_HUFFMAN_ONLY && e.strategy != t.Z_RLE && e.strategy != t.Z_FIXED && e.strategy != t.Z_DEFAULT_STRATEGY) throw new Error("Invalid strategy: " + e.strategy);
        if (e.dictionary && !n.isBuffer(e.dictionary)) throw new Error("Invalid dictionary: it should be a Buffer instance");
        this._handle = new o.Zlib(r);
        var a = this;
        this._hadError = !1, this._handle.onerror = function (e, r) {
          R(a), a._hadError = !0;
          var n = new Error(e);
          n.errno = r, n.code = t.codes[r], a.emit("error", n);
        };
        var h = t.Z_DEFAULT_COMPRESSION;
        "number" == typeof e.level && (h = e.level);
        var f = t.Z_DEFAULT_STRATEGY;
        "number" == typeof e.strategy && (f = e.strategy), this._handle.init(e.windowBits || t.Z_DEFAULT_WINDOWBITS, h, e.memLevel || t.Z_DEFAULT_MEMLEVEL, f, e.dictionary), this._buffer = n.allocUnsafe(this._chunkSize), this._offset = 0, this._level = h, this._strategy = f, this.once("end", this.close), Object.defineProperty(this, "_closed", {
          get: function get() {
            return !s._handle;
          },
          configurable: !0,
          enumerable: !0
        });
      }

      function R(t, r) {
        r && e.nextTick(r), t._handle && (t._handle.close(), t._handle = null);
      }

      function T(e) {
        e.emit("close");
      }

      Object.defineProperty(t, "codes", {
        enumerable: !0,
        value: Object.freeze(d),
        writable: !1
      }), t.Deflate = b, t.Inflate = w, t.Gzip = v, t.Gunzip = E, t.DeflateRaw = S, t.InflateRaw = A, t.Unzip = k, t.createDeflate = function (e) {
        return new b(e);
      }, t.createInflate = function (e) {
        return new w(e);
      }, t.createDeflateRaw = function (e) {
        return new S(e);
      }, t.createInflateRaw = function (e) {
        return new A(e);
      }, t.createGzip = function (e) {
        return new v(e);
      }, t.createGunzip = function (e) {
        return new E(e);
      }, t.createUnzip = function (e) {
        return new k(e);
      }, t.deflate = function (e, t, r) {
        return "function" == typeof t && (r = t, t = {}), _(new b(t), e, r);
      }, t.deflateSync = function (e, t) {
        return y(new b(t), e);
      }, t.gzip = function (e, t, r) {
        return "function" == typeof t && (r = t, t = {}), _(new v(t), e, r);
      }, t.gzipSync = function (e, t) {
        return y(new v(t), e);
      }, t.deflateRaw = function (e, t, r) {
        return "function" == typeof t && (r = t, t = {}), _(new S(t), e, r);
      }, t.deflateRawSync = function (e, t) {
        return y(new S(t), e);
      }, t.unzip = function (e, t, r) {
        return "function" == typeof t && (r = t, t = {}), _(new k(t), e, r);
      }, t.unzipSync = function (e, t) {
        return y(new k(t), e);
      }, t.inflate = function (e, t, r) {
        return "function" == typeof t && (r = t, t = {}), _(new w(t), e, r);
      }, t.inflateSync = function (e, t) {
        return y(new w(t), e);
      }, t.gunzip = function (e, t, r) {
        return "function" == typeof t && (r = t, t = {}), _(new E(t), e, r);
      }, t.gunzipSync = function (e, t) {
        return y(new E(t), e);
      }, t.inflateRaw = function (e, t, r) {
        return "function" == typeof t && (r = t, t = {}), _(new A(t), e, r);
      }, t.inflateRawSync = function (e, t) {
        return y(new A(t), e);
      }, s.inherits(C, i), C.prototype.params = function (r, n, i) {
        if (r < t.Z_MIN_LEVEL || r > t.Z_MAX_LEVEL) throw new RangeError("Invalid compression level: " + r);
        if (n != t.Z_FILTERED && n != t.Z_HUFFMAN_ONLY && n != t.Z_RLE && n != t.Z_FIXED && n != t.Z_DEFAULT_STRATEGY) throw new TypeError("Invalid strategy: " + n);

        if (this._level !== r || this._strategy !== n) {
          var s = this;
          this.flush(o.Z_SYNC_FLUSH, function () {
            a(s._handle, "zlib binding closed"), s._handle.params(r, n), s._hadError || (s._level = r, s._strategy = n, i && i());
          });
        } else e.nextTick(i);
      }, C.prototype.reset = function () {
        return a(this._handle, "zlib binding closed"), this._handle.reset();
      }, C.prototype._flush = function (e) {
        this._transform(n.alloc(0), "", e);
      }, C.prototype.flush = function (t, r) {
        var i = this,
            s = this._writableState;
        ("function" == typeof t || void 0 === t && !r) && (r = t, t = o.Z_FULL_FLUSH), s.ended ? r && e.nextTick(r) : s.ending ? r && this.once("end", r) : s.needDrain ? r && this.once("drain", function () {
          return i.flush(t, r);
        }) : (this._flushFlag = t, this.write(n.alloc(0), "", r));
      }, C.prototype.close = function (t) {
        R(this, t), e.nextTick(T, this);
      }, C.prototype._transform = function (e, t, r) {
        var i,
            s = this._writableState,
            a = (s.ending || s.ended) && (!e || s.length === e.length);
        return null === e || n.isBuffer(e) ? this._handle ? (a ? i = this._finishFlushFlag : (i = this._flushFlag, e.length >= s.length && (this._flushFlag = this._opts.flush || o.Z_NO_FLUSH)), void this._processChunk(e, i, r)) : r(new Error("zlib binding closed")) : r(new Error("invalid input"));
      }, C.prototype._processChunk = function (e, t, r) {
        var i = e && e.length,
            o = this._chunkSize - this._offset,
            s = 0,
            u = this,
            c = "function" == typeof r;

        if (!c) {
          var l,
              d = [],
              p = 0;
          this.on("error", function (e) {
            l = e;
          }), a(this._handle, "zlib binding closed");

          do {
            var g = this._handle.writeSync(t, e, s, i, this._buffer, this._offset, o);
          } while (!this._hadError && y(g[0], g[1]));

          if (this._hadError) throw l;
          if (p >= h) throw R(this), new RangeError(f);
          var m = n.concat(d, p);
          return R(this), m;
        }

        a(this._handle, "zlib binding closed");

        var _ = this._handle.write(t, e, s, i, this._buffer, this._offset, o);

        function y(h, f) {
          if (this && (this.buffer = null, this.callback = null), !u._hadError) {
            var l = o - f;

            if (a(l >= 0, "have should not go down"), l > 0) {
              var g = u._buffer.slice(u._offset, u._offset + l);

              u._offset += l, c ? u.push(g) : (d.push(g), p += g.length);
            }

            if ((0 === f || u._offset >= u._chunkSize) && (o = u._chunkSize, u._offset = 0, u._buffer = n.allocUnsafe(u._chunkSize)), 0 === f) {
              if (s += i - h, i = h, !c) return !0;

              var m = u._handle.write(t, e, s, i, u._buffer, u._offset, u._chunkSize);

              return m.callback = y, void (m.buffer = e);
            }

            if (!c) return !1;
            r();
          }
        }

        _.buffer = e, _.callback = y;
      }, s.inherits(b, C), s.inherits(w, C), s.inherits(v, C), s.inherits(E, C), s.inherits(S, C), s.inherits(A, C), s.inherits(k, C);
    }).call(this, r(3));
  }, function (e, t, r) {

    (function (t, n) {
      var i = r(9);
      e.exports = b;
      var o,
          s = r(19);
      b.ReadableState = y;
      r(14).EventEmitter;

      var a = function a(e, t) {
        return e.listeners(t).length;
      },
          h = r(22),
          f = r(10).Buffer,
          u = t.Uint8Array || function () {};

      var c = r(7);
      c.inherits = r(4);
      var l = r(40),
          d = void 0;
      d = l && l.debuglog ? l.debuglog("stream") : function () {};
      var p,
          g = r(41),
          m = r(23);
      c.inherits(b, h);
      var _ = ["error", "close", "destroy", "pause", "resume"];

      function y(e, t) {
        e = e || {};
        var n = t instanceof (o = o || r(5));
        this.objectMode = !!e.objectMode, n && (this.objectMode = this.objectMode || !!e.readableObjectMode);
        var i = e.highWaterMark,
            s = e.readableHighWaterMark,
            a = this.objectMode ? 16 : 16384;
        this.highWaterMark = i || 0 === i ? i : n && (s || 0 === s) ? s : a, this.highWaterMark = Math.floor(this.highWaterMark), this.buffer = new g(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.destroyed = !1, this.defaultEncoding = e.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, e.encoding && (p || (p = r(24).StringDecoder), this.decoder = new p(e.encoding), this.encoding = e.encoding);
      }

      function b(e) {
        if (o = o || r(5), !(this instanceof b)) return new b(e);
        this._readableState = new y(e, this), this.readable = !0, e && ("function" == typeof e.read && (this._read = e.read), "function" == typeof e.destroy && (this._destroy = e.destroy)), h.call(this);
      }

      function w(e, t, r, n, i) {
        var o,
            s = e._readableState;
        null === t ? (s.reading = !1, function (e, t) {
          if (t.ended) return;

          if (t.decoder) {
            var r = t.decoder.end();
            r && r.length && (t.buffer.push(r), t.length += t.objectMode ? 1 : r.length);
          }

          t.ended = !0, A(e);
        }(e, s)) : (i || (o = function (e, t) {
          var r;
          n = t, f.isBuffer(n) || n instanceof u || "string" == typeof t || void 0 === t || e.objectMode || (r = new TypeError("Invalid non-string/buffer chunk"));
          var n;
          return r;
        }(s, t)), o ? e.emit("error", o) : s.objectMode || t && t.length > 0 ? ("string" == typeof t || s.objectMode || Object.getPrototypeOf(t) === f.prototype || (t = function (e) {
          return f.from(e);
        }(t)), n ? s.endEmitted ? e.emit("error", new Error("stream.unshift() after end event")) : v(e, s, t, !0) : s.ended ? e.emit("error", new Error("stream.push() after EOF")) : (s.reading = !1, s.decoder && !r ? (t = s.decoder.write(t), s.objectMode || 0 !== t.length ? v(e, s, t, !1) : x(e, s)) : v(e, s, t, !1))) : n || (s.reading = !1));
        return function (e) {
          return !e.ended && (e.needReadable || e.length < e.highWaterMark || 0 === e.length);
        }(s);
      }

      function v(e, t, r, n) {
        t.flowing && 0 === t.length && !t.sync ? (e.emit("data", r), e.read(0)) : (t.length += t.objectMode ? 1 : r.length, n ? t.buffer.unshift(r) : t.buffer.push(r), t.needReadable && A(e)), x(e, t);
      }

      Object.defineProperty(b.prototype, "destroyed", {
        get: function get() {
          return void 0 !== this._readableState && this._readableState.destroyed;
        },
        set: function set(e) {
          this._readableState && (this._readableState.destroyed = e);
        }
      }), b.prototype.destroy = m.destroy, b.prototype._undestroy = m.undestroy, b.prototype._destroy = function (e, t) {
        this.push(null), t(e);
      }, b.prototype.push = function (e, t) {
        var r,
            n = this._readableState;
        return n.objectMode ? r = !0 : "string" == typeof e && ((t = t || n.defaultEncoding) !== n.encoding && (e = f.from(e, t), t = ""), r = !0), w(this, e, t, !1, r);
      }, b.prototype.unshift = function (e) {
        return w(this, e, null, !0, !1);
      }, b.prototype.isPaused = function () {
        return !1 === this._readableState.flowing;
      }, b.prototype.setEncoding = function (e) {
        return p || (p = r(24).StringDecoder), this._readableState.decoder = new p(e), this._readableState.encoding = e, this;
      };
      var E = 8388608;

      function S(e, t) {
        return e <= 0 || 0 === t.length && t.ended ? 0 : t.objectMode ? 1 : e != e ? t.flowing && t.length ? t.buffer.head.data.length : t.length : (e > t.highWaterMark && (t.highWaterMark = function (e) {
          return e >= E ? e = E : (e--, e |= e >>> 1, e |= e >>> 2, e |= e >>> 4, e |= e >>> 8, e |= e >>> 16, e++), e;
        }(e)), e <= t.length ? e : t.ended ? t.length : (t.needReadable = !0, 0));
      }

      function A(e) {
        var t = e._readableState;
        t.needReadable = !1, t.emittedReadable || (d("emitReadable", t.flowing), t.emittedReadable = !0, t.sync ? i.nextTick(k, e) : k(e));
      }

      function k(e) {
        d("emit readable"), e.emit("readable"), I(e);
      }

      function x(e, t) {
        t.readingMore || (t.readingMore = !0, i.nextTick(C, e, t));
      }

      function C(e, t) {
        for (var r = t.length; !t.reading && !t.flowing && !t.ended && t.length < t.highWaterMark && (d("maybeReadMore read 0"), e.read(0), r !== t.length);) {
          r = t.length;
        }

        t.readingMore = !1;
      }

      function R(e) {
        d("readable nexttick read 0"), e.read(0);
      }

      function T(e, t) {
        t.reading || (d("resume read 0"), e.read(0)), t.resumeScheduled = !1, t.awaitDrain = 0, e.emit("resume"), I(e), t.flowing && !t.reading && e.read(0);
      }

      function I(e) {
        var t = e._readableState;

        for (d("flow", t.flowing); t.flowing && null !== e.read();) {
        }
      }

      function B(e, t) {
        return 0 === t.length ? null : (t.objectMode ? r = t.buffer.shift() : !e || e >= t.length ? (r = t.decoder ? t.buffer.join("") : 1 === t.buffer.length ? t.buffer.head.data : t.buffer.concat(t.length), t.buffer.clear()) : r = function (e, t, r) {
          var n;
          e < t.head.data.length ? (n = t.head.data.slice(0, e), t.head.data = t.head.data.slice(e)) : n = e === t.head.data.length ? t.shift() : r ? function (e, t) {
            var r = t.head,
                n = 1,
                i = r.data;
            e -= i.length;

            for (; r = r.next;) {
              var o = r.data,
                  s = e > o.length ? o.length : e;

              if (s === o.length ? i += o : i += o.slice(0, e), 0 === (e -= s)) {
                s === o.length ? (++n, r.next ? t.head = r.next : t.head = t.tail = null) : (t.head = r, r.data = o.slice(s));
                break;
              }

              ++n;
            }

            return t.length -= n, i;
          }(e, t) : function (e, t) {
            var r = f.allocUnsafe(e),
                n = t.head,
                i = 1;
            n.data.copy(r), e -= n.data.length;

            for (; n = n.next;) {
              var o = n.data,
                  s = e > o.length ? o.length : e;

              if (o.copy(r, r.length - e, 0, s), 0 === (e -= s)) {
                s === o.length ? (++i, n.next ? t.head = n.next : t.head = t.tail = null) : (t.head = n, n.data = o.slice(s));
                break;
              }

              ++i;
            }

            return t.length -= i, r;
          }(e, t);
          return n;
        }(e, t.buffer, t.decoder), r);
        var r;
      }

      function L(e) {
        var t = e._readableState;
        if (t.length > 0) throw new Error('"endReadable()" called on non-empty stream');
        t.endEmitted || (t.ended = !0, i.nextTick(N, t, e));
      }

      function N(e, t) {
        e.endEmitted || 0 !== e.length || (e.endEmitted = !0, t.readable = !1, t.emit("end"));
      }

      function F(e, t) {
        for (var r = 0, n = e.length; r < n; r++) {
          if (e[r] === t) return r;
        }

        return -1;
      }

      b.prototype.read = function (e) {
        d("read", e), e = parseInt(e, 10);
        var t = this._readableState,
            r = e;
        if (0 !== e && (t.emittedReadable = !1), 0 === e && t.needReadable && (t.length >= t.highWaterMark || t.ended)) return d("read: emitReadable", t.length, t.ended), 0 === t.length && t.ended ? L(this) : A(this), null;
        if (0 === (e = S(e, t)) && t.ended) return 0 === t.length && L(this), null;
        var n,
            i = t.needReadable;
        return d("need readable", i), (0 === t.length || t.length - e < t.highWaterMark) && d("length less than watermark", i = !0), t.ended || t.reading ? d("reading or ended", i = !1) : i && (d("do read"), t.reading = !0, t.sync = !0, 0 === t.length && (t.needReadable = !0), this._read(t.highWaterMark), t.sync = !1, t.reading || (e = S(r, t))), null === (n = e > 0 ? B(e, t) : null) ? (t.needReadable = !0, e = 0) : t.length -= e, 0 === t.length && (t.ended || (t.needReadable = !0), r !== e && t.ended && L(this)), null !== n && this.emit("data", n), n;
      }, b.prototype._read = function (e) {
        this.emit("error", new Error("_read() is not implemented"));
      }, b.prototype.pipe = function (e, t) {
        var r = this,
            o = this._readableState;

        switch (o.pipesCount) {
          case 0:
            o.pipes = e;
            break;

          case 1:
            o.pipes = [o.pipes, e];
            break;

          default:
            o.pipes.push(e);
        }

        o.pipesCount += 1, d("pipe count=%d opts=%j", o.pipesCount, t);
        var h = (!t || !1 !== t.end) && e !== n.stdout && e !== n.stderr ? u : b;

        function f(t, n) {
          d("onunpipe"), t === r && n && !1 === n.hasUnpiped && (n.hasUnpiped = !0, d("cleanup"), e.removeListener("close", _), e.removeListener("finish", y), e.removeListener("drain", c), e.removeListener("error", m), e.removeListener("unpipe", f), r.removeListener("end", u), r.removeListener("end", b), r.removeListener("data", g), l = !0, !o.awaitDrain || e._writableState && !e._writableState.needDrain || c());
        }

        function u() {
          d("onend"), e.end();
        }

        o.endEmitted ? i.nextTick(h) : r.once("end", h), e.on("unpipe", f);

        var c = function (e) {
          return function () {
            var t = e._readableState;
            d("pipeOnDrain", t.awaitDrain), t.awaitDrain && t.awaitDrain--, 0 === t.awaitDrain && a(e, "data") && (t.flowing = !0, I(e));
          };
        }(r);

        e.on("drain", c);
        var l = !1;
        var p = !1;

        function g(t) {
          d("ondata"), p = !1, !1 !== e.write(t) || p || ((1 === o.pipesCount && o.pipes === e || o.pipesCount > 1 && -1 !== F(o.pipes, e)) && !l && (d("false write response, pause", r._readableState.awaitDrain), r._readableState.awaitDrain++, p = !0), r.pause());
        }

        function m(t) {
          d("onerror", t), b(), e.removeListener("error", m), 0 === a(e, "error") && e.emit("error", t);
        }

        function _() {
          e.removeListener("finish", y), b();
        }

        function y() {
          d("onfinish"), e.removeListener("close", _), b();
        }

        function b() {
          d("unpipe"), r.unpipe(e);
        }

        return r.on("data", g), function (e, t, r) {
          if ("function" == typeof e.prependListener) return e.prependListener(t, r);
          e._events && e._events[t] ? s(e._events[t]) ? e._events[t].unshift(r) : e._events[t] = [r, e._events[t]] : e.on(t, r);
        }(e, "error", m), e.once("close", _), e.once("finish", y), e.emit("pipe", r), o.flowing || (d("pipe resume"), r.resume()), e;
      }, b.prototype.unpipe = function (e) {
        var t = this._readableState,
            r = {
          hasUnpiped: !1
        };
        if (0 === t.pipesCount) return this;
        if (1 === t.pipesCount) return e && e !== t.pipes ? this : (e || (e = t.pipes), t.pipes = null, t.pipesCount = 0, t.flowing = !1, e && e.emit("unpipe", this, r), this);

        if (!e) {
          var n = t.pipes,
              i = t.pipesCount;
          t.pipes = null, t.pipesCount = 0, t.flowing = !1;

          for (var o = 0; o < i; o++) {
            n[o].emit("unpipe", this, r);
          }

          return this;
        }

        var s = F(t.pipes, e);
        return -1 === s ? this : (t.pipes.splice(s, 1), t.pipesCount -= 1, 1 === t.pipesCount && (t.pipes = t.pipes[0]), e.emit("unpipe", this, r), this);
      }, b.prototype.on = function (e, t) {
        var r = h.prototype.on.call(this, e, t);
        if ("data" === e) !1 !== this._readableState.flowing && this.resume();else if ("readable" === e) {
          var n = this._readableState;
          n.endEmitted || n.readableListening || (n.readableListening = n.needReadable = !0, n.emittedReadable = !1, n.reading ? n.length && A(this) : i.nextTick(R, this));
        }
        return r;
      }, b.prototype.addListener = b.prototype.on, b.prototype.resume = function () {
        var e = this._readableState;
        return e.flowing || (d("resume"), e.flowing = !0, function (e, t) {
          t.resumeScheduled || (t.resumeScheduled = !0, i.nextTick(T, e, t));
        }(this, e)), this;
      }, b.prototype.pause = function () {
        return d("call pause flowing=%j", this._readableState.flowing), !1 !== this._readableState.flowing && (d("pause"), this._readableState.flowing = !1, this.emit("pause")), this;
      }, b.prototype.wrap = function (e) {
        var t = this,
            r = this._readableState,
            n = !1;

        for (var i in e.on("end", function () {
          if (d("wrapped end"), r.decoder && !r.ended) {
            var e = r.decoder.end();
            e && e.length && t.push(e);
          }

          t.push(null);
        }), e.on("data", function (i) {
          (d("wrapped data"), r.decoder && (i = r.decoder.write(i)), r.objectMode && null == i) || (r.objectMode || i && i.length) && (t.push(i) || (n = !0, e.pause()));
        }), e) {
          void 0 === this[i] && "function" == typeof e[i] && (this[i] = function (t) {
            return function () {
              return e[t].apply(e, arguments);
            };
          }(i));
        }

        for (var o = 0; o < _.length; o++) {
          e.on(_[o], this.emit.bind(this, _[o]));
        }

        return this._read = function (t) {
          d("wrapped _read", t), n && (n = !1, e.resume());
        }, this;
      }, Object.defineProperty(b.prototype, "readableHighWaterMark", {
        enumerable: !1,
        get: function get() {
          return this._readableState.highWaterMark;
        }
      }), b._fromList = B;
    }).call(this, r(2), r(3));
  }, function (e, t, r) {
    e.exports = r(14).EventEmitter;
  }, function (e, t, r) {

    var n = r(9);

    function i(e, t) {
      e.emit("error", t);
    }

    e.exports = {
      destroy: function destroy(e, t) {
        var r = this,
            o = this._readableState && this._readableState.destroyed,
            s = this._writableState && this._writableState.destroyed;
        return o || s ? (t ? t(e) : !e || this._writableState && this._writableState.errorEmitted || n.nextTick(i, this, e), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(e || null, function (e) {
          !t && e ? (n.nextTick(i, r, e), r._writableState && (r._writableState.errorEmitted = !0)) : t && t(e);
        }), this);
      },
      undestroy: function undestroy() {
        this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
      }
    };
  }, function (e, t, r) {

    var n = r(10).Buffer,
        i = n.isEncoding || function (e) {
      switch ((e = "" + e) && e.toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
        case "raw":
          return !0;

        default:
          return !1;
      }
    };

    function o(e) {
      var t;

      switch (this.encoding = function (e) {
        var t = function (e) {
          if (!e) return "utf8";

          for (var t;;) {
            switch (e) {
              case "utf8":
              case "utf-8":
                return "utf8";

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return "utf16le";

              case "latin1":
              case "binary":
                return "latin1";

              case "base64":
              case "ascii":
              case "hex":
                return e;

              default:
                if (t) return;
                e = ("" + e).toLowerCase(), t = !0;
            }
          }
        }(e);

        if ("string" != typeof t && (n.isEncoding === i || !i(e))) throw new Error("Unknown encoding: " + e);
        return t || e;
      }(e), this.encoding) {
        case "utf16le":
          this.text = h, this.end = f, t = 4;
          break;

        case "utf8":
          this.fillLast = a, t = 4;
          break;

        case "base64":
          this.text = u, this.end = c, t = 3;
          break;

        default:
          return this.write = l, void (this.end = d);
      }

      this.lastNeed = 0, this.lastTotal = 0, this.lastChar = n.allocUnsafe(t);
    }

    function s(e) {
      return e <= 127 ? 0 : e >> 5 == 6 ? 2 : e >> 4 == 14 ? 3 : e >> 3 == 30 ? 4 : e >> 6 == 2 ? -1 : -2;
    }

    function a(e) {
      var t = this.lastTotal - this.lastNeed,
          r = function (e, t, r) {
        if (128 != (192 & t[0])) return e.lastNeed = 0, "�";

        if (e.lastNeed > 1 && t.length > 1) {
          if (128 != (192 & t[1])) return e.lastNeed = 1, "�";
          if (e.lastNeed > 2 && t.length > 2 && 128 != (192 & t[2])) return e.lastNeed = 2, "�";
        }
      }(this, e);

      return void 0 !== r ? r : this.lastNeed <= e.length ? (e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal)) : (e.copy(this.lastChar, t, 0, e.length), void (this.lastNeed -= e.length));
    }

    function h(e, t) {
      if ((e.length - t) % 2 == 0) {
        var r = e.toString("utf16le", t);

        if (r) {
          var n = r.charCodeAt(r.length - 1);
          if (n >= 55296 && n <= 56319) return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);
        }

        return r;
      }

      return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
    }

    function f(e) {
      var t = e && e.length ? this.write(e) : "";

      if (this.lastNeed) {
        var r = this.lastTotal - this.lastNeed;
        return t + this.lastChar.toString("utf16le", 0, r);
      }

      return t;
    }

    function u(e, t) {
      var r = (e.length - t) % 3;
      return 0 === r ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, 1 === r ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
    }

    function c(e) {
      var t = e && e.length ? this.write(e) : "";
      return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
    }

    function l(e) {
      return e.toString(this.encoding);
    }

    function d(e) {
      return e && e.length ? this.write(e) : "";
    }

    t.StringDecoder = o, o.prototype.write = function (e) {
      if (0 === e.length) return "";
      var t, r;

      if (this.lastNeed) {
        if (void 0 === (t = this.fillLast(e))) return "";
        r = this.lastNeed, this.lastNeed = 0;
      } else r = 0;

      return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
    }, o.prototype.end = function (e) {
      var t = e && e.length ? this.write(e) : "";
      return this.lastNeed ? t + "�" : t;
    }, o.prototype.text = function (e, t) {
      var r = function (e, t, r) {
        var n = t.length - 1;
        if (n < r) return 0;
        var i = s(t[n]);
        if (i >= 0) return i > 0 && (e.lastNeed = i - 1), i;
        if (--n < r || -2 === i) return 0;
        if ((i = s(t[n])) >= 0) return i > 0 && (e.lastNeed = i - 2), i;
        if (--n < r || -2 === i) return 0;
        if ((i = s(t[n])) >= 0) return i > 0 && (2 === i ? i = 0 : e.lastNeed = i - 3), i;
        return 0;
      }(this, e, t);

      if (!this.lastNeed) return e.toString("utf8", t);
      this.lastTotal = r;
      var n = e.length - (r - this.lastNeed);
      return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
    }, o.prototype.fillLast = function (e) {
      if (this.lastNeed <= e.length) return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
      e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
    };
  }, function (e, t, r) {

    e.exports = s;
    var n = r(5),
        i = r(7);

    function o(e, t) {
      var r = this._transformState;
      r.transforming = !1;
      var n = r.writecb;
      if (!n) return this.emit("error", new Error("write callback called multiple times"));
      r.writechunk = null, r.writecb = null, null != t && this.push(t), n(e);
      var i = this._readableState;
      i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
    }

    function s(e) {
      if (!(this instanceof s)) return new s(e);
      n.call(this, e), this._transformState = {
        afterTransform: o.bind(this),
        needTransform: !1,
        transforming: !1,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && ("function" == typeof e.transform && (this._transform = e.transform), "function" == typeof e.flush && (this._flush = e.flush)), this.on("prefinish", a);
    }

    function a() {
      var e = this;
      "function" == typeof this._flush ? this._flush(function (t, r) {
        h(e, t, r);
      }) : h(this, null, null);
    }

    function h(e, t, r) {
      if (t) return e.emit("error", t);
      if (null != r && e.push(r), e._writableState.length) throw new Error("Calling transform done when ws.length != 0");
      if (e._transformState.transforming) throw new Error("Calling transform done when still transforming");
      return e.push(null);
    }

    i.inherits = r(4), i.inherits(s, n), s.prototype.push = function (e, t) {
      return this._transformState.needTransform = !1, n.prototype.push.call(this, e, t);
    }, s.prototype._transform = function (e, t, r) {
      throw new Error("_transform() is not implemented");
    }, s.prototype._write = function (e, t, r) {
      var n = this._transformState;

      if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
        var i = this._readableState;
        (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
      }
    }, s.prototype._read = function (e) {
      var t = this._transformState;
      null !== t.writechunk && t.writecb && !t.transforming ? (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform)) : t.needTransform = !0;
    }, s.prototype._destroy = function (e, t) {
      var r = this;

      n.prototype._destroy.call(this, e, function (e) {
        t(e), r.emit("close");
      });
    };
  }, function (e, t, r) {

    (function (t) {
      /*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
       * @license  MIT
       */
      function n(e, t) {
        if (e === t) return 0;

        for (var r = e.length, n = t.length, i = 0, o = Math.min(r, n); i < o; ++i) {
          if (e[i] !== t[i]) {
            r = e[i], n = t[i];
            break;
          }
        }

        return r < n ? -1 : n < r ? 1 : 0;
      }

      function i(e) {
        return t.Buffer && "function" == typeof t.Buffer.isBuffer ? t.Buffer.isBuffer(e) : !(null == e || !e._isBuffer);
      }

      var o = r(27),
          s = Object.prototype.hasOwnProperty,
          a = Array.prototype.slice,
          h = "foo" === function () {}.name;

      function f(e) {
        return Object.prototype.toString.call(e);
      }

      function u(e) {
        return !i(e) && "function" == typeof t.ArrayBuffer && ("function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(e) : !!e && (e instanceof DataView || !!(e.buffer && e.buffer instanceof ArrayBuffer)));
      }

      var c = e.exports = _,
          l = /\s*function\s+([^\(\s]*)\s*/;

      function d(e) {
        if (o.isFunction(e)) {
          if (h) return e.name;
          var t = e.toString().match(l);
          return t && t[1];
        }
      }

      function p(e, t) {
        return "string" == typeof e ? e.length < t ? e : e.slice(0, t) : e;
      }

      function g(e) {
        if (h || !o.isFunction(e)) return o.inspect(e);
        var t = d(e);
        return "[Function" + (t ? ": " + t : "") + "]";
      }

      function m(e, t, r, n, i) {
        throw new c.AssertionError({
          message: r,
          actual: e,
          expected: t,
          operator: n,
          stackStartFunction: i
        });
      }

      function _(e, t) {
        e || m(e, !0, t, "==", c.ok);
      }

      function y(e, t, r, s) {
        if (e === t) return !0;
        if (i(e) && i(t)) return 0 === n(e, t);
        if (o.isDate(e) && o.isDate(t)) return e.getTime() === t.getTime();
        if (o.isRegExp(e) && o.isRegExp(t)) return e.source === t.source && e.global === t.global && e.multiline === t.multiline && e.lastIndex === t.lastIndex && e.ignoreCase === t.ignoreCase;

        if (null !== e && "object" == _typeof(e) || null !== t && "object" == _typeof(t)) {
          if (u(e) && u(t) && f(e) === f(t) && !(e instanceof Float32Array || e instanceof Float64Array)) return 0 === n(new Uint8Array(e.buffer), new Uint8Array(t.buffer));
          if (i(e) !== i(t)) return !1;
          var h = (s = s || {
            actual: [],
            expected: []
          }).actual.indexOf(e);
          return -1 !== h && h === s.expected.indexOf(t) || (s.actual.push(e), s.expected.push(t), function (e, t, r, n) {
            if (null == e || null == t) return !1;
            if (o.isPrimitive(e) || o.isPrimitive(t)) return e === t;
            if (r && Object.getPrototypeOf(e) !== Object.getPrototypeOf(t)) return !1;
            var i = b(e),
                s = b(t);
            if (i && !s || !i && s) return !1;
            if (i) return e = a.call(e), t = a.call(t), y(e, t, r);
            var h,
                f,
                u = E(e),
                c = E(t);
            if (u.length !== c.length) return !1;

            for (u.sort(), c.sort(), f = u.length - 1; f >= 0; f--) {
              if (u[f] !== c[f]) return !1;
            }

            for (f = u.length - 1; f >= 0; f--) {
              if (h = u[f], !y(e[h], t[h], r, n)) return !1;
            }

            return !0;
          }(e, t, r, s));
        }

        return r ? e === t : e == t;
      }

      function b(e) {
        return "[object Arguments]" == Object.prototype.toString.call(e);
      }

      function w(e, t) {
        if (!e || !t) return !1;
        if ("[object RegExp]" == Object.prototype.toString.call(t)) return t.test(e);

        try {
          if (e instanceof t) return !0;
        } catch (e) {}

        return !Error.isPrototypeOf(t) && !0 === t.call({}, e);
      }

      function v(e, t, r, n) {
        var i;
        if ("function" != typeof t) throw new TypeError('"block" argument must be a function');
        "string" == typeof r && (n = r, r = null), i = function (e) {
          var t;

          try {
            e();
          } catch (e) {
            t = e;
          }

          return t;
        }(t), n = (r && r.name ? " (" + r.name + ")." : ".") + (n ? " " + n : "."), e && !i && m(i, r, "Missing expected exception" + n);
        var s = "string" == typeof n,
            a = !e && i && !r;
        if ((!e && o.isError(i) && s && w(i, r) || a) && m(i, r, "Got unwanted exception" + n), e && i && r && !w(i, r) || !e && i) throw i;
      }

      c.AssertionError = function (e) {
        var t;
        this.name = "AssertionError", this.actual = e.actual, this.expected = e.expected, this.operator = e.operator, e.message ? (this.message = e.message, this.generatedMessage = !1) : (this.message = p(g((t = this).actual), 128) + " " + t.operator + " " + p(g(t.expected), 128), this.generatedMessage = !0);
        var r = e.stackStartFunction || m;
        if (Error.captureStackTrace) Error.captureStackTrace(this, r);else {
          var n = new Error();

          if (n.stack) {
            var i = n.stack,
                o = d(r),
                s = i.indexOf("\n" + o);

            if (s >= 0) {
              var a = i.indexOf("\n", s + 1);
              i = i.substring(a + 1);
            }

            this.stack = i;
          }
        }
      }, o.inherits(c.AssertionError, Error), c.fail = m, c.ok = _, c.equal = function (e, t, r) {
        e != t && m(e, t, r, "==", c.equal);
      }, c.notEqual = function (e, t, r) {
        e == t && m(e, t, r, "!=", c.notEqual);
      }, c.deepEqual = function (e, t, r) {
        y(e, t, !1) || m(e, t, r, "deepEqual", c.deepEqual);
      }, c.deepStrictEqual = function (e, t, r) {
        y(e, t, !0) || m(e, t, r, "deepStrictEqual", c.deepStrictEqual);
      }, c.notDeepEqual = function (e, t, r) {
        y(e, t, !1) && m(e, t, r, "notDeepEqual", c.notDeepEqual);
      }, c.notDeepStrictEqual = function e(t, r, n) {
        y(t, r, !0) && m(t, r, n, "notDeepStrictEqual", e);
      }, c.strictEqual = function (e, t, r) {
        e !== t && m(e, t, r, "===", c.strictEqual);
      }, c.notStrictEqual = function (e, t, r) {
        e === t && m(e, t, r, "!==", c.notStrictEqual);
      }, c.throws = function (e, t, r) {
        v(!0, e, t, r);
      }, c.doesNotThrow = function (e, t, r) {
        v(!1, e, t, r);
      }, c.ifError = function (e) {
        if (e) throw e;
      };

      var E = Object.keys || function (e) {
        var t = [];

        for (var r in e) {
          s.call(e, r) && t.push(r);
        }

        return t;
      };
    }).call(this, r(2));
  }, function (e, t, r) {
    (function (e, n) {
      var i = /%[sdj%]/g;
      t.format = function (e) {
        if (!_(e)) {
          for (var t = [], r = 0; r < arguments.length; r++) {
            t.push(a(arguments[r]));
          }

          return t.join(" ");
        }

        r = 1;

        for (var n = arguments, o = n.length, s = String(e).replace(i, function (e) {
          if ("%%" === e) return "%";
          if (r >= o) return e;

          switch (e) {
            case "%s":
              return String(n[r++]);

            case "%d":
              return Number(n[r++]);

            case "%j":
              try {
                return JSON.stringify(n[r++]);
              } catch (e) {
                return "[Circular]";
              }

            default:
              return e;
          }
        }), h = n[r]; r < o; h = n[++r]) {
          g(h) || !w(h) ? s += " " + h : s += " " + a(h);
        }

        return s;
      }, t.deprecate = function (r, i) {
        if (y(e.process)) return function () {
          return t.deprecate(r, i).apply(this, arguments);
        };
        if (!0 === n.noDeprecation) return r;
        var o = !1;
        return function () {
          if (!o) {
            if (n.throwDeprecation) throw new Error(i);
            n.traceDeprecation ? console.trace(i) : console.error(i), o = !0;
          }

          return r.apply(this, arguments);
        };
      };
      var o,
          s = {};

      function a(e, r) {
        var n = {
          seen: [],
          stylize: f
        };
        return arguments.length >= 3 && (n.depth = arguments[2]), arguments.length >= 4 && (n.colors = arguments[3]), p(r) ? n.showHidden = r : r && t._extend(n, r), y(n.showHidden) && (n.showHidden = !1), y(n.depth) && (n.depth = 2), y(n.colors) && (n.colors = !1), y(n.customInspect) && (n.customInspect = !0), n.colors && (n.stylize = h), u(n, e, n.depth);
      }

      function h(e, t) {
        var r = a.styles[t];
        return r ? "[" + a.colors[r][0] + "m" + e + "[" + a.colors[r][1] + "m" : e;
      }

      function f(e, t) {
        return e;
      }

      function u(e, r, n) {
        if (e.customInspect && r && S(r.inspect) && r.inspect !== t.inspect && (!r.constructor || r.constructor.prototype !== r)) {
          var i = r.inspect(n, e);
          return _(i) || (i = u(e, i, n)), i;
        }

        var o = function (e, t) {
          if (y(t)) return e.stylize("undefined", "undefined");

          if (_(t)) {
            var r = "'" + JSON.stringify(t).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
            return e.stylize(r, "string");
          }

          if (m(t)) return e.stylize("" + t, "number");
          if (p(t)) return e.stylize("" + t, "boolean");
          if (g(t)) return e.stylize("null", "null");
        }(e, r);

        if (o) return o;

        var s = Object.keys(r),
            a = function (e) {
          var t = {};
          return e.forEach(function (e, r) {
            t[e] = !0;
          }), t;
        }(s);

        if (e.showHidden && (s = Object.getOwnPropertyNames(r)), E(r) && (s.indexOf("message") >= 0 || s.indexOf("description") >= 0)) return c(r);

        if (0 === s.length) {
          if (S(r)) {
            var h = r.name ? ": " + r.name : "";
            return e.stylize("[Function" + h + "]", "special");
          }

          if (b(r)) return e.stylize(RegExp.prototype.toString.call(r), "regexp");
          if (v(r)) return e.stylize(Date.prototype.toString.call(r), "date");
          if (E(r)) return c(r);
        }

        var f,
            w = "",
            A = !1,
            k = ["{", "}"];
        (d(r) && (A = !0, k = ["[", "]"]), S(r)) && (w = " [Function" + (r.name ? ": " + r.name : "") + "]");
        return b(r) && (w = " " + RegExp.prototype.toString.call(r)), v(r) && (w = " " + Date.prototype.toUTCString.call(r)), E(r) && (w = " " + c(r)), 0 !== s.length || A && 0 != r.length ? n < 0 ? b(r) ? e.stylize(RegExp.prototype.toString.call(r), "regexp") : e.stylize("[Object]", "special") : (e.seen.push(r), f = A ? function (e, t, r, n, i) {
          for (var o = [], s = 0, a = t.length; s < a; ++s) {
            C(t, String(s)) ? o.push(l(e, t, r, n, String(s), !0)) : o.push("");
          }

          return i.forEach(function (i) {
            i.match(/^\d+$/) || o.push(l(e, t, r, n, i, !0));
          }), o;
        }(e, r, n, a, s) : s.map(function (t) {
          return l(e, r, n, a, t, A);
        }), e.seen.pop(), function (e, t, r) {
          if (e.reduce(function (e, t) {
            return t.indexOf("\n") >= 0 && 0, e + t.replace(/\u001b\[\d\d?m/g, "").length + 1;
          }, 0) > 60) return r[0] + ("" === t ? "" : t + "\n ") + " " + e.join(",\n  ") + " " + r[1];
          return r[0] + t + " " + e.join(", ") + " " + r[1];
        }(f, w, k)) : k[0] + w + k[1];
      }

      function c(e) {
        return "[" + Error.prototype.toString.call(e) + "]";
      }

      function l(e, t, r, n, i, o) {
        var s, a, h;

        if ((h = Object.getOwnPropertyDescriptor(t, i) || {
          value: t[i]
        }).get ? a = h.set ? e.stylize("[Getter/Setter]", "special") : e.stylize("[Getter]", "special") : h.set && (a = e.stylize("[Setter]", "special")), C(n, i) || (s = "[" + i + "]"), a || (e.seen.indexOf(h.value) < 0 ? (a = g(r) ? u(e, h.value, null) : u(e, h.value, r - 1)).indexOf("\n") > -1 && (a = o ? a.split("\n").map(function (e) {
          return "  " + e;
        }).join("\n").substr(2) : "\n" + a.split("\n").map(function (e) {
          return "   " + e;
        }).join("\n")) : a = e.stylize("[Circular]", "special")), y(s)) {
          if (o && i.match(/^\d+$/)) return a;
          (s = JSON.stringify("" + i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s = s.substr(1, s.length - 2), s = e.stylize(s, "name")) : (s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s = e.stylize(s, "string"));
        }

        return s + ": " + a;
      }

      function d(e) {
        return Array.isArray(e);
      }

      function p(e) {
        return "boolean" == typeof e;
      }

      function g(e) {
        return null === e;
      }

      function m(e) {
        return "number" == typeof e;
      }

      function _(e) {
        return "string" == typeof e;
      }

      function y(e) {
        return void 0 === e;
      }

      function b(e) {
        return w(e) && "[object RegExp]" === A(e);
      }

      function w(e) {
        return "object" == _typeof(e) && null !== e;
      }

      function v(e) {
        return w(e) && "[object Date]" === A(e);
      }

      function E(e) {
        return w(e) && ("[object Error]" === A(e) || e instanceof Error);
      }

      function S(e) {
        return "function" == typeof e;
      }

      function A(e) {
        return Object.prototype.toString.call(e);
      }

      t.debuglog = function (e) {
        if (y(o) && (o = n.env.NODE_DEBUG || ""), e = e.toUpperCase(), !s[e]) if (new RegExp("\\b" + e + "\\b", "i").test(o)) {
          var r = n.pid;

          s[e] = function () {
            var n = t.format.apply(t, arguments);
            console.error("%s %d: %s", e, r, n);
          };
        } else s[e] = function () {};
        return s[e];
      }, t.inspect = a, a.colors = {
        bold: [1, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        white: [37, 39],
        grey: [90, 39],
        black: [30, 39],
        blue: [34, 39],
        cyan: [36, 39],
        green: [32, 39],
        magenta: [35, 39],
        red: [31, 39],
        yellow: [33, 39]
      }, a.styles = {
        special: "cyan",
        number: "yellow",
        boolean: "yellow",
        undefined: "grey",
        null: "bold",
        string: "green",
        date: "magenta",
        regexp: "red"
      }, t.isArray = d, t.isBoolean = p, t.isNull = g, t.isNullOrUndefined = function (e) {
        return null == e;
      }, t.isNumber = m, t.isString = _, t.isSymbol = function (e) {
        return "symbol" == _typeof(e);
      }, t.isUndefined = y, t.isRegExp = b, t.isObject = w, t.isDate = v, t.isError = E, t.isFunction = S, t.isPrimitive = function (e) {
        return null === e || "boolean" == typeof e || "number" == typeof e || "string" == typeof e || "symbol" == _typeof(e) || void 0 === e;
      }, t.isBuffer = r(52);

      function C(e, t) {
        return Object.prototype.hasOwnProperty.call(e, t);
      }

      t.log = function () {
      }, t.inherits = r(4), t._extend = function (e, t) {
        if (!t || !w(t)) return e;

        for (var r = Object.keys(t), n = r.length; n--;) {
          e[r[n]] = t[r[n]];
        }

        return e;
      };
    }).call(this, r(2), r(3));
  }, function (e, t, r) {

    e.exports = function (e, t, r, n) {
      for (var i = 65535 & e | 0, o = e >>> 16 & 65535 | 0, s = 0; 0 !== r;) {
        r -= s = r > 2e3 ? 2e3 : r;

        do {
          o = o + (i = i + t[n++] | 0) | 0;
        } while (--s);

        i %= 65521, o %= 65521;
      }

      return i | o << 16 | 0;
    };
  }, function (e, t, r) {

    var n = function () {
      for (var e, t = [], r = 0; r < 256; r++) {
        e = r;

        for (var n = 0; n < 8; n++) {
          e = 1 & e ? 3988292384 ^ e >>> 1 : e >>> 1;
        }

        t[r] = e;
      }

      return t;
    }();

    e.exports = function (e, t, r, i) {
      var o = n,
          s = i + r;
      e ^= -1;

      for (var a = i; a < s; a++) {
        e = e >>> 8 ^ o[255 & (e ^ t[a])];
      }

      return -1 ^ e;
    };
  }, function (e, t, r) {

    e.exports =
    /*#__PURE__*/
    function () {
      function _class2() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, _class2);

        if (!(e.maxSize && e.maxSize > 0)) throw new TypeError("`maxSize` must be a number greater than 0");
        this.maxSize = e.maxSize, this.cache = new Map(), this.oldCache = new Map(), this._size = 0;
      }

      _createClass(_class2, [{
        key: "_set",
        value: function _set(e, t) {
          this.cache.set(e, t), this._size++, this._size >= this.maxSize && (this._size = 0, this.oldCache = this.cache, this.cache = new Map());
        }
      }, {
        key: "get",
        value: function get(e) {
          if (this.cache.has(e)) return this.cache.get(e);

          if (this.oldCache.has(e)) {
            var _t = this.oldCache.get(e);

            return this._set(e, _t), _t;
          }
        }
      }, {
        key: "set",
        value: function set(e, t) {
          return this.cache.has(e) ? this.cache.set(e, t) : this._set(e, t), this;
        }
      }, {
        key: "has",
        value: function has(e) {
          return this.cache.has(e) || this.oldCache.has(e);
        }
      }, {
        key: "peek",
        value: function peek(e) {
          return this.cache.has(e) ? this.cache.get(e) : this.oldCache.has(e) ? this.oldCache.get(e) : void 0;
        }
      }, {
        key: "delete",
        value: function _delete(e) {
          var t = this.cache.delete(e);
          return t && this._size--, this.oldCache.delete(e) || t;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.cache.clear(), this.oldCache.clear(), this._size = 0;
        }
      }, {
        key: "keys",
        value:
        /*#__PURE__*/
        regeneratorRuntime.mark(function keys() {
          var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, _e3;

          return regeneratorRuntime.wrap(function keys$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _iteratorNormalCompletion = true;
                  _didIteratorError = false;
                  _iteratorError = undefined;
                  _context.prev = 3;
                  _iterator = this[Symbol.iterator]();

                case 5:
                  if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                    _context.next = 12;
                    break;
                  }

                  _step$value = _slicedToArray(_step.value, 1), _e3 = _step$value[0];
                  _context.next = 9;
                  return _e3;

                case 9:
                  _iteratorNormalCompletion = true;
                  _context.next = 5;
                  break;

                case 12:
                  _context.next = 18;
                  break;

                case 14:
                  _context.prev = 14;
                  _context.t0 = _context["catch"](3);
                  _didIteratorError = true;
                  _iteratorError = _context.t0;

                case 18:
                  _context.prev = 18;
                  _context.prev = 19;

                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }

                case 21:
                  _context.prev = 21;

                  if (!_didIteratorError) {
                    _context.next = 24;
                    break;
                  }

                  throw _iteratorError;

                case 24:
                  return _context.finish(21);

                case 25:
                  return _context.finish(18);

                case 26:
                case "end":
                  return _context.stop();
              }
            }
          }, keys, this, [[3, 14, 18, 26], [19,, 21, 25]]);
        })
      }, {
        key: "values",
        value:
        /*#__PURE__*/
        regeneratorRuntime.mark(function values() {
          var _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, _e4;

          return regeneratorRuntime.wrap(function values$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _iteratorNormalCompletion2 = true;
                  _didIteratorError2 = false;
                  _iteratorError2 = undefined;
                  _context2.prev = 3;
                  _iterator2 = this[Symbol.iterator]();

                case 5:
                  if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                    _context2.next = 12;
                    break;
                  }

                  _step2$value = _slicedToArray(_step2.value, 2), _e4 = _step2$value[1];
                  _context2.next = 9;
                  return _e4;

                case 9:
                  _iteratorNormalCompletion2 = true;
                  _context2.next = 5;
                  break;

                case 12:
                  _context2.next = 18;
                  break;

                case 14:
                  _context2.prev = 14;
                  _context2.t0 = _context2["catch"](3);
                  _didIteratorError2 = true;
                  _iteratorError2 = _context2.t0;

                case 18:
                  _context2.prev = 18;
                  _context2.prev = 19;

                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }

                case 21:
                  _context2.prev = 21;

                  if (!_didIteratorError2) {
                    _context2.next = 24;
                    break;
                  }

                  throw _iteratorError2;

                case 24:
                  return _context2.finish(21);

                case 25:
                  return _context2.finish(18);

                case 26:
                case "end":
                  return _context2.stop();
              }
            }
          }, values, this, [[3, 14, 18, 26], [19,, 21, 25]]);
        })
      }, {
        key: Symbol.iterator,
        value:
        /*#__PURE__*/
        regeneratorRuntime.mark(function value() {
          var _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _e5, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, _e6, _e7, _t2;

          return regeneratorRuntime.wrap(function value$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _iteratorNormalCompletion3 = true;
                  _didIteratorError3 = false;
                  _iteratorError3 = undefined;
                  _context3.prev = 3;
                  _iterator3 = this.cache[Symbol.iterator]();

                case 5:
                  if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                    _context3.next = 12;
                    break;
                  }

                  _e5 = _step3.value;
                  _context3.next = 9;
                  return _e5;

                case 9:
                  _iteratorNormalCompletion3 = true;
                  _context3.next = 5;
                  break;

                case 12:
                  _context3.next = 18;
                  break;

                case 14:
                  _context3.prev = 14;
                  _context3.t0 = _context3["catch"](3);
                  _didIteratorError3 = true;
                  _iteratorError3 = _context3.t0;

                case 18:
                  _context3.prev = 18;
                  _context3.prev = 19;

                  if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                    _iterator3.return();
                  }

                case 21:
                  _context3.prev = 21;

                  if (!_didIteratorError3) {
                    _context3.next = 24;
                    break;
                  }

                  throw _iteratorError3;

                case 24:
                  return _context3.finish(21);

                case 25:
                  return _context3.finish(18);

                case 26:
                  _iteratorNormalCompletion4 = true;
                  _didIteratorError4 = false;
                  _iteratorError4 = undefined;
                  _context3.prev = 29;
                  _iterator4 = this.oldCache[Symbol.iterator]();

                case 31:
                  if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
                    _context3.next = 41;
                    break;
                  }

                  _e6 = _step4.value;
                  _e7 = _slicedToArray(_e6, 1), _t2 = _e7[0];
                  _context3.t1 = this.cache.has(_t2);

                  if (_context3.t1) {
                    _context3.next = 38;
                    break;
                  }

                  _context3.next = 38;
                  return _e6;

                case 38:
                  _iteratorNormalCompletion4 = true;
                  _context3.next = 31;
                  break;

                case 41:
                  _context3.next = 47;
                  break;

                case 43:
                  _context3.prev = 43;
                  _context3.t2 = _context3["catch"](29);
                  _didIteratorError4 = true;
                  _iteratorError4 = _context3.t2;

                case 47:
                  _context3.prev = 47;
                  _context3.prev = 48;

                  if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                    _iterator4.return();
                  }

                case 50:
                  _context3.prev = 50;

                  if (!_didIteratorError4) {
                    _context3.next = 53;
                    break;
                  }

                  throw _iteratorError4;

                case 53:
                  return _context3.finish(50);

                case 54:
                  return _context3.finish(47);

                case 55:
                case "end":
                  return _context3.stop();
              }
            }
          }, value, this, [[3, 14, 18, 26], [19,, 21, 25], [29, 43, 47, 55], [48,, 50, 54]]);
        })
      }, {
        key: "size",
        get: function get() {
          var e = 0;
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = this.oldCache.keys()[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var _t3 = _step5.value;
              this.cache.has(_t3) || e++;
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                _iterator5.return();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }

          return this._size + e;
        }
      }]);

      return _class2;
    }();
  }, function (e, t) {
    e.exports = n;
    var r = null;

    try {
      r = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
    } catch (e) {}

    function n(e, t, r) {
      this.low = 0 | e, this.high = 0 | t, this.unsigned = !!r;
    }

    function i(e) {
      return !0 === (e && e.__isLong__);
    }

    n.prototype.__isLong__, Object.defineProperty(n.prototype, "__isLong__", {
      value: !0
    }), n.isLong = i;
    var o = {},
        s = {};

    function a(e, t) {
      var r, n, i;
      return t ? (i = 0 <= (e >>>= 0) && e < 256) && (n = s[e]) ? n : (r = f(e, (0 | e) < 0 ? -1 : 0, !0), i && (s[e] = r), r) : (i = -128 <= (e |= 0) && e < 128) && (n = o[e]) ? n : (r = f(e, e < 0 ? -1 : 0, !1), i && (o[e] = r), r);
    }

    function h(e, t) {
      if (isNaN(e)) return t ? y : _;

      if (t) {
        if (e < 0) return y;
        if (e >= p) return S;
      } else {
        if (e <= -g) return A;
        if (e + 1 >= g) return E;
      }

      return e < 0 ? h(-e, t).neg() : f(e % d | 0, e / d | 0, t);
    }

    function f(e, t, r) {
      return new n(e, t, r);
    }

    n.fromInt = a, n.fromNumber = h, n.fromBits = f;
    var u = Math.pow;

    function c(e, t, r) {
      if (0 === e.length) throw Error("empty string");
      if ("NaN" === e || "Infinity" === e || "+Infinity" === e || "-Infinity" === e) return _;
      if ("number" == typeof t ? (r = t, t = !1) : t = !!t, (r = r || 10) < 2 || 36 < r) throw RangeError("radix");
      var n;
      if ((n = e.indexOf("-")) > 0) throw Error("interior hyphen");
      if (0 === n) return c(e.substring(1), t, r).neg();

      for (var i = h(u(r, 8)), o = _, s = 0; s < e.length; s += 8) {
        var a = Math.min(8, e.length - s),
            f = parseInt(e.substring(s, s + a), r);

        if (a < 8) {
          var l = h(u(r, a));
          o = o.mul(l).add(h(f));
        } else o = (o = o.mul(i)).add(h(f));
      }

      return o.unsigned = t, o;
    }

    function l(e, t) {
      return "number" == typeof e ? h(e, t) : "string" == typeof e ? c(e, t) : f(e.low, e.high, "boolean" == typeof t ? t : e.unsigned);
    }

    n.fromString = c, n.fromValue = l;

    var d = 4294967296,
        p = d * d,
        g = p / 2,
        m = a(1 << 24),
        _ = a(0);

    n.ZERO = _;
    var y = a(0, !0);
    n.UZERO = y;
    var b = a(1);
    n.ONE = b;
    var w = a(1, !0);
    n.UONE = w;
    var v = a(-1);
    n.NEG_ONE = v;
    var E = f(-1, 2147483647, !1);
    n.MAX_VALUE = E;
    var S = f(-1, -1, !0);
    n.MAX_UNSIGNED_VALUE = S;
    var A = f(0, -2147483648, !1);
    n.MIN_VALUE = A;
    var k = n.prototype;
    k.toInt = function () {
      return this.unsigned ? this.low >>> 0 : this.low;
    }, k.toNumber = function () {
      return this.unsigned ? (this.high >>> 0) * d + (this.low >>> 0) : this.high * d + (this.low >>> 0);
    }, k.toString = function (e) {
      if ((e = e || 10) < 2 || 36 < e) throw RangeError("radix");
      if (this.isZero()) return "0";

      if (this.isNegative()) {
        if (this.eq(A)) {
          var t = h(e),
              r = this.div(t),
              n = r.mul(t).sub(this);
          return r.toString(e) + n.toInt().toString(e);
        }

        return "-" + this.neg().toString(e);
      }

      for (var i = h(u(e, 6), this.unsigned), o = this, s = "";;) {
        var a = o.div(i),
            f = (o.sub(a.mul(i)).toInt() >>> 0).toString(e);
        if ((o = a).isZero()) return f + s;

        for (; f.length < 6;) {
          f = "0" + f;
        }

        s = "" + f + s;
      }
    }, k.getHighBits = function () {
      return this.high;
    }, k.getHighBitsUnsigned = function () {
      return this.high >>> 0;
    }, k.getLowBits = function () {
      return this.low;
    }, k.getLowBitsUnsigned = function () {
      return this.low >>> 0;
    }, k.getNumBitsAbs = function () {
      if (this.isNegative()) return this.eq(A) ? 64 : this.neg().getNumBitsAbs();

      for (var e = 0 != this.high ? this.high : this.low, t = 31; t > 0 && 0 == (e & 1 << t); t--) {
      }

      return 0 != this.high ? t + 33 : t + 1;
    }, k.isZero = function () {
      return 0 === this.high && 0 === this.low;
    }, k.eqz = k.isZero, k.isNegative = function () {
      return !this.unsigned && this.high < 0;
    }, k.isPositive = function () {
      return this.unsigned || this.high >= 0;
    }, k.isOdd = function () {
      return 1 == (1 & this.low);
    }, k.isEven = function () {
      return 0 == (1 & this.low);
    }, k.equals = function (e) {
      return i(e) || (e = l(e)), (this.unsigned === e.unsigned || this.high >>> 31 != 1 || e.high >>> 31 != 1) && this.high === e.high && this.low === e.low;
    }, k.eq = k.equals, k.notEquals = function (e) {
      return !this.eq(e);
    }, k.neq = k.notEquals, k.ne = k.notEquals, k.lessThan = function (e) {
      return this.comp(e) < 0;
    }, k.lt = k.lessThan, k.lessThanOrEqual = function (e) {
      return this.comp(e) <= 0;
    }, k.lte = k.lessThanOrEqual, k.le = k.lessThanOrEqual, k.greaterThan = function (e) {
      return this.comp(e) > 0;
    }, k.gt = k.greaterThan, k.greaterThanOrEqual = function (e) {
      return this.comp(e) >= 0;
    }, k.gte = k.greaterThanOrEqual, k.ge = k.greaterThanOrEqual, k.compare = function (e) {
      if (i(e) || (e = l(e)), this.eq(e)) return 0;
      var t = this.isNegative(),
          r = e.isNegative();
      return t && !r ? -1 : !t && r ? 1 : this.unsigned ? e.high >>> 0 > this.high >>> 0 || e.high === this.high && e.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(e).isNegative() ? -1 : 1;
    }, k.comp = k.compare, k.negate = function () {
      return !this.unsigned && this.eq(A) ? A : this.not().add(b);
    }, k.neg = k.negate, k.add = function (e) {
      i(e) || (e = l(e));
      var t = this.high >>> 16,
          r = 65535 & this.high,
          n = this.low >>> 16,
          o = 65535 & this.low,
          s = e.high >>> 16,
          a = 65535 & e.high,
          h = e.low >>> 16,
          u = 0,
          c = 0,
          d = 0,
          p = 0;
      return d += (p += o + (65535 & e.low)) >>> 16, c += (d += n + h) >>> 16, u += (c += r + a) >>> 16, u += t + s, f((d &= 65535) << 16 | (p &= 65535), (u &= 65535) << 16 | (c &= 65535), this.unsigned);
    }, k.subtract = function (e) {
      return i(e) || (e = l(e)), this.add(e.neg());
    }, k.sub = k.subtract, k.multiply = function (e) {
      if (this.isZero()) return _;
      if (i(e) || (e = l(e)), r) return f(r.mul(this.low, this.high, e.low, e.high), r.get_high(), this.unsigned);
      if (e.isZero()) return _;
      if (this.eq(A)) return e.isOdd() ? A : _;
      if (e.eq(A)) return this.isOdd() ? A : _;
      if (this.isNegative()) return e.isNegative() ? this.neg().mul(e.neg()) : this.neg().mul(e).neg();
      if (e.isNegative()) return this.mul(e.neg()).neg();
      if (this.lt(m) && e.lt(m)) return h(this.toNumber() * e.toNumber(), this.unsigned);
      var t = this.high >>> 16,
          n = 65535 & this.high,
          o = this.low >>> 16,
          s = 65535 & this.low,
          a = e.high >>> 16,
          u = 65535 & e.high,
          c = e.low >>> 16,
          d = 65535 & e.low,
          p = 0,
          g = 0,
          y = 0,
          b = 0;
      return y += (b += s * d) >>> 16, g += (y += o * d) >>> 16, y &= 65535, g += (y += s * c) >>> 16, p += (g += n * d) >>> 16, g &= 65535, p += (g += o * c) >>> 16, g &= 65535, p += (g += s * u) >>> 16, p += t * d + n * c + o * u + s * a, f((y &= 65535) << 16 | (b &= 65535), (p &= 65535) << 16 | (g &= 65535), this.unsigned);
    }, k.mul = k.multiply, k.divide = function (e) {
      if (i(e) || (e = l(e)), e.isZero()) throw Error("division by zero");
      var t, n, o;
      if (r) return this.unsigned || -2147483648 !== this.high || -1 !== e.low || -1 !== e.high ? f((this.unsigned ? r.div_u : r.div_s)(this.low, this.high, e.low, e.high), r.get_high(), this.unsigned) : this;
      if (this.isZero()) return this.unsigned ? y : _;

      if (this.unsigned) {
        if (e.unsigned || (e = e.toUnsigned()), e.gt(this)) return y;
        if (e.gt(this.shru(1))) return w;
        o = y;
      } else {
        if (this.eq(A)) return e.eq(b) || e.eq(v) ? A : e.eq(A) ? b : (t = this.shr(1).div(e).shl(1)).eq(_) ? e.isNegative() ? b : v : (n = this.sub(e.mul(t)), o = t.add(n.div(e)));
        if (e.eq(A)) return this.unsigned ? y : _;
        if (this.isNegative()) return e.isNegative() ? this.neg().div(e.neg()) : this.neg().div(e).neg();
        if (e.isNegative()) return this.div(e.neg()).neg();
        o = _;
      }

      for (n = this; n.gte(e);) {
        t = Math.max(1, Math.floor(n.toNumber() / e.toNumber()));

        for (var s = Math.ceil(Math.log(t) / Math.LN2), a = s <= 48 ? 1 : u(2, s - 48), c = h(t), d = c.mul(e); d.isNegative() || d.gt(n);) {
          d = (c = h(t -= a, this.unsigned)).mul(e);
        }

        c.isZero() && (c = b), o = o.add(c), n = n.sub(d);
      }

      return o;
    }, k.div = k.divide, k.modulo = function (e) {
      return i(e) || (e = l(e)), r ? f((this.unsigned ? r.rem_u : r.rem_s)(this.low, this.high, e.low, e.high), r.get_high(), this.unsigned) : this.sub(this.div(e).mul(e));
    }, k.mod = k.modulo, k.rem = k.modulo, k.not = function () {
      return f(~this.low, ~this.high, this.unsigned);
    }, k.and = function (e) {
      return i(e) || (e = l(e)), f(this.low & e.low, this.high & e.high, this.unsigned);
    }, k.or = function (e) {
      return i(e) || (e = l(e)), f(this.low | e.low, this.high | e.high, this.unsigned);
    }, k.xor = function (e) {
      return i(e) || (e = l(e)), f(this.low ^ e.low, this.high ^ e.high, this.unsigned);
    }, k.shiftLeft = function (e) {
      return i(e) && (e = e.toInt()), 0 == (e &= 63) ? this : e < 32 ? f(this.low << e, this.high << e | this.low >>> 32 - e, this.unsigned) : f(0, this.low << e - 32, this.unsigned);
    }, k.shl = k.shiftLeft, k.shiftRight = function (e) {
      return i(e) && (e = e.toInt()), 0 == (e &= 63) ? this : e < 32 ? f(this.low >>> e | this.high << 32 - e, this.high >> e, this.unsigned) : f(this.high >> e - 32, this.high >= 0 ? 0 : -1, this.unsigned);
    }, k.shr = k.shiftRight, k.shiftRightUnsigned = function (e) {
      if (i(e) && (e = e.toInt()), 0 === (e &= 63)) return this;
      var t = this.high;
      return e < 32 ? f(this.low >>> e | t << 32 - e, t >>> e, this.unsigned) : f(32 === e ? t : t >>> e - 32, 0, this.unsigned);
    }, k.shru = k.shiftRightUnsigned, k.shr_u = k.shiftRightUnsigned, k.toSigned = function () {
      return this.unsigned ? f(this.low, this.high, !1) : this;
    }, k.toUnsigned = function () {
      return this.unsigned ? this : f(this.low, this.high, !0);
    }, k.toBytes = function (e) {
      return e ? this.toBytesLE() : this.toBytesBE();
    }, k.toBytesLE = function () {
      var e = this.high,
          t = this.low;
      return [255 & t, t >>> 8 & 255, t >>> 16 & 255, t >>> 24, 255 & e, e >>> 8 & 255, e >>> 16 & 255, e >>> 24];
    }, k.toBytesBE = function () {
      var e = this.high,
          t = this.low;
      return [e >>> 24, e >>> 16 & 255, e >>> 8 & 255, 255 & e, t >>> 24, t >>> 16 & 255, t >>> 8 & 255, 255 & t];
    }, n.fromBytes = function (e, t, r) {
      return r ? n.fromBytesLE(e, t) : n.fromBytesBE(e, t);
    }, n.fromBytesLE = function (e, t) {
      return new n(e[0] | e[1] << 8 | e[2] << 16 | e[3] << 24, e[4] | e[5] << 8 | e[6] << 16 | e[7] << 24, t);
    }, n.fromBytesBE = function (e, t) {
      return new n(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7], e[0] << 24 | e[1] << 16 | e[2] << 8 | e[3], t);
    };
  }, function (e, t) {
    var r = {
      utf8: {
        stringToBytes: function stringToBytes(e) {
          return r.bin.stringToBytes(unescape(encodeURIComponent(e)));
        },
        bytesToString: function bytesToString(e) {
          return decodeURIComponent(escape(r.bin.bytesToString(e)));
        }
      },
      bin: {
        stringToBytes: function stringToBytes(e) {
          for (var t = [], r = 0; r < e.length; r++) {
            t.push(255 & e.charCodeAt(r));
          }

          return t;
        },
        bytesToString: function bytesToString(e) {
          for (var t = [], r = 0; r < e.length; r++) {
            t.push(String.fromCharCode(e[r]));
          }

          return t.join("");
        }
      }
    };
    e.exports = r;
  }, function (e, t, r) {
    var n = r(87),
        i = r(94),
        o = r(97);

    function s(e) {
      var _n$parse = n.parse(e),
          t = _n$parse.protocol,
          r = _n$parse.pathname;

      return "file:" === t ? new o(unescape(r)) : new i(e);
    }

    e.exports = {
      LocalFile: o,
      RemoteFile: i,
      fromUrl: s,
      open: function open(e, t, r) {
        if (r) return r;
        if (e) return s(e);
        if (t) return new o(t);
        throw new Error("no url, path, or filehandle provided, cannot open");
      }
    };
  }, function (e, t, r) {

    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var n = "__ES6-PROMISIFY--CUSTOM-ARGUMENTS__";

    function i(e) {
      if ("function" != typeof e) throw new TypeError("Argument to promisify must be a function");
      var t = e[n],
          r = i.Promise || Promise;
      if ("function" != typeof r) throw new Error("No Promise implementation found; do you need a polyfill?");
      return function () {
        for (var n = this, i = arguments.length, o = Array(i), s = 0; s < i; s++) {
          o[s] = arguments[s];
        }

        return new r(function (r, i) {
          o.push(function (e) {
            if (e) return i(e);

            for (var n = arguments.length, o = Array(n > 1 ? n - 1 : 0), s = 1; s < n; s++) {
              o[s - 1] = arguments[s];
            }

            if (1 === o.length || !t) return r(o[0]);
            var a = {};
            o.forEach(function (e, r) {
              var n = t[r];
              n && (a[n] = e);
            }), r(a);
          }), e.call.apply(e, [n].concat(o));
        });
      };
    }

    i.argumentNames = n, i.Promise = void 0, t.promisify = i;
  }, function (e, t, r) {
    var n = r(18),
        i = r(99),
        o = r(100);
    e.exports = {
      CramFile: n,
      IndexedCramFile: i,
      CraiIndex: o
    };
  }, function (e, t, r) {
    (function (t) {
      var n = r(20),
          i = r(61),
          o = r(30),
          _r7 = r(0),
          s = _r7.CramUnimplementedError,
          a = _r7.CramMalformedError,
          h = r(62),
          _r8 = r(66),
          f = _r8.cramFileDefinition,
          u = _r8.getSectionParsers,
          c = r(71),
          _r9 = r(33),
          l = _r9.open,
          _r10 = r(8),
          d = _r10.parseItem,
          p = _r10.tinyMemoize,
          _r11 = r(98),
          g = _r11.parseHeaderText;

      var m =
      /*#__PURE__*/
      function () {
        function m(e) {
          _classCallCheck(this, m);

          this.file = l(e.url, e.path, e.filehandle), this.validateChecksums = !0, this.fetchReferenceSequenceCallback = e.seqFetch, this.options = {
            checkSequenceMD5: !1 !== e.checkSequenceMD5,
            cacheSize: void 0 !== e.cacheSize ? e.cacheSize : 2e4
          }, this.featureCache = new o({
            maxSize: this.options.cacheSize
          });
        }

        _createClass(m, [{
          key: "toString",
          value: function toString() {
            return this.file.filename ? this.file.filename : this.file.url ? this.file.url : "(cram file)";
          }
        }, {
          key: "read",
          value: function read(e, t, r, n) {
            return this.file.read(e, t, r, n);
          }
        }, {
          key: "stat",
          value: function stat() {
            return this.file.stat();
          }
        }, {
          key: "getDefinition",
          value: function () {
            var _getDefinition = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee() {
              var e, r;
              return regeneratorRuntime.wrap(function _callee$(_context4) {
                while (1) {
                  switch (_context4.prev = _context4.next) {
                    case 0:
                      e = t.allocUnsafe(f.maxLength);
                      _context4.next = 3;
                      return this.file.read(e, 0, f.maxLength, 0);

                    case 3:
                      r = f.parser.parse(e).result;

                      if (!(2 !== r.majorVersion && 3 !== r.majorVersion)) {
                        _context4.next = 6;
                        break;
                      }

                      throw new s("CRAM version ".concat(r.majorVersion, " not supported"));

                    case 6:
                      return _context4.abrupt("return", r);

                    case 7:
                    case "end":
                      return _context4.stop();
                  }
                }
              }, _callee, this);
            }));

            function getDefinition() {
              return _getDefinition.apply(this, arguments);
            }

            return getDefinition;
          }()
        }, {
          key: "getSamHeader",
          value: function () {
            var _getSamHeader = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee2() {
              var e, _ref, t, r, n;

              return regeneratorRuntime.wrap(function _callee2$(_context5) {
                while (1) {
                  switch (_context5.prev = _context5.next) {
                    case 0:
                      _context5.next = 2;
                      return this.getContainerById(0);

                    case 2:
                      e = _context5.sent;

                      if (e) {
                        _context5.next = 5;
                        break;
                      }

                      throw new a("file contains no containers");

                    case 5:
                      _context5.next = 7;
                      return e.getFirstBlock();

                    case 7:
                      _ref = _context5.sent;
                      t = _ref.content;
                      r = t.readInt32LE(0);
                      n = t.toString("utf8", 4, 4 + r);
                      return _context5.abrupt("return", g(n));

                    case 12:
                    case "end":
                      return _context5.stop();
                  }
                }
              }, _callee2, this);
            }));

            function getSamHeader() {
              return _getSamHeader.apply(this, arguments);
            }

            return getSamHeader;
          }()
        }, {
          key: "getSectionParsers",
          value: function () {
            var _getSectionParsers = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee3() {
              var _ref2, e;

              return regeneratorRuntime.wrap(function _callee3$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      _context6.next = 2;
                      return this.getDefinition();

                    case 2:
                      _ref2 = _context6.sent;
                      e = _ref2.majorVersion;
                      return _context6.abrupt("return", u(e));

                    case 5:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, _callee3, this);
            }));

            function getSectionParsers() {
              return _getSectionParsers.apply(this, arguments);
            }

            return getSectionParsers;
          }()
        }, {
          key: "getContainerById",
          value: function () {
            var _getContainerById = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee4(e) {
              var t, r, _ref3, n, i, o, _t4, _s, _e8;

              return regeneratorRuntime.wrap(function _callee4$(_context7) {
                while (1) {
                  switch (_context7.prev = _context7.next) {
                    case 0:
                      _context7.next = 2;
                      return this.getSectionParsers();

                    case 2:
                      t = _context7.sent;
                      r = t.cramFileDefinition.maxLength;
                      _context7.next = 6;
                      return this.file.stat();

                    case 6:
                      _ref3 = _context7.sent;
                      n = _ref3.size;
                      i = t.cramContainerHeader1;
                      _t4 = 0;

                    case 10:
                      if (!(_t4 <= e)) {
                        _context7.next = 35;
                        break;
                      }

                      if (!(r + i.maxLength + 8 >= n)) {
                        _context7.next = 13;
                        break;
                      }

                      return _context7.abrupt("return");

                    case 13:
                      o = this.getContainerAtPosition(r);
                      _context7.next = 16;
                      return o.getHeader();

                    case 16:
                      _s = _context7.sent;

                      if (_s) {
                        _context7.next = 19;
                        break;
                      }

                      throw new a("container ".concat(e, " not found in file"));

                    case 19:
                      if (!(0 === _t4)) {
                        _context7.next = 31;
                        break;
                      }

                      r = _s._endPosition;
                      _e8 = 0;

                    case 22:
                      if (!(_e8 < _s.numBlocks)) {
                        _context7.next = 29;
                        break;
                      }

                      _context7.next = 25;
                      return this.readBlock(r);

                    case 25:
                      r = _context7.sent._endPosition;

                    case 26:
                      _e8 += 1;
                      _context7.next = 22;
                      break;

                    case 29:
                      _context7.next = 32;
                      break;

                    case 31:
                      r += _s._size + _s.length;

                    case 32:
                      _t4 += 1;
                      _context7.next = 10;
                      break;

                    case 35:
                      return _context7.abrupt("return", o);

                    case 36:
                    case "end":
                      return _context7.stop();
                  }
                }
              }, _callee4, this);
            }));

            function getContainerById(_x) {
              return _getContainerById.apply(this, arguments);
            }

            return getContainerById;
          }()
        }, {
          key: "checkCrc32",
          value: function () {
            var _checkCrc = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee5(e, r, n, o) {
              var s, h;
              return regeneratorRuntime.wrap(function _callee5$(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      s = t.allocUnsafe(r);
                      _context8.next = 3;
                      return this.file.read(s, 0, r, e);

                    case 3:
                      h = i.unsigned(s);

                      if (!(h !== n)) {
                        _context8.next = 6;
                        break;
                      }

                      throw new a("crc mismatch in ".concat(o, ": recorded CRC32 = ").concat(n, ", but calculated CRC32 = ").concat(h));

                    case 6:
                    case "end":
                      return _context8.stop();
                  }
                }
              }, _callee5, this);
            }));

            function checkCrc32(_x2, _x3, _x4, _x5) {
              return _checkCrc.apply(this, arguments);
            }

            return checkCrc32;
          }()
        }, {
          key: "containerCount",
          value: function () {
            var _containerCount = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee6() {
              var e, _ref4, t, r, n, i, _e9, _t5;

              return regeneratorRuntime.wrap(function _callee6$(_context9) {
                while (1) {
                  switch (_context9.prev = _context9.next) {
                    case 0:
                      _context9.next = 2;
                      return this.getSectionParsers();

                    case 2:
                      e = _context9.sent;
                      _context9.next = 5;
                      return this.file.stat();

                    case 5:
                      _ref4 = _context9.sent;
                      t = _ref4.size;
                      r = e.cramContainerHeader1;
                      n = 0, i = e.cramFileDefinition.maxLength;

                    case 9:
                      if (!(i + r.maxLength + 8 < t)) {
                        _context9.next = 31;
                        break;
                      }

                      _context9.next = 12;
                      return this.getContainerAtPosition(i).getHeader();

                    case 12:
                      _e9 = _context9.sent;

                      if (_e9) {
                        _context9.next = 15;
                        break;
                      }

                      return _context9.abrupt("break", 31);

                    case 15:
                      if (!(0 === n)) {
                        _context9.next = 27;
                        break;
                      }

                      i = _e9._endPosition;
                      _t5 = 0;

                    case 18:
                      if (!(_t5 < _e9.numBlocks)) {
                        _context9.next = 25;
                        break;
                      }

                      _context9.next = 21;
                      return this.readBlock(i);

                    case 21:
                      i = _context9.sent._endPosition;

                    case 22:
                      _t5 += 1;
                      _context9.next = 18;
                      break;

                    case 25:
                      _context9.next = 28;
                      break;

                    case 27:
                      i += _e9._size + _e9.length;

                    case 28:
                      n += 1;

                    case 29:
                      _context9.next = 9;
                      break;

                    case 31:
                      return _context9.abrupt("return", n);

                    case 32:
                    case "end":
                      return _context9.stop();
                  }
                }
              }, _callee6, this);
            }));

            function containerCount() {
              return _containerCount.apply(this, arguments);
            }

            return containerCount;
          }()
        }, {
          key: "getContainerAtPosition",
          value: function getContainerAtPosition(e) {
            return new c(this, e);
          }
        }, {
          key: "readBlockHeader",
          value: function () {
            var _readBlockHeader = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee7(e) {
              var r, n, _ref5, i, o;

              return regeneratorRuntime.wrap(function _callee7$(_context10) {
                while (1) {
                  switch (_context10.prev = _context10.next) {
                    case 0:
                      _context10.next = 2;
                      return this.getSectionParsers();

                    case 2:
                      r = _context10.sent;
                      n = r.cramBlockHeader;
                      _context10.next = 6;
                      return this.file.stat();

                    case 6:
                      _ref5 = _context10.sent;
                      i = _ref5.size;

                      if (!(e + n.maxLength >= i)) {
                        _context10.next = 10;
                        break;
                      }

                      return _context10.abrupt("return");

                    case 10:
                      o = t.allocUnsafe(n.maxLength);
                      _context10.next = 13;
                      return this.file.read(o, 0, n.maxLength, e);

                    case 13:
                      return _context10.abrupt("return", d(o, n.parser, 0, e));

                    case 14:
                    case "end":
                      return _context10.stop();
                  }
                }
              }, _callee7, this);
            }));

            function readBlockHeader(_x6) {
              return _readBlockHeader.apply(this, arguments);
            }

            return readBlockHeader;
          }()
        }, {
          key: "_parseSection",
          value: function () {
            var _parseSection2 = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee8(e, r) {
              var n,
                  i,
                  o,
                  _ref6,
                  _e10,
                  s,
                  _args11 = arguments;

              return regeneratorRuntime.wrap(function _callee8$(_context11) {
                while (1) {
                  switch (_context11.prev = _context11.next) {
                    case 0:
                      n = _args11.length > 2 && _args11[2] !== undefined ? _args11[2] : e.maxLength;
                      i = _args11.length > 3 ? _args11[3] : undefined;

                      if (!i) {
                        _context11.next = 6;
                        break;
                      }

                      o = i;
                      _context11.next = 15;
                      break;

                    case 6:
                      _context11.next = 8;
                      return this.file.stat();

                    case 8:
                      _ref6 = _context11.sent;
                      _e10 = _ref6.size;

                      if (!(r + n >= _e10)) {
                        _context11.next = 12;
                        break;
                      }

                      return _context11.abrupt("return");

                    case 12:
                      o = t.allocUnsafe(n);
                      _context11.next = 15;
                      return this.file.read(o, 0, n, r);

                    case 15:
                      s = d(o, e.parser, 0, r);

                      if (!(s._size !== n)) {
                        _context11.next = 18;
                        break;
                      }

                      throw new a("section read error: requested size ".concat(n, " does not equal parsed size ").concat(s._size));

                    case 18:
                      return _context11.abrupt("return", s);

                    case 19:
                    case "end":
                      return _context11.stop();
                  }
                }
              }, _callee8, this);
            }));

            function _parseSection(_x7, _x8) {
              return _parseSection2.apply(this, arguments);
            }

            return _parseSection;
          }()
        }, {
          key: "_uncompress",
          value: function _uncompress(e, t, r) {
            if ("gzip" === e) {
              n.gunzipSync(t).copy(r);
            } else {
              if ("rans" !== e) throw new s("".concat(e, " decompression not yet implemented"));
              h.uncompress(t, r);
            }
          }
        }, {
          key: "readBlock",
          value: function () {
            var _readBlock = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee9(e) {
              var _ref7, r, n, i, o, s, _e11, _t6;

              return regeneratorRuntime.wrap(function _callee9$(_context12) {
                while (1) {
                  switch (_context12.prev = _context12.next) {
                    case 0:
                      _context12.next = 2;
                      return this.getDefinition();

                    case 2:
                      _ref7 = _context12.sent;
                      r = _ref7.majorVersion;
                      _context12.next = 6;
                      return this.getSectionParsers();

                    case 6:
                      n = _context12.sent;
                      _context12.next = 9;
                      return this.readBlockHeader(e);

                    case 9:
                      i = _context12.sent;
                      o = i._endPosition;
                      i.contentPosition = i._endPosition;
                      s = t.allocUnsafe(i.uncompressedSize);

                      if (!("raw" !== i.compressionMethod)) {
                        _context12.next = 20;
                        break;
                      }

                      _e11 = t.allocUnsafe(i.compressedSize);
                      _context12.next = 17;
                      return this.read(_e11, 0, i.compressedSize, o);

                    case 17:
                      this._uncompress(i.compressionMethod, _e11, s);

                      _context12.next = 22;
                      break;

                    case 20:
                      _context12.next = 22;
                      return this.read(s, 0, i.uncompressedSize, o);

                    case 22:
                      if (!(i.content = s, r >= 3)) {
                        _context12.next = 35;
                        break;
                      }

                      _context12.next = 25;
                      return this._parseSection(n.cramBlockCrc32, o + i.compressedSize);

                    case 25:
                      _t6 = _context12.sent;
                      i.crc32 = _t6.crc32;
                      _context12.t0 = this.validateChecksums;

                      if (!_context12.t0) {
                        _context12.next = 31;
                        break;
                      }

                      _context12.next = 31;
                      return this.checkCrc32(e, i._size + i.compressedSize, i.crc32, "block data");

                    case 31:
                      i._endPosition = _t6._endPosition;
                      i._size = i.compressedSize + n.cramBlockCrc32.maxLength;
                      _context12.next = 36;
                      break;

                    case 35:
                      i._endPosition = o + i.compressedSize, i._size = i.compressedSize;

                    case 36:
                      return _context12.abrupt("return", i);

                    case 37:
                    case "end":
                      return _context12.stop();
                  }
                }
              }, _callee9, this);
            }));

            function readBlock(_x9) {
              return _readBlock.apply(this, arguments);
            }

            return readBlock;
          }()
        }]);

        return m;
      }();

      "getDefinition getSectionParsers getSamHeader".split(" ").forEach(function (e) {
        return p(m, e);
      }), e.exports = m;
    }).call(this, r(1).Buffer);
  }, function (e, t, r) {

    t.byteLength = function (e) {
      var t = f(e),
          r = t[0],
          n = t[1];
      return 3 * (r + n) / 4 - n;
    }, t.toByteArray = function (e) {
      for (var t, r = f(e), n = r[0], s = r[1], a = new o(function (e, t, r) {
        return 3 * (t + r) / 4 - r;
      }(0, n, s)), h = 0, u = s > 0 ? n - 4 : n, c = 0; c < u; c += 4) {
        t = i[e.charCodeAt(c)] << 18 | i[e.charCodeAt(c + 1)] << 12 | i[e.charCodeAt(c + 2)] << 6 | i[e.charCodeAt(c + 3)], a[h++] = t >> 16 & 255, a[h++] = t >> 8 & 255, a[h++] = 255 & t;
      }

      2 === s && (t = i[e.charCodeAt(c)] << 2 | i[e.charCodeAt(c + 1)] >> 4, a[h++] = 255 & t);
      1 === s && (t = i[e.charCodeAt(c)] << 10 | i[e.charCodeAt(c + 1)] << 4 | i[e.charCodeAt(c + 2)] >> 2, a[h++] = t >> 8 & 255, a[h++] = 255 & t);
      return a;
    }, t.fromByteArray = function (e) {
      for (var t, r = e.length, i = r % 3, o = [], s = 0, a = r - i; s < a; s += 16383) {
        o.push(u(e, s, s + 16383 > a ? a : s + 16383));
      }

      1 === i ? (t = e[r - 1], o.push(n[t >> 2] + n[t << 4 & 63] + "==")) : 2 === i && (t = (e[r - 2] << 8) + e[r - 1], o.push(n[t >> 10] + n[t >> 4 & 63] + n[t << 2 & 63] + "="));
      return o.join("");
    };

    for (var n = [], i = [], o = "undefined" != typeof Uint8Array ? Uint8Array : Array, s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, h = s.length; a < h; ++a) {
      n[a] = s[a], i[s.charCodeAt(a)] = a;
    }

    function f(e) {
      var t = e.length;
      if (t % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
      var r = e.indexOf("=");
      return -1 === r && (r = t), [r, r === t ? 0 : 4 - r % 4];
    }

    function u(e, t, r) {
      for (var i, o, s = [], a = t; a < r; a += 3) {
        i = (e[a] << 16 & 16711680) + (e[a + 1] << 8 & 65280) + (255 & e[a + 2]), s.push(n[(o = i) >> 18 & 63] + n[o >> 12 & 63] + n[o >> 6 & 63] + n[63 & o]);
      }

      return s.join("");
    }

    i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63;
  }, function (e, t) {
    t.read = function (e, t, r, n, i) {
      var o,
          s,
          a = 8 * i - n - 1,
          h = (1 << a) - 1,
          f = h >> 1,
          u = -7,
          c = r ? i - 1 : 0,
          l = r ? -1 : 1,
          d = e[t + c];

      for (c += l, o = d & (1 << -u) - 1, d >>= -u, u += a; u > 0; o = 256 * o + e[t + c], c += l, u -= 8) {
      }

      for (s = o & (1 << -u) - 1, o >>= -u, u += n; u > 0; s = 256 * s + e[t + c], c += l, u -= 8) {
      }

      if (0 === o) o = 1 - f;else {
        if (o === h) return s ? NaN : 1 / 0 * (d ? -1 : 1);
        s += Math.pow(2, n), o -= f;
      }
      return (d ? -1 : 1) * s * Math.pow(2, o - n);
    }, t.write = function (e, t, r, n, i, o) {
      var s,
          a,
          h,
          f = 8 * o - i - 1,
          u = (1 << f) - 1,
          c = u >> 1,
          l = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
          d = n ? 0 : o - 1,
          p = n ? 1 : -1,
          g = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;

      for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = u) : (s = Math.floor(Math.log(t) / Math.LN2), t * (h = Math.pow(2, -s)) < 1 && (s--, h *= 2), (t += s + c >= 1 ? l / h : l * Math.pow(2, 1 - c)) * h >= 2 && (s++, h /= 2), s + c >= u ? (a = 0, s = u) : s + c >= 1 ? (a = (t * h - 1) * Math.pow(2, i), s += c) : (a = t * Math.pow(2, c - 1) * Math.pow(2, i), s = 0)); i >= 8; e[r + d] = 255 & a, d += p, a /= 256, i -= 8) {
      }

      for (s = s << i | a, f += i; f > 0; e[r + d] = 255 & s, d += p, s /= 256, f -= 8) {
      }

      e[r + d - p] |= 128 * g;
    };
  }, function (e, t, r) {
    e.exports = i;
    var n = r(14).EventEmitter;

    function i() {
      n.call(this);
    }

    r(4)(i, n), i.Readable = r(15), i.Writable = r(47), i.Duplex = r(48), i.Transform = r(49), i.PassThrough = r(50), i.Stream = i, i.prototype.pipe = function (e, t) {
      var r = this;

      function i(t) {
        e.writable && !1 === e.write(t) && r.pause && r.pause();
      }

      function o() {
        r.readable && r.resume && r.resume();
      }

      r.on("data", i), e.on("drain", o), e._isStdio || t && !1 === t.end || (r.on("end", a), r.on("close", h));
      var s = !1;

      function a() {
        s || (s = !0, e.end());
      }

      function h() {
        s || (s = !0, "function" == typeof e.destroy && e.destroy());
      }

      function f(e) {
        if (u(), 0 === n.listenerCount(this, "error")) throw e;
      }

      function u() {
        r.removeListener("data", i), e.removeListener("drain", o), r.removeListener("end", a), r.removeListener("close", h), r.removeListener("error", f), e.removeListener("error", f), r.removeListener("end", u), r.removeListener("close", u), e.removeListener("close", u);
      }

      return r.on("error", f), e.on("error", f), r.on("end", u), r.on("close", u), e.on("close", u), e.emit("pipe", r), e;
    };
  }, function (e, t) {}, function (e, t, r) {

    var n = r(10).Buffer,
        i = r(42);
    e.exports = function () {
      function e() {
        !function (e, t) {
          if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
        }(this, e), this.head = null, this.tail = null, this.length = 0;
      }

      return e.prototype.push = function (e) {
        var t = {
          data: e,
          next: null
        };
        this.length > 0 ? this.tail.next = t : this.head = t, this.tail = t, ++this.length;
      }, e.prototype.unshift = function (e) {
        var t = {
          data: e,
          next: this.head
        };
        0 === this.length && (this.tail = t), this.head = t, ++this.length;
      }, e.prototype.shift = function () {
        if (0 !== this.length) {
          var e = this.head.data;
          return 1 === this.length ? this.head = this.tail = null : this.head = this.head.next, --this.length, e;
        }
      }, e.prototype.clear = function () {
        this.head = this.tail = null, this.length = 0;
      }, e.prototype.join = function (e) {
        if (0 === this.length) return "";

        for (var t = this.head, r = "" + t.data; t = t.next;) {
          r += e + t.data;
        }

        return r;
      }, e.prototype.concat = function (e) {
        if (0 === this.length) return n.alloc(0);
        if (1 === this.length) return this.head.data;

        for (var t, r, i, o = n.allocUnsafe(e >>> 0), s = this.head, a = 0; s;) {
          t = s.data, r = o, i = a, t.copy(r, i), a += s.data.length, s = s.next;
        }

        return o;
      }, e;
    }(), i && i.inspect && i.inspect.custom && (e.exports.prototype[i.inspect.custom] = function () {
      var e = i.inspect({
        length: this.length
      });
      return this.constructor.name + " " + e;
    });
  }, function (e, t) {}, function (e, t, r) {
    (function (e) {
      var n = void 0 !== e && e || "undefined" != typeof self && self || window,
          i = Function.prototype.apply;

      function o(e, t) {
        this._id = e, this._clearFn = t;
      }

      t.setTimeout = function () {
        return new o(i.call(setTimeout, n, arguments), clearTimeout);
      }, t.setInterval = function () {
        return new o(i.call(setInterval, n, arguments), clearInterval);
      }, t.clearTimeout = t.clearInterval = function (e) {
        e && e.close();
      }, o.prototype.unref = o.prototype.ref = function () {}, o.prototype.close = function () {
        this._clearFn.call(n, this._id);
      }, t.enroll = function (e, t) {
        clearTimeout(e._idleTimeoutId), e._idleTimeout = t;
      }, t.unenroll = function (e) {
        clearTimeout(e._idleTimeoutId), e._idleTimeout = -1;
      }, t._unrefActive = t.active = function (e) {
        clearTimeout(e._idleTimeoutId);
        var t = e._idleTimeout;
        t >= 0 && (e._idleTimeoutId = setTimeout(function () {
          e._onTimeout && e._onTimeout();
        }, t));
      }, r(44), t.setImmediate = "undefined" != typeof self && self.setImmediate || void 0 !== e && e.setImmediate || this && this.setImmediate, t.clearImmediate = "undefined" != typeof self && self.clearImmediate || void 0 !== e && e.clearImmediate || this && this.clearImmediate;
    }).call(this, r(2));
  }, function (e, t, r) {
    (function (e, t) {
      !function (e, r) {

        if (!e.setImmediate) {
          var n,
              i,
              o,
              s,
              a,
              h = 1,
              f = {},
              u = !1,
              c = e.document,
              l = Object.getPrototypeOf && Object.getPrototypeOf(e);
          l = l && l.setTimeout ? l : e, "[object process]" === {}.toString.call(e.process) ? n = function n(e) {
            t.nextTick(function () {
              p(e);
            });
          } : !function () {
            if (e.postMessage && !e.importScripts) {
              var t = !0,
                  r = e.onmessage;
              return e.onmessage = function () {
                t = !1;
              }, e.postMessage("", "*"), e.onmessage = r, t;
            }
          }() ? e.MessageChannel ? ((o = new MessageChannel()).port1.onmessage = function (e) {
            p(e.data);
          }, n = function n(e) {
            o.port2.postMessage(e);
          }) : c && "onreadystatechange" in c.createElement("script") ? (i = c.documentElement, n = function n(e) {
            var t = c.createElement("script");
            t.onreadystatechange = function () {
              p(e), t.onreadystatechange = null, i.removeChild(t), t = null;
            }, i.appendChild(t);
          }) : n = function n(e) {
            setTimeout(p, 0, e);
          } : (s = "setImmediate$" + Math.random() + "$", a = function a(t) {
            t.source === e && "string" == typeof t.data && 0 === t.data.indexOf(s) && p(+t.data.slice(s.length));
          }, e.addEventListener ? e.addEventListener("message", a, !1) : e.attachEvent("onmessage", a), n = function n(t) {
            e.postMessage(s + t, "*");
          }), l.setImmediate = function (e) {
            "function" != typeof e && (e = new Function("" + e));

            for (var t = new Array(arguments.length - 1), r = 0; r < t.length; r++) {
              t[r] = arguments[r + 1];
            }

            var i = {
              callback: e,
              args: t
            };
            return f[h] = i, n(h), h++;
          }, l.clearImmediate = d;
        }

        function d(e) {
          delete f[e];
        }

        function p(e) {
          if (u) setTimeout(p, 0, e);else {
            var t = f[e];

            if (t) {
              u = !0;

              try {
                !function (e) {
                  var t = e.callback,
                      n = e.args;

                  switch (n.length) {
                    case 0:
                      t();
                      break;

                    case 1:
                      t(n[0]);
                      break;

                    case 2:
                      t(n[0], n[1]);
                      break;

                    case 3:
                      t(n[0], n[1], n[2]);
                      break;

                    default:
                      t.apply(r, n);
                  }
                }(t);
              } finally {
                d(e), u = !1;
              }
            }
          }
        }
      }("undefined" == typeof self ? void 0 === e ? this : e : self);
    }).call(this, r(2), r(3));
  }, function (e, t, r) {
    (function (t) {
      function r(e) {
        try {
          if (!t.localStorage) return !1;
        } catch (e) {
          return !1;
        }

        var r = t.localStorage[e];
        return null != r && "true" === String(r).toLowerCase();
      }

      e.exports = function (e, t) {
        if (r("noDeprecation")) return e;
        var n = !1;
        return function () {
          if (!n) {
            if (r("throwDeprecation")) throw new Error(t);
            r("traceDeprecation") ? console.trace(t) : console.warn(t), n = !0;
          }

          return e.apply(this, arguments);
        };
      };
    }).call(this, r(2));
  }, function (e, t, r) {

    e.exports = o;
    var n = r(25),
        i = r(7);

    function o(e) {
      if (!(this instanceof o)) return new o(e);
      n.call(this, e);
    }

    i.inherits = r(4), i.inherits(o, n), o.prototype._transform = function (e, t, r) {
      r(null, e);
    };
  }, function (e, t, r) {
    e.exports = r(16);
  }, function (e, t, r) {
    e.exports = r(5);
  }, function (e, t, r) {
    e.exports = r(15).Transform;
  }, function (e, t, r) {
    e.exports = r(15).PassThrough;
  }, function (e, t, r) {

    (function (e, n) {
      var i = r(26),
          o = r(53),
          s = r(54),
          a = r(57),
          h = r(60);

      for (var f in h) {
        t[f] = h[f];
      }

      t.NONE = 0, t.DEFLATE = 1, t.INFLATE = 2, t.GZIP = 3, t.GUNZIP = 4, t.DEFLATERAW = 5, t.INFLATERAW = 6, t.UNZIP = 7;

      function u(e) {
        if ("number" != typeof e || e < t.DEFLATE || e > t.UNZIP) throw new TypeError("Bad argument");
        this.dictionary = null, this.err = 0, this.flush = 0, this.init_done = !1, this.level = 0, this.memLevel = 0, this.mode = e, this.strategy = 0, this.windowBits = 0, this.write_in_progress = !1, this.pending_close = !1, this.gzip_id_bytes_read = 0;
      }

      u.prototype.close = function () {
        this.write_in_progress ? this.pending_close = !0 : (this.pending_close = !1, i(this.init_done, "close before init"), i(this.mode <= t.UNZIP), this.mode === t.DEFLATE || this.mode === t.GZIP || this.mode === t.DEFLATERAW ? s.deflateEnd(this.strm) : this.mode !== t.INFLATE && this.mode !== t.GUNZIP && this.mode !== t.INFLATERAW && this.mode !== t.UNZIP || a.inflateEnd(this.strm), this.mode = t.NONE, this.dictionary = null);
      }, u.prototype.write = function (e, t, r, n, i, o, s) {
        return this._write(!0, e, t, r, n, i, o, s);
      }, u.prototype.writeSync = function (e, t, r, n, i, o, s) {
        return this._write(!1, e, t, r, n, i, o, s);
      }, u.prototype._write = function (r, o, s, a, h, f, u, c) {
        if (i.equal(arguments.length, 8), i(this.init_done, "write before init"), i(this.mode !== t.NONE, "already finalized"), i.equal(!1, this.write_in_progress, "write already in progress"), i.equal(!1, this.pending_close, "close is pending"), this.write_in_progress = !0, i.equal(!1, void 0 === o, "must provide flush value"), this.write_in_progress = !0, o !== t.Z_NO_FLUSH && o !== t.Z_PARTIAL_FLUSH && o !== t.Z_SYNC_FLUSH && o !== t.Z_FULL_FLUSH && o !== t.Z_FINISH && o !== t.Z_BLOCK) throw new Error("Invalid flush value");
        if (null == s && (s = e.alloc(0), h = 0, a = 0), this.strm.avail_in = h, this.strm.input = s, this.strm.next_in = a, this.strm.avail_out = c, this.strm.output = f, this.strm.next_out = u, this.flush = o, !r) return this._process(), this._checkError() ? this._afterSync() : void 0;
        var l = this;
        return n.nextTick(function () {
          l._process(), l._after();
        }), this;
      }, u.prototype._afterSync = function () {
        var e = this.strm.avail_out,
            t = this.strm.avail_in;
        return this.write_in_progress = !1, [t, e];
      }, u.prototype._process = function () {
        var e = null;

        switch (this.mode) {
          case t.DEFLATE:
          case t.GZIP:
          case t.DEFLATERAW:
            this.err = s.deflate(this.strm, this.flush);
            break;

          case t.UNZIP:
            switch (this.strm.avail_in > 0 && (e = this.strm.next_in), this.gzip_id_bytes_read) {
              case 0:
                if (null === e) break;

                if (31 !== this.strm.input[e]) {
                  this.mode = t.INFLATE;
                  break;
                }

                if (this.gzip_id_bytes_read = 1, e++, 1 === this.strm.avail_in) break;

              case 1:
                if (null === e) break;
                139 === this.strm.input[e] ? (this.gzip_id_bytes_read = 2, this.mode = t.GUNZIP) : this.mode = t.INFLATE;
                break;

              default:
                throw new Error("invalid number of gzip magic number bytes read");
            }

          case t.INFLATE:
          case t.GUNZIP:
          case t.INFLATERAW:
            for (this.err = a.inflate(this.strm, this.flush), this.err === t.Z_NEED_DICT && this.dictionary && (this.err = a.inflateSetDictionary(this.strm, this.dictionary), this.err === t.Z_OK ? this.err = a.inflate(this.strm, this.flush) : this.err === t.Z_DATA_ERROR && (this.err = t.Z_NEED_DICT)); this.strm.avail_in > 0 && this.mode === t.GUNZIP && this.err === t.Z_STREAM_END && 0 !== this.strm.next_in[0];) {
              this.reset(), this.err = a.inflate(this.strm, this.flush);
            }

            break;

          default:
            throw new Error("Unknown mode " + this.mode);
        }
      }, u.prototype._checkError = function () {
        switch (this.err) {
          case t.Z_OK:
          case t.Z_BUF_ERROR:
            if (0 !== this.strm.avail_out && this.flush === t.Z_FINISH) return this._error("unexpected end of file"), !1;
            break;

          case t.Z_STREAM_END:
            break;

          case t.Z_NEED_DICT:
            return null == this.dictionary ? this._error("Missing dictionary") : this._error("Bad dictionary"), !1;

          default:
            return this._error("Zlib error"), !1;
        }

        return !0;
      }, u.prototype._after = function () {
        if (this._checkError()) {
          var e = this.strm.avail_out,
              t = this.strm.avail_in;
          this.write_in_progress = !1, this.callback(t, e), this.pending_close && this.close();
        }
      }, u.prototype._error = function (e) {
        this.strm.msg && (e = this.strm.msg), this.onerror(e, this.err), this.write_in_progress = !1, this.pending_close && this.close();
      }, u.prototype.init = function (e, r, n, o, s) {
        i(4 === arguments.length || 5 === arguments.length, "init(windowBits, level, memLevel, strategy, [dictionary])"), i(e >= 8 && e <= 15, "invalid windowBits"), i(r >= -1 && r <= 9, "invalid compression level"), i(n >= 1 && n <= 9, "invalid memlevel"), i(o === t.Z_FILTERED || o === t.Z_HUFFMAN_ONLY || o === t.Z_RLE || o === t.Z_FIXED || o === t.Z_DEFAULT_STRATEGY, "invalid strategy"), this._init(r, e, n, o, s), this._setDictionary();
      }, u.prototype.params = function () {
        throw new Error("deflateParams Not supported");
      }, u.prototype.reset = function () {
        this._reset(), this._setDictionary();
      }, u.prototype._init = function (e, r, n, i, h) {
        switch (this.level = e, this.windowBits = r, this.memLevel = n, this.strategy = i, this.flush = t.Z_NO_FLUSH, this.err = t.Z_OK, this.mode !== t.GZIP && this.mode !== t.GUNZIP || (this.windowBits += 16), this.mode === t.UNZIP && (this.windowBits += 32), this.mode !== t.DEFLATERAW && this.mode !== t.INFLATERAW || (this.windowBits = -1 * this.windowBits), this.strm = new o(), this.mode) {
          case t.DEFLATE:
          case t.GZIP:
          case t.DEFLATERAW:
            this.err = s.deflateInit2(this.strm, this.level, t.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
            break;

          case t.INFLATE:
          case t.GUNZIP:
          case t.INFLATERAW:
          case t.UNZIP:
            this.err = a.inflateInit2(this.strm, this.windowBits);
            break;

          default:
            throw new Error("Unknown mode " + this.mode);
        }

        this.err !== t.Z_OK && this._error("Init error"), this.dictionary = h, this.write_in_progress = !1, this.init_done = !0;
      }, u.prototype._setDictionary = function () {
        if (null != this.dictionary) {
          switch (this.err = t.Z_OK, this.mode) {
            case t.DEFLATE:
            case t.DEFLATERAW:
              this.err = s.deflateSetDictionary(this.strm, this.dictionary);
          }

          this.err !== t.Z_OK && this._error("Failed to set dictionary");
        }
      }, u.prototype._reset = function () {
        switch (this.err = t.Z_OK, this.mode) {
          case t.DEFLATE:
          case t.DEFLATERAW:
          case t.GZIP:
            this.err = s.deflateReset(this.strm);
            break;

          case t.INFLATE:
          case t.INFLATERAW:
          case t.GUNZIP:
            this.err = a.inflateReset(this.strm);
        }

        this.err !== t.Z_OK && this._error("Failed to reset stream");
      }, t.Zlib = u;
    }).call(this, r(1).Buffer, r(3));
  }, function (e, t) {
    e.exports = function (e) {
      return e && "object" == _typeof(e) && "function" == typeof e.copy && "function" == typeof e.fill && "function" == typeof e.readUInt8;
    };
  }, function (e, t, r) {

    e.exports = function () {
      this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
    };
  }, function (e, t, r) {

    var n,
        i = r(11),
        o = r(55),
        s = r(28),
        a = r(29),
        h = r(56),
        f = 0,
        u = 1,
        c = 3,
        l = 4,
        d = 5,
        p = 0,
        g = 1,
        m = -2,
        _ = -3,
        y = -5,
        b = -1,
        w = 1,
        v = 2,
        E = 3,
        S = 4,
        A = 0,
        k = 2,
        x = 8,
        C = 9,
        R = 15,
        T = 8,
        I = 286,
        B = 30,
        L = 19,
        N = 2 * I + 1,
        F = 15,
        M = 3,
        O = 258,
        P = O + M + 1,
        U = 32,
        z = 42,
        D = 69,
        j = 73,
        q = 91,
        Z = 103,
        H = 113,
        $ = 666,
        V = 1,
        Y = 2,
        G = 3,
        W = 4,
        K = 3;

    function X(e, t) {
      return e.msg = h[t], t;
    }

    function Q(e) {
      return (e << 1) - (e > 4 ? 9 : 0);
    }

    function J(e) {
      for (var t = e.length; --t >= 0;) {
        e[t] = 0;
      }
    }

    function ee(e) {
      var t = e.state,
          r = t.pending;
      r > e.avail_out && (r = e.avail_out), 0 !== r && (i.arraySet(e.output, t.pending_buf, t.pending_out, r, e.next_out), e.next_out += r, t.pending_out += r, e.total_out += r, e.avail_out -= r, t.pending -= r, 0 === t.pending && (t.pending_out = 0));
    }

    function te(e, t) {
      o._tr_flush_block(e, e.block_start >= 0 ? e.block_start : -1, e.strstart - e.block_start, t), e.block_start = e.strstart, ee(e.strm);
    }

    function re(e, t) {
      e.pending_buf[e.pending++] = t;
    }

    function ne(e, t) {
      e.pending_buf[e.pending++] = t >>> 8 & 255, e.pending_buf[e.pending++] = 255 & t;
    }

    function ie(e, t) {
      var r,
          n,
          i = e.max_chain_length,
          o = e.strstart,
          s = e.prev_length,
          a = e.nice_match,
          h = e.strstart > e.w_size - P ? e.strstart - (e.w_size - P) : 0,
          f = e.window,
          u = e.w_mask,
          c = e.prev,
          l = e.strstart + O,
          d = f[o + s - 1],
          p = f[o + s];
      e.prev_length >= e.good_match && (i >>= 2), a > e.lookahead && (a = e.lookahead);

      do {
        if (f[(r = t) + s] === p && f[r + s - 1] === d && f[r] === f[o] && f[++r] === f[o + 1]) {
          o += 2, r++;

          do {} while (f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && f[++o] === f[++r] && o < l);

          if (n = O - (l - o), o = l - O, n > s) {
            if (e.match_start = t, s = n, n >= a) break;
            d = f[o + s - 1], p = f[o + s];
          }
        }
      } while ((t = c[t & u]) > h && 0 != --i);

      return s <= e.lookahead ? s : e.lookahead;
    }

    function oe(e) {
      var t,
          r,
          n,
          o,
          h,
          f,
          u,
          c,
          l,
          d,
          p = e.w_size;

      do {
        if (o = e.window_size - e.lookahead - e.strstart, e.strstart >= p + (p - P)) {
          i.arraySet(e.window, e.window, p, p, 0), e.match_start -= p, e.strstart -= p, e.block_start -= p, t = r = e.hash_size;

          do {
            n = e.head[--t], e.head[t] = n >= p ? n - p : 0;
          } while (--r);

          t = r = p;

          do {
            n = e.prev[--t], e.prev[t] = n >= p ? n - p : 0;
          } while (--r);

          o += p;
        }

        if (0 === e.strm.avail_in) break;
        if (f = e.strm, u = e.window, c = e.strstart + e.lookahead, l = o, d = void 0, (d = f.avail_in) > l && (d = l), r = 0 === d ? 0 : (f.avail_in -= d, i.arraySet(u, f.input, f.next_in, d, c), 1 === f.state.wrap ? f.adler = s(f.adler, u, d, c) : 2 === f.state.wrap && (f.adler = a(f.adler, u, d, c)), f.next_in += d, f.total_in += d, d), e.lookahead += r, e.lookahead + e.insert >= M) for (h = e.strstart - e.insert, e.ins_h = e.window[h], e.ins_h = (e.ins_h << e.hash_shift ^ e.window[h + 1]) & e.hash_mask; e.insert && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[h + M - 1]) & e.hash_mask, e.prev[h & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = h, h++, e.insert--, !(e.lookahead + e.insert < M));) {
        }
      } while (e.lookahead < P && 0 !== e.strm.avail_in);
    }

    function se(e, t) {
      for (var r, n;;) {
        if (e.lookahead < P) {
          if (oe(e), e.lookahead < P && t === f) return V;
          if (0 === e.lookahead) break;
        }

        if (r = 0, e.lookahead >= M && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + M - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), 0 !== r && e.strstart - r <= e.w_size - P && (e.match_length = ie(e, r)), e.match_length >= M) {
          if (n = o._tr_tally(e, e.strstart - e.match_start, e.match_length - M), e.lookahead -= e.match_length, e.match_length <= e.max_lazy_match && e.lookahead >= M) {
            e.match_length--;

            do {
              e.strstart++, e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + M - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart;
            } while (0 != --e.match_length);

            e.strstart++;
          } else e.strstart += e.match_length, e.match_length = 0, e.ins_h = e.window[e.strstart], e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + 1]) & e.hash_mask;
        } else n = o._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++;
        if (n && (te(e, !1), 0 === e.strm.avail_out)) return V;
      }

      return e.insert = e.strstart < M - 1 ? e.strstart : M - 1, t === l ? (te(e, !0), 0 === e.strm.avail_out ? G : W) : e.last_lit && (te(e, !1), 0 === e.strm.avail_out) ? V : Y;
    }

    function ae(e, t) {
      for (var r, n, i;;) {
        if (e.lookahead < P) {
          if (oe(e), e.lookahead < P && t === f) return V;
          if (0 === e.lookahead) break;
        }

        if (r = 0, e.lookahead >= M && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + M - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart), e.prev_length = e.match_length, e.prev_match = e.match_start, e.match_length = M - 1, 0 !== r && e.prev_length < e.max_lazy_match && e.strstart - r <= e.w_size - P && (e.match_length = ie(e, r), e.match_length <= 5 && (e.strategy === w || e.match_length === M && e.strstart - e.match_start > 4096) && (e.match_length = M - 1)), e.prev_length >= M && e.match_length <= e.prev_length) {
          i = e.strstart + e.lookahead - M, n = o._tr_tally(e, e.strstart - 1 - e.prev_match, e.prev_length - M), e.lookahead -= e.prev_length - 1, e.prev_length -= 2;

          do {
            ++e.strstart <= i && (e.ins_h = (e.ins_h << e.hash_shift ^ e.window[e.strstart + M - 1]) & e.hash_mask, r = e.prev[e.strstart & e.w_mask] = e.head[e.ins_h], e.head[e.ins_h] = e.strstart);
          } while (0 != --e.prev_length);

          if (e.match_available = 0, e.match_length = M - 1, e.strstart++, n && (te(e, !1), 0 === e.strm.avail_out)) return V;
        } else if (e.match_available) {
          if ((n = o._tr_tally(e, 0, e.window[e.strstart - 1])) && te(e, !1), e.strstart++, e.lookahead--, 0 === e.strm.avail_out) return V;
        } else e.match_available = 1, e.strstart++, e.lookahead--;
      }

      return e.match_available && (n = o._tr_tally(e, 0, e.window[e.strstart - 1]), e.match_available = 0), e.insert = e.strstart < M - 1 ? e.strstart : M - 1, t === l ? (te(e, !0), 0 === e.strm.avail_out ? G : W) : e.last_lit && (te(e, !1), 0 === e.strm.avail_out) ? V : Y;
    }

    function he(e, t, r, n, i) {
      this.good_length = e, this.max_lazy = t, this.nice_length = r, this.max_chain = n, this.func = i;
    }

    function fe() {
      this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = x, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new i.Buf16(2 * N), this.dyn_dtree = new i.Buf16(2 * (2 * B + 1)), this.bl_tree = new i.Buf16(2 * (2 * L + 1)), J(this.dyn_ltree), J(this.dyn_dtree), J(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new i.Buf16(F + 1), this.heap = new i.Buf16(2 * I + 1), J(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new i.Buf16(2 * I + 1), J(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
    }

    function ue(e) {
      var t;
      return e && e.state ? (e.total_in = e.total_out = 0, e.data_type = k, (t = e.state).pending = 0, t.pending_out = 0, t.wrap < 0 && (t.wrap = -t.wrap), t.status = t.wrap ? z : H, e.adler = 2 === t.wrap ? 0 : 1, t.last_flush = f, o._tr_init(t), p) : X(e, m);
    }

    function ce(e) {
      var t,
          r = ue(e);
      return r === p && ((t = e.state).window_size = 2 * t.w_size, J(t.head), t.max_lazy_match = n[t.level].max_lazy, t.good_match = n[t.level].good_length, t.nice_match = n[t.level].nice_length, t.max_chain_length = n[t.level].max_chain, t.strstart = 0, t.block_start = 0, t.lookahead = 0, t.insert = 0, t.match_length = t.prev_length = M - 1, t.match_available = 0, t.ins_h = 0), r;
    }

    function le(e, t, r, n, o, s) {
      if (!e) return m;
      var a = 1;
      if (t === b && (t = 6), n < 0 ? (a = 0, n = -n) : n > 15 && (a = 2, n -= 16), o < 1 || o > C || r !== x || n < 8 || n > 15 || t < 0 || t > 9 || s < 0 || s > S) return X(e, m);
      8 === n && (n = 9);
      var h = new fe();
      return e.state = h, h.strm = e, h.wrap = a, h.gzhead = null, h.w_bits = n, h.w_size = 1 << h.w_bits, h.w_mask = h.w_size - 1, h.hash_bits = o + 7, h.hash_size = 1 << h.hash_bits, h.hash_mask = h.hash_size - 1, h.hash_shift = ~~((h.hash_bits + M - 1) / M), h.window = new i.Buf8(2 * h.w_size), h.head = new i.Buf16(h.hash_size), h.prev = new i.Buf16(h.w_size), h.lit_bufsize = 1 << o + 6, h.pending_buf_size = 4 * h.lit_bufsize, h.pending_buf = new i.Buf8(h.pending_buf_size), h.d_buf = 1 * h.lit_bufsize, h.l_buf = 3 * h.lit_bufsize, h.level = t, h.strategy = s, h.method = r, ce(e);
    }

    n = [new he(0, 0, 0, 0, function (e, t) {
      var r = 65535;

      for (r > e.pending_buf_size - 5 && (r = e.pending_buf_size - 5);;) {
        if (e.lookahead <= 1) {
          if (oe(e), 0 === e.lookahead && t === f) return V;
          if (0 === e.lookahead) break;
        }

        e.strstart += e.lookahead, e.lookahead = 0;
        var n = e.block_start + r;
        if ((0 === e.strstart || e.strstart >= n) && (e.lookahead = e.strstart - n, e.strstart = n, te(e, !1), 0 === e.strm.avail_out)) return V;
        if (e.strstart - e.block_start >= e.w_size - P && (te(e, !1), 0 === e.strm.avail_out)) return V;
      }

      return e.insert = 0, t === l ? (te(e, !0), 0 === e.strm.avail_out ? G : W) : (e.strstart > e.block_start && (te(e, !1), e.strm.avail_out), V);
    }), new he(4, 4, 8, 4, se), new he(4, 5, 16, 8, se), new he(4, 6, 32, 32, se), new he(4, 4, 16, 16, ae), new he(8, 16, 32, 32, ae), new he(8, 16, 128, 128, ae), new he(8, 32, 128, 256, ae), new he(32, 128, 258, 1024, ae), new he(32, 258, 258, 4096, ae)], t.deflateInit = function (e, t) {
      return le(e, t, x, R, T, A);
    }, t.deflateInit2 = le, t.deflateReset = ce, t.deflateResetKeep = ue, t.deflateSetHeader = function (e, t) {
      return e && e.state ? 2 !== e.state.wrap ? m : (e.state.gzhead = t, p) : m;
    }, t.deflate = function (e, t) {
      var r, i, s, h;
      if (!e || !e.state || t > d || t < 0) return e ? X(e, m) : m;
      if (i = e.state, !e.output || !e.input && 0 !== e.avail_in || i.status === $ && t !== l) return X(e, 0 === e.avail_out ? y : m);
      if (i.strm = e, r = i.last_flush, i.last_flush = t, i.status === z) if (2 === i.wrap) e.adler = 0, re(i, 31), re(i, 139), re(i, 8), i.gzhead ? (re(i, (i.gzhead.text ? 1 : 0) + (i.gzhead.hcrc ? 2 : 0) + (i.gzhead.extra ? 4 : 0) + (i.gzhead.name ? 8 : 0) + (i.gzhead.comment ? 16 : 0)), re(i, 255 & i.gzhead.time), re(i, i.gzhead.time >> 8 & 255), re(i, i.gzhead.time >> 16 & 255), re(i, i.gzhead.time >> 24 & 255), re(i, 9 === i.level ? 2 : i.strategy >= v || i.level < 2 ? 4 : 0), re(i, 255 & i.gzhead.os), i.gzhead.extra && i.gzhead.extra.length && (re(i, 255 & i.gzhead.extra.length), re(i, i.gzhead.extra.length >> 8 & 255)), i.gzhead.hcrc && (e.adler = a(e.adler, i.pending_buf, i.pending, 0)), i.gzindex = 0, i.status = D) : (re(i, 0), re(i, 0), re(i, 0), re(i, 0), re(i, 0), re(i, 9 === i.level ? 2 : i.strategy >= v || i.level < 2 ? 4 : 0), re(i, K), i.status = H);else {
        var _ = x + (i.w_bits - 8 << 4) << 8;

        _ |= (i.strategy >= v || i.level < 2 ? 0 : i.level < 6 ? 1 : 6 === i.level ? 2 : 3) << 6, 0 !== i.strstart && (_ |= U), _ += 31 - _ % 31, i.status = H, ne(i, _), 0 !== i.strstart && (ne(i, e.adler >>> 16), ne(i, 65535 & e.adler)), e.adler = 1;
      }
      if (i.status === D) if (i.gzhead.extra) {
        for (s = i.pending; i.gzindex < (65535 & i.gzhead.extra.length) && (i.pending !== i.pending_buf_size || (i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), ee(e), s = i.pending, i.pending !== i.pending_buf_size));) {
          re(i, 255 & i.gzhead.extra[i.gzindex]), i.gzindex++;
        }

        i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), i.gzindex === i.gzhead.extra.length && (i.gzindex = 0, i.status = j);
      } else i.status = j;
      if (i.status === j) if (i.gzhead.name) {
        s = i.pending;

        do {
          if (i.pending === i.pending_buf_size && (i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), ee(e), s = i.pending, i.pending === i.pending_buf_size)) {
            h = 1;
            break;
          }

          h = i.gzindex < i.gzhead.name.length ? 255 & i.gzhead.name.charCodeAt(i.gzindex++) : 0, re(i, h);
        } while (0 !== h);

        i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), 0 === h && (i.gzindex = 0, i.status = q);
      } else i.status = q;
      if (i.status === q) if (i.gzhead.comment) {
        s = i.pending;

        do {
          if (i.pending === i.pending_buf_size && (i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), ee(e), s = i.pending, i.pending === i.pending_buf_size)) {
            h = 1;
            break;
          }

          h = i.gzindex < i.gzhead.comment.length ? 255 & i.gzhead.comment.charCodeAt(i.gzindex++) : 0, re(i, h);
        } while (0 !== h);

        i.gzhead.hcrc && i.pending > s && (e.adler = a(e.adler, i.pending_buf, i.pending - s, s)), 0 === h && (i.status = Z);
      } else i.status = Z;

      if (i.status === Z && (i.gzhead.hcrc ? (i.pending + 2 > i.pending_buf_size && ee(e), i.pending + 2 <= i.pending_buf_size && (re(i, 255 & e.adler), re(i, e.adler >> 8 & 255), e.adler = 0, i.status = H)) : i.status = H), 0 !== i.pending) {
        if (ee(e), 0 === e.avail_out) return i.last_flush = -1, p;
      } else if (0 === e.avail_in && Q(t) <= Q(r) && t !== l) return X(e, y);

      if (i.status === $ && 0 !== e.avail_in) return X(e, y);

      if (0 !== e.avail_in || 0 !== i.lookahead || t !== f && i.status !== $) {
        var b = i.strategy === v ? function (e, t) {
          for (var r;;) {
            if (0 === e.lookahead && (oe(e), 0 === e.lookahead)) {
              if (t === f) return V;
              break;
            }

            if (e.match_length = 0, r = o._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++, r && (te(e, !1), 0 === e.strm.avail_out)) return V;
          }

          return e.insert = 0, t === l ? (te(e, !0), 0 === e.strm.avail_out ? G : W) : e.last_lit && (te(e, !1), 0 === e.strm.avail_out) ? V : Y;
        }(i, t) : i.strategy === E ? function (e, t) {
          for (var r, n, i, s, a = e.window;;) {
            if (e.lookahead <= O) {
              if (oe(e), e.lookahead <= O && t === f) return V;
              if (0 === e.lookahead) break;
            }

            if (e.match_length = 0, e.lookahead >= M && e.strstart > 0 && (n = a[i = e.strstart - 1]) === a[++i] && n === a[++i] && n === a[++i]) {
              s = e.strstart + O;

              do {} while (n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && n === a[++i] && i < s);

              e.match_length = O - (s - i), e.match_length > e.lookahead && (e.match_length = e.lookahead);
            }

            if (e.match_length >= M ? (r = o._tr_tally(e, 1, e.match_length - M), e.lookahead -= e.match_length, e.strstart += e.match_length, e.match_length = 0) : (r = o._tr_tally(e, 0, e.window[e.strstart]), e.lookahead--, e.strstart++), r && (te(e, !1), 0 === e.strm.avail_out)) return V;
          }

          return e.insert = 0, t === l ? (te(e, !0), 0 === e.strm.avail_out ? G : W) : e.last_lit && (te(e, !1), 0 === e.strm.avail_out) ? V : Y;
        }(i, t) : n[i.level].func(i, t);
        if (b !== G && b !== W || (i.status = $), b === V || b === G) return 0 === e.avail_out && (i.last_flush = -1), p;
        if (b === Y && (t === u ? o._tr_align(i) : t !== d && (o._tr_stored_block(i, 0, 0, !1), t === c && (J(i.head), 0 === i.lookahead && (i.strstart = 0, i.block_start = 0, i.insert = 0))), ee(e), 0 === e.avail_out)) return i.last_flush = -1, p;
      }

      return t !== l ? p : i.wrap <= 0 ? g : (2 === i.wrap ? (re(i, 255 & e.adler), re(i, e.adler >> 8 & 255), re(i, e.adler >> 16 & 255), re(i, e.adler >> 24 & 255), re(i, 255 & e.total_in), re(i, e.total_in >> 8 & 255), re(i, e.total_in >> 16 & 255), re(i, e.total_in >> 24 & 255)) : (ne(i, e.adler >>> 16), ne(i, 65535 & e.adler)), ee(e), i.wrap > 0 && (i.wrap = -i.wrap), 0 !== i.pending ? p : g);
    }, t.deflateEnd = function (e) {
      var t;
      return e && e.state ? (t = e.state.status) !== z && t !== D && t !== j && t !== q && t !== Z && t !== H && t !== $ ? X(e, m) : (e.state = null, t === H ? X(e, _) : p) : m;
    }, t.deflateSetDictionary = function (e, t) {
      var r,
          n,
          o,
          a,
          h,
          f,
          u,
          c,
          l = t.length;
      if (!e || !e.state) return m;
      if (2 === (a = (r = e.state).wrap) || 1 === a && r.status !== z || r.lookahead) return m;

      for (1 === a && (e.adler = s(e.adler, t, l, 0)), r.wrap = 0, l >= r.w_size && (0 === a && (J(r.head), r.strstart = 0, r.block_start = 0, r.insert = 0), c = new i.Buf8(r.w_size), i.arraySet(c, t, l - r.w_size, r.w_size, 0), t = c, l = r.w_size), h = e.avail_in, f = e.next_in, u = e.input, e.avail_in = l, e.next_in = 0, e.input = t, oe(r); r.lookahead >= M;) {
        n = r.strstart, o = r.lookahead - (M - 1);

        do {
          r.ins_h = (r.ins_h << r.hash_shift ^ r.window[n + M - 1]) & r.hash_mask, r.prev[n & r.w_mask] = r.head[r.ins_h], r.head[r.ins_h] = n, n++;
        } while (--o);

        r.strstart = n, r.lookahead = M - 1, oe(r);
      }

      return r.strstart += r.lookahead, r.block_start = r.strstart, r.insert = r.lookahead, r.lookahead = 0, r.match_length = r.prev_length = M - 1, r.match_available = 0, e.next_in = f, e.input = u, e.avail_in = h, r.wrap = a, p;
    }, t.deflateInfo = "pako deflate (from Nodeca project)";
  }, function (e, t, r) {

    var n = r(11),
        i = 4,
        o = 0,
        s = 1,
        a = 2;

    function h(e) {
      for (var t = e.length; --t >= 0;) {
        e[t] = 0;
      }
    }

    var f = 0,
        u = 1,
        c = 2,
        l = 29,
        d = 256,
        p = d + 1 + l,
        g = 30,
        m = 19,
        _ = 2 * p + 1,
        y = 15,
        b = 16,
        w = 7,
        v = 256,
        E = 16,
        S = 17,
        A = 18,
        k = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0],
        x = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13],
        C = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7],
        R = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15],
        T = new Array(2 * (p + 2));

    h(T);
    var I = new Array(2 * g);
    h(I);
    var B = new Array(512);
    h(B);
    var L = new Array(256);
    h(L);
    var N = new Array(l);
    h(N);
    var F,
        M,
        O,
        P = new Array(g);

    function U(e, t, r, n, i) {
      this.static_tree = e, this.extra_bits = t, this.extra_base = r, this.elems = n, this.max_length = i, this.has_stree = e && e.length;
    }

    function z(e, t) {
      this.dyn_tree = e, this.max_code = 0, this.stat_desc = t;
    }

    function D(e) {
      return e < 256 ? B[e] : B[256 + (e >>> 7)];
    }

    function j(e, t) {
      e.pending_buf[e.pending++] = 255 & t, e.pending_buf[e.pending++] = t >>> 8 & 255;
    }

    function q(e, t, r) {
      e.bi_valid > b - r ? (e.bi_buf |= t << e.bi_valid & 65535, j(e, e.bi_buf), e.bi_buf = t >> b - e.bi_valid, e.bi_valid += r - b) : (e.bi_buf |= t << e.bi_valid & 65535, e.bi_valid += r);
    }

    function Z(e, t, r) {
      q(e, r[2 * t], r[2 * t + 1]);
    }

    function H(e, t) {
      var r = 0;

      do {
        r |= 1 & e, e >>>= 1, r <<= 1;
      } while (--t > 0);

      return r >>> 1;
    }

    function $(e, t, r) {
      var n,
          i,
          o = new Array(y + 1),
          s = 0;

      for (n = 1; n <= y; n++) {
        o[n] = s = s + r[n - 1] << 1;
      }

      for (i = 0; i <= t; i++) {
        var a = e[2 * i + 1];
        0 !== a && (e[2 * i] = H(o[a]++, a));
      }
    }

    function V(e) {
      var t;

      for (t = 0; t < p; t++) {
        e.dyn_ltree[2 * t] = 0;
      }

      for (t = 0; t < g; t++) {
        e.dyn_dtree[2 * t] = 0;
      }

      for (t = 0; t < m; t++) {
        e.bl_tree[2 * t] = 0;
      }

      e.dyn_ltree[2 * v] = 1, e.opt_len = e.static_len = 0, e.last_lit = e.matches = 0;
    }

    function Y(e) {
      e.bi_valid > 8 ? j(e, e.bi_buf) : e.bi_valid > 0 && (e.pending_buf[e.pending++] = e.bi_buf), e.bi_buf = 0, e.bi_valid = 0;
    }

    function G(e, t, r, n) {
      var i = 2 * t,
          o = 2 * r;
      return e[i] < e[o] || e[i] === e[o] && n[t] <= n[r];
    }

    function W(e, t, r) {
      for (var n = e.heap[r], i = r << 1; i <= e.heap_len && (i < e.heap_len && G(t, e.heap[i + 1], e.heap[i], e.depth) && i++, !G(t, n, e.heap[i], e.depth));) {
        e.heap[r] = e.heap[i], r = i, i <<= 1;
      }

      e.heap[r] = n;
    }

    function K(e, t, r) {
      var n,
          i,
          o,
          s,
          a = 0;
      if (0 !== e.last_lit) do {
        n = e.pending_buf[e.d_buf + 2 * a] << 8 | e.pending_buf[e.d_buf + 2 * a + 1], i = e.pending_buf[e.l_buf + a], a++, 0 === n ? Z(e, i, t) : (Z(e, (o = L[i]) + d + 1, t), 0 !== (s = k[o]) && q(e, i -= N[o], s), Z(e, o = D(--n), r), 0 !== (s = x[o]) && q(e, n -= P[o], s));
      } while (a < e.last_lit);
      Z(e, v, t);
    }

    function X(e, t) {
      var r,
          n,
          i,
          o = t.dyn_tree,
          s = t.stat_desc.static_tree,
          a = t.stat_desc.has_stree,
          h = t.stat_desc.elems,
          f = -1;

      for (e.heap_len = 0, e.heap_max = _, r = 0; r < h; r++) {
        0 !== o[2 * r] ? (e.heap[++e.heap_len] = f = r, e.depth[r] = 0) : o[2 * r + 1] = 0;
      }

      for (; e.heap_len < 2;) {
        o[2 * (i = e.heap[++e.heap_len] = f < 2 ? ++f : 0)] = 1, e.depth[i] = 0, e.opt_len--, a && (e.static_len -= s[2 * i + 1]);
      }

      for (t.max_code = f, r = e.heap_len >> 1; r >= 1; r--) {
        W(e, o, r);
      }

      i = h;

      do {
        r = e.heap[1], e.heap[1] = e.heap[e.heap_len--], W(e, o, 1), n = e.heap[1], e.heap[--e.heap_max] = r, e.heap[--e.heap_max] = n, o[2 * i] = o[2 * r] + o[2 * n], e.depth[i] = (e.depth[r] >= e.depth[n] ? e.depth[r] : e.depth[n]) + 1, o[2 * r + 1] = o[2 * n + 1] = i, e.heap[1] = i++, W(e, o, 1);
      } while (e.heap_len >= 2);

      e.heap[--e.heap_max] = e.heap[1], function (e, t) {
        var r,
            n,
            i,
            o,
            s,
            a,
            h = t.dyn_tree,
            f = t.max_code,
            u = t.stat_desc.static_tree,
            c = t.stat_desc.has_stree,
            l = t.stat_desc.extra_bits,
            d = t.stat_desc.extra_base,
            p = t.stat_desc.max_length,
            g = 0;

        for (o = 0; o <= y; o++) {
          e.bl_count[o] = 0;
        }

        for (h[2 * e.heap[e.heap_max] + 1] = 0, r = e.heap_max + 1; r < _; r++) {
          (o = h[2 * h[2 * (n = e.heap[r]) + 1] + 1] + 1) > p && (o = p, g++), h[2 * n + 1] = o, n > f || (e.bl_count[o]++, s = 0, n >= d && (s = l[n - d]), a = h[2 * n], e.opt_len += a * (o + s), c && (e.static_len += a * (u[2 * n + 1] + s)));
        }

        if (0 !== g) {
          do {
            for (o = p - 1; 0 === e.bl_count[o];) {
              o--;
            }

            e.bl_count[o]--, e.bl_count[o + 1] += 2, e.bl_count[p]--, g -= 2;
          } while (g > 0);

          for (o = p; 0 !== o; o--) {
            for (n = e.bl_count[o]; 0 !== n;) {
              (i = e.heap[--r]) > f || (h[2 * i + 1] !== o && (e.opt_len += (o - h[2 * i + 1]) * h[2 * i], h[2 * i + 1] = o), n--);
            }
          }
        }
      }(e, t), $(o, f, e.bl_count);
    }

    function Q(e, t, r) {
      var n,
          i,
          o = -1,
          s = t[1],
          a = 0,
          h = 7,
          f = 4;

      for (0 === s && (h = 138, f = 3), t[2 * (r + 1) + 1] = 65535, n = 0; n <= r; n++) {
        i = s, s = t[2 * (n + 1) + 1], ++a < h && i === s || (a < f ? e.bl_tree[2 * i] += a : 0 !== i ? (i !== o && e.bl_tree[2 * i]++, e.bl_tree[2 * E]++) : a <= 10 ? e.bl_tree[2 * S]++ : e.bl_tree[2 * A]++, a = 0, o = i, 0 === s ? (h = 138, f = 3) : i === s ? (h = 6, f = 3) : (h = 7, f = 4));
      }
    }

    function J(e, t, r) {
      var n,
          i,
          o = -1,
          s = t[1],
          a = 0,
          h = 7,
          f = 4;

      for (0 === s && (h = 138, f = 3), n = 0; n <= r; n++) {
        if (i = s, s = t[2 * (n + 1) + 1], !(++a < h && i === s)) {
          if (a < f) do {
            Z(e, i, e.bl_tree);
          } while (0 != --a);else 0 !== i ? (i !== o && (Z(e, i, e.bl_tree), a--), Z(e, E, e.bl_tree), q(e, a - 3, 2)) : a <= 10 ? (Z(e, S, e.bl_tree), q(e, a - 3, 3)) : (Z(e, A, e.bl_tree), q(e, a - 11, 7));
          a = 0, o = i, 0 === s ? (h = 138, f = 3) : i === s ? (h = 6, f = 3) : (h = 7, f = 4);
        }
      }
    }

    h(P);
    var ee = !1;

    function te(e, t, r, i) {
      q(e, (f << 1) + (i ? 1 : 0), 3), function (e, t, r, i) {
        Y(e), i && (j(e, r), j(e, ~r)), n.arraySet(e.pending_buf, e.window, t, r, e.pending), e.pending += r;
      }(e, t, r, !0);
    }

    t._tr_init = function (e) {
      ee || (function () {
        var e,
            t,
            r,
            n,
            i,
            o = new Array(y + 1);

        for (r = 0, n = 0; n < l - 1; n++) {
          for (N[n] = r, e = 0; e < 1 << k[n]; e++) {
            L[r++] = n;
          }
        }

        for (L[r - 1] = n, i = 0, n = 0; n < 16; n++) {
          for (P[n] = i, e = 0; e < 1 << x[n]; e++) {
            B[i++] = n;
          }
        }

        for (i >>= 7; n < g; n++) {
          for (P[n] = i << 7, e = 0; e < 1 << x[n] - 7; e++) {
            B[256 + i++] = n;
          }
        }

        for (t = 0; t <= y; t++) {
          o[t] = 0;
        }

        for (e = 0; e <= 143;) {
          T[2 * e + 1] = 8, e++, o[8]++;
        }

        for (; e <= 255;) {
          T[2 * e + 1] = 9, e++, o[9]++;
        }

        for (; e <= 279;) {
          T[2 * e + 1] = 7, e++, o[7]++;
        }

        for (; e <= 287;) {
          T[2 * e + 1] = 8, e++, o[8]++;
        }

        for ($(T, p + 1, o), e = 0; e < g; e++) {
          I[2 * e + 1] = 5, I[2 * e] = H(e, 5);
        }

        F = new U(T, k, d + 1, p, y), M = new U(I, x, 0, g, y), O = new U(new Array(0), C, 0, m, w);
      }(), ee = !0), e.l_desc = new z(e.dyn_ltree, F), e.d_desc = new z(e.dyn_dtree, M), e.bl_desc = new z(e.bl_tree, O), e.bi_buf = 0, e.bi_valid = 0, V(e);
    }, t._tr_stored_block = te, t._tr_flush_block = function (e, t, r, n) {
      var h,
          f,
          l = 0;
      e.level > 0 ? (e.strm.data_type === a && (e.strm.data_type = function (e) {
        var t,
            r = 4093624447;

        for (t = 0; t <= 31; t++, r >>>= 1) {
          if (1 & r && 0 !== e.dyn_ltree[2 * t]) return o;
        }

        if (0 !== e.dyn_ltree[18] || 0 !== e.dyn_ltree[20] || 0 !== e.dyn_ltree[26]) return s;

        for (t = 32; t < d; t++) {
          if (0 !== e.dyn_ltree[2 * t]) return s;
        }

        return o;
      }(e)), X(e, e.l_desc), X(e, e.d_desc), l = function (e) {
        var t;

        for (Q(e, e.dyn_ltree, e.l_desc.max_code), Q(e, e.dyn_dtree, e.d_desc.max_code), X(e, e.bl_desc), t = m - 1; t >= 3 && 0 === e.bl_tree[2 * R[t] + 1]; t--) {
        }

        return e.opt_len += 3 * (t + 1) + 5 + 5 + 4, t;
      }(e), h = e.opt_len + 3 + 7 >>> 3, (f = e.static_len + 3 + 7 >>> 3) <= h && (h = f)) : h = f = r + 5, r + 4 <= h && -1 !== t ? te(e, t, r, n) : e.strategy === i || f === h ? (q(e, (u << 1) + (n ? 1 : 0), 3), K(e, T, I)) : (q(e, (c << 1) + (n ? 1 : 0), 3), function (e, t, r, n) {
        var i;

        for (q(e, t - 257, 5), q(e, r - 1, 5), q(e, n - 4, 4), i = 0; i < n; i++) {
          q(e, e.bl_tree[2 * R[i] + 1], 3);
        }

        J(e, e.dyn_ltree, t - 1), J(e, e.dyn_dtree, r - 1);
      }(e, e.l_desc.max_code + 1, e.d_desc.max_code + 1, l + 1), K(e, e.dyn_ltree, e.dyn_dtree)), V(e), n && Y(e);
    }, t._tr_tally = function (e, t, r) {
      return e.pending_buf[e.d_buf + 2 * e.last_lit] = t >>> 8 & 255, e.pending_buf[e.d_buf + 2 * e.last_lit + 1] = 255 & t, e.pending_buf[e.l_buf + e.last_lit] = 255 & r, e.last_lit++, 0 === t ? e.dyn_ltree[2 * r]++ : (e.matches++, t--, e.dyn_ltree[2 * (L[r] + d + 1)]++, e.dyn_dtree[2 * D(t)]++), e.last_lit === e.lit_bufsize - 1;
    }, t._tr_align = function (e) {
      q(e, u << 1, 3), Z(e, v, T), function (e) {
        16 === e.bi_valid ? (j(e, e.bi_buf), e.bi_buf = 0, e.bi_valid = 0) : e.bi_valid >= 8 && (e.pending_buf[e.pending++] = 255 & e.bi_buf, e.bi_buf >>= 8, e.bi_valid -= 8);
      }(e);
    };
  }, function (e, t, r) {

    e.exports = {
      2: "need dictionary",
      1: "stream end",
      0: "",
      "-1": "file error",
      "-2": "stream error",
      "-3": "data error",
      "-4": "insufficient memory",
      "-5": "buffer error",
      "-6": "incompatible version"
    };
  }, function (e, t, r) {

    var n = r(11),
        i = r(28),
        o = r(29),
        s = r(58),
        a = r(59),
        h = 0,
        f = 1,
        u = 2,
        c = 4,
        l = 5,
        d = 6,
        p = 0,
        g = 1,
        m = 2,
        _ = -2,
        y = -3,
        b = -4,
        w = -5,
        v = 8,
        E = 1,
        S = 2,
        A = 3,
        k = 4,
        x = 5,
        C = 6,
        R = 7,
        T = 8,
        I = 9,
        B = 10,
        L = 11,
        N = 12,
        F = 13,
        M = 14,
        O = 15,
        P = 16,
        U = 17,
        z = 18,
        D = 19,
        j = 20,
        q = 21,
        Z = 22,
        H = 23,
        $ = 24,
        V = 25,
        Y = 26,
        G = 27,
        W = 28,
        K = 29,
        X = 30,
        Q = 31,
        J = 32,
        ee = 852,
        te = 592,
        re = 15;

    function ne(e) {
      return (e >>> 24 & 255) + (e >>> 8 & 65280) + ((65280 & e) << 8) + ((255 & e) << 24);
    }

    function ie() {
      this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new n.Buf16(320), this.work = new n.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
    }

    function oe(e) {
      var t;
      return e && e.state ? (t = e.state, e.total_in = e.total_out = t.total = 0, e.msg = "", t.wrap && (e.adler = 1 & t.wrap), t.mode = E, t.last = 0, t.havedict = 0, t.dmax = 32768, t.head = null, t.hold = 0, t.bits = 0, t.lencode = t.lendyn = new n.Buf32(ee), t.distcode = t.distdyn = new n.Buf32(te), t.sane = 1, t.back = -1, p) : _;
    }

    function se(e) {
      var t;
      return e && e.state ? ((t = e.state).wsize = 0, t.whave = 0, t.wnext = 0, oe(e)) : _;
    }

    function ae(e, t) {
      var r, n;
      return e && e.state ? (n = e.state, t < 0 ? (r = 0, t = -t) : (r = 1 + (t >> 4), t < 48 && (t &= 15)), t && (t < 8 || t > 15) ? _ : (null !== n.window && n.wbits !== t && (n.window = null), n.wrap = r, n.wbits = t, se(e))) : _;
    }

    function he(e, t) {
      var r, n;
      return e ? (n = new ie(), e.state = n, n.window = null, (r = ae(e, t)) !== p && (e.state = null), r) : _;
    }

    var fe,
        ue,
        ce = !0;

    function le(e) {
      if (ce) {
        var t;

        for (fe = new n.Buf32(512), ue = new n.Buf32(32), t = 0; t < 144;) {
          e.lens[t++] = 8;
        }

        for (; t < 256;) {
          e.lens[t++] = 9;
        }

        for (; t < 280;) {
          e.lens[t++] = 7;
        }

        for (; t < 288;) {
          e.lens[t++] = 8;
        }

        for (a(f, e.lens, 0, 288, fe, 0, e.work, {
          bits: 9
        }), t = 0; t < 32;) {
          e.lens[t++] = 5;
        }

        a(u, e.lens, 0, 32, ue, 0, e.work, {
          bits: 5
        }), ce = !1;
      }

      e.lencode = fe, e.lenbits = 9, e.distcode = ue, e.distbits = 5;
    }

    function de(e, t, r, i) {
      var o,
          s = e.state;
      return null === s.window && (s.wsize = 1 << s.wbits, s.wnext = 0, s.whave = 0, s.window = new n.Buf8(s.wsize)), i >= s.wsize ? (n.arraySet(s.window, t, r - s.wsize, s.wsize, 0), s.wnext = 0, s.whave = s.wsize) : ((o = s.wsize - s.wnext) > i && (o = i), n.arraySet(s.window, t, r - i, o, s.wnext), (i -= o) ? (n.arraySet(s.window, t, r - i, i, 0), s.wnext = i, s.whave = s.wsize) : (s.wnext += o, s.wnext === s.wsize && (s.wnext = 0), s.whave < s.wsize && (s.whave += o))), 0;
    }

    t.inflateReset = se, t.inflateReset2 = ae, t.inflateResetKeep = oe, t.inflateInit = function (e) {
      return he(e, re);
    }, t.inflateInit2 = he, t.inflate = function (e, t) {
      var r,
          ee,
          te,
          re,
          ie,
          oe,
          se,
          ae,
          he,
          fe,
          ue,
          ce,
          pe,
          ge,
          me,
          _e,
          ye,
          be,
          we,
          ve,
          Ee,
          Se,
          Ae,
          ke,
          xe = 0,
          Ce = new n.Buf8(4),
          Re = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];

      if (!e || !e.state || !e.output || !e.input && 0 !== e.avail_in) return _;
      (r = e.state).mode === N && (r.mode = F), ie = e.next_out, te = e.output, se = e.avail_out, re = e.next_in, ee = e.input, oe = e.avail_in, ae = r.hold, he = r.bits, fe = oe, ue = se, Se = p;

      e: for (;;) {
        switch (r.mode) {
          case E:
            if (0 === r.wrap) {
              r.mode = F;
              break;
            }

            for (; he < 16;) {
              if (0 === oe) break e;
              oe--, ae += ee[re++] << he, he += 8;
            }

            if (2 & r.wrap && 35615 === ae) {
              r.check = 0, Ce[0] = 255 & ae, Ce[1] = ae >>> 8 & 255, r.check = o(r.check, Ce, 2, 0), ae = 0, he = 0, r.mode = S;
              break;
            }

            if (r.flags = 0, r.head && (r.head.done = !1), !(1 & r.wrap) || (((255 & ae) << 8) + (ae >> 8)) % 31) {
              e.msg = "incorrect header check", r.mode = X;
              break;
            }

            if ((15 & ae) !== v) {
              e.msg = "unknown compression method", r.mode = X;
              break;
            }

            if (he -= 4, Ee = 8 + (15 & (ae >>>= 4)), 0 === r.wbits) r.wbits = Ee;else if (Ee > r.wbits) {
              e.msg = "invalid window size", r.mode = X;
              break;
            }
            r.dmax = 1 << Ee, e.adler = r.check = 1, r.mode = 512 & ae ? B : N, ae = 0, he = 0;
            break;

          case S:
            for (; he < 16;) {
              if (0 === oe) break e;
              oe--, ae += ee[re++] << he, he += 8;
            }

            if (r.flags = ae, (255 & r.flags) !== v) {
              e.msg = "unknown compression method", r.mode = X;
              break;
            }

            if (57344 & r.flags) {
              e.msg = "unknown header flags set", r.mode = X;
              break;
            }

            r.head && (r.head.text = ae >> 8 & 1), 512 & r.flags && (Ce[0] = 255 & ae, Ce[1] = ae >>> 8 & 255, r.check = o(r.check, Ce, 2, 0)), ae = 0, he = 0, r.mode = A;

          case A:
            for (; he < 32;) {
              if (0 === oe) break e;
              oe--, ae += ee[re++] << he, he += 8;
            }

            r.head && (r.head.time = ae), 512 & r.flags && (Ce[0] = 255 & ae, Ce[1] = ae >>> 8 & 255, Ce[2] = ae >>> 16 & 255, Ce[3] = ae >>> 24 & 255, r.check = o(r.check, Ce, 4, 0)), ae = 0, he = 0, r.mode = k;

          case k:
            for (; he < 16;) {
              if (0 === oe) break e;
              oe--, ae += ee[re++] << he, he += 8;
            }

            r.head && (r.head.xflags = 255 & ae, r.head.os = ae >> 8), 512 & r.flags && (Ce[0] = 255 & ae, Ce[1] = ae >>> 8 & 255, r.check = o(r.check, Ce, 2, 0)), ae = 0, he = 0, r.mode = x;

          case x:
            if (1024 & r.flags) {
              for (; he < 16;) {
                if (0 === oe) break e;
                oe--, ae += ee[re++] << he, he += 8;
              }

              r.length = ae, r.head && (r.head.extra_len = ae), 512 & r.flags && (Ce[0] = 255 & ae, Ce[1] = ae >>> 8 & 255, r.check = o(r.check, Ce, 2, 0)), ae = 0, he = 0;
            } else r.head && (r.head.extra = null);

            r.mode = C;

          case C:
            if (1024 & r.flags && ((ce = r.length) > oe && (ce = oe), ce && (r.head && (Ee = r.head.extra_len - r.length, r.head.extra || (r.head.extra = new Array(r.head.extra_len)), n.arraySet(r.head.extra, ee, re, ce, Ee)), 512 & r.flags && (r.check = o(r.check, ee, ce, re)), oe -= ce, re += ce, r.length -= ce), r.length)) break e;
            r.length = 0, r.mode = R;

          case R:
            if (2048 & r.flags) {
              if (0 === oe) break e;
              ce = 0;

              do {
                Ee = ee[re + ce++], r.head && Ee && r.length < 65536 && (r.head.name += String.fromCharCode(Ee));
              } while (Ee && ce < oe);

              if (512 & r.flags && (r.check = o(r.check, ee, ce, re)), oe -= ce, re += ce, Ee) break e;
            } else r.head && (r.head.name = null);

            r.length = 0, r.mode = T;

          case T:
            if (4096 & r.flags) {
              if (0 === oe) break e;
              ce = 0;

              do {
                Ee = ee[re + ce++], r.head && Ee && r.length < 65536 && (r.head.comment += String.fromCharCode(Ee));
              } while (Ee && ce < oe);

              if (512 & r.flags && (r.check = o(r.check, ee, ce, re)), oe -= ce, re += ce, Ee) break e;
            } else r.head && (r.head.comment = null);

            r.mode = I;

          case I:
            if (512 & r.flags) {
              for (; he < 16;) {
                if (0 === oe) break e;
                oe--, ae += ee[re++] << he, he += 8;
              }

              if (ae !== (65535 & r.check)) {
                e.msg = "header crc mismatch", r.mode = X;
                break;
              }

              ae = 0, he = 0;
            }

            r.head && (r.head.hcrc = r.flags >> 9 & 1, r.head.done = !0), e.adler = r.check = 0, r.mode = N;
            break;

          case B:
            for (; he < 32;) {
              if (0 === oe) break e;
              oe--, ae += ee[re++] << he, he += 8;
            }

            e.adler = r.check = ne(ae), ae = 0, he = 0, r.mode = L;

          case L:
            if (0 === r.havedict) return e.next_out = ie, e.avail_out = se, e.next_in = re, e.avail_in = oe, r.hold = ae, r.bits = he, m;
            e.adler = r.check = 1, r.mode = N;

          case N:
            if (t === l || t === d) break e;

          case F:
            if (r.last) {
              ae >>>= 7 & he, he -= 7 & he, r.mode = G;
              break;
            }

            for (; he < 3;) {
              if (0 === oe) break e;
              oe--, ae += ee[re++] << he, he += 8;
            }

            switch (r.last = 1 & ae, he -= 1, 3 & (ae >>>= 1)) {
              case 0:
                r.mode = M;
                break;

              case 1:
                if (le(r), r.mode = j, t === d) {
                  ae >>>= 2, he -= 2;
                  break e;
                }

                break;

              case 2:
                r.mode = U;
                break;

              case 3:
                e.msg = "invalid block type", r.mode = X;
            }

            ae >>>= 2, he -= 2;
            break;

          case M:
            for (ae >>>= 7 & he, he -= 7 & he; he < 32;) {
              if (0 === oe) break e;
              oe--, ae += ee[re++] << he, he += 8;
            }

            if ((65535 & ae) != (ae >>> 16 ^ 65535)) {
              e.msg = "invalid stored block lengths", r.mode = X;
              break;
            }

            if (r.length = 65535 & ae, ae = 0, he = 0, r.mode = O, t === d) break e;

          case O:
            r.mode = P;

          case P:
            if (ce = r.length) {
              if (ce > oe && (ce = oe), ce > se && (ce = se), 0 === ce) break e;
              n.arraySet(te, ee, re, ce, ie), oe -= ce, re += ce, se -= ce, ie += ce, r.length -= ce;
              break;
            }

            r.mode = N;
            break;

          case U:
            for (; he < 14;) {
              if (0 === oe) break e;
              oe--, ae += ee[re++] << he, he += 8;
            }

            if (r.nlen = 257 + (31 & ae), ae >>>= 5, he -= 5, r.ndist = 1 + (31 & ae), ae >>>= 5, he -= 5, r.ncode = 4 + (15 & ae), ae >>>= 4, he -= 4, r.nlen > 286 || r.ndist > 30) {
              e.msg = "too many length or distance symbols", r.mode = X;
              break;
            }

            r.have = 0, r.mode = z;

          case z:
            for (; r.have < r.ncode;) {
              for (; he < 3;) {
                if (0 === oe) break e;
                oe--, ae += ee[re++] << he, he += 8;
              }

              r.lens[Re[r.have++]] = 7 & ae, ae >>>= 3, he -= 3;
            }

            for (; r.have < 19;) {
              r.lens[Re[r.have++]] = 0;
            }

            if (r.lencode = r.lendyn, r.lenbits = 7, Ae = {
              bits: r.lenbits
            }, Se = a(h, r.lens, 0, 19, r.lencode, 0, r.work, Ae), r.lenbits = Ae.bits, Se) {
              e.msg = "invalid code lengths set", r.mode = X;
              break;
            }

            r.have = 0, r.mode = D;

          case D:
            for (; r.have < r.nlen + r.ndist;) {
              for (; _e = (xe = r.lencode[ae & (1 << r.lenbits) - 1]) >>> 16 & 255, ye = 65535 & xe, !((me = xe >>> 24) <= he);) {
                if (0 === oe) break e;
                oe--, ae += ee[re++] << he, he += 8;
              }

              if (ye < 16) ae >>>= me, he -= me, r.lens[r.have++] = ye;else {
                if (16 === ye) {
                  for (ke = me + 2; he < ke;) {
                    if (0 === oe) break e;
                    oe--, ae += ee[re++] << he, he += 8;
                  }

                  if (ae >>>= me, he -= me, 0 === r.have) {
                    e.msg = "invalid bit length repeat", r.mode = X;
                    break;
                  }

                  Ee = r.lens[r.have - 1], ce = 3 + (3 & ae), ae >>>= 2, he -= 2;
                } else if (17 === ye) {
                  for (ke = me + 3; he < ke;) {
                    if (0 === oe) break e;
                    oe--, ae += ee[re++] << he, he += 8;
                  }

                  he -= me, Ee = 0, ce = 3 + (7 & (ae >>>= me)), ae >>>= 3, he -= 3;
                } else {
                  for (ke = me + 7; he < ke;) {
                    if (0 === oe) break e;
                    oe--, ae += ee[re++] << he, he += 8;
                  }

                  he -= me, Ee = 0, ce = 11 + (127 & (ae >>>= me)), ae >>>= 7, he -= 7;
                }

                if (r.have + ce > r.nlen + r.ndist) {
                  e.msg = "invalid bit length repeat", r.mode = X;
                  break;
                }

                for (; ce--;) {
                  r.lens[r.have++] = Ee;
                }
              }
            }

            if (r.mode === X) break;

            if (0 === r.lens[256]) {
              e.msg = "invalid code -- missing end-of-block", r.mode = X;
              break;
            }

            if (r.lenbits = 9, Ae = {
              bits: r.lenbits
            }, Se = a(f, r.lens, 0, r.nlen, r.lencode, 0, r.work, Ae), r.lenbits = Ae.bits, Se) {
              e.msg = "invalid literal/lengths set", r.mode = X;
              break;
            }

            if (r.distbits = 6, r.distcode = r.distdyn, Ae = {
              bits: r.distbits
            }, Se = a(u, r.lens, r.nlen, r.ndist, r.distcode, 0, r.work, Ae), r.distbits = Ae.bits, Se) {
              e.msg = "invalid distances set", r.mode = X;
              break;
            }

            if (r.mode = j, t === d) break e;

          case j:
            r.mode = q;

          case q:
            if (oe >= 6 && se >= 258) {
              e.next_out = ie, e.avail_out = se, e.next_in = re, e.avail_in = oe, r.hold = ae, r.bits = he, s(e, ue), ie = e.next_out, te = e.output, se = e.avail_out, re = e.next_in, ee = e.input, oe = e.avail_in, ae = r.hold, he = r.bits, r.mode === N && (r.back = -1);
              break;
            }

            for (r.back = 0; _e = (xe = r.lencode[ae & (1 << r.lenbits) - 1]) >>> 16 & 255, ye = 65535 & xe, !((me = xe >>> 24) <= he);) {
              if (0 === oe) break e;
              oe--, ae += ee[re++] << he, he += 8;
            }

            if (_e && 0 == (240 & _e)) {
              for (be = me, we = _e, ve = ye; _e = (xe = r.lencode[ve + ((ae & (1 << be + we) - 1) >> be)]) >>> 16 & 255, ye = 65535 & xe, !(be + (me = xe >>> 24) <= he);) {
                if (0 === oe) break e;
                oe--, ae += ee[re++] << he, he += 8;
              }

              ae >>>= be, he -= be, r.back += be;
            }

            if (ae >>>= me, he -= me, r.back += me, r.length = ye, 0 === _e) {
              r.mode = Y;
              break;
            }

            if (32 & _e) {
              r.back = -1, r.mode = N;
              break;
            }

            if (64 & _e) {
              e.msg = "invalid literal/length code", r.mode = X;
              break;
            }

            r.extra = 15 & _e, r.mode = Z;

          case Z:
            if (r.extra) {
              for (ke = r.extra; he < ke;) {
                if (0 === oe) break e;
                oe--, ae += ee[re++] << he, he += 8;
              }

              r.length += ae & (1 << r.extra) - 1, ae >>>= r.extra, he -= r.extra, r.back += r.extra;
            }

            r.was = r.length, r.mode = H;

          case H:
            for (; _e = (xe = r.distcode[ae & (1 << r.distbits) - 1]) >>> 16 & 255, ye = 65535 & xe, !((me = xe >>> 24) <= he);) {
              if (0 === oe) break e;
              oe--, ae += ee[re++] << he, he += 8;
            }

            if (0 == (240 & _e)) {
              for (be = me, we = _e, ve = ye; _e = (xe = r.distcode[ve + ((ae & (1 << be + we) - 1) >> be)]) >>> 16 & 255, ye = 65535 & xe, !(be + (me = xe >>> 24) <= he);) {
                if (0 === oe) break e;
                oe--, ae += ee[re++] << he, he += 8;
              }

              ae >>>= be, he -= be, r.back += be;
            }

            if (ae >>>= me, he -= me, r.back += me, 64 & _e) {
              e.msg = "invalid distance code", r.mode = X;
              break;
            }

            r.offset = ye, r.extra = 15 & _e, r.mode = $;

          case $:
            if (r.extra) {
              for (ke = r.extra; he < ke;) {
                if (0 === oe) break e;
                oe--, ae += ee[re++] << he, he += 8;
              }

              r.offset += ae & (1 << r.extra) - 1, ae >>>= r.extra, he -= r.extra, r.back += r.extra;
            }

            if (r.offset > r.dmax) {
              e.msg = "invalid distance too far back", r.mode = X;
              break;
            }

            r.mode = V;

          case V:
            if (0 === se) break e;

            if (ce = ue - se, r.offset > ce) {
              if ((ce = r.offset - ce) > r.whave && r.sane) {
                e.msg = "invalid distance too far back", r.mode = X;
                break;
              }

              ce > r.wnext ? (ce -= r.wnext, pe = r.wsize - ce) : pe = r.wnext - ce, ce > r.length && (ce = r.length), ge = r.window;
            } else ge = te, pe = ie - r.offset, ce = r.length;

            ce > se && (ce = se), se -= ce, r.length -= ce;

            do {
              te[ie++] = ge[pe++];
            } while (--ce);

            0 === r.length && (r.mode = q);
            break;

          case Y:
            if (0 === se) break e;
            te[ie++] = r.length, se--, r.mode = q;
            break;

          case G:
            if (r.wrap) {
              for (; he < 32;) {
                if (0 === oe) break e;
                oe--, ae |= ee[re++] << he, he += 8;
              }

              if (ue -= se, e.total_out += ue, r.total += ue, ue && (e.adler = r.check = r.flags ? o(r.check, te, ue, ie - ue) : i(r.check, te, ue, ie - ue)), ue = se, (r.flags ? ae : ne(ae)) !== r.check) {
                e.msg = "incorrect data check", r.mode = X;
                break;
              }

              ae = 0, he = 0;
            }

            r.mode = W;

          case W:
            if (r.wrap && r.flags) {
              for (; he < 32;) {
                if (0 === oe) break e;
                oe--, ae += ee[re++] << he, he += 8;
              }

              if (ae !== (4294967295 & r.total)) {
                e.msg = "incorrect length check", r.mode = X;
                break;
              }

              ae = 0, he = 0;
            }

            r.mode = K;

          case K:
            Se = g;
            break e;

          case X:
            Se = y;
            break e;

          case Q:
            return b;

          case J:
          default:
            return _;
        }
      }

      return e.next_out = ie, e.avail_out = se, e.next_in = re, e.avail_in = oe, r.hold = ae, r.bits = he, (r.wsize || ue !== e.avail_out && r.mode < X && (r.mode < G || t !== c)) && de(e, e.output, e.next_out, ue - e.avail_out) ? (r.mode = Q, b) : (fe -= e.avail_in, ue -= e.avail_out, e.total_in += fe, e.total_out += ue, r.total += ue, r.wrap && ue && (e.adler = r.check = r.flags ? o(r.check, te, ue, e.next_out - ue) : i(r.check, te, ue, e.next_out - ue)), e.data_type = r.bits + (r.last ? 64 : 0) + (r.mode === N ? 128 : 0) + (r.mode === j || r.mode === O ? 256 : 0), (0 === fe && 0 === ue || t === c) && Se === p && (Se = w), Se);
    }, t.inflateEnd = function (e) {
      if (!e || !e.state) return _;
      var t = e.state;
      return t.window && (t.window = null), e.state = null, p;
    }, t.inflateGetHeader = function (e, t) {
      var r;
      return e && e.state ? 0 == (2 & (r = e.state).wrap) ? _ : (r.head = t, t.done = !1, p) : _;
    }, t.inflateSetDictionary = function (e, t) {
      var r,
          n = t.length;
      return e && e.state ? 0 !== (r = e.state).wrap && r.mode !== L ? _ : r.mode === L && i(1, t, n, 0) !== r.check ? y : de(e, t, n, n) ? (r.mode = Q, b) : (r.havedict = 1, p) : _;
    }, t.inflateInfo = "pako inflate (from Nodeca project)";
  }, function (e, t, r) {

    e.exports = function (e, t) {
      var r, n, i, o, s, a, h, f, u, c, l, d, p, g, m, _, y, b, w, v, E, S, A, k, x;

      r = e.state, n = e.next_in, k = e.input, i = n + (e.avail_in - 5), o = e.next_out, x = e.output, s = o - (t - e.avail_out), a = o + (e.avail_out - 257), h = r.dmax, f = r.wsize, u = r.whave, c = r.wnext, l = r.window, d = r.hold, p = r.bits, g = r.lencode, m = r.distcode, _ = (1 << r.lenbits) - 1, y = (1 << r.distbits) - 1;

      e: do {
        p < 15 && (d += k[n++] << p, p += 8, d += k[n++] << p, p += 8), b = g[d & _];

        t: for (;;) {
          if (d >>>= w = b >>> 24, p -= w, 0 === (w = b >>> 16 & 255)) x[o++] = 65535 & b;else {
            if (!(16 & w)) {
              if (0 == (64 & w)) {
                b = g[(65535 & b) + (d & (1 << w) - 1)];
                continue t;
              }

              if (32 & w) {
                r.mode = 12;
                break e;
              }

              e.msg = "invalid literal/length code", r.mode = 30;
              break e;
            }

            v = 65535 & b, (w &= 15) && (p < w && (d += k[n++] << p, p += 8), v += d & (1 << w) - 1, d >>>= w, p -= w), p < 15 && (d += k[n++] << p, p += 8, d += k[n++] << p, p += 8), b = m[d & y];

            r: for (;;) {
              if (d >>>= w = b >>> 24, p -= w, !(16 & (w = b >>> 16 & 255))) {
                if (0 == (64 & w)) {
                  b = m[(65535 & b) + (d & (1 << w) - 1)];
                  continue r;
                }

                e.msg = "invalid distance code", r.mode = 30;
                break e;
              }

              if (E = 65535 & b, p < (w &= 15) && (d += k[n++] << p, (p += 8) < w && (d += k[n++] << p, p += 8)), (E += d & (1 << w) - 1) > h) {
                e.msg = "invalid distance too far back", r.mode = 30;
                break e;
              }

              if (d >>>= w, p -= w, E > (w = o - s)) {
                if ((w = E - w) > u && r.sane) {
                  e.msg = "invalid distance too far back", r.mode = 30;
                  break e;
                }

                if (S = 0, A = l, 0 === c) {
                  if (S += f - w, w < v) {
                    v -= w;

                    do {
                      x[o++] = l[S++];
                    } while (--w);

                    S = o - E, A = x;
                  }
                } else if (c < w) {
                  if (S += f + c - w, (w -= c) < v) {
                    v -= w;

                    do {
                      x[o++] = l[S++];
                    } while (--w);

                    if (S = 0, c < v) {
                      v -= w = c;

                      do {
                        x[o++] = l[S++];
                      } while (--w);

                      S = o - E, A = x;
                    }
                  }
                } else if (S += c - w, w < v) {
                  v -= w;

                  do {
                    x[o++] = l[S++];
                  } while (--w);

                  S = o - E, A = x;
                }

                for (; v > 2;) {
                  x[o++] = A[S++], x[o++] = A[S++], x[o++] = A[S++], v -= 3;
                }

                v && (x[o++] = A[S++], v > 1 && (x[o++] = A[S++]));
              } else {
                S = o - E;

                do {
                  x[o++] = x[S++], x[o++] = x[S++], x[o++] = x[S++], v -= 3;
                } while (v > 2);

                v && (x[o++] = x[S++], v > 1 && (x[o++] = x[S++]));
              }

              break;
            }
          }
          break;
        }
      } while (n < i && o < a);

      n -= v = p >> 3, d &= (1 << (p -= v << 3)) - 1, e.next_in = n, e.next_out = o, e.avail_in = n < i ? i - n + 5 : 5 - (n - i), e.avail_out = o < a ? a - o + 257 : 257 - (o - a), r.hold = d, r.bits = p;
    };
  }, function (e, t, r) {

    var n = r(11),
        i = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0],
        o = [16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78],
        s = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 0, 0],
        a = [16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 64, 64];

    e.exports = function (e, t, r, h, f, u, c, l) {
      var d,
          p,
          g,
          m,
          _,
          y,
          b,
          w,
          v,
          E = l.bits,
          S = 0,
          A = 0,
          k = 0,
          x = 0,
          C = 0,
          R = 0,
          T = 0,
          I = 0,
          B = 0,
          L = 0,
          N = null,
          F = 0,
          M = new n.Buf16(16),
          O = new n.Buf16(16),
          P = null,
          U = 0;

      for (S = 0; S <= 15; S++) {
        M[S] = 0;
      }

      for (A = 0; A < h; A++) {
        M[t[r + A]]++;
      }

      for (C = E, x = 15; x >= 1 && 0 === M[x]; x--) {
      }

      if (C > x && (C = x), 0 === x) return f[u++] = 20971520, f[u++] = 20971520, l.bits = 1, 0;

      for (k = 1; k < x && 0 === M[k]; k++) {
      }

      for (C < k && (C = k), I = 1, S = 1; S <= 15; S++) {
        if (I <<= 1, (I -= M[S]) < 0) return -1;
      }

      if (I > 0 && (0 === e || 1 !== x)) return -1;

      for (O[1] = 0, S = 1; S < 15; S++) {
        O[S + 1] = O[S] + M[S];
      }

      for (A = 0; A < h; A++) {
        0 !== t[r + A] && (c[O[t[r + A]]++] = A);
      }

      if (0 === e ? (N = P = c, y = 19) : 1 === e ? (N = i, F -= 257, P = o, U -= 257, y = 256) : (N = s, P = a, y = -1), L = 0, A = 0, S = k, _ = u, R = C, T = 0, g = -1, m = (B = 1 << C) - 1, 1 === e && B > 852 || 2 === e && B > 592) return 1;

      for (;;) {
        b = S - T, c[A] < y ? (w = 0, v = c[A]) : c[A] > y ? (w = P[U + c[A]], v = N[F + c[A]]) : (w = 96, v = 0), d = 1 << S - T, k = p = 1 << R;

        do {
          f[_ + (L >> T) + (p -= d)] = b << 24 | w << 16 | v | 0;
        } while (0 !== p);

        for (d = 1 << S - 1; L & d;) {
          d >>= 1;
        }

        if (0 !== d ? (L &= d - 1, L += d) : L = 0, A++, 0 == --M[S]) {
          if (S === x) break;
          S = t[r + c[A]];
        }

        if (S > C && (L & m) !== g) {
          for (0 === T && (T = C), _ += k, I = 1 << (R = S - T); R + T < x && !((I -= M[R + T]) <= 0);) {
            R++, I <<= 1;
          }

          if (B += 1 << R, 1 === e && B > 852 || 2 === e && B > 592) return 1;
          f[g = L & m] = C << 24 | R << 16 | _ - u | 0;
        }
      }

      return 0 !== L && (f[_ + L] = S - T << 24 | 64 << 16 | 0), l.bits = C, 0;
    };
  }, function (e, t, r) {

    e.exports = {
      Z_NO_FLUSH: 0,
      Z_PARTIAL_FLUSH: 1,
      Z_SYNC_FLUSH: 2,
      Z_FULL_FLUSH: 3,
      Z_FINISH: 4,
      Z_BLOCK: 5,
      Z_TREES: 6,
      Z_OK: 0,
      Z_STREAM_END: 1,
      Z_NEED_DICT: 2,
      Z_ERRNO: -1,
      Z_STREAM_ERROR: -2,
      Z_DATA_ERROR: -3,
      Z_BUF_ERROR: -5,
      Z_NO_COMPRESSION: 0,
      Z_BEST_SPEED: 1,
      Z_BEST_COMPRESSION: 9,
      Z_DEFAULT_COMPRESSION: -1,
      Z_FILTERED: 1,
      Z_HUFFMAN_ONLY: 2,
      Z_RLE: 3,
      Z_FIXED: 4,
      Z_DEFAULT_STRATEGY: 0,
      Z_BINARY: 0,
      Z_TEXT: 1,
      Z_UNKNOWN: 2,
      Z_DEFLATED: 8
    };
  }, function (e, t, r) {
    var n = r(1).Buffer,
        i = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918e3, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];

    function o(e) {
      if (n.isBuffer(e)) return e;
      var t = "function" == typeof n.alloc && "function" == typeof n.from;
      if ("number" == typeof e) return t ? n.alloc(e) : new n(e);
      if ("string" == typeof e) return t ? n.from(e) : new n(e);
      throw new Error("input must be buffer, number, or string, received " + _typeof(e));
    }

    function s(e, t) {
      e = o(e), n.isBuffer(t) && (t = t.readUInt32BE(0));

      for (var r = -1 ^ ~~t, s = 0; s < e.length; s++) {
        r = i[255 & (r ^ e[s])] ^ r >>> 8;
      }

      return -1 ^ r;
    }

    function a() {
      return e = s.apply(null, arguments), (t = o(4)).writeInt32BE(e, 0), t;
      var e, t;
    }

    "undefined" != typeof Int32Array && (i = new Int32Array(i)), a.signed = function () {
      return s.apply(null, arguments);
    }, a.unsigned = function () {
      return s.apply(null, arguments) >>> 0;
    }, e.exports = a;
  }, function (e, t, r) {
    (function (t) {
      var _r12 = r(0),
          n = _r12.CramMalformedError,
          i = r(12),
          o = r(63),
          s = r(64),
          a = r(65),
          h = 4;

      var f =
      /*#__PURE__*/
      function () {
        function f(e) {
          var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

          _classCallCheck(this, f);

          this._buffer = e, this._position = t, this.length = e.length;
        }

        _createClass(f, [{
          key: "get",
          value: function get() {
            var e = this._buffer[this._position];
            return this._position += 1, e;
          }
        }, {
          key: "getByte",
          value: function getByte() {
            return this.get();
          }
        }, {
          key: "getByteAt",
          value: function getByteAt(e) {
            return this._buffer[e];
          }
        }, {
          key: "position",
          value: function position() {
            return this._position;
          }
        }, {
          key: "put",
          value: function put(e) {
            return this._buffer[this._position] = e, this._position += 1, e;
          }
        }, {
          key: "putAt",
          value: function putAt(e, t) {
            return this._buffer[e] = t, t;
          }
        }, {
          key: "setPosition",
          value: function setPosition(e) {
            return this._position = e, e;
          }
        }, {
          key: "getInt",
          value: function getInt() {
            var e = this._buffer.readInt32LE(this._position);

            return this._position += 4, e;
          }
        }, {
          key: "remaining",
          value: function remaining() {
            return this._buffer.length - this._position;
          }
        }]);

        return f;
      }();

      e.exports = {
        uncompress: function uncompress(e, r) {
          var u = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
          if (0 === e.length) return r.fill(0), r;
          var c = new f(e, u),
              l = c.get();
          if (0 !== l && 1 !== l) throw new n("Invalid rANS order ".concat(l));
          if (c.getInt() !== c.remaining() - h) throw new n("Incorrect input length.");
          var d = c.getInt(),
              p = new f(r || t.allocUnsafe(d));
          if (p.length < d) throw new n("Output buffer too small to fit ".concat(d, " bytes."));

          switch (l) {
            case 0:
              return function (e, t) {
                var r = new i.AriDecoder(),
                    n = new Array(256);

                for (var _e12 = 0; _e12 < n.length; _e12 += 1) {
                  n[_e12] = new i.Symbol();
                }

                return o.readStatsO0(e, r, n), s.uncompress(e, r, n, t), t;
              }(c, p);

            case 1:
              return function (e, t) {
                var r = new Array(256);

                for (var _e13 = 0; _e13 < r.length; _e13 += 1) {
                  r[_e13] = new i.AriDecoder();
                }

                var n = new Array(256);

                for (var _e14 = 0; _e14 < n.length; _e14 += 1) {
                  n[_e14] = new Array(256);

                  for (var _t7 = 0; _t7 < n[_e14].length; _t7 += 1) {
                    n[_e14][_t7] = new i.Symbol();
                  }
                }

                return o.readStatsO1(e, r, n), a.uncompress(e, t, r, n), t;
              }(c, p);

            default:
              throw new n("Invalid rANS order: ".concat(l));
          }
        }
      };
    }).call(this, r(1).Buffer);
  }, function (e, t, r) {
    var _r13 = r(0),
        n = _r13.CramMalformedError,
        i = r(13),
        o = r(12);

    function s(e) {
      if (!e) throw new n("assertion failed");
    }

    e.exports = {
      readStatsO0: function readStatsO0(e, t, r) {
        var n = 0,
            a = 0,
            h = 255 & e.get();

        do {
          null == t.fc[h] && (t.fc[h] = new o.FC()), t.fc[h].F = 255 & e.get(), t.fc[h].F >= 128 && (t.fc[h].F &= -129, t.fc[h].F = (127 & t.fc[h].F) << 8 | 255 & e.get()), t.fc[h].C = a, o.symbolInit(r[h], t.fc[h].C, t.fc[h].F), t.R || (t.R = new Array(i.TOTFREQ)), t.R.fill(h, a, a + t.fc[h].F), a += t.fc[h].F, 0 === n && h + 1 === (255 & e.getByteAt(e.position())) ? (h = 255 & e.get(), n = 255 & e.get()) : 0 !== n ? (n -= 1, h += 1) : h = 255 & e.get();
        } while (0 !== h);

        s(a < i.TOTFREQ);
      },
      readStatsO1: function readStatsO1(e, t, r) {
        var n = 0,
            a = 255 & e.get();

        do {
          var h = 0,
              f = 0,
              u = 255 & e.get();
          null == t[a] && (t[a] = new o.AriDecoder());

          do {
            null == t[a].fc[u] && (t[a].fc[u] = new o.FC()), t[a].fc[u].F = 255 & e.get(), t[a].fc[u].F >= 128 && (t[a].fc[u].F &= -129, t[a].fc[u].F = (127 & t[a].fc[u].F) << 8 | 255 & e.get()), t[a].fc[u].C = f, 0 === t[a].fc[u].F && (t[a].fc[u].F = i.TOTFREQ), null == r[a][u] && (r[a][u] = new o.RansDecSymbol()), o.symbolInit(r[a][u], t[a].fc[u].C, t[a].fc[u].F), null == t[a].R && (t[a].R = new Array(i.TOTFREQ)), t[a].R.fill(u, f, f + t[a].fc[u].F), s((f += t[a].fc[u].F) <= i.TOTFREQ), 0 === h && u + 1 === (255 & e.getByteAt(e.position())) ? (u = 255 & e.get(), h = 255 & e.get()) : 0 !== h ? (h -= 1, u += 1) : u = 255 & e.get();
          } while (0 !== u);

          0 === n && a + 1 === (255 & e.getByteAt(e.position())) ? (a = 255 & e.get(), n = 255 & e.get()) : 0 !== n ? (n -= 1, a += 1) : a = 255 & e.get();
        } while (0 !== a);
      }
    };
  }, function (e, t, r) {
    var _r14 = r(0),
        n = _r14.CramMalformedError,
        i = r(13),
        o = r(12);

    e.exports = {
      uncompress: function uncompress(e, t, r, s) {
        var a = e.getInt(),
            h = e.getInt(),
            f = e.getInt(),
            u = e.getInt();
        var c = s.remaining(),
            l = -4 & c;

        for (var _n3 = 0; _n3 < l; _n3 += 4) {
          var _c = t.R[o.get(a, i.TF_SHIFT)],
              _l = t.R[o.get(h, i.TF_SHIFT)],
              _d = t.R[o.get(f, i.TF_SHIFT)],
              p = t.R[o.get(u, i.TF_SHIFT)];
          s.putAt(_n3, _c), s.putAt(_n3 + 1, _l), s.putAt(_n3 + 2, _d), s.putAt(_n3 + 3, p), a = o.advanceSymbolStep(a, r[255 & _c], i.TF_SHIFT), h = o.advanceSymbolStep(h, r[255 & _l], i.TF_SHIFT), f = o.advanceSymbolStep(f, r[255 & _d], i.TF_SHIFT), u = o.advanceSymbolStep(u, r[255 & p], i.TF_SHIFT), a = o.renormalize(a, e), h = o.renormalize(h, e), f = o.renormalize(f, e), u = o.renormalize(u, e);
        }

        var d;

        switch (s.setPosition(l), 3 & c) {
          case 0:
            break;

          case 1:
            d = t.R[o.get(a, i.TF_SHIFT)], o.advanceSymbol(a, e, r[255 & d], i.TF_SHIFT), s.put(d);
            break;

          case 2:
            d = t.R[o.get(a, i.TF_SHIFT)], o.advanceSymbol(a, e, r[255 & d], i.TF_SHIFT), s.put(d), d = t.R[o.get(h, i.TF_SHIFT)], o.advanceSymbol(h, e, r[255 & d], i.TF_SHIFT), s.put(d);
            break;

          case 3:
            d = t.R[o.get(a, i.TF_SHIFT)], o.advanceSymbol(a, e, r[255 & d], i.TF_SHIFT), s.put(d), d = t.R[o.get(h, i.TF_SHIFT)], o.advanceSymbol(h, e, r[255 & d], i.TF_SHIFT), s.put(d), d = t.R[o.get(f, i.TF_SHIFT)], o.advanceSymbol(f, e, r[255 & d], i.TF_SHIFT), s.put(d);
            break;

          default:
            throw new n("invalid output size encountered during rANS decoding");
        }

        s.setPosition(0);
      }
    };
  }, function (e, t, r) {
    var n = r(13),
        i = r(12);
    e.exports = {
      uncompress: function uncompress(e, t, r, o) {
        var s = t.remaining();
        var a = e.getInt(),
            h = e.getInt(),
            f = e.getInt(),
            u = e.getInt();
        var c = s >> 2;
        var l = 0,
            d = c,
            p = 2 * c,
            g = 3 * c,
            m = 0,
            _ = 0,
            y = 0,
            b = 0;

        for (; l < c; l += 1, d += 1, p += 1, g += 1) {
          var _s2 = 255 & r[m].R[i.get(a, n.TF_SHIFT)],
              _c2 = 255 & r[_].R[i.get(h, n.TF_SHIFT)],
              w = 255 & r[y].R[i.get(f, n.TF_SHIFT)],
              v = 255 & r[b].R[i.get(u, n.TF_SHIFT)];

          t.putAt(l, _s2), t.putAt(d, _c2), t.putAt(p, w), t.putAt(g, v), a = i.advanceSymbolStep(a, o[m][_s2], n.TF_SHIFT), h = i.advanceSymbolStep(h, o[_][_c2], n.TF_SHIFT), f = i.advanceSymbolStep(f, o[y][w], n.TF_SHIFT), u = i.advanceSymbolStep(u, o[b][v], n.TF_SHIFT), a = i.renormalize(a, e), h = i.renormalize(h, e), f = i.renormalize(f, e), u = i.renormalize(u, e), m = _s2, _ = _c2, y = w, b = v;
        }

        for (; g < s; g += 1) {
          var _s3 = 255 & r[b].R[i.get(u, n.TF_SHIFT)];

          t.putAt(g, _s3), u = i.advanceSymbol(u, e, o[b][_s3], n.TF_SHIFT), b = _s3;
        }
      }
    };
  }, function (e, t, r) {
    var _r15 = r(67),
        n = _r15.Parser,
        i = new n().itf8(),
        o = {
      parser: new n().string("magic", {
        length: 4
      }).uint8("majorVersion").uint8("minorVersion").string("fileId", {
        length: 20,
        stripNull: !0
      }),
      maxLength: 26
    },
        s = {
      parser: new n().uint8("compressionMethod", {
        formatter: function formatter(e) {
          var t = ["raw", "gzip", "bzip2", "lzma", "rans"][e];
          if (!t) throw new Error("compression method number ".concat(e, " not implemented"));
          return t;
        }
      }).uint8("contentType", {
        formatter: function formatter(e) {
          var t = ["FILE_HEADER", "COMPRESSION_HEADER", "MAPPED_SLICE_HEADER", "UNMAPPED_SLICE_HEADER", "EXTERNAL_DATA", "CORE_DATA"][e];
          if (!t) throw new Error("invalid block content type id ".concat(e));
          return t;
        }
      }).itf8("contentId").itf8("compressedSize").itf8("uncompressedSize"),
      maxLength: 17
    },
        a = {
      parser: new n().uint32("crc32"),
      maxLength: 4
    },
        h = new n().itf8("size").buffer("entries", {
      length: "size",
      formatter: function formatter(e) {
        function t(t, r) {
          var n = e.toString("utf8", t, r),
              i = [];

          for (var _e15 = 0; _e15 < n.length; _e15 += 3) {
            i.push(n.substr(_e15, 3));
          }

          return i;
        }

        var r,
            n = [],
            i = 0;

        for (r = 0; r < e.length; r += 1) {
          e[r] || (n.push(t(i, r)), i = r + 1);
        }

        return r > i && n.push(t(i, r)), n;
      }
    }),
        f = new n().uint8(null, {
      formatter: function formatter(e) {
        return !!e;
      }
    }),
        u = new n().itf8("mapSize").itf8("mapCount").array("entries", {
      length: "mapCount",
      type: new n().string("key", {
        length: 2,
        stripNull: !1
      }).choice("value", {
        tag: "key",
        choices: {
          MI: f,
          UI: f,
          PI: f,
          RN: f,
          AP: f,
          RR: f,
          SM: new n().array(null, {
            type: "uint8",
            length: 5
          }),
          TD: new n().nest(null, {
            type: h,
            formatter: function formatter(e) {
              return e.entries;
            }
          })
        }
      })
    });

    function c(e) {
      var t = {};
      return e.entries.forEach(function (_ref8) {
        var e = _ref8.key,
            r = _ref8.value;
        t[e] && console.warn("duplicate key ".concat(e, " in map")), t[e] = r;
      }), t;
    }

    var l = {
      cramFileDefinition: o,
      cramBlockHeader: s,
      cramBlockCrc32: a
    },
        d = {
      cramUnmappedSliceHeader: function cramUnmappedSliceHeader(e) {
        var t = 0,
            r = new n().itf8("numRecords");
        t += 5, e >= 3 ? (r = r.ltf8("recordCounter"), t += 9) : 2 === e && (r = r.itf8("recordCounter"), t += 5), r = r.itf8("numBlocks").itf8("numContentIds").array("contentIds", {
          type: i,
          length: "numContentIds"
        }), t += 10, e >= 2 && (r = r.array("md5", {
          type: "uint8",
          length: 16
        }), t += 16);
        return {
          parser: r,
          maxLength: function maxLength(e) {
            return t + 5 * e;
          }
        };
      },
      cramMappedSliceHeader: function cramMappedSliceHeader(e) {
        var t = new n().itf8("refSeqId").itf8("refSeqStart").itf8("refSeqSpan").itf8("numRecords"),
            r = 20;
        e >= 3 ? (t = t.ltf8("recordCounter"), r += 9) : 2 === e && (t = t.itf8("recordCounter"), r += 5), t = t.itf8("numBlocks").itf8("numContentIds").array("contentIds", {
          type: i,
          length: "numContentIds"
        }).itf8("refBaseBlockId"), r += 15, e >= 2 && (t = t.array("md5", {
          type: "uint8",
          length: 16
        }), r += 16);
        return {
          parser: t,
          maxLength: function maxLength(e) {
            return r + 5 * e;
          }
        };
      },
      cramEncoding: function cramEncoding(e) {
        return {
          parser: new n().namely("cramEncoding").itf8("codecId").itf8("parametersBytes").choice("parameters", {
            tag: "codecId",
            choices: {
              0: new n(),
              1: new n().itf8("blockContentId"),
              2: new n().itf8("offset").itf8("M"),
              3: n.start().itf8("numCodes").array("symbols", {
                length: "numCodes",
                type: i
              }).itf8("numLengths").array("bitLengths", {
                length: "numLengths",
                type: i
              }),
              4: n.start().nest("lengthsEncoding", {
                type: "cramEncoding"
              }).nest("valuesEncoding", {
                type: "cramEncoding"
              }),
              5: new n().uint8("stopByte")[e > 1 ? "itf8" : "int"]("blockContentId"),
              6: new n().itf8("offset").itf8("length"),
              7: new n().itf8("offset").itf8("K"),
              8: new n().itf8("offset").itf8("log2m"),
              9: new n().itf8("offset")
            }
          })
        };
      },
      cramDataSeriesEncodingMap: function cramDataSeriesEncodingMap(e) {
        return new n().itf8("mapSize").itf8("mapCount").array("entries", {
          length: "mapCount",
          type: new n().string("key", {
            length: 2,
            stripNull: !1
          }).nest("value", {
            type: this.cramEncoding(e).parser
          })
        });
      },
      cramTagEncodingMap: function cramTagEncodingMap(e) {
        return new n().itf8("mapSize").itf8("mapCount").array("entries", {
          length: "mapCount",
          type: new n().itf8("key", {
            formatter: function formatter(e) {
              return String.fromCharCode(e >> 16 & 255) + String.fromCharCode(e >> 8 & 255) + String.fromCharCode(255 & e);
            }
          }).nest("value", {
            type: this.cramEncoding(e).parser
          })
        });
      },
      cramCompressionHeader: function cramCompressionHeader(e) {
        var t = new n();
        return {
          parser: t = t.nest("preservation", {
            type: u,
            formatter: c
          }).nest("dataSeriesEncoding", {
            type: this.cramDataSeriesEncodingMap(e),
            formatter: c
          }).nest("tagEncoding", {
            type: this.cramTagEncodingMap(e),
            formatter: c
          })
        };
      },
      cramContainerHeader1: function cramContainerHeader1(e) {
        var t = new n().int32("length").itf8("refSeqId").itf8("refSeqStart").itf8("alignmentSpan").itf8("numRecords"),
            r = 24;
        return e >= 3 ? (t = t.ltf8("recordCounter"), r += 9) : 2 === e && (t = t.itf8("recordCounter"), r += 5), e > 1 && (t = t.ltf8("numBases"), r += 9), {
          parser: t = t.itf8("numBlocks").itf8("numLandmarks"),
          maxLength: r += 10
        };
      },
      cramContainerHeader2: function cramContainerHeader2(e) {
        var t = new n().itf8("numLandmarks").array("landmarks", {
          type: new n().itf8(),
          length: "numLandmarks"
        }),
            r = 0;
        return e >= 3 && (t = t.uint32("crc32"), r = 4), {
          parser: t,
          maxLength: function maxLength(e) {
            return 5 + 5 * e + r;
          }
        };
      }
    };
    e.exports = {
      cramFileDefinition: o,
      getSectionParsers: function getSectionParsers(e) {
        var t = Object.assign({}, l);
        return Object.keys(d).forEach(function (r) {
          t[r] = d[r](e);
        }), t;
      }
    };
  }, function (e, t, r) {
    (function (e) {
      var n = r(68),
          i = r(70).Context,
          o = r(31);
      "undefined" != typeof window && (window.Buffer = e);
      var s = {
        UInt8: 1,
        UInt16LE: 2,
        UInt16BE: 2,
        UInt32LE: 4,
        UInt32BE: 4,
        Int8: 1,
        Int16LE: 2,
        Int16BE: 2,
        Int32LE: 4,
        Int32BE: 4,
        FloatLE: 4,
        FloatBE: 4,
        DoubleLE: 8,
        DoubleBE: 8
      },
          a = {},
          h = [];
      !function () {
        var e;

        for (e = 1; e <= 32; e++) {
          h.push(e);
        }
      }();
      var f = {};
      Object.keys(s).concat(Object.keys({
        String: null,
        Buffer: null,
        Array: null,
        Skip: null,
        Choice: null,
        Nest: null,
        Bit: null,
        Itf8: null,
        Ltf8: null
      })).forEach(function (e) {
        f[e.toLowerCase()] = e;
      });

      var u = function u() {
        this.varName = "", this.type = "", this.options = {}, this.next = null, this.head = null, this.compiled = null, this.endian = "le", this.constructorFn = null, this.alias = null;
      };

      u.start = function () {
        return new u();
      }, Object.keys(s).forEach(function (e) {
        u.prototype[e.toLowerCase()] = function (t, r) {
          return this.setNextParser(e.toLowerCase(), t, r);
        };

        var t = e.replace(/BE|LE/, "").toLowerCase();
        t in u.prototype || (u.prototype[t] = function (e, r) {
          return this[t + this.endian](e, r);
        });
      }), h.forEach(function (e) {
        u.prototype["bit" + e.toString()] = function (t, r) {
          return r || (r = {}), r.length = e, this.setNextParser("bit", t, r);
        };
      }), u.prototype.namely = function (e) {
        return a[e] = this, this.alias = e, this;
      }, u.prototype.skip = function (e, t) {
        if (t && t.assert) throw new Error("assert option on skip is not allowed.");
        return this.setNextParser("skip", "", {
          length: e
        });
      }, u.prototype.string = function (e, t) {
        if (!t.zeroTerminated && !t.length && !t.greedy) throw new Error("Neither length, zeroTerminated, nor greedy is defined for string.");
        if ((t.zeroTerminated || t.length) && t.greedy) throw new Error("greedy is mutually exclusive with length and zeroTerminated for string.");
        if (t.stripNull && !t.length && !t.greedy) throw new Error("Length or greedy must be defined if stripNull is defined.");
        return t.encoding = t.encoding || "utf8", this.setNextParser("string", e, t);
      }, u.prototype.buffer = function (e, t) {
        if (!t.length && !t.readUntil) throw new Error("Length nor readUntil is defined in buffer parser");
        return this.setNextParser("buffer", e, t);
      }, u.prototype.array = function (e, t) {
        if (!t.readUntil && !t.length && !t.lengthInBytes) throw new Error("Length option of array is not defined.");
        if (!t.type) throw new Error("Type option of array is not defined.");
        if ("string" == typeof t.type && !a[t.type] && Object.keys(s).indexOf(f[t.type]) < 0) throw new Error('Specified primitive type "' + t.type + '" is not supported.');
        return this.setNextParser("array", e, t);
      }, u.prototype.choice = function (e, t) {
        if (1 == arguments.length && "object" == _typeof(e) && (t = e, e = null), !t.tag) throw new Error("Tag option of array is not defined.");
        if (!t.choices) throw new Error("Choices option of array is not defined.");
        return Object.keys(t.choices).forEach(function (r) {
          if (!t.choices[r]) throw new Error("Choice Case " + r + " of " + e + " is not valid.");
          if ("string" == typeof t.choices[r] && !a[t.choices[r]] && Object.keys(s).indexOf(f[t.choices[r]]) < 0) throw new Error('Specified primitive type "' + t.choices[r] + '" is not supported.');
        }, this), this.setNextParser("choice", e, t);
      }, u.prototype.nest = function (e, t) {
        if (1 == arguments.length && "object" == _typeof(e) && (t = e, e = null), !t.type) throw new Error("Type option of nest is not defined.");
        if (!(t.type instanceof u || a[t.type])) throw new Error("Type option of nest must be a Parser object.");
        if (!(t.type instanceof u || e)) throw new Error("options.type must be a object if variable name is omitted.");
        return this.setNextParser("nest", e, t);
      }, u.prototype.endianess = function (e) {
        switch (e.toLowerCase()) {
          case "little":
            this.endian = "le";
            break;

          case "big":
            this.endian = "be";
            break;

          default:
            throw new Error("Invalid endianess: " + e);
        }

        return this;
      }, u.prototype.create = function (e) {
        if (!(e instanceof Function)) throw new Error("Constructor must be a Function object.");
        return this.constructorFn = e, this;
      }, u.prototype.getCode = function () {
        var e = new i();
        return e.pushCode("if (!Buffer.isBuffer(buffer)) {"), e.generateError('"argument buffer is not a Buffer object"'), e.pushCode("}"), this.alias ? this.addAliasedCode(e) : this.addRawCode(e), this.alias ? e.pushCode("return {0}(0)", "___parser_" + this.alias) : e.pushCode("return { offset: offset, result: vars };"), e.code;
      }, u.prototype.addRawCode = function (e) {
        e.pushCode("var offset = 0;"), this.constructorFn ? e.pushCode("var vars = new constructorFn();") : e.pushCode("var vars = {};"), this.generate(e), this.resolveReferences(e), e.pushCode("return { offset: offset, result: vars };");
      }, u.prototype.addAliasedCode = function (e) {
        return e.pushCode("function {0}(offset) {", "___parser_" + this.alias), this.constructorFn ? e.pushCode("var vars = new constructorFn();") : e.pushCode("var vars = {};"), this.generate(e), e.markResolved(this.alias), this.resolveReferences(e), e.pushCode("return { offset: offset, result: vars };"), e.pushCode("}"), e;
      }, u.prototype.resolveReferences = function (e) {
        var t = e.getUnresolvedReferences();
        e.markRequested(t), t.forEach(function (t) {
          a[t].addAliasedCode(e);
        });
      }, u.prototype.compile = function () {
        var e = "(function(buffer, constructorFn, Long) { " + this.getCode() + " })";
        this.compiled = n.runInThisContext(e);
      }, u.prototype.sizeOf = function () {
        var e = NaN;
        if (Object.keys(s).indexOf(this.type) >= 0) e = s[this.type];else if ("String" === this.type && "number" == typeof this.options.length) e = this.options.length;else if ("Buffer" === this.type && "number" == typeof this.options.length) e = this.options.length;else if ("Array" === this.type && "number" == typeof this.options.length) {
          var t = NaN;
          "string" == typeof this.options.type ? t = s[f[this.options.type]] : this.options.type instanceof u && (t = this.options.type.sizeOf()), e = this.options.length * t;
        } else "Skip" === this.type ? e = this.options.length : "Nest" === this.type ? e = this.options.type.sizeOf() : this.type || (e = 0);
        return this.next && (e += this.next.sizeOf()), e;
      }, u.prototype.parse = function (e) {
        return this.compiled || this.compile(), this.compiled(e, this.constructorFn, o);
      }, u.prototype.setNextParser = function (e, t, r) {
        var n = new u();
        return n.type = f[e], n.varName = t, n.options = r || n.options, n.endian = this.endian, this.head ? this.head.next = n : this.next = n, this.head = n, this;
      }, u.prototype.generate = function (e) {
        this.type && (this["generate" + this.type](e), this.generateAssert(e));
        var t = e.generateVariable(this.varName);
        return this.options.formatter && this.generateFormatter(e, t, this.options.formatter), this.generateNext(e);
      }, u.prototype.generateAssert = function (e) {
        if (this.options.assert) {
          var t = e.generateVariable(this.varName);

          switch (_typeof(this.options.assert)) {
            case "function":
              e.pushCode("if (!({0}).call(vars, {1})) {", this.options.assert, t);
              break;

            case "number":
              e.pushCode("if ({0} !== {1}) {", this.options.assert, t);
              break;

            case "string":
              e.pushCode('if ("{0}" !== {1}) {', this.options.assert, t);
              break;

            default:
              throw new Error("Assert option supports only strings, numbers and assert functions.");
          }

          e.generateError('"Assert error: {0} is " + {0}', t), e.pushCode("}");
        }
      }, u.prototype.generateNext = function (e) {
        return this.next && (e = this.next.generate(e)), e;
      }, Object.keys(s).forEach(function (e) {
        u.prototype["generate" + e] = function (t) {
          t.pushCode("{0} = buffer.read{1}(offset);", t.generateVariable(this.varName), e), t.pushCode("offset += {0};", s[e]);
        };
      }), u.prototype.generateBit = function (e) {
        var t = JSON.parse(JSON.stringify(this));

        if (t.varName = e.generateVariable(t.varName), e.bitFields.push(t), !this.next || this.next && ["Bit", "Nest"].indexOf(this.next.type) < 0) {
          var r = 0;
          e.bitFields.forEach(function (e) {
            r += e.options.length;
          });
          var n = e.generateTmpVariable();
          if (r <= 8) e.pushCode("var {0} = buffer.readUInt8(offset);", n), r = 8;else if (r <= 16) e.pushCode("var {0} = buffer.readUInt16BE(offset);", n), r = 16;else if (r <= 24) {
            var i = e.generateTmpVariable(),
                o = e.generateTmpVariable();
            e.pushCode("var {0} = buffer.readUInt16BE(offset);", i), e.pushCode("var {0} = buffer.readUInt8(offset + 2);", o), e.pushCode("var {2} = ({0} << 8) | {1};", i, o, n), r = 24;
          } else {
            if (!(r <= 32)) throw new Error("Currently, bit field sequence longer than 4-bytes is not supported.");
            e.pushCode("var {0} = buffer.readUInt32BE(offset);", n), r = 32;
          }
          e.pushCode("offset += {0};", r / 8);
          var s = 0,
              a = "be" === this.endian;
          e.bitFields.forEach(function (t) {
            e.pushCode("{0} = {1} >> {2} & {3};", t.varName, n, a ? r - s - t.options.length : s, (1 << t.options.length) - 1), s += t.options.length;
          }), e.bitFields = [];
        }
      }, u.prototype.generateSkip = function (e) {
        var t = e.generateOption(this.options.length);
        e.pushCode("offset += {0};", t);
      }, u.prototype.generateString = function (e) {
        var t = e.generateVariable(this.varName),
            r = e.generateTmpVariable();
        this.options.length && this.options.zeroTerminated ? (e.pushCode("var {0} = offset;", r), e.pushCode("while(buffer.readUInt8(offset++) !== 0 && offset - {0}  < {1});", r, this.options.length), e.pushCode("{0} = buffer.toString('{1}', {2}, offset - {2} < {3} ? offset - 1 : offset);", t, this.options.encoding, r, this.options.length)) : this.options.length ? (e.pushCode("{0} = buffer.toString('{1}', offset, offset + {2});", t, this.options.encoding, e.generateOption(this.options.length)), e.pushCode("offset += {0};", e.generateOption(this.options.length))) : this.options.zeroTerminated ? (e.pushCode("var {0} = offset;", r), e.pushCode("while(buffer.readUInt8(offset++) !== 0);"), e.pushCode("{0} = buffer.toString('{1}', {2}, offset - 1);", t, this.options.encoding, r)) : this.options.greedy && (e.pushCode("var {0} = offset;", r), e.pushCode("while(buffer.length > offset++);"), e.pushCode("{0} = buffer.toString('{1}', {2}, offset);", t, this.options.encoding, r)), this.options.stripNull && e.pushCode("{0} = {0}.replace(/\\x00+$/g, '')", t);
      }, u.prototype.generateBuffer = function (e) {
        "eof" === this.options.readUntil ? e.pushCode("{0} = buffer.slice(offset);", e.generateVariable(this.varName)) : (e.pushCode("{0} = buffer.slice(offset, offset + {1});", e.generateVariable(this.varName), e.generateOption(this.options.length)), e.pushCode("offset += {0};", e.generateOption(this.options.length))), this.options.clone && e.pushCode("{0} = Buffer.from({0});", e.generateVariable(this.varName));
      }, u.prototype.generateArray = function (e) {
        var t = e.generateOption(this.options.length),
            r = e.generateOption(this.options.lengthInBytes),
            n = this.options.type,
            i = e.generateTmpVariable(),
            o = e.generateVariable(this.varName),
            h = e.generateTmpVariable(),
            c = this.options.key,
            l = "string" == typeof c;
        if (l ? e.pushCode("{0} = {};", o) : e.pushCode("{0} = [];", o), "function" == typeof this.options.readUntil ? e.pushCode("do {") : "eof" === this.options.readUntil ? e.pushCode("for (var {0} = 0; offset < buffer.length; {0}++) {", i) : void 0 !== r ? e.pushCode("for (var {0} = offset; offset - {0} < {1}; ) {", i, r) : e.pushCode("for (var {0} = 0; {0} < {1}; {0}++) {", i, t), "string" == typeof n) {
          if (a[n]) {
            var d = e.generateTmpVariable();
            e.pushCode("var {0} = {1}(offset);", d, "___parser_" + n), e.pushCode("var {0} = {1}.result; offset = {1}.offset;", h, d), n !== this.alias && e.addReference(n);
          } else e.pushCode("var {0} = buffer.read{1}(offset);", h, f[n]), e.pushCode("offset += {0};", s[f[n]]);
        } else n instanceof u && (e.pushCode("var {0} = {};", h), e.pushScope(h), n.generate(e), e.popScope());
        l ? e.pushCode("{0}[{2}.{1}] = {2};", o, c, h) : e.pushCode("{0}.push({1});", o, h), e.pushCode("}"), "function" == typeof this.options.readUntil && e.pushCode(" while (!({0}).call(this, {1}, buffer.slice(offset)));", this.options.readUntil, h);
      }, u.prototype.generateChoiceCase = function (e, t, r) {
        if ("string" == typeof r) {
          if (a[r]) {
            var n = e.generateTmpVariable();
            e.pushCode("var {0} = {1}(offset);", n, "___parser_" + r), e.pushCode("{0} = {1}.result; offset = {1}.offset;", e.generateVariable(this.varName), n), r !== this.alias && e.addReference(r);
          } else e.pushCode("{0} = buffer.read{1}(offset);", e.generateVariable(this.varName), f[r]), e.pushCode("offset += {0};", s[f[r]]);
        } else r instanceof u && (e.pushPath(t), r.generate(e), e.popPath(t));
      }, u.prototype.generateChoice = function (e) {
        var t = e.generateOption(this.options.tag);
        this.varName && e.pushCode("{0} = {};", e.generateVariable(this.varName)), e.pushCode("switch({0}) {", t), Object.keys(this.options.choices).forEach(function (t) {
          var r = this.options.choices[t];
          isNaN(parseInt(t, 10)) ? e.pushCode("case '{0}':", t) : e.pushCode("case {0}:", t), this.generateChoiceCase(e, this.varName, r), e.pushCode("break;");
        }, this), e.pushCode("default:"), this.options.defaultChoice ? this.generateChoiceCase(e, this.varName, this.options.defaultChoice) : e.generateError('"Met undefined tag value " + {0} + " at choice"', t), e.pushCode("}");
      }, u.prototype.generateNest = function (e) {
        var t = e.generateVariable(this.varName);
        if (this.options.type instanceof u) this.varName && e.pushCode("{0} = {};", t), e.pushPath(this.varName), this.options.type.generate(e), e.popPath(this.varName);else if (a[this.options.type]) {
          var r = e.generateTmpVariable();
          e.pushCode("var {0} = {1}(offset);", r, "___parser_" + this.options.type), e.pushCode("{0} = {1}.result; offset = {1}.offset;", t, r), this.options.type !== this.alias && e.addReference(this.options.type);
        }
      }, u.prototype.generateFormatter = function (e, t, r) {
        "function" == typeof r && e.pushCode("{0} = ({1}).call(this, {0});", t, r);
      }, u.prototype.isInteger = function () {
        return !!this.type.match(/U?Int[8|16|32][BE|LE]?|Bit\d+/);
      }, u.prototype.itf8 = function (e, t) {
        return this.setNextParser("itf8", e, t);
      }, u.prototype.generateItf8 = function (e) {
        var t = e.generateVariable(this.varName),
            r = e.generateTmpVariable();
        e.pushCode("\n    var ".concat(r, " = buffer[offset];\n    if (").concat(r, " < 0x80) {\n      ").concat(t, " = ").concat(r, ";\n      offset += 1;\n    } else if (").concat(r, " < 0xc0) {\n      ").concat(t, " = ((").concat(r, "<<8) | buffer[offset+1]) & 0x3fff;\n      offset += 2;\n    } else if (").concat(r, " < 0xe0) {\n      ").concat(t, " = ((").concat(r, "<<16) | (buffer[offset+1]<< 8) |  buffer[offset+2]) & 0x1fffff;\n      offset += 3;\n    } else if (").concat(r, " < 0xf0) {\n      ").concat(t, " = ((").concat(r, "<<24) | (buffer[offset+1]<<16) | (buffer[offset+2]<<8) | buffer[offset+3]) & 0x0fffffff;\n      offset += 4\n    } else {\n      ").concat(t, " = ((").concat(r, " & 0x0f)<<28) | (buffer[offset+1]<<20) | (buffer[offset+2]<<12) | (buffer[offset+3]<<4) | (buffer[offset+4] & 0x0f);\n      // x=((0xff & 0x0f)<<28) | (0xff<<20) | (0xff<<12) | (0xff<<4) | (0x0f & 0x0f);\n      // TODO *val_p = uv < 0x80000000UL ? uv : -((int32_t) (0xffffffffUL - uv)) - 1;\n      offset += 5\n    }\n  "));
      }, u.prototype.ltf8 = function (e, t) {
        return this.setNextParser("ltf8", e, t);
      }, u.prototype.generateLtf8 = function (e) {
        var t = e.generateVariable(this.varName),
            r = e.generateTmpVariable();
        e.pushCode("\n  var ".concat(r, " = buffer[offset];\n  if (").concat(r, " < 0x80) {\n    ").concat(t, " = ").concat(r, ";\n    offset += 1;\n  } else if (").concat(r, " < 0xc0) {\n    ").concat(t, " = ((buffer[offset]<<8) | buffer[offset+1]) & 0x3fff;\n    offset += 2;\n  } else if (").concat(r, " < 0xe0) {\n    ").concat(t, " = ((buffer[offset]<<16) | (buffer[offset+1]<<8) | buffer[offset+2]) & 0x1fffff;\n    ").concat(t, " = (((").concat(r, " & 63) << 16) | buffer.readUInt16LE(offset + 1));\n    offset += 3;\n  } else if (").concat(r, " < 0xf0) {\n    ").concat(t, " = ((buffer[offset]<<24) | (buffer[offset+1]<<16) | (buffer[offset+2]<<8) | buffer[offset+3]) & 0x0fffffff;\n    offset += 4;\n  } else if (").concat(r, " < 0xf8) {\n    ").concat(t, " = (((buffer[offset] & 15) * Math.pow(2,32))) +\n      (buffer[offset+1]<<24) | (buffer[offset+2]<<16 | buffer[offset+3]<<8 | buffer[offset+4])\n    // TODO *val_p = uv < 0x80000000UL ? uv : -((int32_t) (0xffffffffUL - uv)) - 1;\n    offset += 5;\n  } else if (").concat(r, " < 0xfc) {\n    ").concat(t, " = ((((buffer[offset] & 7) << 8) | buffer[offset+1] )) * Math.pow(2,32) +\n      (buffer[offset+2]<<24) | (buffer[offset+3]<<16 | buffer[offset+4]<<8 | buffer[offset+5])\n    offset += 6;\n  } else if (").concat(r, " < 0xfe) {\n    ").concat(t, " = ((((buffer[offset] & 3) << 16) | buffer[offset+1]<<8 | buffer[offset+2])) * Math.pow(2,32) +\n      (buffer[offset+3]<<24) | (buffer[offset+4]<<16 | buffer[offset+5]<<8 | buffer[offset+6])\n    offset += 7;\n  } else if (").concat(r, " < 0xff) {\n    ").concat(t, " = Long.fromBytesBE(buffer.slice(offset+1,offset+8));\n    if (").concat(t, ".greaterThan(Number.MAX_SAFE_INTEGER) || ").concat(t, ".lessThan(Number.MIN_SAFE_INTEGER))\n      throw new Error('integer overflow')\n    ").concat(t, " = ").concat(t, ".toNumber()\n    offset += 8;\n  } else {\n    ").concat(t, " = Long.fromBytesBE(buffer.slice(offset+1,offset+9));\n    if (").concat(t, ".greaterThan(Number.MAX_SAFE_INTEGER) || ").concat(t, ".lessThan(Number.MIN_SAFE_INTEGER))\n      throw new Error('integer overflow')\n    ").concat(t, " = ").concat(t, ".toNumber()\n    offset += 9;\n  }\n  "));
      }, t.Parser = u;
    }).call(this, r(1).Buffer);
  }, function (module, exports, __webpack_require__) {
    var indexOf = __webpack_require__(69),
        Object_keys = function Object_keys(e) {
      if (Object.keys) return Object.keys(e);
      var t = [];

      for (var r in e) {
        t.push(r);
      }

      return t;
    },
        forEach = function forEach(e, t) {
      if (e.forEach) return e.forEach(t);

      for (var r = 0; r < e.length; r++) {
        t(e[r], r, e);
      }
    },
        defineProp = function () {
      try {
        return Object.defineProperty({}, "_", {}), function (e, t, r) {
          Object.defineProperty(e, t, {
            writable: !0,
            enumerable: !1,
            configurable: !0,
            value: r
          });
        };
      } catch (e) {
        return function (e, t, r) {
          e[t] = r;
        };
      }
    }(),
        globals = ["Array", "Boolean", "Date", "Error", "EvalError", "Function", "Infinity", "JSON", "Math", "NaN", "Number", "Object", "RangeError", "ReferenceError", "RegExp", "String", "SyntaxError", "TypeError", "URIError", "decodeURI", "decodeURIComponent", "encodeURI", "encodeURIComponent", "escape", "eval2", "isFinite", "isNaN", "parseFloat", "parseInt", "undefined", "unescape"];

    function Context() {}

    Context.prototype = {};

    var Script = exports.Script = function (e) {
      if (!(this instanceof Script)) return new Script(e);
      this.code = e;
    };

    Script.prototype.runInContext = function (e) {
      if (!(e instanceof Context)) throw new TypeError("needs a 'context' argument.");
      var t = document.createElement("iframe");
      t.style || (t.style = {}), t.style.display = "none", document.body.appendChild(t);
      var r = t.contentWindow,
          n = r.eval2,
          i = r.execScript;
      !n && i && (i.call(r, "null"), n = r.eval2), forEach(Object_keys(e), function (t) {
        r[t] = e[t];
      }), forEach(globals, function (t) {
        e[t] && (r[t] = e[t]);
      });
      var o = Object_keys(r),
          s = n.call(r, this.code);
      return forEach(Object_keys(r), function (t) {
        (t in e || -1 === indexOf(o, t)) && (e[t] = r[t]);
      }), forEach(globals, function (t) {
        t in e || defineProp(e, t, r[t]);
      }), document.body.removeChild(t), s;
    }, Script.prototype.runInThisContext = function () {
      return eval2(this.code);
    }, Script.prototype.runInNewContext = function (e) {
      var t = Script.createContext(e),
          r = this.runInContext(t);
      return forEach(Object_keys(t), function (r) {
        e[r] = t[r];
      }), r;
    }, forEach(Object_keys(Script.prototype), function (e) {
      exports[e] = Script[e] = function (t) {
        var r = Script(t);
        return r[e].apply(r, [].slice.call(arguments, 1));
      };
    }), exports.createScript = function (e) {
      return exports.Script(e);
    }, exports.createContext = Script.createContext = function (e) {
      var t = new Context();
      return "object" == _typeof(e) && forEach(Object_keys(e), function (r) {
        t[r] = e[r];
      }), t;
    };
  }, function (e, t) {
    var r = [].indexOf;

    e.exports = function (e, t) {
      if (r) return e.indexOf(t);

      for (var n = 0; n < e.length; ++n) {
        if (e[n] === t) return n;
      }

      return -1;
    };
  }, function (e, t) {
    var r = function r() {
      this.code = "", this.scopes = [["vars"]], this.isAsync = !1, this.bitFields = [], this.tmpVariableCount = 0, this.references = {};
    };

    r.prototype.generateVariable = function (e) {
      var t = [];

      for (Array.prototype.push.apply(t, this.scopes[this.scopes.length - 1]); /^\$parent\./.test(e);) {
        t.pop(), e = e.replace(/^\$parent\./, "");
      }

      return e && t.push(e), t.join(".");
    }, r.prototype.generateOption = function (e) {
      switch (_typeof(e)) {
        case "number":
          return e.toString();

        case "string":
          return this.generateVariable(e);

        case "function":
          return "(" + e + ").call(" + this.generateVariable() + ", vars)";
      }
    }, r.prototype.generateError = function () {
      var e = Array.prototype.slice.call(arguments),
          t = r.interpolate.apply(this, e);
      this.isAsync ? this.pushCode("return process.nextTick(function() { callback(new Error(" + t + "), vars); });") : this.pushCode("throw new Error(" + t + ");");
    }, r.prototype.generateTmpVariable = function () {
      return "$tmp" + this.tmpVariableCount++;
    }, r.prototype.pushCode = function () {
      var e = Array.prototype.slice.call(arguments);
      this.code += r.interpolate.apply(this, e) + "\n";
    }, r.prototype.pushPath = function (e) {
      e && this.scopes[this.scopes.length - 1].push(e);
    }, r.prototype.popPath = function (e) {
      e && this.scopes[this.scopes.length - 1].pop();
    }, r.prototype.pushScope = function (e) {
      this.scopes.push([e]);
    }, r.prototype.popScope = function () {
      this.scopes.pop();
    }, r.prototype.addReference = function (e) {
      this.references[e] || (this.references[e] = {
        resolved: !1,
        requested: !1
      });
    }, r.prototype.markResolved = function (e) {
      this.references[e].resolved = !0;
    }, r.prototype.markRequested = function (e) {
      e.forEach(function (e) {
        this.references[e].requested = !0;
      }.bind(this));
    }, r.prototype.getUnresolvedReferences = function () {
      var e = this.references;
      return Object.keys(this.references).filter(function (t) {
        return !e[t].resolved && !e[t].requested;
      });
    }, r.interpolate = function (e) {
      var t = e.match(/{\d+}/g),
          r = Array.prototype.slice.call(arguments, 1);
      return t && t.forEach(function (t) {
        var n = parseInt(t.substr(1, t.length - 2), 10);
        e = e.replace(t, r[n].toString());
      }), e;
    }, t.Context = r;
  }, function (e, t, r) {
    (function (t) {
      var _r16 = r(0),
          n = _r16.CramMalformedError,
          _r17 = r(8),
          i = _r17.itf8Size,
          o = _r17.parseItem,
          s = _r17.tinyMemoize,
          a = r(75),
          h = r(78);

      var f =
      /*#__PURE__*/
      function () {
        function f(e, t) {
          _classCallCheck(this, f);

          this.file = e, this.filePosition = t;
        }

        _createClass(f, [{
          key: "getHeader",
          value: function getHeader() {
            return this._readContainerHeader(this.filePosition);
          }
        }, {
          key: "getCompressionHeaderBlock",
          value: function () {
            var _getCompressionHeaderBlock = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee10() {
              var e, t, r;
              return regeneratorRuntime.wrap(function _callee10$(_context13) {
                while (1) {
                  switch (_context13.prev = _context13.next) {
                    case 0:
                      _context13.next = 2;
                      return this.getHeader();

                    case 2:
                      if (_context13.sent.numRecords) {
                        _context13.next = 4;
                        break;
                      }

                      return _context13.abrupt("return", null);

                    case 4:
                      _context13.next = 6;
                      return this.file.getSectionParsers();

                    case 6:
                      e = _context13.sent;
                      _context13.next = 9;
                      return this.getFirstBlock();

                    case 9:
                      t = _context13.sent;

                      if (!("COMPRESSION_HEADER" !== t.contentType)) {
                        _context13.next = 12;
                        break;
                      }

                      throw new n("invalid content type ".concat(t.contentType, " in what is supposed to be the compression header block"));

                    case 12:
                      r = o(t.content, e.cramCompressionHeader.parser, 0, t.contentPosition);
                      return _context13.abrupt("return", (t.content = r, t));

                    case 14:
                    case "end":
                      return _context13.stop();
                  }
                }
              }, _callee10, this);
            }));

            function getCompressionHeaderBlock() {
              return _getCompressionHeaderBlock.apply(this, arguments);
            }

            return getCompressionHeaderBlock;
          }()
        }, {
          key: "getFirstBlock",
          value: function () {
            var _getFirstBlock = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee11() {
              var e;
              return regeneratorRuntime.wrap(function _callee11$(_context14) {
                while (1) {
                  switch (_context14.prev = _context14.next) {
                    case 0:
                      _context14.next = 2;
                      return this.getHeader();

                    case 2:
                      e = _context14.sent;
                      return _context14.abrupt("return", this.file.readBlock(e._endPosition));

                    case 4:
                    case "end":
                      return _context14.stop();
                  }
                }
              }, _callee11, this);
            }));

            function getFirstBlock() {
              return _getFirstBlock.apply(this, arguments);
            }

            return getFirstBlock;
          }()
        }, {
          key: "getCompressionScheme",
          value: function () {
            var _getCompressionScheme = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee12() {
              var e;
              return regeneratorRuntime.wrap(function _callee12$(_context15) {
                while (1) {
                  switch (_context15.prev = _context15.next) {
                    case 0:
                      _context15.next = 2;
                      return this.getCompressionHeaderBlock();

                    case 2:
                      e = _context15.sent;

                      if (!e) {
                        _context15.next = 5;
                        break;
                      }

                      return _context15.abrupt("return", new h(e.content));

                    case 5:
                    case "end":
                      return _context15.stop();
                  }
                }
              }, _callee12, this);
            }));

            function getCompressionScheme() {
              return _getCompressionScheme.apply(this, arguments);
            }

            return getCompressionScheme;
          }()
        }, {
          key: "getSlice",
          value: function getSlice(e, t) {
            return new a(this, e, t);
          }
        }, {
          key: "_readContainerHeader",
          value: function () {
            var _readContainerHeader2 = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee13(e) {
              var r, n, s, _ref9, a, h, f, u, c, l;

              return regeneratorRuntime.wrap(function _callee13$(_context16) {
                while (1) {
                  switch (_context16.prev = _context16.next) {
                    case 0:
                      _context16.next = 2;
                      return this.file.getSectionParsers();

                    case 2:
                      r = _context16.sent;
                      n = r.cramContainerHeader1;
                      s = r.cramContainerHeader2;
                      _context16.next = 7;
                      return this.file.stat();

                    case 7:
                      _ref9 = _context16.sent;
                      a = _ref9.size;

                      if (!(e >= a)) {
                        _context16.next = 11;
                        break;
                      }

                      return _context16.abrupt("return");

                    case 11:
                      h = t.allocUnsafe(n.maxLength);
                      _context16.next = 14;
                      return this.file.read(h, 0, n.maxLength, e);

                    case 14:
                      f = o(h, n.parser), u = i(f.numLandmarks);

                      if (!(e + f.length >= a)) {
                        _context16.next = 17;
                        break;
                      }

                      return _context16.abrupt("return", void console.warn("".concat(this.file, ": container header at ").concat(e, " indicates that the container has length ").concat(f.length, ", which extends beyond the length of the file. Skipping this container.")));

                    case 17:
                      c = t.allocUnsafe(s.maxLength(f.numLandmarks));
                      _context16.next = 20;
                      return this.file.read(c, 0, s.maxLength(f.numLandmarks), e + f._size - u);

                    case 20:
                      l = o(c, s.parser);
                      _context16.t0 = this.file.validateChecksums && void 0 !== l.crc32;

                      if (!_context16.t0) {
                        _context16.next = 25;
                        break;
                      }

                      _context16.next = 25;
                      return this.file.checkCrc32(e, f._size + l._size - u - 4, l.crc32, "container header beginning at position ".concat(e));

                    case 25:
                      return _context16.abrupt("return", Object.assign(f, l, {
                        _size: f._size + l._size - u,
                        _endPosition: f._size + l._size - u + e
                      }));

                    case 26:
                    case "end":
                      return _context16.stop();
                  }
                }
              }, _callee13, this);
            }));

            function _readContainerHeader(_x10) {
              return _readContainerHeader2.apply(this, arguments);
            }

            return _readContainerHeader;
          }()
        }]);

        return f;
      }();

      "getHeader getCompressionHeaderBlock getCompressionScheme".split(" ").forEach(function (e) {
        return s(f, e);
      }), e.exports = f;
    }).call(this, r(1).Buffer);
  }, function (e, t, r) {
    var n, i, o, s, _a;

    n = r(73), i = r(32).utf8, o = r(74), s = r(32).bin, (_a = function a(e, t) {
      e.constructor == String ? e = t && "binary" === t.encoding ? s.stringToBytes(e) : i.stringToBytes(e) : o(e) ? e = Array.prototype.slice.call(e, 0) : Array.isArray(e) || (e = e.toString());

      for (var r = n.bytesToWords(e), h = 8 * e.length, f = 1732584193, u = -271733879, c = -1732584194, l = 271733878, d = 0; d < r.length; d++) {
        r[d] = 16711935 & (r[d] << 8 | r[d] >>> 24) | 4278255360 & (r[d] << 24 | r[d] >>> 8);
      }

      r[h >>> 5] |= 128 << h % 32, r[14 + (h + 64 >>> 9 << 4)] = h;
      var p = _a._ff,
          g = _a._gg,
          m = _a._hh,
          _ = _a._ii;

      for (d = 0; d < r.length; d += 16) {
        var y = f,
            b = u,
            w = c,
            v = l;
        f = p(f, u, c, l, r[d + 0], 7, -680876936), l = p(l, f, u, c, r[d + 1], 12, -389564586), c = p(c, l, f, u, r[d + 2], 17, 606105819), u = p(u, c, l, f, r[d + 3], 22, -1044525330), f = p(f, u, c, l, r[d + 4], 7, -176418897), l = p(l, f, u, c, r[d + 5], 12, 1200080426), c = p(c, l, f, u, r[d + 6], 17, -1473231341), u = p(u, c, l, f, r[d + 7], 22, -45705983), f = p(f, u, c, l, r[d + 8], 7, 1770035416), l = p(l, f, u, c, r[d + 9], 12, -1958414417), c = p(c, l, f, u, r[d + 10], 17, -42063), u = p(u, c, l, f, r[d + 11], 22, -1990404162), f = p(f, u, c, l, r[d + 12], 7, 1804603682), l = p(l, f, u, c, r[d + 13], 12, -40341101), c = p(c, l, f, u, r[d + 14], 17, -1502002290), f = g(f, u = p(u, c, l, f, r[d + 15], 22, 1236535329), c, l, r[d + 1], 5, -165796510), l = g(l, f, u, c, r[d + 6], 9, -1069501632), c = g(c, l, f, u, r[d + 11], 14, 643717713), u = g(u, c, l, f, r[d + 0], 20, -373897302), f = g(f, u, c, l, r[d + 5], 5, -701558691), l = g(l, f, u, c, r[d + 10], 9, 38016083), c = g(c, l, f, u, r[d + 15], 14, -660478335), u = g(u, c, l, f, r[d + 4], 20, -405537848), f = g(f, u, c, l, r[d + 9], 5, 568446438), l = g(l, f, u, c, r[d + 14], 9, -1019803690), c = g(c, l, f, u, r[d + 3], 14, -187363961), u = g(u, c, l, f, r[d + 8], 20, 1163531501), f = g(f, u, c, l, r[d + 13], 5, -1444681467), l = g(l, f, u, c, r[d + 2], 9, -51403784), c = g(c, l, f, u, r[d + 7], 14, 1735328473), f = m(f, u = g(u, c, l, f, r[d + 12], 20, -1926607734), c, l, r[d + 5], 4, -378558), l = m(l, f, u, c, r[d + 8], 11, -2022574463), c = m(c, l, f, u, r[d + 11], 16, 1839030562), u = m(u, c, l, f, r[d + 14], 23, -35309556), f = m(f, u, c, l, r[d + 1], 4, -1530992060), l = m(l, f, u, c, r[d + 4], 11, 1272893353), c = m(c, l, f, u, r[d + 7], 16, -155497632), u = m(u, c, l, f, r[d + 10], 23, -1094730640), f = m(f, u, c, l, r[d + 13], 4, 681279174), l = m(l, f, u, c, r[d + 0], 11, -358537222), c = m(c, l, f, u, r[d + 3], 16, -722521979), u = m(u, c, l, f, r[d + 6], 23, 76029189), f = m(f, u, c, l, r[d + 9], 4, -640364487), l = m(l, f, u, c, r[d + 12], 11, -421815835), c = m(c, l, f, u, r[d + 15], 16, 530742520), f = _(f, u = m(u, c, l, f, r[d + 2], 23, -995338651), c, l, r[d + 0], 6, -198630844), l = _(l, f, u, c, r[d + 7], 10, 1126891415), c = _(c, l, f, u, r[d + 14], 15, -1416354905), u = _(u, c, l, f, r[d + 5], 21, -57434055), f = _(f, u, c, l, r[d + 12], 6, 1700485571), l = _(l, f, u, c, r[d + 3], 10, -1894986606), c = _(c, l, f, u, r[d + 10], 15, -1051523), u = _(u, c, l, f, r[d + 1], 21, -2054922799), f = _(f, u, c, l, r[d + 8], 6, 1873313359), l = _(l, f, u, c, r[d + 15], 10, -30611744), c = _(c, l, f, u, r[d + 6], 15, -1560198380), u = _(u, c, l, f, r[d + 13], 21, 1309151649), f = _(f, u, c, l, r[d + 4], 6, -145523070), l = _(l, f, u, c, r[d + 11], 10, -1120210379), c = _(c, l, f, u, r[d + 2], 15, 718787259), u = _(u, c, l, f, r[d + 9], 21, -343485551), f = f + y >>> 0, u = u + b >>> 0, c = c + w >>> 0, l = l + v >>> 0;
      }

      return n.endian([f, u, c, l]);
    })._ff = function (e, t, r, n, i, o, s) {
      var a = e + (t & r | ~t & n) + (i >>> 0) + s;
      return (a << o | a >>> 32 - o) + t;
    }, _a._gg = function (e, t, r, n, i, o, s) {
      var a = e + (t & n | r & ~n) + (i >>> 0) + s;
      return (a << o | a >>> 32 - o) + t;
    }, _a._hh = function (e, t, r, n, i, o, s) {
      var a = e + (t ^ r ^ n) + (i >>> 0) + s;
      return (a << o | a >>> 32 - o) + t;
    }, _a._ii = function (e, t, r, n, i, o, s) {
      var a = e + (r ^ (t | ~n)) + (i >>> 0) + s;
      return (a << o | a >>> 32 - o) + t;
    }, _a._blocksize = 16, _a._digestsize = 16, e.exports = function (e, t) {
      if (null == e) throw new Error("Illegal argument " + e);
      var r = n.wordsToBytes(_a(e, t));
      return t && t.asBytes ? r : t && t.asString ? s.bytesToString(r) : n.bytesToHex(r);
    };
  }, function (e, t) {
    var r, n;
    r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", n = {
      rotl: function rotl(e, t) {
        return e << t | e >>> 32 - t;
      },
      rotr: function rotr(e, t) {
        return e << 32 - t | e >>> t;
      },
      endian: function endian(e) {
        if (e.constructor == Number) return 16711935 & n.rotl(e, 8) | 4278255360 & n.rotl(e, 24);

        for (var t = 0; t < e.length; t++) {
          e[t] = n.endian(e[t]);
        }

        return e;
      },
      randomBytes: function randomBytes(e) {
        for (var t = []; e > 0; e--) {
          t.push(Math.floor(256 * Math.random()));
        }

        return t;
      },
      bytesToWords: function bytesToWords(e) {
        for (var t = [], r = 0, n = 0; r < e.length; r++, n += 8) {
          t[n >>> 5] |= e[r] << 24 - n % 32;
        }

        return t;
      },
      wordsToBytes: function wordsToBytes(e) {
        for (var t = [], r = 0; r < 32 * e.length; r += 8) {
          t.push(e[r >>> 5] >>> 24 - r % 32 & 255);
        }

        return t;
      },
      bytesToHex: function bytesToHex(e) {
        for (var t = [], r = 0; r < e.length; r++) {
          t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16));
        }

        return t.join("");
      },
      hexToBytes: function hexToBytes(e) {
        for (var t = [], r = 0; r < e.length; r += 2) {
          t.push(parseInt(e.substr(r, 2), 16));
        }

        return t;
      },
      bytesToBase64: function bytesToBase64(e) {
        for (var t = [], n = 0; n < e.length; n += 3) {
          for (var i = e[n] << 16 | e[n + 1] << 8 | e[n + 2], o = 0; o < 4; o++) {
            8 * n + 6 * o <= 8 * e.length ? t.push(r.charAt(i >>> 6 * (3 - o) & 63)) : t.push("=");
          }
        }

        return t.join("");
      },
      base64ToBytes: function base64ToBytes(e) {
        e = e.replace(/[^A-Z0-9+\/]/gi, "");

        for (var t = [], n = 0, i = 0; n < e.length; i = ++n % 4) {
          0 != i && t.push((r.indexOf(e.charAt(n - 1)) & Math.pow(2, -2 * i + 8) - 1) << 2 * i | r.indexOf(e.charAt(n)) >>> 6 - 2 * i);
        }

        return t;
      }
    }, e.exports = n;
  }, function (e, t) {
    function r(e) {
      return !!e.constructor && "function" == typeof e.constructor.isBuffer && e.constructor.isBuffer(e);
    }
    /*!
     * Determine if an object is a Buffer
     *
     * @author   Feross Aboukhadijeh <https://feross.org>
     * @license  MIT
     */


    e.exports = function (e) {
      return null != e && (r(e) || function (e) {
        return "function" == typeof e.readFloatLE && "function" == typeof e.slice && r(e.slice(0, 0));
      }(e) || !!e._isBuffer);
    };
  }, function (e, t, r) {
    var _r18 = r(0),
        n = _r18.CramMalformedError,
        i = _r18.CramBufferOverrunError,
        o = _r18.CramArgumentError,
        _r19 = r(8),
        s = _r19.parseItem,
        a = _r19.tinyMemoize,
        h = _r19.sequenceMD5,
        f = r(17),
        u = r(76);

    function c(e, t, r, i) {
      if (!i) throw new n("could not resolve intra-slice mate pairs, file seems truncated or malformed");
      var o = !!(i.mate || void 0 !== i.mateRecordNumber && i.mateRecordNumber !== t);
      r.readName || (r.readName = String(r.uniqueId), i.readName = r.readName), r.mate = {
        sequenceId: i.sequenceId,
        alignmentStart: i.alignmentStart,
        uniqueId: i.uniqueId
      }, i.readName && (r.mate.readName = i.readName), i.mate || void 0 !== i.mateRecordNumber || (i.mate = {
        sequenceId: r.sequenceId,
        alignmentStart: r.alignmentStart,
        uniqueId: r.uniqueId
      }, r.readName && (i.mate.readName = r.readName)), r.flags |= f.BAM_FPAIRED, i.flags & f.BAM_FUNMAP && (r.flags |= f.BAM_FMUNMAP), r.flags & f.BAM_FUNMAP && (i.flags |= f.BAM_FMUNMAP), i.flags & f.BAM_FREVERSE && (r.flags |= f.BAM_FMREVERSE), r.flags & f.BAM_FREVERSE && (i.flags |= f.BAM_FMREVERSE), void 0 === r.templateLength && (o ? function (e, t, r) {
        var i = function t(r) {
          var i = [r];

          if (r.mateRecordNumber >= 0) {
            var _o = e[r.mateRecordNumber];
            if (!_o) throw new n("intra-slice mate record not found, this file seems malformed");
            i.push.apply(i, _toConsumableArray(t(_o)));
          }

          return i;
        }(r),
            o = i.map(function (e) {
          return e.alignmentStart;
        }),
            s = i.map(function (e) {
          return e.alignmentStart + e.readLength - 1;
        }),
            a = Math.max.apply(Math, _toConsumableArray(s)) - Math.min.apply(Math, _toConsumableArray(o)) + 1;

        a >= 0 && i.forEach(function (e) {
          if (void 0 !== e.templateLength) throw new n("mate pair group has some members that have template lengths already, this file seems malformed");
          e.templateLength = a;
        });
      }(e, 0, r) : function (e, t) {
        var r = Math.min(e.alignmentStart, t.alignmentStart),
            n = Math.max(e.alignmentStart + e.readLength - 1, t.alignmentStart + t.readLength - 1) - r + 1;
        e.templateLength = n, t.templateLength = n;
      }(r, i)), delete r.mateRecordNumber;
    }

    var l =
    /*#__PURE__*/
    function () {
      function l(e, t) {
        _classCallCheck(this, l);

        this.container = e, this.file = e.file, this.containerPosition = t;
      }

      _createClass(l, [{
        key: "getHeader",
        value: function () {
          var _getHeader = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee14() {
            var e, t, r;
            return regeneratorRuntime.wrap(function _callee14$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    _context17.next = 2;
                    return this.file.getSectionParsers();

                  case 2:
                    e = _context17.sent;
                    _context17.next = 5;
                    return this.container.getHeader();

                  case 5:
                    t = _context17.sent;
                    _context17.next = 8;
                    return this.file.readBlock(t._endPosition + this.containerPosition);

                  case 8:
                    r = _context17.sent;

                    if (!("MAPPED_SLICE_HEADER" === r.contentType)) {
                      _context17.next = 13;
                      break;
                    }

                    r.content = s(r.content, e.cramMappedSliceHeader.parser, 0, t._endPosition);
                    _context17.next = 16;
                    break;

                  case 13:
                    if (!("UNMAPPED_SLICE_HEADER" !== r.contentType)) {
                      _context17.next = 15;
                      break;
                    }

                    throw new n("error reading slice header block, invalid content type ".concat(r._contentType));

                  case 15:
                    r.content = s(r.content, e.cramUnmappedSliceHeader.parser, 0, t._endPosition);

                  case 16:
                    return _context17.abrupt("return", r);

                  case 17:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee14, this);
          }));

          function getHeader() {
            return _getHeader.apply(this, arguments);
          }

          return getHeader;
        }()
      }, {
        key: "getBlocks",
        value: function () {
          var _getBlocks = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee15() {
            var e, t, r, _e16;

            return regeneratorRuntime.wrap(function _callee15$(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    _context18.next = 2;
                    return this.getHeader();

                  case 2:
                    e = _context18.sent;
                    t = e._endPosition;
                    r = new Array(e.content.numBlocks);
                    _e16 = 0;

                  case 6:
                    if (!(_e16 < r.length)) {
                      _context18.next = 14;
                      break;
                    }

                    _context18.next = 9;
                    return this.file.readBlock(t);

                  case 9:
                    r[_e16] = _context18.sent;
                    t = r[_e16]._endPosition;

                  case 11:
                    _e16 += 1;
                    _context18.next = 6;
                    break;

                  case 14:
                    return _context18.abrupt("return", r);

                  case 15:
                  case "end":
                    return _context18.stop();
                }
              }
            }, _callee15, this);
          }));

          function getBlocks() {
            return _getBlocks.apply(this, arguments);
          }

          return getBlocks;
        }()
      }, {
        key: "getCoreDataBlock",
        value: function () {
          var _getCoreDataBlock = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee16() {
            return regeneratorRuntime.wrap(function _callee16$(_context19) {
              while (1) {
                switch (_context19.prev = _context19.next) {
                  case 0:
                    _context19.next = 2;
                    return this.getBlocks();

                  case 2:
                    return _context19.abrupt("return", _context19.sent[0]);

                  case 3:
                  case "end":
                    return _context19.stop();
                }
              }
            }, _callee16, this);
          }));

          function getCoreDataBlock() {
            return _getCoreDataBlock.apply(this, arguments);
          }

          return getCoreDataBlock;
        }()
      }, {
        key: "_getBlocksContentIdIndex",
        value: function () {
          var _getBlocksContentIdIndex2 = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee17() {
            var e, t;
            return regeneratorRuntime.wrap(function _callee17$(_context20) {
              while (1) {
                switch (_context20.prev = _context20.next) {
                  case 0:
                    _context20.next = 2;
                    return this.getBlocks();

                  case 2:
                    e = _context20.sent;
                    t = {};
                    return _context20.abrupt("return", (e.forEach(function (e) {
                      "EXTERNAL_DATA" === e.contentType && (t[e.contentId] = e);
                    }), t));

                  case 5:
                  case "end":
                    return _context20.stop();
                }
              }
            }, _callee17, this);
          }));

          function _getBlocksContentIdIndex() {
            return _getBlocksContentIdIndex2.apply(this, arguments);
          }

          return _getBlocksContentIdIndex;
        }()
      }, {
        key: "getBlockByContentId",
        value: function () {
          var _getBlockByContentId = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee18(e) {
            return regeneratorRuntime.wrap(function _callee18$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    _context21.next = 2;
                    return this._getBlocksContentIdIndex();

                  case 2:
                    _context21.t0 = e;
                    return _context21.abrupt("return", _context21.sent[_context21.t0]);

                  case 4:
                  case "end":
                    return _context21.stop();
                }
              }
            }, _callee18, this);
          }));

          function getBlockByContentId(_x11) {
            return _getBlockByContentId.apply(this, arguments);
          }

          return getBlockByContentId;
        }()
      }, {
        key: "getReferenceRegion",
        value: function () {
          var _getReferenceRegion = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee19() {
            var e, t, _t8, _t9;

            return regeneratorRuntime.wrap(function _callee19$(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    _context22.next = 2;
                    return this.getHeader();

                  case 2:
                    e = _context22.sent.content;

                    if (!(e.refSeqId < 0)) {
                      _context22.next = 5;
                      break;
                    }

                    return _context22.abrupt("return");

                  case 5:
                    _context22.next = 7;
                    return this.container.getCompressionScheme();

                  case 7:
                    t = _context22.sent;

                    if (!(e.refBaseBlockId >= 0)) {
                      _context22.next = 15;
                      break;
                    }

                    _t8 = this.getBlockByContentId(e.refBaseBlockId);

                    if (_t8) {
                      _context22.next = 12;
                      break;
                    }

                    throw new n("embedded reference specified, but reference block does not exist");

                  case 12:
                    if (!(e.span > _t8.uncompressedSize)) {
                      _context22.next = 14;
                      break;
                    }

                    throw new n("Embedded reference is too small");

                  case 14:
                    return _context22.abrupt("return", {
                      seq: _t8.data.toString("utf8"),
                      start: e.refSeqStart,
                      end: e.refSeqStart + e.refSeqSpan - 1,
                      span: e.refSeqSpan
                    });

                  case 15:
                    if (!(t.referenceRequired || this.file.fetchReferenceSequenceCallback)) {
                      _context22.next = 24;
                      break;
                    }

                    if (this.file.fetchReferenceSequenceCallback) {
                      _context22.next = 18;
                      break;
                    }

                    throw new Error("reference sequence not embedded, and seqFetch callback not provided, cannot fetch reference sequence");

                  case 18:
                    _context22.next = 20;
                    return this.file.fetchReferenceSequenceCallback(e.refSeqId, e.refSeqStart, e.refSeqStart + e.refSeqSpan - 1);

                  case 20:
                    _t9 = _context22.sent;

                    if (!(_t9.length !== e.refSeqSpan)) {
                      _context22.next = 23;
                      break;
                    }

                    throw new o("seqFetch callback returned a reference sequence of the wrong length");

                  case 23:
                    return _context22.abrupt("return", {
                      seq: _t9,
                      start: e.refSeqStart,
                      end: e.refSeqStart + e.refSeqSpan - 1,
                      span: e.refSeqSpan
                    });

                  case 24:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee19, this);
          }));

          function getReferenceRegion() {
            return _getReferenceRegion.apply(this, arguments);
          }

          return getReferenceRegion;
        }()
      }, {
        key: "getAllRecords",
        value: function getAllRecords() {
          return this.getRecords(function () {
            return !0;
          });
        }
      }, {
        key: "_fetchRecords",
        value: function () {
          var _fetchRecords2 = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee20() {
            var _this = this;

            var _ref10, e, t, r, o, _e17, _t10, _i, _o2, _s4, _a2, s, a, f, l, _n4, _e18, _t11;

            return regeneratorRuntime.wrap(function _callee20$(_context23) {
              while (1) {
                switch (_context23.prev = _context23.next) {
                  case 0:
                    _context23.next = 2;
                    return this.file.getDefinition();

                  case 2:
                    _ref10 = _context23.sent;
                    e = _ref10.majorVersion;
                    _context23.next = 6;
                    return this.container.getCompressionScheme();

                  case 6:
                    t = _context23.sent;
                    _context23.next = 9;
                    return this.getHeader();

                  case 9:
                    r = _context23.sent;
                    _context23.next = 12;
                    return this._getBlocksContentIdIndex();

                  case 12:
                    o = _context23.sent;

                    if (!(e > 1 && this.file.options.checkSequenceMD5 && r.content.refSeqId >= 0 && "0000000000000000" !== r.content.md5.join(""))) {
                      _context23.next = 21;
                      break;
                    }

                    _context23.next = 16;
                    return this.getReferenceRegion();

                  case 16:
                    _e17 = _context23.sent;

                    if (!_e17) {
                      _context23.next = 21;
                      break;
                    }

                    _t10 = _e17.seq, _i = _e17.start, _o2 = _e17.end, _s4 = h(_t10), _a2 = r.content.md5.map(function (e) {
                      return (e < 16 ? "0" : "") + e.toString(16);
                    }).join("");

                    if (!(_s4 !== _a2)) {
                      _context23.next = 21;
                      break;
                    }

                    throw new n("MD5 checksum reference mismatch for ref ".concat(r.content.refSeqId, " pos ").concat(_i, "..").concat(_o2, ". recorded MD5: ").concat(_a2, ", calculated MD5: ").concat(_s4));

                  case 21:
                    _context23.next = 23;
                    return this.getCoreDataBlock();

                  case 23:
                    s = _context23.sent;
                    a = {
                      lastAlignmentStart: r.content.refSeqStart || 0,
                      coreBlock: {
                        bitPosition: 7,
                        bytePosition: 0
                      },
                      externalBlocks: {
                        getCursor: function getCursor(e) {
                          return this[e] || (this[e] = {
                            bitPosition: 7,
                            bytePosition: 0
                          }), this[e];
                        }
                      }
                    };

                    f = function f(e) {
                      var r = t.getCodecForDataSeries(e);
                      if (!r) throw new n("no codec defined for ".concat(e, " data series"));
                      return r.decode(_this, s, o, a);
                    };

                    l = new Array(r.content.numRecords);
                    _n4 = 0;

                  case 28:
                    if (!(_n4 < l.length)) {
                      _context23.next = 42;
                      break;
                    }

                    _context23.prev = 29;
                    l[_n4] = u(this, f, t, r, s, o, a, e, _n4), l[_n4].uniqueId = r.contentPosition + r.content.recordCounter + _n4 + 1;
                    _context23.next = 39;
                    break;

                  case 33:
                    _context23.prev = 33;
                    _context23.t0 = _context23["catch"](29);

                    if (!(_context23.t0 instanceof i)) {
                      _context23.next = 38;
                      break;
                    }

                    console.warn("read attempted beyond end of buffer, file seems truncated."), l = l.filter(function (e) {
                      return !!e;
                    });
                    return _context23.abrupt("break", 42);

                  case 38:
                    throw _context23.t0;

                  case 39:
                    _n4 += 1;
                    _context23.next = 28;
                    break;

                  case 42:
                    for (_e18 = 0; _e18 < l.length; _e18 += 1) {
                      _t11 = l[_e18].mateRecordNumber;
                      _t11 >= 0 && c(l, _e18, l[_e18], l[_t11]);
                    }

                    return _context23.abrupt("return", l);

                  case 44:
                  case "end":
                    return _context23.stop();
                }
              }
            }, _callee20, this, [[29, 33]]);
          }));

          function _fetchRecords() {
            return _fetchRecords2.apply(this, arguments);
          }

          return _fetchRecords;
        }()
      }, {
        key: "getRecords",
        value: function () {
          var _getRecords = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee22(e) {
            var _this2 = this;

            var t, r, n, _e19, _t12, _r20, _i2, _e20, _r21, _o3, _s5, _e21, _o4;

            return regeneratorRuntime.wrap(function _callee22$(_context25) {
              while (1) {
                switch (_context25.prev = _context25.next) {
                  case 0:
                    t = this.container.filePosition + this.containerPosition;
                    r = this.file.featureCache.get(t);
                    r || (r = this._fetchRecords(), this.file.featureCache.set(t, r));
                    _context25.next = 5;
                    return r;

                  case 5:
                    _context25.t0 = e;
                    n = _context25.sent.filter(_context25.t0);

                    if (!(n.length && this.file.fetchReferenceSequenceCallback)) {
                      _context25.next = 21;
                      break;
                    }

                    _context25.next = 10;
                    return this.getHeader();

                  case 10:
                    _e19 = _context25.sent;

                    if (!(_e19.content.refSeqId >= 0 || -2 === _e19.content.refSeqId)) {
                      _context25.next = 21;
                      break;
                    }

                    _t12 = _e19.content.refSeqId >= 0 ? _e19.content.refSeqId : void 0;
                    _context25.next = 15;
                    return this.container.getCompressionScheme();

                  case 15:
                    _r20 = _context25.sent;
                    _i2 = {};

                    for (_e20 = 0; _e20 < n.length; _e20 += 1) {
                      _r21 = void 0 !== _t12 ? _t12 : n[_e20].sequenceId;
                      _o3 = _i2[_r21];
                      _o3 || (_o3 = {
                        id: _r21,
                        start: n[_e20].alignmentStart,
                        end: -1 / 0
                      }, _i2[_r21] = _o3);
                      _s5 = n[_e20].alignmentStart + (n[_e20].lengthOnRef || n[_e20].readLength) - 1;
                      _s5 > _o3.end && (_o3.end = _s5), n[_e20].alignmentStart < _o3.start && (_o3.start = n[_e20].alignmentStart);
                    }

                    _context25.next = 20;
                    return Promise.all(Object.values(_i2).map(
                    /*#__PURE__*/
                    function () {
                      var _ref11 = _asyncToGenerator(
                      /*#__PURE__*/
                      regeneratorRuntime.mark(function _callee21(e) {
                        return regeneratorRuntime.wrap(function _callee21$(_context24) {
                          while (1) {
                            switch (_context24.prev = _context24.next) {
                              case 0:
                                _context24.t0 = -1 !== e.id && e.start <= e.end;

                                if (!_context24.t0) {
                                  _context24.next = 5;
                                  break;
                                }

                                _context24.next = 4;
                                return _this2.file.fetchReferenceSequenceCallback(e.id, e.start, e.end);

                              case 4:
                                e.seq = _context24.sent;

                              case 5:
                              case "end":
                                return _context24.stop();
                            }
                          }
                        }, _callee21);
                      }));

                      return function (_x13) {
                        return _ref11.apply(this, arguments);
                      };
                    }()));

                  case 20:
                    for (_e21 = 0; _e21 < n.length; _e21 += 1) {
                      _o4 = _i2[void 0 !== _t12 ? _t12 : n[_e21].sequenceId];
                      _o4 && _o4.seq && n[_e21].addReferenceSequence(_o4, _r20);
                    }

                  case 21:
                    return _context25.abrupt("return", n);

                  case 22:
                  case "end":
                    return _context25.stop();
                }
              }
            }, _callee22, this);
          }));

          function getRecords(_x12) {
            return _getRecords.apply(this, arguments);
          }

          return getRecords;
        }()
      }]);

      return l;
    }();

    "getHeader getBlocks _getBlocksContentIdIndex".split(" ").forEach(function (e) {
      return a(l, e);
    }), e.exports = l;
  }, function (e, t, r) {
    (function (t) {
      var _r22 = r(0),
          n = _r22.CramMalformedError,
          i = _r22.CramUnimplementedError,
          o = r(31),
          s = r(77),
          a = r(17);

      function h(e) {
        var t = e.indexOf(0);
        return -1 === t ? e.toString("utf8") : e.toString("utf8", 0, t);
      }

      function f(e, r) {
        if (r.readInt32LE || (r = t.from(r)), "Z" === e) return h(r);
        if ("A" === e) return String.fromCharCode(r[0]);

        if ("I" === e) {
          var _e22 = o.fromBytesLE(r);

          if (_e22.greaterThan(Number.MAX_SAFE_INTEGER) || _e22.lessThan(Number.MIN_SAFE_INTEGER)) throw new i("integer overflow");
          return _e22.toNumber();
        }

        if ("i" === e) return r.readInt32LE(0);
        if ("s" === e) return r.readInt16LE(0);
        if ("S" === e) return r.readUInt16LE(0);
        if ("c" === e) return r.readInt8(0);
        if ("C" === e) return r.readUInt8(0);
        if ("f" === e) return r.readFloatLE(0);

        if ("H" === e) {
          var _e23 = h(r);

          return Number.parseInt(_e23.replace(/^0x/, ""), 16);
        }

        if ("B" === e) return function (e) {
          var t = String.fromCharCode(e[0]),
              r = e.readInt32LE(1),
              i = {
            c: ["readInt8", 1],
            C: ["readUInt8", 1],
            s: ["readInt16LE", 2],
            S: ["readUInt16LE", 2],
            i: ["readInt32LE", 4],
            I: ["readUInt32LE", 4],
            f: ["readFloatLE", 4]
          }[t];
          if (!i) throw new n("invalid tag value array type '".concat(t, "'"));

          var _i3 = _slicedToArray(i, 2),
              o = _i3[0],
              s = _i3[1],
              a = new Array(r);

          var h = 5;

          for (var _t13 = 0; _t13 < r; _t13 += 1) {
            a[_t13] = e[o](h), h += s;
          }

          return a;
        }(r);
        throw new n("Unrecognized tag type ".concat(e));
      }

      function u(e) {
        if (e instanceof t) return h(e);

        if (e.length && e.indexOf) {
          if (!e[e.length - 1]) {
            var _t14 = e.indexOf(0);

            return String.fromCharCode.apply(String, _toConsumableArray(e.slice(0, _t14)));
          }

          return String.fromCharCode.apply(String, _toConsumableArray(e));
        }

        return String(e);
      }

      e.exports = function (e, t, r, i, o, h, c, l, d) {
        var p = new s();

        if (p.flags = t("BF"), p.cramFlags = t("CF"), l > 1 && -2 === i.content.refSeqId ? p.sequenceId = t("RI") : p.sequenceId = i.content.refSeqId, p.readLength = t("RL"), p.alignmentStart = t("AP"), r.APdelta && (p.alignmentStart += c.lastAlignmentStart), c.lastAlignmentStart = p.alignmentStart, p.readGroupId = t("RG"), r.readNamesIncluded && (p.readName = u(t("RN"))), p.isDetached()) {
          var _e24 = {};
          _e24.flags = t("MF"), r.readNamesIncluded || (_e24.readName = u(t("RN")), p.readName = _e24.readName), _e24.sequenceId = t("NS"), _e24.alignmentStart = t("NP"), (_e24.flags || _e24.sequenceId > -1) && (p.mate = _e24), p.templateSize = t("TS"), _e24.flags & a.CRAM_M_UNMAP && (p.flags |= a.BAM_FMUNMAP), _e24.flags & a.CRAM_M_REVERSE && (p.flags |= a.BAM_FMREVERSE);
        } else p.hasMateDownStream() && (p.mateRecordNumber = t("NF") + d + 1);

        var g = t("TL");
        if (g < 0) throw new n("invalid TL index");
        var m = r.getTagNames(g),
            _ = m.length;

        for (var _t15 = 0; _t15 < _; _t15 += 1) {
          var _i4 = m[_t15],
              _s6 = _i4.substr(0, 2),
              _a3 = _i4.substr(2, 1),
              _u = r.getCodecForTag(_i4);

          if (!_u) throw new n("no codec defined for auxiliary tag ".concat(_i4));

          var _l2 = _u.decode(e, o, h, c);

          p.tags[_s6] = f(_a3, _l2);
        }

        if (p.isSegmentUnmapped()) {
          if (p.isUnknownBases()) p.readBases = null, p.qualityScores = null;else {
            var _e25 = new Array(p.readLength);

            for (var _r23 = 0; _r23 < _e25.length; _r23 += 1) {
              _e25[_r23] = t("BA");
            }

            if (p.readBases = String.fromCharCode.apply(String, _e25), p.isPreservingQualityScores()) {
              for (var _r24 = 0; _r24 < _e25.length; _r24 += 1) {
                _e25[_r24] = t("QS");
              }

              p.qualityScores = _e25;
            }
          }
        } else {
          var _e26 = t("FN");

          _e26 && (p.readFeatures = function (e, t, r, i, o) {
            var s = 0,
                a = e.alignmentStart - 1;
            var h = new Array(t);

            function f(_ref12) {
              var _ref13 = _slicedToArray(_ref12, 2),
                  e = _ref13[0],
                  t = _ref13[1];

              var n = r(t);
              return "character" === e ? String.fromCharCode(n) : "string" === e ? n.toString("utf8") : "numArray" === e ? n.toArray() : n;
            }

            for (var _e27 = 0; _e27 < t; _e27 += 1) {
              var _t16 = String.fromCharCode(r("FC")),
                  _i5 = r("FP"),
                  _u2 = {
                code: _t16
              },
                  _c3 = {
                B: ["character", "BA"],
                S: ["string", o > 1 ? "SC" : "IN"],
                X: ["number", "BS"],
                D: ["number", "DL"],
                I: ["string", "IN"],
                i: ["character", "BA"],
                b: ["string", "BB"],
                q: ["numArray", "QQ"],
                Q: ["number", "QS"],
                H: ["number", "HC"],
                P: ["number", "PD"],
                N: ["number", "RS"]
              }[_t16];

              if (!_c3) throw new n("invalid read feature code \"".concat(_t16, "\""));
              _u2.data = f(_c3);
              var _l3 = {
                B: ["number", "QS"]
              }[_t16];
              _l3 && (_u2.data = [_u2.data, f(_l3)]), s += _i5, _u2.pos = s, a += _i5, _u2.refPos = a, "D" === _t16 || "N" === _t16 ? a += _u2.data : "H" === _t16 ? a -= _u2.data : "I" === _t16 || "S" === _t16 ? a -= _u2.data.length : "i" === _t16 && (a -= 1), h[_e27] = _u2;
            }

            return h;
          }(p, _e26, t, 0, l));
          var _r25 = p.readLength;

          if (p.readFeatures && p.readFeatures.forEach(function (_ref14) {
            var e = _ref14.code,
                t = _ref14.data;
            "D" === e || "N" === e ? _r25 += t : "I" === e || "S" === e ? _r25 -= t.length : "i" === e && (_r25 -= 1);
          }), Number.isNaN(_r25) && (console.warn("".concat(p.readName || "".concat(p.sequenceId, ":").concat(p.alignmentStart), " record has invalid read features")), _r25 = p.readLength), p.lengthOnRef = _r25, p.mappingQuality = t("MQ"), p.isPreservingQualityScores()) {
            var _e28 = new Array(p.readLength);

            for (var _r26 = 0; _r26 < _e28.length; _r26 += 1) {
              _e28[_r26] = t("QS");
            }

            p.qualityScores = _e28;
          }
        }
        return p;
      };
    }).call(this, r(1).Buffer);
  }, function (e, t, r) {
    var n = r(17);
    var i = {
      a: 0,
      A: 0,
      c: 1,
      C: 1,
      g: 2,
      G: 2,
      t: 3,
      T: 3,
      n: 4,
      N: 4
    };

    e.exports =
    /*#__PURE__*/
    function () {
      function _class3() {
        _classCallCheck(this, _class3);

        this.tags = {};
      }

      _createClass(_class3, [{
        key: "isPaired",
        value: function isPaired() {
          return !!(this.flags & n.BAM_FPAIRED);
        }
      }, {
        key: "isProperlyPaired",
        value: function isProperlyPaired() {
          return !!(this.flags & n.BAM_FPROPER_PAIR);
        }
      }, {
        key: "isSegmentUnmapped",
        value: function isSegmentUnmapped() {
          return !!(this.flags & n.BAM_FUNMAP);
        }
      }, {
        key: "isMateUnmapped",
        value: function isMateUnmapped() {
          return !!(this.flags & n.BAM_FMUNMAP);
        }
      }, {
        key: "isReverseComplemented",
        value: function isReverseComplemented() {
          return !!(this.flags & n.BAM_FREVERSE);
        }
      }, {
        key: "isMateReverseComplemented",
        value: function isMateReverseComplemented() {
          return !!(this.flags & n.BAM_FMREVERSE);
        }
      }, {
        key: "isRead1",
        value: function isRead1() {
          return !!(this.flags & n.BAM_FREAD1);
        }
      }, {
        key: "isRead2",
        value: function isRead2() {
          return !!(this.flags & n.BAM_FREAD2);
        }
      }, {
        key: "isSecondary",
        value: function isSecondary() {
          return !!(this.flags & n.BAM_FSECONDARY);
        }
      }, {
        key: "isFailedQc",
        value: function isFailedQc() {
          return !!(this.flags & n.BAM_FQCFAIL);
        }
      }, {
        key: "isDuplicate",
        value: function isDuplicate() {
          return !!(this.flags & n.BAM_FDUP);
        }
      }, {
        key: "isSupplementary",
        value: function isSupplementary() {
          return !!(this.flags & n.BAM_FSUPPLEMENTARY);
        }
      }, {
        key: "isDetached",
        value: function isDetached() {
          return !!(this.cramFlags & n.CRAM_FLAG_DETACHED);
        }
      }, {
        key: "hasMateDownStream",
        value: function hasMateDownStream() {
          return !!(this.cramFlags & n.CRAM_FLAG_MATE_DOWNSTREAM);
        }
      }, {
        key: "isPreservingQualityScores",
        value: function isPreservingQualityScores() {
          return !!(this.cramFlags & n.CRAM_FLAG_PRESERVE_QUAL_SCORES);
        }
      }, {
        key: "isUnknownBases",
        value: function isUnknownBases() {
          return !!(this.cramFlags & n.CRAM_FLAG_NO_SEQ);
        }
      }, {
        key: "getReadBases",
        value: function getReadBases() {
          return !this.readBases && this._refRegion && (this.readBases = function (e, t) {
            if (!e.lengthOnRef && !e.readLength) return;
            if (e.isUnknownBases()) return;
            var r = e.alignmentStart - t.start;
            if (!e.readFeatures) return t.seq.substr(r, e.lengthOnRef).toUpperCase();
            var n = "",
                i = r,
                o = 0;

            for (; n.length < e.readLength;) {
              if (o < e.readFeatures.length && e.readFeatures[o].pos === n.length + 1) {
                var _t17 = e.readFeatures[o];
                o += 1, "b" === _t17.code ? (n += _t17.data, i += 1) : "B" === _t17.code ? (n += _t17.data[0], i += 1) : "X" === _t17.code ? (n += _t17.sub, i += 1) : "I" === _t17.code ? n += _t17.data : "D" === _t17.code ? i += _t17.data : "i" === _t17.code ? n += _t17.data : "N" === _t17.code ? i += _t17.data : "S" === _t17.code ? n += _t17.data : "P" === _t17.code || _t17.code;
              } else if (o < e.readFeatures.length) {
                var _r27 = t.seq.substr(i, e.readFeatures[o].pos - n.length - 1);

                n += _r27, i += _r27.length;
              } else {
                var _r28 = t.seq.substr(i, e.readLength - n.length);

                n += _r28, i += _r28.length;
              }
            }

            return n.toUpperCase();
          }(this, this._refRegion)), this.readBases;
        }
      }, {
        key: "getPairOrientation",
        value: function getPairOrientation() {
          if (!this.isSegmentUnmapped() && this.isPaired() && !this.isMateUnmapped() && this.sequenceId === this.mate.sequenceId) {
            var _e29 = this.isReverseComplemented() ? "R" : "F",
                _t18 = this.isMateReverseComplemented() ? "R" : "F";

            var _r29 = " ",
                _n5 = " ";
            this.isRead1() ? (_r29 = "1", _n5 = "2") : this.isRead2() && (_r29 = "2", _n5 = "1");
            var _i6 = [];
            var o = this.templateLength || this.templateSize;
            return this.alignmentStart > this.mate.alignmentStart && o > 0 && (o = -o), o > 0 ? (_i6[0] = _e29, _i6[1] = _r29, _i6[2] = _t18, _i6[3] = _n5) : (_i6[2] = _e29, _i6[3] = _r29, _i6[0] = _t18, _i6[1] = _n5), _i6.join("");
          }

          return null;
        }
      }, {
        key: "addReferenceSequence",
        value: function addReferenceSequence(e, t) {
          this.readFeatures && this.readFeatures.forEach(function (r) {
            "X" === r.code && function (e, t, r, n) {
              if (!t) return;
              var o = n.refPos - t.start,
                  s = t.seq.charAt(o);
              s && (n.ref = s);
              var a = i[s];
              void 0 === a && (a = 4);
              var h = r.substitutionMatrix[a][n.data];
              h && (n.sub = h);
            }(0, e, t, r);
          }), !this.readBases && e.start <= this.alignmentStart && e.end >= this.alignmentStart + (this.lengthOnRef || this.readLength) - 1 && (this._refRegion = e);
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var _this3 = this;

          var e = {};
          return Object.keys(this).forEach(function (t) {
            "_" !== t.charAt(0) && (e[t] = _this3[t]);
          }), e.readBases = this.getReadBases(), e;
        }
      }]);

      return _class3;
    }();
  }, function (e, t, r) {
    var _r30 = r(0),
        n = _r30.CramMalformedError,
        _r31 = r(79),
        i = _r31.instantiateCodec,
        o = {
      BF: "int",
      CF: "int",
      RI: "int",
      RL: "int",
      AP: "int",
      RG: "int",
      MF: "int",
      NS: "int",
      NP: "int",
      TS: "int",
      NF: "int",
      TC: "byte",
      TN: "int",
      FN: "int",
      FC: "byte",
      FP: "int",
      BS: "byte",
      IN: "byteArray",
      SC: "byteArray",
      DL: "int",
      BA: "byte",
      BB: "byteArray",
      RS: "int",
      PD: "int",
      HC: "int",
      MQ: "int",
      RN: "byteArray",
      QS: "byte",
      QQ: "byteArray",
      TL: "int",
      TM: "ignore",
      TV: "ignore"
    };

    e.exports =
    /*#__PURE__*/
    function () {
      function _class4(e) {
        _classCallCheck(this, _class4);

        Object.assign(this, e), this.readNamesIncluded = e.preservation.RN, this.APdelta = e.preservation.AP, this.referenceRequired = !!e.preservation.RR, this.tagIdsDictionary = e.preservation.TD, this.substitutionMatrix = function (e) {
          var t = new Array(5);

          for (var _e30 = 0; _e30 < 5; _e30 += 1) {
            t[_e30] = new Array(4);
          }

          return t[0][e[0] >> 6 & 3] = "C", t[0][e[0] >> 4 & 3] = "G", t[0][e[0] >> 2 & 3] = "T", t[0][e[0] >> 0 & 3] = "N", t[1][e[1] >> 6 & 3] = "A", t[1][e[1] >> 4 & 3] = "G", t[1][e[1] >> 2 & 3] = "T", t[1][e[1] >> 0 & 3] = "N", t[2][e[2] >> 6 & 3] = "A", t[2][e[2] >> 4 & 3] = "C", t[2][e[2] >> 2 & 3] = "T", t[2][e[2] >> 0 & 3] = "N", t[3][e[3] >> 6 & 3] = "A", t[3][e[3] >> 4 & 3] = "C", t[3][e[3] >> 2 & 3] = "G", t[3][e[3] >> 0 & 3] = "N", t[4][e[4] >> 6 & 3] = "A", t[4][e[4] >> 4 & 3] = "C", t[4][e[4] >> 2 & 3] = "G", t[4][e[4] >> 0 & 3] = "T", t;
        }(e.preservation.SM), this.dataSeriesCodecCache = {}, this.tagCodecCache = {};
      }

      _createClass(_class4, [{
        key: "getCodecForTag",
        value: function getCodecForTag(e) {
          if (!this.tagCodecCache[e]) {
            var _t19 = this.tagEncoding[e];
            _t19 && (this.tagCodecCache[e] = i(_t19, "byteArray"));
          }

          return this.tagCodecCache[e];
        }
      }, {
        key: "getTagNames",
        value: function getTagNames(e) {
          return this.tagIdsDictionary[e];
        }
      }, {
        key: "getCodecForDataSeries",
        value: function getCodecForDataSeries(e) {
          if (!this.dataSeriesCodecCache[e]) {
            var _t20 = this.dataSeriesEncoding[e];

            if (_t20) {
              var _r32 = o[e];
              if (!_r32) throw new n("data series name ".concat(e, " not defined in file compression header"));
              this.dataSeriesCodecCache[e] = i(_t20, _r32);
            }
          }

          return this.dataSeriesCodecCache[e];
        }
      }, {
        key: "toJSON",
        value: function toJSON() {
          var _this4 = this;

          var e = {};
          return Object.keys(this).forEach(function (t) {
            /Cache$/.test(t) || (e[t] = _this4[t]);
          }), e;
        }
      }]);

      return _class4;
    }();
  }, function (e, t, r) {
    var _r33 = r(0),
        n = _r33.CramUnimplementedError,
        i = r(80),
        o = r(81),
        s = r(82),
        a = r(83),
        h = r(84),
        f = r(85),
        u = {
      1: o,
      3: i,
      4: a,
      5: s,
      6: h,
      7: r(86),
      9: f
    };

    function c(e) {
      return u[e];
    }

    e.exports = {
      getCodecClassWithId: c,
      instantiateCodec: function e(t, r) {
        var i = c("ignore" === r ? 0 : t.codecId);
        if (!i) throw new n("no codec implemented for codec ID ".concat(t.codecId));
        return new i(t.parameters, r, e);
      }
    };
  }, function (e, t, r) {
    var _r34 = r(0),
        n = _r34.CramMalformedError,
        i = r(6);

    e.exports =
    /*#__PURE__*/
    function (_i7) {
      _inherits(_class5, _i7);

      function _class5() {
        var _this5;

        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var t = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck(this, _class5);

        if (_this5 = _possibleConstructorReturn(this, _getPrototypeOf(_class5).call(this, e, t)), !["byte", "int"].includes(_this5.dataType)) throw new TypeError("".concat(_this5.dataType, " decoding not yet implemented by HUFFMAN_INT codec"));
        _this5.buildCodeBook(), _this5.buildCodes(), _this5.buildCaches(), 0 === _this5.sortedCodes[0].bitLength && (_this5._decode = _this5._decodeZeroLengthCode);
        return _possibleConstructorReturn(_this5);
      }

      _createClass(_class5, [{
        key: "buildCodeBook",
        value: function buildCodeBook() {
          var _this6 = this;

          var e = new Array(this.parameters.numCodes);

          for (var _t21 = 0; _t21 < this.parameters.numCodes; _t21 += 1) {
            e[_t21] = {
              symbol: this.parameters.symbols[_t21],
              bitLength: this.parameters.bitLengths[_t21]
            };
          }

          e = e.sort(function (e, t) {
            return e.bitLength - t.bitLength || e.symbol - t.symbol;
          }), this.codeBook = {}, e.forEach(function (e) {
            _this6.codeBook[e.bitLength] || (_this6.codeBook[e.bitLength] = []), _this6.codeBook[e.bitLength].push(e.symbol);
          });
        }
      }, {
        key: "buildCodes",
        value: function buildCodes() {
          var _this7 = this;

          this.codes = {};
          var e = 0,
              t = -1;
          Object.entries(this.codeBook).forEach(function (_ref15) {
            var _ref16 = _slicedToArray(_ref15, 2),
                r = _ref16[0],
                i = _ref16[1];

            r = parseInt(r, 10), i.forEach(function (i) {
              var o = {
                bitLength: r,
                value: i
              };
              t += 1;
              var s = r - e;
              if (t <<= s, o.bitCode = t, e += s, function (e) {
                var t = e - (e >> 1) & 1431655765;
                return 16843009 * ((t = (858993459 & t) + (t >> 2 & 858993459)) + (t >> 4) & 252645135) >> 24;
              }(t) > r) throw new n("Symbol out of range");
              _this7.codes[i] = o;
            });
          });
        }
      }, {
        key: "buildCaches",
        value: function buildCaches() {
          this.sortedCodes = Object.values(this.codes).sort(function (e, t) {
            return e.bitLength - t.bitLength || e.bitCode - t.bitCode;
          }), this.sortedByValue = Object.values(this.codes).sort(function (e, t) {
            return e.value - t.value;
          }), this.sortedValuesByBitCode = this.sortedCodes.map(function (e) {
            return e.value;
          }), this.sortedBitCodes = this.sortedCodes.map(function (e) {
            return e.bitCode;
          }), this.sortedBitLengthsByBitCode = this.sortedCodes.map(function (e) {
            return e.bitLength;
          });
          var e = Math.max.apply(Math, _toConsumableArray(this.sortedBitCodes));
          this.bitCodeToValue = new Array(e + 1).fill(-1);

          for (var _e31 = 0; _e31 < this.sortedBitCodes.length; _e31 += 1) {
            this.bitCodeToValue[this.sortedCodes[_e31].bitCode] = _e31;
          }
        }
      }, {
        key: "decode",
        value: function decode(e, t, r, n) {
          return this._decode(e, t, n.coreBlock);
        }
      }, {
        key: "_decodeZeroLengthCode",
        value: function _decodeZeroLengthCode() {
          return this.sortedCodes[0].value;
        }
      }, {
        key: "_decode",
        value: function _decode(e, t, r) {
          var i = t.content;
          var o = 0,
              s = 0;

          for (var _e32 = 0; _e32 < this.sortedCodes.length; _e32 += 1) {
            var _t22 = this.sortedCodes[_e32].bitLength;
            s <<= _t22 - o, s |= this._getBits(i, r, _t22 - o), o = _t22;
            {
              var _r35 = this.bitCodeToValue[s];
              if (_r35 > -1 && this.sortedBitLengthsByBitCode[_r35] === _t22) return this.sortedValuesByBitCode[_r35];

              for (var _r36 = _e32; this.sortedCodes[_r36 + 1].bitLength === _t22 && _r36 < this.sortedCodes.length; _r36 += 1) {
                _e32 += 1;
              }
            }
          }

          throw new n("Huffman symbol not found.");
        }
      }]);

      return _class5;
    }(i);
  }, function (e, t, r) {
    var _r37 = r(0),
        n = _r37.CramUnimplementedError,
        i = _r37.CramMalformedError,
        o = _r37.CramBufferOverrunError,
        s = r(6),
        _r38 = r(8),
        a = _r38.parseItf8;

    e.exports =
    /*#__PURE__*/
    function (_s7) {
      _inherits(_class6, _s7);

      function _class6() {
        var _this8;

        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var t = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck(this, _class6);

        if (_this8 = _possibleConstructorReturn(this, _getPrototypeOf(_class6).call(this, e, t)), "int" === _this8.dataType) _this8._decodeData = _this8._decodeInt;else {
          if ("byte" !== _this8.dataType) throw new n("".concat(_this8.dataType, " decoding not yet implemented by EXTERNAL codec"));
          _this8._decodeData = _this8._decodeByte;
        }
        return _possibleConstructorReturn(_this8);
      }

      _createClass(_class6, [{
        key: "decode",
        value: function decode(e, t, r, n) {
          var o = this.parameters.blockContentId,
              s = r[o];
          if (!s) throw new i("no block found with content ID ".concat(o));
          var a = n.externalBlocks.getCursor(o);
          return this._decodeData(s, a);
        }
      }, {
        key: "_decodeInt",
        value: function _decodeInt(e, t) {
          var _a4 = a(e.content, t.bytePosition),
              _a5 = _slicedToArray(_a4, 2),
              r = _a5[0],
              n = _a5[1];

          return t.bytePosition += n, r;
        }
      }, {
        key: "_decodeByte",
        value: function _decodeByte(e, t) {
          if (t.bytePosition >= e.content.length) throw new o("attempted to read beyond end of block. this file seems truncated.");
          var r = e.content[t.bytePosition];
          return t.bytePosition += 1, r;
        }
      }]);

      return _class6;
    }(s);
  }, function (e, t, r) {
    var _r39 = r(0),
        n = _r39.CramBufferOverrunError,
        i = _r39.CramMalformedError,
        o = r(6);

    e.exports =
    /*#__PURE__*/
    function (_o5) {
      _inherits(_class7, _o5);

      function _class7() {
        var _this9;

        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var t = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck(this, _class7);

        if (_this9 = _possibleConstructorReturn(this, _getPrototypeOf(_class7).call(this, e, t)), "byteArray" !== t) throw new TypeError("byteArrayStop codec does not support data type ".concat(t));
        _this9._decode = _this9._decodeByteArray;
        return _possibleConstructorReturn(_this9);
      }

      _createClass(_class7, [{
        key: "decode",
        value: function decode(e, t, r, n) {
          var o = this.parameters.blockContentId,
              s = r[o];
          if (!s) throw new i("no block found with content ID ".concat(o));
          var a = n.externalBlocks.getCursor(o);
          return this._decode(s, a);
        }
      }, {
        key: "_decodeByteArray",
        value: function _decodeByteArray(e, t) {
          var r = e.content,
              i = this.parameters.stopByte,
              o = t.bytePosition;
          var s = t.bytePosition;

          for (; r[s] !== i && s < r.length;) {
            if (s === r.length) throw new n("byteArrayStop reading beyond length of data buffer?");
            s += 1;
          }

          return t.bytePosition = s + 1, r.slice(o, s);
        }
      }]);

      return _class7;
    }(o);
  }, function (e, t, r) {
    var _r40 = r(8),
        n = _r40.tinyMemoize,
        i = r(6);

    var o =
    /*#__PURE__*/
    function (_i8) {
      _inherits(o, _i8);

      function o() {
        var _this10;

        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var t = arguments.length > 1 ? arguments[1] : undefined;
        var r = arguments.length > 2 ? arguments[2] : undefined;

        _classCallCheck(this, o);

        if (_this10 = _possibleConstructorReturn(this, _getPrototypeOf(o).call(this, e, t)), _this10.instantiateCodec = r, "byteArray" !== t) throw new TypeError("byteArrayLength does not support data type ".concat(t));
        return _possibleConstructorReturn(_this10);
      }

      _createClass(o, [{
        key: "decode",
        value: function decode(e, t, r, n) {
          var i = this._getLengthCodec().decode(e, t, r, n),
              o = this._getDataCodec(),
              s = new Array(i);

          for (var a = 0; a < i; a += 1) {
            s[a] = o.decode(e, t, r, n);
          }

          return s;
        }
      }, {
        key: "_getLengthCodec",
        value: function _getLengthCodec() {
          var e = this.parameters.lengthsEncoding;
          return this.instantiateCodec(e, "int");
        }
      }, {
        key: "_getDataCodec",
        value: function _getDataCodec() {
          var e = this.parameters.valuesEncoding;
          return this.instantiateCodec(e, "byte");
        }
      }]);

      return o;
    }(i);

    "_getLengthCodec _getDataCodec".split(" ").forEach(function (e) {
      return n(o, e);
    }), e.exports = o;
  }, function (e, t, r) {
    var _r41 = r(0),
        n = _r41.CramUnimplementedError,
        i = r(6);

    e.exports =
    /*#__PURE__*/
    function (_i9) {
      _inherits(_class8, _i9);

      function _class8() {
        var _this11;

        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var t = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck(this, _class8);

        if (_this11 = _possibleConstructorReturn(this, _getPrototypeOf(_class8).call(this, e, t)), "int" !== _this11.dataType) throw new n("".concat(_this11.dataType, " decoding not yet implemented by BETA codec"));
        return _possibleConstructorReturn(_this11);
      }

      _createClass(_class8, [{
        key: "decode",
        value: function decode(e, t, r, n) {
          return this._getBits(t.content, n.coreBlock, this.parameters.length) - this.parameters.offset;
        }
      }]);

      return _class8;
    }(i);
  }, function (e, t, r) {
    var _r42 = r(0),
        n = _r42.CramUnimplementedError,
        i = r(6);

    e.exports =
    /*#__PURE__*/
    function (_i10) {
      _inherits(_class9, _i10);

      function _class9() {
        var _this12;

        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var t = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck(this, _class9);

        if (_this12 = _possibleConstructorReturn(this, _getPrototypeOf(_class9).call(this, e, t)), "int" !== _this12.dataType) throw new n("".concat(_this12.dataType, " decoding not yet implemented by GAMMA codec"));
        return _possibleConstructorReturn(_this12);
      }

      _createClass(_class9, [{
        key: "decode",
        value: function decode(e, t, r, n) {
          var i = 1;

          for (; 0 === this._getBits(t.content, n.coreBlock, 1);) {
            i += 1;
          }

          return (this._getBits(t.content, n.coreBlock, i - 1) | 1 << i - 1) - this.parameters.offset;
        }
      }]);

      return _class9;
    }(i);
  }, function (e, t, r) {
    var _r43 = r(0),
        n = _r43.CramUnimplementedError,
        i = r(6);

    e.exports =
    /*#__PURE__*/
    function (_i11) {
      _inherits(_class10, _i11);

      function _class10() {
        var _this13;

        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var t = arguments.length > 1 ? arguments[1] : undefined;

        _classCallCheck(this, _class10);

        if (_this13 = _possibleConstructorReturn(this, _getPrototypeOf(_class10).call(this, e, t)), "int" !== _this13.dataType) throw new n("".concat(_this13.dataType, " decoding not yet implemented by SUBEXP codec"));
        return _possibleConstructorReturn(_this13);
      }

      _createClass(_class10, [{
        key: "decode",
        value: function decode(e, t, r, n) {
          var i,
              o,
              s = 0;

          for (; this._getBits(t.content, n.coreBlock, 1);) {
            s += 1;
          }

          return 0 === s ? (i = this.parameters.K, o = this._getBits(t.content, n.coreBlock, i)) : o = 1 << (i = s + this.parameters.K - 1) | this._getBits(t.content, n.coreBlock, i), o - this.parameters.offset;
        }
      }]);

      return _class10;
    }(i);
  }, function (e, t, r) {

    var n = r(88),
        i = r(90);

    function o() {
      this.protocol = null, this.slashes = null, this.auth = null, this.host = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.query = null, this.pathname = null, this.path = null, this.href = null;
    }

    t.parse = b, t.resolve = function (e, t) {
      return b(e, !1, !0).resolve(t);
    }, t.resolveObject = function (e, t) {
      return e ? b(e, !1, !0).resolveObject(t) : t;
    }, t.format = function (e) {
      i.isString(e) && (e = b(e));
      return e instanceof o ? e.format() : o.prototype.format.call(e);
    }, t.Url = o;
    var s = /^([a-z0-9.+-]+:)/i,
        a = /:[0-9]*$/,
        h = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
        f = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", '"', "`", " ", "\r", "\n", "\t"]),
        u = ["'"].concat(f),
        c = ["%", "/", "?", ";", "#"].concat(u),
        l = ["/", "?", "#"],
        d = /^[+a-z0-9A-Z_-]{0,63}$/,
        p = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        g = {
      javascript: !0,
      "javascript:": !0
    },
        m = {
      javascript: !0,
      "javascript:": !0
    },
        _ = {
      http: !0,
      https: !0,
      ftp: !0,
      gopher: !0,
      file: !0,
      "http:": !0,
      "https:": !0,
      "ftp:": !0,
      "gopher:": !0,
      "file:": !0
    },
        y = r(91);

    function b(e, t, r) {
      if (e && i.isObject(e) && e instanceof o) return e;
      var n = new o();
      return n.parse(e, t, r), n;
    }

    o.prototype.parse = function (e, t, r) {
      if (!i.isString(e)) throw new TypeError("Parameter 'url' must be a string, not " + _typeof(e));
      var o = e.indexOf("?"),
          a = -1 !== o && o < e.indexOf("#") ? "?" : "#",
          f = e.split(a);
      f[0] = f[0].replace(/\\/g, "/");
      var b = e = f.join(a);

      if (b = b.trim(), !r && 1 === e.split("#").length) {
        var w = h.exec(b);
        if (w) return this.path = b, this.href = b, this.pathname = w[1], w[2] ? (this.search = w[2], this.query = t ? y.parse(this.search.substr(1)) : this.search.substr(1)) : t && (this.search = "", this.query = {}), this;
      }

      var v = s.exec(b);

      if (v) {
        var E = (v = v[0]).toLowerCase();
        this.protocol = E, b = b.substr(v.length);
      }

      if (r || v || b.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var S = "//" === b.substr(0, 2);
        !S || v && m[v] || (b = b.substr(2), this.slashes = !0);
      }

      if (!m[v] && (S || v && !_[v])) {
        for (var A, k, x = -1, C = 0; C < l.length; C++) {
          -1 !== (R = b.indexOf(l[C])) && (-1 === x || R < x) && (x = R);
        }

        -1 !== (k = -1 === x ? b.lastIndexOf("@") : b.lastIndexOf("@", x)) && (A = b.slice(0, k), b = b.slice(k + 1), this.auth = decodeURIComponent(A)), x = -1;

        for (C = 0; C < c.length; C++) {
          var R;
          -1 !== (R = b.indexOf(c[C])) && (-1 === x || R < x) && (x = R);
        }

        -1 === x && (x = b.length), this.host = b.slice(0, x), b = b.slice(x), this.parseHost(), this.hostname = this.hostname || "";
        var T = "[" === this.hostname[0] && "]" === this.hostname[this.hostname.length - 1];
        if (!T) for (var I = this.hostname.split(/\./), B = (C = 0, I.length); C < B; C++) {
          var L = I[C];

          if (L && !L.match(d)) {
            for (var N = "", F = 0, M = L.length; F < M; F++) {
              L.charCodeAt(F) > 127 ? N += "x" : N += L[F];
            }

            if (!N.match(d)) {
              var O = I.slice(0, C),
                  P = I.slice(C + 1),
                  U = L.match(p);
              U && (O.push(U[1]), P.unshift(U[2])), P.length && (b = "/" + P.join(".") + b), this.hostname = O.join(".");
              break;
            }
          }
        }
        this.hostname.length > 255 ? this.hostname = "" : this.hostname = this.hostname.toLowerCase(), T || (this.hostname = n.toASCII(this.hostname));
        var z = this.port ? ":" + this.port : "",
            D = this.hostname || "";
        this.host = D + z, this.href += this.host, T && (this.hostname = this.hostname.substr(1, this.hostname.length - 2), "/" !== b[0] && (b = "/" + b));
      }

      if (!g[E]) for (C = 0, B = u.length; C < B; C++) {
        var j = u[C];

        if (-1 !== b.indexOf(j)) {
          var q = encodeURIComponent(j);
          q === j && (q = escape(j)), b = b.split(j).join(q);
        }
      }
      var Z = b.indexOf("#");
      -1 !== Z && (this.hash = b.substr(Z), b = b.slice(0, Z));
      var H = b.indexOf("?");

      if (-1 !== H ? (this.search = b.substr(H), this.query = b.substr(H + 1), t && (this.query = y.parse(this.query)), b = b.slice(0, H)) : t && (this.search = "", this.query = {}), b && (this.pathname = b), _[E] && this.hostname && !this.pathname && (this.pathname = "/"), this.pathname || this.search) {
        z = this.pathname || "";
        var $ = this.search || "";
        this.path = z + $;
      }

      return this.href = this.format(), this;
    }, o.prototype.format = function () {
      var e = this.auth || "";
      e && (e = (e = encodeURIComponent(e)).replace(/%3A/i, ":"), e += "@");
      var t = this.protocol || "",
          r = this.pathname || "",
          n = this.hash || "",
          o = !1,
          s = "";
      this.host ? o = e + this.host : this.hostname && (o = e + (-1 === this.hostname.indexOf(":") ? this.hostname : "[" + this.hostname + "]"), this.port && (o += ":" + this.port)), this.query && i.isObject(this.query) && Object.keys(this.query).length && (s = y.stringify(this.query));
      var a = this.search || s && "?" + s || "";
      return t && ":" !== t.substr(-1) && (t += ":"), this.slashes || (!t || _[t]) && !1 !== o ? (o = "//" + (o || ""), r && "/" !== r.charAt(0) && (r = "/" + r)) : o || (o = ""), n && "#" !== n.charAt(0) && (n = "#" + n), a && "?" !== a.charAt(0) && (a = "?" + a), t + o + (r = r.replace(/[?#]/g, function (e) {
        return encodeURIComponent(e);
      })) + (a = a.replace("#", "%23")) + n;
    }, o.prototype.resolve = function (e) {
      return this.resolveObject(b(e, !1, !0)).format();
    }, o.prototype.resolveObject = function (e) {
      if (i.isString(e)) {
        var t = new o();
        t.parse(e, !1, !0), e = t;
      }

      for (var r = new o(), n = Object.keys(this), s = 0; s < n.length; s++) {
        var a = n[s];
        r[a] = this[a];
      }

      if (r.hash = e.hash, "" === e.href) return r.href = r.format(), r;

      if (e.slashes && !e.protocol) {
        for (var h = Object.keys(e), f = 0; f < h.length; f++) {
          var u = h[f];
          "protocol" !== u && (r[u] = e[u]);
        }

        return _[r.protocol] && r.hostname && !r.pathname && (r.path = r.pathname = "/"), r.href = r.format(), r;
      }

      if (e.protocol && e.protocol !== r.protocol) {
        if (!_[e.protocol]) {
          for (var c = Object.keys(e), l = 0; l < c.length; l++) {
            var d = c[l];
            r[d] = e[d];
          }

          return r.href = r.format(), r;
        }

        if (r.protocol = e.protocol, e.host || m[e.protocol]) r.pathname = e.pathname;else {
          for (var p = (e.pathname || "").split("/"); p.length && !(e.host = p.shift());) {
          }

          e.host || (e.host = ""), e.hostname || (e.hostname = ""), "" !== p[0] && p.unshift(""), p.length < 2 && p.unshift(""), r.pathname = p.join("/");
        }

        if (r.search = e.search, r.query = e.query, r.host = e.host || "", r.auth = e.auth, r.hostname = e.hostname || e.host, r.port = e.port, r.pathname || r.search) {
          var g = r.pathname || "",
              y = r.search || "";
          r.path = g + y;
        }

        return r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
      }

      var b = r.pathname && "/" === r.pathname.charAt(0),
          w = e.host || e.pathname && "/" === e.pathname.charAt(0),
          v = w || b || r.host && e.pathname,
          E = v,
          S = r.pathname && r.pathname.split("/") || [],
          A = (p = e.pathname && e.pathname.split("/") || [], r.protocol && !_[r.protocol]);
      if (A && (r.hostname = "", r.port = null, r.host && ("" === S[0] ? S[0] = r.host : S.unshift(r.host)), r.host = "", e.protocol && (e.hostname = null, e.port = null, e.host && ("" === p[0] ? p[0] = e.host : p.unshift(e.host)), e.host = null), v = v && ("" === p[0] || "" === S[0])), w) r.host = e.host || "" === e.host ? e.host : r.host, r.hostname = e.hostname || "" === e.hostname ? e.hostname : r.hostname, r.search = e.search, r.query = e.query, S = p;else if (p.length) S || (S = []), S.pop(), S = S.concat(p), r.search = e.search, r.query = e.query;else if (!i.isNullOrUndefined(e.search)) {
        if (A) r.hostname = r.host = S.shift(), (T = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = T.shift(), r.host = r.hostname = T.shift());
        return r.search = e.search, r.query = e.query, i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.href = r.format(), r;
      }
      if (!S.length) return r.pathname = null, r.search ? r.path = "/" + r.search : r.path = null, r.href = r.format(), r;

      for (var k = S.slice(-1)[0], x = (r.host || e.host || S.length > 1) && ("." === k || ".." === k) || "" === k, C = 0, R = S.length; R >= 0; R--) {
        "." === (k = S[R]) ? S.splice(R, 1) : ".." === k ? (S.splice(R, 1), C++) : C && (S.splice(R, 1), C--);
      }

      if (!v && !E) for (; C--; C) {
        S.unshift("..");
      }
      !v || "" === S[0] || S[0] && "/" === S[0].charAt(0) || S.unshift(""), x && "/" !== S.join("/").substr(-1) && S.push("");
      var T,
          I = "" === S[0] || S[0] && "/" === S[0].charAt(0);
      A && (r.hostname = r.host = I ? "" : S.length ? S.shift() : "", (T = !!(r.host && r.host.indexOf("@") > 0) && r.host.split("@")) && (r.auth = T.shift(), r.host = r.hostname = T.shift()));
      return (v = v || r.host && S.length) && !I && S.unshift(""), S.length ? r.pathname = S.join("/") : (r.pathname = null, r.path = null), i.isNull(r.pathname) && i.isNull(r.search) || (r.path = (r.pathname ? r.pathname : "") + (r.search ? r.search : "")), r.auth = e.auth || r.auth, r.slashes = r.slashes || e.slashes, r.href = r.format(), r;
    }, o.prototype.parseHost = function () {
      var e = this.host,
          t = a.exec(e);
      t && (":" !== (t = t[0]) && (this.port = t.substr(1)), e = e.substr(0, e.length - t.length)), e && (this.hostname = e);
    };
  }, function (e, t, r) {
    (function (e, n) {
      var i;
      /*! https://mths.be/punycode v1.4.1 by @mathias */

      !function (o) {
        t && t.nodeType, e && e.nodeType;
        var s = "object" == _typeof(n) && n;
        s.global !== s && s.window !== s && s.self;
        var a,
            h = 2147483647,
            f = 36,
            u = 1,
            c = 26,
            l = 38,
            d = 700,
            p = 72,
            g = 128,
            m = "-",
            _ = /^xn--/,
            y = /[^\x20-\x7E]/,
            b = /[\x2E\u3002\uFF0E\uFF61]/g,
            w = {
          overflow: "Overflow: input needs wider integers to process",
          "not-basic": "Illegal input >= 0x80 (not a basic code point)",
          "invalid-input": "Invalid input"
        },
            v = f - u,
            E = Math.floor,
            S = String.fromCharCode;

        function A(e) {
          throw new RangeError(w[e]);
        }

        function k(e, t) {
          for (var r = e.length, n = []; r--;) {
            n[r] = t(e[r]);
          }

          return n;
        }

        function x(e, t) {
          var r = e.split("@"),
              n = "";
          return r.length > 1 && (n = r[0] + "@", e = r[1]), n + k((e = e.replace(b, ".")).split("."), t).join(".");
        }

        function C(e) {
          for (var t, r, n = [], i = 0, o = e.length; i < o;) {
            (t = e.charCodeAt(i++)) >= 55296 && t <= 56319 && i < o ? 56320 == (64512 & (r = e.charCodeAt(i++))) ? n.push(((1023 & t) << 10) + (1023 & r) + 65536) : (n.push(t), i--) : n.push(t);
          }

          return n;
        }

        function R(e) {
          return k(e, function (e) {
            var t = "";
            return e > 65535 && (t += S((e -= 65536) >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), t += S(e);
          }).join("");
        }

        function T(e, t) {
          return e + 22 + 75 * (e < 26) - ((0 != t) << 5);
        }

        function I(e, t, r) {
          var n = 0;

          for (e = r ? E(e / d) : e >> 1, e += E(e / t); e > v * c >> 1; n += f) {
            e = E(e / v);
          }

          return E(n + (v + 1) * e / (e + l));
        }

        function B(e) {
          var t,
              r,
              n,
              i,
              o,
              s,
              a,
              l,
              d,
              _,
              y,
              b = [],
              w = e.length,
              v = 0,
              S = g,
              k = p;

          for ((r = e.lastIndexOf(m)) < 0 && (r = 0), n = 0; n < r; ++n) {
            e.charCodeAt(n) >= 128 && A("not-basic"), b.push(e.charCodeAt(n));
          }

          for (i = r > 0 ? r + 1 : 0; i < w;) {
            for (o = v, s = 1, a = f; i >= w && A("invalid-input"), ((l = (y = e.charCodeAt(i++)) - 48 < 10 ? y - 22 : y - 65 < 26 ? y - 65 : y - 97 < 26 ? y - 97 : f) >= f || l > E((h - v) / s)) && A("overflow"), v += l * s, !(l < (d = a <= k ? u : a >= k + c ? c : a - k)); a += f) {
              s > E(h / (_ = f - d)) && A("overflow"), s *= _;
            }

            k = I(v - o, t = b.length + 1, 0 == o), E(v / t) > h - S && A("overflow"), S += E(v / t), v %= t, b.splice(v++, 0, S);
          }

          return R(b);
        }

        function L(e) {
          var t,
              r,
              n,
              i,
              o,
              s,
              a,
              l,
              d,
              _,
              y,
              b,
              w,
              v,
              k,
              x = [];

          for (b = (e = C(e)).length, t = g, r = 0, o = p, s = 0; s < b; ++s) {
            (y = e[s]) < 128 && x.push(S(y));
          }

          for (n = i = x.length, i && x.push(m); n < b;) {
            for (a = h, s = 0; s < b; ++s) {
              (y = e[s]) >= t && y < a && (a = y);
            }

            for (a - t > E((h - r) / (w = n + 1)) && A("overflow"), r += (a - t) * w, t = a, s = 0; s < b; ++s) {
              if ((y = e[s]) < t && ++r > h && A("overflow"), y == t) {
                for (l = r, d = f; !(l < (_ = d <= o ? u : d >= o + c ? c : d - o)); d += f) {
                  k = l - _, v = f - _, x.push(S(T(_ + k % v, 0))), l = E(k / v);
                }

                x.push(S(T(l, 0))), o = I(r, w, n == i), r = 0, ++n;
              }
            }

            ++r, ++t;
          }

          return x.join("");
        }

        a = {
          version: "1.4.1",
          ucs2: {
            decode: C,
            encode: R
          },
          decode: B,
          encode: L,
          toASCII: function toASCII(e) {
            return x(e, function (e) {
              return y.test(e) ? "xn--" + L(e) : e;
            });
          },
          toUnicode: function toUnicode(e) {
            return x(e, function (e) {
              return _.test(e) ? B(e.slice(4).toLowerCase()) : e;
            });
          }
        }, void 0 === (i = function () {
          return a;
        }.call(t, r, t, e)) || (e.exports = i);
      }();
    }).call(this, r(89)(e), r(2));
  }, function (e, t) {
    e.exports = function (e) {
      return e.webpackPolyfill || (e.deprecate = function () {}, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", {
        enumerable: !0,
        get: function get() {
          return e.l;
        }
      }), Object.defineProperty(e, "id", {
        enumerable: !0,
        get: function get() {
          return e.i;
        }
      }), e.webpackPolyfill = 1), e;
    };
  }, function (e, t, r) {

    e.exports = {
      isString: function isString(e) {
        return "string" == typeof e;
      },
      isObject: function isObject(e) {
        return "object" == _typeof(e) && null !== e;
      },
      isNull: function isNull(e) {
        return null === e;
      },
      isNullOrUndefined: function isNullOrUndefined(e) {
        return null == e;
      }
    };
  }, function (e, t, r) {

    t.decode = t.parse = r(92), t.encode = t.stringify = r(93);
  }, function (e, t, r) {

    function n(e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }

    e.exports = function (e, t, r, o) {
      t = t || "&", r = r || "=";
      var s = {};
      if ("string" != typeof e || 0 === e.length) return s;
      var a = /\+/g;
      e = e.split(t);
      var h = 1e3;
      o && "number" == typeof o.maxKeys && (h = o.maxKeys);
      var f = e.length;
      h > 0 && f > h && (f = h);

      for (var u = 0; u < f; ++u) {
        var c,
            l,
            d,
            p,
            g = e[u].replace(a, "%20"),
            m = g.indexOf(r);
        m >= 0 ? (c = g.substr(0, m), l = g.substr(m + 1)) : (c = g, l = ""), d = decodeURIComponent(c), p = decodeURIComponent(l), n(s, d) ? i(s[d]) ? s[d].push(p) : s[d] = [s[d], p] : s[d] = p;
      }

      return s;
    };

    var i = Array.isArray || function (e) {
      return "[object Array]" === Object.prototype.toString.call(e);
    };
  }, function (e, t, r) {

    var n = function n(e) {
      switch (_typeof(e)) {
        case "string":
          return e;

        case "boolean":
          return e ? "true" : "false";

        case "number":
          return isFinite(e) ? e : "";

        default:
          return "";
      }
    };

    e.exports = function (e, t, r, a) {
      return t = t || "&", r = r || "=", null === e && (e = void 0), "object" == _typeof(e) ? o(s(e), function (s) {
        var a = encodeURIComponent(n(s)) + r;
        return i(e[s]) ? o(e[s], function (e) {
          return a + encodeURIComponent(n(e));
        }).join(t) : a + encodeURIComponent(n(e[s]));
      }).join(t) : a ? encodeURIComponent(n(a)) + r + encodeURIComponent(n(e)) : "";
    };

    var i = Array.isArray || function (e) {
      return "[object Array]" === Object.prototype.toString.call(e);
    };

    function o(e, t) {
      if (e.map) return e.map(t);

      for (var r = [], n = 0; n < e.length; n++) {
        r.push(t(e[n], n));
      }

      return r;
    }

    var s = Object.keys || function (e) {
      var t = [];

      for (var r in e) {
        Object.prototype.hasOwnProperty.call(e, r) && t.push(r);
      }

      return t;
    };
  }, function (e, t, r) {
    (function (t) {
      var n = r(95),
          i = r(96);

      e.exports =
      /*#__PURE__*/
      function () {
        function _class11(e) {
          var _this14 = this;

          _classCallCheck(this, _class11);

          this.position = 0, this.url = e, this.cache = new i({
            fetch: function fetch(e, t) {
              return _this14._fetch(e, t);
            }
          });
        }

        _createClass(_class11, [{
          key: "_fetch",
          value: function () {
            var _fetch2 = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee23(e, r) {
              var i, o, _e33, _r44;

              return regeneratorRuntime.wrap(function _callee23$(_context26) {
                while (1) {
                  switch (_context26.prev = _context26.next) {
                    case 0:
                      i = {};
                      r < 1 / 0 ? i.range = "bytes=".concat(e, "-").concat(e + r) : r === 1 / 0 && 0 !== e && (i.range = "bytes=".concat(e, "-"));
                      _context26.next = 4;
                      return n(this.url, {
                        method: "GET",
                        headers: i,
                        redirect: "follow",
                        mode: "cors"
                      });

                    case 4:
                      o = _context26.sent;

                      if (!(200 === o.status && 0 === e || 206 === o.status)) {
                        _context26.next = 13;
                        break;
                      }

                      _context26.t0 = t;
                      _context26.next = 9;
                      return o.arrayBuffer();

                    case 9:
                      _context26.t1 = _context26.sent;
                      _e33 = _context26.t0.from.call(_context26.t0, _context26.t1);
                      _r44 = /\/(\d+)$/.exec(o.headers.get("content-range"));
                      return _context26.abrupt("return", (_r44 && _r44[1] ? this._stat = {
                        size: parseInt(_r44[1], 10)
                      } : this._stat = {
                        size: void 0
                      }, _e33));

                    case 13:
                      throw new Error("HTTP ".concat(o.status, " fetching ").concat(this.url));

                    case 14:
                    case "end":
                      return _context26.stop();
                  }
                }
              }, _callee23, this);
            }));

            function _fetch(_x14, _x15) {
              return _fetch2.apply(this, arguments);
            }

            return _fetch;
          }()
        }, {
          key: "read",
          value: function read(e) {
            var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1 / 0;
            var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var i = n;
            return null === n && (i = this.position, this.position += r), this.cache.get(e, t, r, n);
          }
        }, {
          key: "readFile",
          value: function () {
            var _readFile = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee24() {
              var e;
              return regeneratorRuntime.wrap(function _callee24$(_context27) {
                while (1) {
                  switch (_context27.prev = _context27.next) {
                    case 0:
                      _context27.next = 2;
                      return n(this.url, {
                        method: "GET",
                        redirect: "follow",
                        mode: "cors"
                      });

                    case 2:
                      e = _context27.sent;
                      _context27.t0 = t;
                      _context27.next = 6;
                      return e.arrayBuffer();

                    case 6:
                      _context27.t1 = _context27.sent;
                      return _context27.abrupt("return", _context27.t0.from.call(_context27.t0, _context27.t1));

                    case 8:
                    case "end":
                      return _context27.stop();
                  }
                }
              }, _callee24, this);
            }));

            function readFile() {
              return _readFile.apply(this, arguments);
            }

            return readFile;
          }()
        }, {
          key: "stat",
          value: function () {
            var _stat = _asyncToGenerator(
            /*#__PURE__*/
            regeneratorRuntime.mark(function _callee25() {
              var _e34;

              return regeneratorRuntime.wrap(function _callee25$(_context28) {
                while (1) {
                  switch (_context28.prev = _context28.next) {
                    case 0:
                      if (this._stat) {
                        _context28.next = 6;
                        break;
                      }

                      _e34 = t.allocUnsafe(10);
                      _context28.next = 4;
                      return this.read(_e34, 0, 10, 0);

                    case 4:
                      if (this._stat) {
                        _context28.next = 6;
                        break;
                      }

                      throw new Error("unable to determine size of file at ".concat(this.url));

                    case 6:
                      return _context28.abrupt("return", this._stat);

                    case 7:
                    case "end":
                      return _context28.stop();
                  }
                }
              }, _callee25, this);
            }));

            function stat() {
              return _stat.apply(this, arguments);
            }

            return stat;
          }()
        }]);

        return _class11;
      }();
    }).call(this, r(1).Buffer);
  }, function (e, t) {
    var r = function (e) {
      function t() {
        this.fetch = !1;
      }

      return t.prototype = e, new t();
    }("undefined" != typeof self ? self : this);

    !function (e) {
      !function (t) {
        var r = {
          searchParams: "URLSearchParams" in e,
          iterable: "Symbol" in e && "iterator" in Symbol,
          blob: "FileReader" in e && "Blob" in e && function () {
            try {
              return new Blob(), !0;
            } catch (e) {
              return !1;
            }
          }(),
          formData: "FormData" in e,
          arrayBuffer: "ArrayBuffer" in e
        };
        if (r.arrayBuffer) var n = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"],
            i = ArrayBuffer.isView || function (e) {
          return e && n.indexOf(Object.prototype.toString.call(e)) > -1;
        };

        function o(e) {
          if ("string" != typeof e && (e = String(e)), /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e)) throw new TypeError("Invalid character in header field name");
          return e.toLowerCase();
        }

        function s(e) {
          return "string" != typeof e && (e = String(e)), e;
        }

        function a(e) {
          var t = {
            next: function next() {
              var t = e.shift();
              return {
                done: void 0 === t,
                value: t
              };
            }
          };
          return r.iterable && (t[Symbol.iterator] = function () {
            return t;
          }), t;
        }

        function h(e) {
          this.map = {}, e instanceof h ? e.forEach(function (e, t) {
            this.append(t, e);
          }, this) : Array.isArray(e) ? e.forEach(function (e) {
            this.append(e[0], e[1]);
          }, this) : e && Object.getOwnPropertyNames(e).forEach(function (t) {
            this.append(t, e[t]);
          }, this);
        }

        function f(e) {
          if (e.bodyUsed) return Promise.reject(new TypeError("Already read"));
          e.bodyUsed = !0;
        }

        function u(e) {
          return new Promise(function (t, r) {
            e.onload = function () {
              t(e.result);
            }, e.onerror = function () {
              r(e.error);
            };
          });
        }

        function c(e) {
          var t = new FileReader(),
              r = u(t);
          return t.readAsArrayBuffer(e), r;
        }

        function l(e) {
          if (e.slice) return e.slice(0);
          var t = new Uint8Array(e.byteLength);
          return t.set(new Uint8Array(e)), t.buffer;
        }

        function d() {
          return this.bodyUsed = !1, this._initBody = function (e) {
            var t;
            this._bodyInit = e, e ? "string" == typeof e ? this._bodyText = e : r.blob && Blob.prototype.isPrototypeOf(e) ? this._bodyBlob = e : r.formData && FormData.prototype.isPrototypeOf(e) ? this._bodyFormData = e : r.searchParams && URLSearchParams.prototype.isPrototypeOf(e) ? this._bodyText = e.toString() : r.arrayBuffer && r.blob && (t = e) && DataView.prototype.isPrototypeOf(t) ? (this._bodyArrayBuffer = l(e.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : r.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(e) || i(e)) ? this._bodyArrayBuffer = l(e) : this._bodyText = e = Object.prototype.toString.call(e) : this._bodyText = "", this.headers.get("content-type") || ("string" == typeof e ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : r.searchParams && URLSearchParams.prototype.isPrototypeOf(e) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
          }, r.blob && (this.blob = function () {
            var e = f(this);
            if (e) return e;
            if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
            if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            if (this._bodyFormData) throw new Error("could not read FormData body as blob");
            return Promise.resolve(new Blob([this._bodyText]));
          }, this.arrayBuffer = function () {
            return this._bodyArrayBuffer ? f(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(c);
          }), this.text = function () {
            var e,
                t,
                r,
                n = f(this);
            if (n) return n;
            if (this._bodyBlob) return e = this._bodyBlob, t = new FileReader(), r = u(t), t.readAsText(e), r;
            if (this._bodyArrayBuffer) return Promise.resolve(function (e) {
              for (var t = new Uint8Array(e), r = new Array(t.length), n = 0; n < t.length; n++) {
                r[n] = String.fromCharCode(t[n]);
              }

              return r.join("");
            }(this._bodyArrayBuffer));
            if (this._bodyFormData) throw new Error("could not read FormData body as text");
            return Promise.resolve(this._bodyText);
          }, r.formData && (this.formData = function () {
            return this.text().then(m);
          }), this.json = function () {
            return this.text().then(JSON.parse);
          }, this;
        }

        h.prototype.append = function (e, t) {
          e = o(e), t = s(t);
          var r = this.map[e];
          this.map[e] = r ? r + ", " + t : t;
        }, h.prototype.delete = function (e) {
          delete this.map[o(e)];
        }, h.prototype.get = function (e) {
          return e = o(e), this.has(e) ? this.map[e] : null;
        }, h.prototype.has = function (e) {
          return this.map.hasOwnProperty(o(e));
        }, h.prototype.set = function (e, t) {
          this.map[o(e)] = s(t);
        }, h.prototype.forEach = function (e, t) {
          for (var r in this.map) {
            this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this);
          }
        }, h.prototype.keys = function () {
          var e = [];
          return this.forEach(function (t, r) {
            e.push(r);
          }), a(e);
        }, h.prototype.values = function () {
          var e = [];
          return this.forEach(function (t) {
            e.push(t);
          }), a(e);
        }, h.prototype.entries = function () {
          var e = [];
          return this.forEach(function (t, r) {
            e.push([r, t]);
          }), a(e);
        }, r.iterable && (h.prototype[Symbol.iterator] = h.prototype.entries);
        var p = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];

        function g(e, t) {
          var r,
              n,
              i = (t = t || {}).body;

          if (e instanceof g) {
            if (e.bodyUsed) throw new TypeError("Already read");
            this.url = e.url, this.credentials = e.credentials, t.headers || (this.headers = new h(e.headers)), this.method = e.method, this.mode = e.mode, this.signal = e.signal, i || null == e._bodyInit || (i = e._bodyInit, e.bodyUsed = !0);
          } else this.url = String(e);

          if (this.credentials = t.credentials || this.credentials || "same-origin", !t.headers && this.headers || (this.headers = new h(t.headers)), this.method = (r = t.method || this.method || "GET", n = r.toUpperCase(), p.indexOf(n) > -1 ? n : r), this.mode = t.mode || this.mode || null, this.signal = t.signal || this.signal, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && i) throw new TypeError("Body not allowed for GET or HEAD requests");

          this._initBody(i);
        }

        function m(e) {
          var t = new FormData();
          return e.trim().split("&").forEach(function (e) {
            if (e) {
              var r = e.split("="),
                  n = r.shift().replace(/\+/g, " "),
                  i = r.join("=").replace(/\+/g, " ");
              t.append(decodeURIComponent(n), decodeURIComponent(i));
            }
          }), t;
        }

        function _(e, t) {
          t || (t = {}), this.type = "default", this.status = void 0 === t.status ? 200 : t.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = "statusText" in t ? t.statusText : "OK", this.headers = new h(t.headers), this.url = t.url || "", this._initBody(e);
        }

        g.prototype.clone = function () {
          return new g(this, {
            body: this._bodyInit
          });
        }, d.call(g.prototype), d.call(_.prototype), _.prototype.clone = function () {
          return new _(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new h(this.headers),
            url: this.url
          });
        }, _.error = function () {
          var e = new _(null, {
            status: 0,
            statusText: ""
          });
          return e.type = "error", e;
        };
        var y = [301, 302, 303, 307, 308];
        _.redirect = function (e, t) {
          if (-1 === y.indexOf(t)) throw new RangeError("Invalid status code");
          return new _(null, {
            status: t,
            headers: {
              location: e
            }
          });
        }, t.DOMException = e.DOMException;

        try {
          new t.DOMException();
        } catch (e) {
          t.DOMException = function (e, t) {
            this.message = e, this.name = t;
            var r = Error(e);
            this.stack = r.stack;
          }, t.DOMException.prototype = Object.create(Error.prototype), t.DOMException.prototype.constructor = t.DOMException;
        }

        function b(e, n) {
          return new Promise(function (i, o) {
            var s = new g(e, n);
            if (s.signal && s.signal.aborted) return o(new t.DOMException("Aborted", "AbortError"));
            var a = new XMLHttpRequest();

            function f() {
              a.abort();
            }

            a.onload = function () {
              var e,
                  t,
                  r = {
                status: a.status,
                statusText: a.statusText,
                headers: (e = a.getAllResponseHeaders() || "", t = new h(), e.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function (e) {
                  var r = e.split(":"),
                      n = r.shift().trim();

                  if (n) {
                    var i = r.join(":").trim();
                    t.append(n, i);
                  }
                }), t)
              };
              r.url = "responseURL" in a ? a.responseURL : r.headers.get("X-Request-URL");
              var n = "response" in a ? a.response : a.responseText;
              i(new _(n, r));
            }, a.onerror = function () {
              o(new TypeError("Network request failed"));
            }, a.ontimeout = function () {
              o(new TypeError("Network request failed"));
            }, a.onabort = function () {
              o(new t.DOMException("Aborted", "AbortError"));
            }, a.open(s.method, s.url, !0), "include" === s.credentials ? a.withCredentials = !0 : "omit" === s.credentials && (a.withCredentials = !1), "responseType" in a && r.blob && (a.responseType = "blob"), s.headers.forEach(function (e, t) {
              a.setRequestHeader(t, e);
            }), s.signal && (s.signal.addEventListener("abort", f), a.onreadystatechange = function () {
              4 === a.readyState && s.signal.removeEventListener("abort", f);
            }), a.send(void 0 === s._bodyInit ? null : s._bodyInit);
          });
        }

        b.polyfill = !0, e.fetch || (e.fetch = b, e.Headers = h, e.Request = g, e.Response = _), t.Headers = h, t.Request = g, t.Response = _, t.fetch = b;
      }({});
    }(r), delete r.fetch.polyfill, e.exports = t = r.fetch, t.fetch = r.fetch, t.Headers = r.Headers, t.Request = r.Request, t.Response = r.Response, t.default = r.fetch;
  }, function (e, t, r) {
    var n = r(30);

    e.exports =
    /*#__PURE__*/
    function () {
      function _class12(_ref17) {
        var e = _ref17.fetch,
            _ref17$size = _ref17.size,
            t = _ref17$size === void 0 ? 1e7 : _ref17$size,
            _ref17$chunkSize = _ref17.chunkSize,
            r = _ref17$chunkSize === void 0 ? 32768 : _ref17$chunkSize;

        _classCallCheck(this, _class12);

        if (!e) throw new Error("fetch function required");
        this.fetch = e, this.chunkSize = r, this.lruCache = new n({
          maxSize: Math.floor(t / r)
        });
      }

      _createClass(_class12, [{
        key: "get",
        value: function () {
          var _get = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee26(e, t, r, n) {
            var _this15 = this;

            var i, o, s, _loop, _e35, a, h;

            return regeneratorRuntime.wrap(function _callee26$(_context29) {
              while (1) {
                switch (_context29.prev = _context29.next) {
                  case 0:
                    if (!(e.length < t + r)) {
                      _context29.next = 2;
                      break;
                    }

                    throw new Error("output buffer not big enough for request");

                  case 2:
                    i = Math.floor(n / this.chunkSize), o = Math.floor((n + r) / this.chunkSize), s = new Array(o - i + 1);

                    _loop = function _loop(_e35) {
                      s[_e35 - i] = _this15._getChunk(_e35).then(function (t) {
                        return {
                          data: t,
                          chunkNumber: _e35
                        };
                      });
                    };

                    for (_e35 = i; _e35 <= o; _e35 += 1) {
                      _loop(_e35);
                    }

                    _context29.next = 7;
                    return Promise.all(s);

                  case 7:
                    a = _context29.sent;
                    h = n - a[0].chunkNumber * this.chunkSize;
                    a.forEach(function (_ref18) {
                      var s = _ref18.data,
                          a = _ref18.chunkNumber;
                      var f = a * _this15.chunkSize;
                      var u = 0,
                          c = _this15.chunkSize,
                          l = t + (a - i) * _this15.chunkSize - h;
                      a === i && (l = t, u = h), a === o && (c = n + r - f), s.copy(e, l, u, c);
                    });

                  case 10:
                  case "end":
                    return _context29.stop();
                }
              }
            }, _callee26, this);
          }));

          function get(_x16, _x17, _x18, _x19) {
            return _get.apply(this, arguments);
          }

          return get;
        }()
      }, {
        key: "_getChunk",
        value: function _getChunk(e) {
          var t = this.lruCache.get(e);
          if (t) return t;
          var r = this.fetch(e * this.chunkSize, this.chunkSize);
          return this.lruCache.set(e, r), r;
        }
      }]);

      return _class12;
    }();
  }, function (e, t, r) {
    var _r45 = r(34),
        n = _r45.promisify,
        i = null,
        o = i,
        s = i,
        a = i,
        h = i;

    e.exports =
    /*#__PURE__*/
    function () {
      function _class13(e) {
        _classCallCheck(this, _class13);

        this.position = 0, this.filename = e, this.fd = o(this.filename, "r");
      }

      _createClass(_class13, [{
        key: "read",
        value: function () {
          var _read = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee27(e) {
            var t,
                r,
                n,
                i,
                _args30 = arguments;
            return regeneratorRuntime.wrap(function _callee27$(_context30) {
              while (1) {
                switch (_context30.prev = _context30.next) {
                  case 0:
                    t = _args30.length > 1 && _args30[1] !== undefined ? _args30[1] : 0;
                    r = _args30.length > 2 ? _args30[2] : undefined;
                    n = _args30.length > 3 ? _args30[3] : undefined;
                    i = n;
                    null === n && (i = this.position, this.position += r);
                    _context30.t0 = s;
                    _context30.next = 8;
                    return this.fd;

                  case 8:
                    _context30.t1 = _context30.sent;
                    _context30.t2 = e;
                    _context30.t3 = t;
                    _context30.t4 = r;
                    _context30.t5 = n;
                    return _context30.abrupt("return", (0, _context30.t0)(_context30.t1, _context30.t2, _context30.t3, _context30.t4, _context30.t5));

                  case 14:
                  case "end":
                    return _context30.stop();
                }
              }
            }, _callee27, this);
          }));

          function read(_x20) {
            return _read.apply(this, arguments);
          }

          return read;
        }()
      }, {
        key: "readFile",
        value: function () {
          var _readFile2 = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee28() {
            return regeneratorRuntime.wrap(function _callee28$(_context31) {
              while (1) {
                switch (_context31.prev = _context31.next) {
                  case 0:
                    _context31.t0 = h;
                    _context31.next = 3;
                    return this.fd;

                  case 3:
                    _context31.t1 = _context31.sent;
                    return _context31.abrupt("return", (0, _context31.t0)(_context31.t1));

                  case 5:
                  case "end":
                    return _context31.stop();
                }
              }
            }, _callee28, this);
          }));

          function readFile() {
            return _readFile2.apply(this, arguments);
          }

          return readFile;
        }()
      }, {
        key: "stat",
        value: function () {
          var _stat2 = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee29() {
            return regeneratorRuntime.wrap(function _callee29$(_context32) {
              while (1) {
                switch (_context32.prev = _context32.next) {
                  case 0:
                    _context32.t0 = this._stat;

                    if (_context32.t0) {
                      _context32.next = 9;
                      break;
                    }

                    _context32.t1 = a;
                    _context32.next = 5;
                    return this.fd;

                  case 5:
                    _context32.t2 = _context32.sent;
                    _context32.next = 8;
                    return (0, _context32.t1)(_context32.t2);

                  case 8:
                    this._stat = _context32.sent;

                  case 9:
                    return _context32.abrupt("return", this._stat);

                  case 10:
                  case "end":
                    return _context32.stop();
                }
              }
            }, _callee29, this);
          }));

          function stat() {
            return _stat2.apply(this, arguments);
          }

          return stat;
        }()
      }]);

      return _class13;
    }();
  }, function (e, t) {
    e.exports = {
      parseHeaderText: function parseHeaderText(e) {
        var t = e.split(/\r?\n/),
            r = [];
        return t.forEach(function (e) {
          var _e$split = e.split(/\t/),
              _e$split2 = _toArray(_e$split),
              t = _e$split2[0],
              n = _e$split2.slice(1),
              i = n.map(function (e) {
            var _e$split3 = e.split(":", 2),
                _e$split4 = _slicedToArray(_e$split3, 2),
                t = _e$split4[0],
                r = _e$split4[1];

            return {
              tag: t,
              value: r
            };
          });

          t && r.push({
            tag: t.substr(1),
            data: i
          });
        }), r;
      }
    };
  }, function (e, t, r) {
    var _r46 = r(0),
        n = _r46.CramUnimplementedError,
        i = _r46.CramSizeLimitError,
        o = r(18);

    e.exports =
    /*#__PURE__*/
    function () {
      function _class14(e) {
        _classCallCheck(this, _class14);

        if (e.cram ? this.cram = e.cram : this.cram = new o({
          url: e.cramUrl,
          path: e.cramPath,
          filehandle: e.cramFilehandle,
          seqFetch: e.seqFetch,
          checkSequenceMD5: e.checkSequenceMD5,
          cacheSize: e.cacheSize
        }), !(this.cram instanceof o)) throw new Error("invalid arguments: no cramfile");
        if (this.index = e.index, !this.index.getEntriesForRange) throw new Error("invalid arguments: not an index");
        this.fetchSizeLimit = e.fetchSizeLimit || 3e6;
      }

      _createClass(_class14, [{
        key: "getRecordsForRange",
        value: function () {
          var _getRecordsForRange = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee30(e, t, r) {
            var _this16 = this,
                _Array$prototype;

            var o,
                s,
                a,
                h,
                f,
                u,
                c,
                _e36,
                _t23,
                _r48,
                _n7,
                _i13,
                _r47,
                _n6,
                _e37,
                _t24,
                _t25,
                _i12,
                _a6,
                _e38,
                _a7,
                _h,
                _f,
                _u3,
                l,
                _e39,
                _args33 = arguments;

            return regeneratorRuntime.wrap(function _callee30$(_context33) {
              while (1) {
                switch (_context33.prev = _context33.next) {
                  case 0:
                    o = _args33.length > 3 && _args33[3] !== undefined ? _args33[3] : {};

                    if (!(o.viewAsPairs = o.viewAsPairs || !1, o.pairAcrossChr = o.pairAcrossChr || !1, o.maxInsertSize = o.maxInsertSize || 2e5, "string" == typeof e)) {
                      _context33.next = 3;
                      break;
                    }

                    throw new n("string sequence names not yet supported");

                  case 3:
                    s = e;
                    _context33.next = 6;
                    return this.index.getEntriesForRange(s, t, r);

                  case 6:
                    a = _context33.sent;
                    h = a.map(function (e) {
                      return e.sliceBytes;
                    }).reduce(function (e, t) {
                      return e + t;
                    }, 0);

                    if (!(h > this.fetchSizeLimit)) {
                      _context33.next = 10;
                      break;
                    }

                    throw new i("data size of ".concat(h.toLocaleString(), " bytes exceeded fetch size limit of ").concat(this.fetchSizeLimit.toLocaleString(), " bytes"));

                  case 10:
                    f = function f(n) {
                      return n.sequenceId === e && n.alignmentStart <= r && n.alignmentStart + n.lengthOnRef >= t;
                    };

                    _context33.next = 13;
                    return Promise.all(a.map(function (e) {
                      return _this16.getRecordsInSlice(e, f);
                    }));

                  case 13:
                    u = _context33.sent;
                    c = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, _toConsumableArray(u));

                    if (!o.viewAsPairs) {
                      _context33.next = 36;
                      break;
                    }

                    _e36 = {}, _t23 = {};

                    for (_r48 = 0; _r48 < c.length; _r48 += 1) {
                      _n7 = c[_r48].readName, _i13 = c[_r48].uniqueId;
                      _e36[_n7] || (_e36[_n7] = 0), _e36[_n7] += 1, _t23[_i13] = 1;
                    }

                    _r47 = {};
                    Object.entries(_e36).forEach(function (_ref19) {
                      var _ref20 = _slicedToArray(_ref19, 2),
                          e = _ref20[0],
                          t = _ref20[1];

                      1 === t && (_r47[e] = !0);
                    });
                    _n6 = [];

                    for (_e37 = 0; _e37 < c.length; _e37 += 1) {
                      _t24 = c[_e37].readName;

                      if (_r47[_t24] && c[_e37].mate && (c[_e37].mate.sequenceId === s || o.pairAcrossChr) && Math.abs(c[_e37].alignmentStart - c[_e37].mate.alignmentStart) < o.maxInsertSize) {
                        _t25 = this.index.getEntriesForRange(c[_e37].mate.sequenceId, c[_e37].mate.alignmentStart, c[_e37].mate.alignmentStart + 1);

                        _n6.push(_t25);
                      }
                    }

                    _context33.next = 24;
                    return Promise.all(_n6);

                  case 24:
                    _i12 = _context33.sent;
                    _a6 = [];

                    for (_e38 = 0; _e38 < _i12.length; _e38 += 1) {
                      (_a7 = _a6).push.apply(_a7, _toConsumableArray(_i12[_e38]));
                    }

                    _a6 = _a6.sort(function (e, t) {
                      return e.toString().localeCompare(t.toString());
                    }).filter(function (e, t, r) {
                      return !t || e.toString() !== r[t - 1].toString();
                    });
                    _h = [], _f = [], _u3 = _a6.map(function (e) {
                      return e.sliceBytes;
                    }).reduce(function (e, t) {
                      return e + t;
                    }, 0);

                    if (!(_u3 > this.fetchSizeLimit)) {
                      _context33.next = 31;
                      break;
                    }

                    throw new Error("mate data size of ".concat(_u3.toLocaleString(), " bytes exceeded fetch size limit of ").concat(this.fetchSizeLimit.toLocaleString(), " bytes"));

                  case 31:
                    _a6.forEach(function (e) {
                      var n = _this16.cram.featureCache.get(e.toString());

                      n || (n = _this16.getRecordsInSlice(e, function () {
                        return !0;
                      }), _this16.cram.featureCache.set(e.toString(), n)), _h.push(n);
                      var i = n.then(function (e) {
                        var n = [];

                        for (var _i14 = 0; _i14 < e.length; _i14 += 1) {
                          var _o6 = e[_i14];
                          _r47[_o6.readName] && !_t23[_o6.uniqueId] && n.push(_o6);
                        }

                        return n;
                      });

                      _f.push(i);
                    });

                    _context33.next = 34;
                    return Promise.all(_f);

                  case 34:
                    l = _context33.sent;

                    if (l.length) {
                      _e39 = l.reduce(function (e, t) {
                        return e.concat(t);
                      });
                      c = c.concat(_e39);
                    }

                  case 36:
                    return _context33.abrupt("return", c);

                  case 37:
                  case "end":
                    return _context33.stop();
                }
              }
            }, _callee30, this);
          }));

          function getRecordsForRange(_x21, _x22, _x23) {
            return _getRecordsForRange.apply(this, arguments);
          }

          return getRecordsForRange;
        }()
      }, {
        key: "getRecordsInSlice",
        value: function getRecordsInSlice(_ref21, n) {
          var e = _ref21.containerStart,
              t = _ref21.sliceStart,
              r = _ref21.sliceBytes;
          return this.cram.getContainerAtPosition(e).getSlice(t, r).getRecords(n);
        }
      }, {
        key: "hasDataForReferenceSequence",
        value: function hasDataForReferenceSequence(e) {
          return this.index.hasDataForReferenceSequence(e);
        }
      }]);

      return _class14;
    }();
  }, function (e, t, r) {
    var _r49 = r(34),
        n = _r49.promisify,
        i = n(r(20).gunzip),
        _r50 = r(33),
        o = _r50.open,
        _r51 = r(0),
        s = _r51.CramMalformedError;

    var a =
    /*#__PURE__*/
    function () {
      function a(e) {
        _classCallCheck(this, a);

        Object.assign(this, e);
      }

      _createClass(a, [{
        key: "toString",
        value: function toString() {
          return "".concat(this.start, ":").concat(this.span, ":").concat(this.containerStart, ":").concat(this.sliceStart, ":").concat(this.sliceBytes);
        }
      }]);

      return a;
    }();

    function h(e, t) {
      if (t.some(function (e) {
        return void 0 === e;
      })) throw new s("invalid .crai index file");

      var _t26 = _slicedToArray(t, 6),
          r = _t26[0],
          n = _t26[1],
          i = _t26[2],
          o = _t26[3],
          h = _t26[4],
          f = _t26[5];

      e[r] || (e[r] = []), e[r].push(new a({
        start: n,
        span: i,
        containerStart: o,
        sliceStart: h,
        sliceBytes: f
      }));
    }

    e.exports =
    /*#__PURE__*/
    function () {
      function _class15(e) {
        _classCallCheck(this, _class15);

        var t = o(e.url, e.path, e.filehandle);
        this.readFile = t.readFile.bind(t), this.index = this.parseIndex();
      }

      _createClass(_class15, [{
        key: "parseIndex",
        value: function parseIndex() {
          var e = {};
          return this.readFile().then(function (e) {
            return 31 === e[0] && 139 === e[1] ? i(e) : e;
          }).then(function (t) {
            var r = [],
                n = "";

            for (var _i15 = 0; _i15 < t.length; _i15 += 1) {
              var _o7 = t[_i15];
              if (_o7 >= 48 && _o7 <= 57 || !n && 45 === _o7) n += String.fromCharCode(_o7);else if (9 === _o7) r.push(Number.parseInt(n, 10)), n = "";else if (10 === _o7) r.push(Number.parseInt(n, 10)), n = "", h(e, r), r = [];else if (13 !== _o7 && 32 !== _o7) throw new s("invalid .crai index file");
            }

            return n && r.push(Number.parseInt(n, 10)), 6 === r.length && h(e, r), Object.entries(e).forEach(function (_ref22) {
              var _ref23 = _slicedToArray(_ref22, 2),
                  t = _ref23[0],
                  r = _ref23[1];

              e[t] = r.sort(function (e, t) {
                return e.start - t.start || e.span - t.span;
              });
            }), e;
          });
        }
      }, {
        key: "getIndex",
        value: function getIndex() {
          return this.index;
        }
      }, {
        key: "hasDataForReferenceSequence",
        value: function () {
          var _hasDataForReferenceSequence = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee31(e) {
            return regeneratorRuntime.wrap(function _callee31$(_context34) {
              while (1) {
                switch (_context34.prev = _context34.next) {
                  case 0:
                    _context34.next = 2;
                    return this.index;

                  case 2:
                    _context34.t0 = e;
                    return _context34.abrupt("return", !!_context34.sent[_context34.t0]);

                  case 4:
                  case "end":
                    return _context34.stop();
                }
              }
            }, _callee31, this);
          }));

          function hasDataForReferenceSequence(_x24) {
            return _hasDataForReferenceSequence.apply(this, arguments);
          }

          return hasDataForReferenceSequence;
        }()
      }, {
        key: "getEntriesForRange",
        value: function () {
          var _getEntriesForRange = _asyncToGenerator(
          /*#__PURE__*/
          regeneratorRuntime.mark(function _callee32(e, t, r) {
            var n, i, o, s, a, h, _e40, f, u, c;

            return regeneratorRuntime.wrap(function _callee32$(_context35) {
              while (1) {
                switch (_context35.prev = _context35.next) {
                  case 0:
                    _context35.next = 2;
                    return this.index;

                  case 2:
                    _context35.t0 = e;
                    n = _context35.sent[_context35.t0];

                    if (n) {
                      _context35.next = 6;
                      break;
                    }

                    return _context35.abrupt("return", []);

                  case 6:
                    i = n.length, o = function o(e) {
                      var n = e.start,
                          i = e.start + e.span;
                      return n >= r ? -1 : i <= t ? 1 : 0;
                    };
                    a = 0, h = i - 1;

                  case 8:
                    if (!(a <= h)) {
                      _context35.next = 19;
                      break;
                    }

                    _e40 = o(n[s = Math.round((h + a) / 2)]);

                    if (!(_e40 > 0)) {
                      _context35.next = 14;
                      break;
                    }

                    a = s + 1;
                    _context35.next = 17;
                    break;

                  case 14:
                    if (_e40 < 0) {
                      _context35.next = 16;
                      break;
                    }

                    return _context35.abrupt("break", 19);

                  case 16:
                    h = s - 1;

                  case 17:
                    _context35.next = 8;
                    break;

                  case 19:
                    f = s;

                    for (; f && !o(n[f - 1]);) {
                      f -= 1;
                    }

                    u = s;

                    for (; u < i - 1 && !o(n[u + 1]);) {
                      u += 1;
                    }

                    c = n[f].start;
                    return _context35.abrupt("return", n[u].start + n[u].span >= t && r >= c ? n.slice(f, u + 1) : []);

                  case 25:
                  case "end":
                    return _context35.stop();
                }
              }
            }, _callee32, this);
          }));

          function getEntriesForRange(_x25, _x26, _x27) {
            return _getEntriesForRange.apply(this, arguments);
          }

          return getEntriesForRange;
        }()
      }]);

      return _class15;
    }();
  }]);

  var READ_STRAND_FLAG$2 = 0x10;
  var MATE_STRAND_FLAG$2 = 0x20;
  var CRAM_MATE_STRAND_FLAG = 0x1;
  /**
   * Class for reading a cram file
   *
   * @param config
   * @constructor
   */

  var CramReader = function CramReader(config, genome, browser) {
    this.config = config;
    this.browser = browser;
    this.genome = genome;
    this.cramFile = new gmodCRAM.CramFile({
      filehandle: new FileHandler(config.url),
      seqFetch: config.seqFetch || seqFetch.bind(this),
      checkSequenceMD5: config.checkSequenceMD5 !== undefined ? config.checkSequenceMD5 : true
    });
    var indexFileHandle = new FileHandler(config.indexURL);
    this.indexedCramFile = new gmodCRAM.IndexedCramFile({
      cram: this.cramFile,
      index: new gmodCRAM.CraiIndex({
        filehandle: indexFileHandle
      }),
      fetchSizeLimit: 30000000
    });
    BamUtils.setReaderDefaults(this, config);
  };

  function seqFetch(seqID, start, end) {
    var sequence = this.genome.sequence;
    var genome = this.genome;
    return this.getHeader().then(function (header) {
      var chrName = genome.getChromosomeName(header.chrNames[seqID]);
      return sequence.getSequence(chrName, start - 1, end);
    });
  }
  /**
   * Parse the sequence dictionary from the SAM header and build chr name tables.  This function
   * is public so it can be unit tested.
   *
   * @returns {PromiseLike<chrName, chrToIndex, chrAliasTable}>}
   */


  CramReader.prototype.getHeader = function () {
    if (this.header) {
      return Promise.resolve(this.header);
    } else {
      var self = this;
      var genome = this.genome;
      return this.cramFile.getSamHeader().then(function (samHeader) {
        var chrToIndex = {};
        var chrNames = [];
        var chrAliasTable = {};
        var readGroups = [];
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = samHeader[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var line = _step.value;

            if ('SQ' === line.tag) {
              var _iteratorNormalCompletion2 = true;
              var _didIteratorError2 = false;
              var _iteratorError2 = undefined;

              try {
                for (var _iterator2 = line.data[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                  var d = _step2.value;

                  if (d.tag === "SN") {
                    var seq = d.value;
                    chrToIndex[seq] = chrNames.length;
                    chrNames.push(seq);

                    if (genome) {
                      var alias = genome.getChromosomeName(seq);
                      chrAliasTable[alias] = seq;
                    }

                    break;
                  }
                }
              } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                    _iterator2.return();
                  }
                } finally {
                  if (_didIteratorError2) {
                    throw _iteratorError2;
                  }
                }
              }
            } else if ('RG' === line.tag) {
              readGroups.push(line.data);
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        self.header = {
          chrNames: chrNames,
          chrToIndex: chrToIndex,
          chrAliasTable: chrAliasTable,
          readGroups: readGroups
        };
        return self.header;
      });
    }
  };

  CramReader.prototype.readAlignments = function (chr, bpStart, bpEnd) {
    var self = this;
    var browser = this.browser;
    return this.getHeader().then(function (header) {
      var queryChr = header.chrAliasTable.hasOwnProperty(chr) ? header.chrAliasTable[chr] : chr;
      var chrIdx = header.chrToIndex[queryChr];
      var alignmentContainer = new AlignmentContainer(chr, bpStart, bpEnd, self.samplingWindowSize, self.samplingDepth, self.pairsSupported, self.alleleFreqThreshold);

      if (chrIdx === undefined) {
        return Promise.resolve(alignmentContainer);
      } else {
        return self.indexedCramFile.getRecordsForRange(chrIdx, bpStart, bpEnd).then(function (records) {
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = records[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              var record = _step3.value;
              var refID = record.sequenceId;
              var pos = record.alignmentStart;
              var alignmentEnd = pos + record.lengthOnRef;

              if (refID < 0) {
                continue; // unmapped read
              } else if (refID > chrIdx || pos > bpEnd) {
                return; // off right edge, we're done
              } else if (refID < chrIdx) {
                continue; // Sequence to left of start, not sure this is possible
              }

              if (alignmentEnd < bpStart) {
                continue;
              } // Record out-of-range "to the left", skip to next one


              var alignment = decodeCramRecord(record, header.chrNames); //  if (filter.pass(alignment)) {

              alignmentContainer.push(alignment); //  }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }

          alignmentContainer.finish();
          return alignmentContainer;
        }).catch(function (error) {
          var message = error.message;

          if (message && message.indexOf("MD5") >= 0) {
            message = "Sequence mismatch. Is this the correct genome for the loaded CRAM?";
          }

          browser.presentAlert(message);
          throw error;
        });
      }

      function decodeCramRecord(record, chrNames) {
        var alignment = new BamAlignment();
        alignment.chr = chrNames[record.sequenceId];
        alignment.start = record.alignmentStart - 1;
        alignment.lengthOnRef = record.lengthOnRef;
        alignment.flags = record.flags;
        alignment.strand = !(record.flags & READ_STRAND_FLAG$2);
        alignment.fragmentLength = record.templateLength || record.templateSize;
        alignment.mq = record.mappingQuality;
        alignment.end = record.alignmentStart + record.lengthOnRef;
        alignment.readGroupId = record.readGroupId;

        if (record.mate && record.mate.sequenceId !== undefined) {
          var strand = record.mate.flags !== undefined ? !(record.mate.flags & CRAM_MATE_STRAND_FLAG) : !(record.flags & MATE_STRAND_FLAG$2);
          alignment.mate = {
            chr: chrNames[record.mate.sequenceId],
            position: record.mate.alignmentStart,
            strand: strand
          };
        }

        alignment.seq = record.getReadBases();
        alignment.qual = record.qualityScores;
        alignment.tagDict = record.tags;
        alignment.readName = record.readName; // TODO -- cigar encoded in tag?
        // BamUtils.bam_tag2cigar(ba, blockEnd, p, lseq, alignment, cigarArray);

        makeBlocks(record, alignment);

        if (alignment.mate && alignment.start > alignment.mate.position && alignment.fragmentLength > 0) {
          alignment.fragmentLength = -alignment.fragmentLength;
        }

        BamUtils.setPairOrientation(alignment);
        return alignment;
      }

      function makeBlocks(cramRecord, alignment) {
        var blocks = [];
        var insertions;
        var gapType;
        var basesUsed = 0;
        var cigarString = '';
        alignment.scStart = alignment.start;
        alignment.scLengthOnRef = alignment.lengthOnRef;

        if (cramRecord.readFeatures) {
          var _iteratorNormalCompletion4 = true;
          var _didIteratorError4 = false;
          var _iteratorError4 = undefined;

          try {
            for (var _iterator4 = cramRecord.readFeatures[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
              var feature = _step4.value;
              var code = feature.code;
              var data = feature.data;
              var readPos = feature.pos - 1;
              var refPos = feature.refPos - 1;

              if (alignment.readName === 'SRR062635.16695874') {}

              switch (code) {
                case 'S':
                case 'I':
                case 'i':
                case 'N':
                case 'D':
                  if (readPos > basesUsed) {
                    var _len = readPos - basesUsed;

                    blocks.push(new AlignmentBlock({
                      start: refPos - _len,
                      seqOffset: basesUsed,
                      len: _len,
                      type: 'M',
                      gapType: gapType
                    }));
                    basesUsed += _len;
                    cigarString += _len + 'M';
                  }

                  if ('S' === code) {
                    var scPos = refPos;
                    alignment.scLengthOnRef += data.length;

                    if (readPos === 0) {
                      alignment.scStart -= data.length;
                      scPos -= data.length;
                    }

                    var _len2 = data.length;
                    blocks.push(new AlignmentBlock({
                      start: scPos,
                      seqOffset: basesUsed,
                      len: _len2,
                      type: 'S'
                    }));
                    basesUsed += _len2;
                    gapType = 'S';
                    cigarString += _len2 + code;
                  } else if ('I' === code || 'i' === code) {
                    if (insertions === undefined) {
                      insertions = [];
                    }

                    var _len3 = 'i' === code ? 1 : data.length;

                    insertions.push(new AlignmentBlock({
                      start: refPos - 1,
                      len: _len3,
                      seqOffset: basesUsed,
                      type: 'I'
                    }));
                    basesUsed += _len3;
                    gapType = 'I';
                    cigarString += _len3 + code;
                  } else if ('D' === code || 'N' === code) {
                    gapType = code;
                    cigarString += data + code;
                  }

                  break;

                case 'H':
                case 'P':
                  cigarString += data + code;
                  break;

                default: //  Ignore

              }
            }
          } catch (err) {
            _didIteratorError4 = true;
            _iteratorError4 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                _iterator4.return();
              }
            } finally {
              if (_didIteratorError4) {
                throw _iteratorError4;
              }
            }
          }
        } // Last block


        var len = cramRecord.readLength - basesUsed;

        if (len > 0) {
          blocks.push(new AlignmentBlock({
            start: cramRecord.alignmentStart + cramRecord.lengthOnRef - len - 1,
            seqOffset: basesUsed,
            len: len,
            type: 'M',
            gapType: gapType
          }));
          cigarString += len + 'M';
        }

        alignment.blocks = blocks;
        alignment.insertions = insertions;
        alignment.cigar = cigarString;
      }
    });
  };

  var FileHandler =
  /*#__PURE__*/
  function () {
    function FileHandler(source) {
      var _this = this;

      _classCallCheck(this, FileHandler);

      this.position = 0;
      this.url = source;
      this.cache = new BufferCache({
        fetch: function fetch(start, length) {
          return _this._fetch(start, length);
        }
      });
    }

    _createClass(FileHandler, [{
      key: "_fetch",
      value: function () {
        var _fetch2 = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee(position, length) {
          var loadRange;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  loadRange = {
                    start: position,
                    size: length
                  };
                  this._stat = {
                    size: undefined
                  };
                  return _context.abrupt("return", igvxhr.loadArrayBuffer(this.url, buildOptions({}, {
                    range: loadRange
                  })).then(function (arrayBuffer) {
                    var nodeBuffer = Buffer.from(arrayBuffer);
                    return nodeBuffer;
                  }));

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function _fetch(_x, _x2) {
          return _fetch2.apply(this, arguments);
        }

        return _fetch;
      }()
    }, {
      key: "read",
      value: function () {
        var _read = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee2(buffer) {
          var offset,
              length,
              position,
              readPosition,
              _args2 = arguments;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  offset = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : 0;
                  length = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : Infinity;
                  position = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : 0;
                  readPosition = position;

                  if (readPosition === null) {
                    readPosition = this.position;
                    this.position += length;
                  }

                  return _context2.abrupt("return", this.cache.get(buffer, offset, length, position));

                case 6:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function read(_x3) {
          return _read.apply(this, arguments);
        }

        return read;
      }()
    }, {
      key: "readFile",
      value: function () {
        var _readFile = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee3() {
          var arrayBuffer;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return igvxhr.loadArrayBuffer(this.url, buildOptions({}));

                case 2:
                  arrayBuffer = _context3.sent;
                  return _context3.abrupt("return", Buffer.from(arrayBuffer));

                case 4:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function readFile() {
          return _readFile.apply(this, arguments);
        }

        return readFile;
      }()
    }, {
      key: "stat",
      value: function () {
        var _stat = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee4() {
          var buf;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (this._stat) {
                    _context4.next = 6;
                    break;
                  }

                  buf = Buffer.allocUnsafe(10);
                  _context4.next = 4;
                  return this.read(buf, 0, 10, 0);

                case 4:
                  if (this._stat) {
                    _context4.next = 6;
                    break;
                  }

                  throw new Error("unable to determine size of file at ".concat(this.url));

                case 6:
                  return _context4.abrupt("return", this._stat);

                case 7:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function stat() {
          return _stat.apply(this, arguments);
        }

        return stat;
      }()
    }]);

    return FileHandler;
  }();

  var BufferCache =
  /*#__PURE__*/
  function () {
    function BufferCache(_ref) {
      var fetch = _ref.fetch,
          _ref$size = _ref.size,
          size = _ref$size === void 0 ? 10000000 : _ref$size,
          _ref$chunkSize = _ref.chunkSize,
          chunkSize = _ref$chunkSize === void 0 ? 32768 : _ref$chunkSize;

      _classCallCheck(this, BufferCache);

      this.fetch = fetch;
      this.chunkSize = chunkSize;
      this.lruCache = new QuickLRU({
        maxSize: Math.floor(size / chunkSize)
      });
    }

    _createClass(BufferCache, [{
      key: "get",
      value: function () {
        var _get = _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee5(outputBuffer, offset, length, position) {
          var _this2 = this;

          var firstChunk, lastChunk, fetches, _loop, chunk, chunks, chunksOffset;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  if (!(outputBuffer.length < offset + length)) {
                    _context5.next = 2;
                    break;
                  }

                  throw new Error('output buffer not big enough for request');

                case 2:
                  // calculate the list of chunks involved in this fetch
                  firstChunk = Math.floor(position / this.chunkSize);
                  lastChunk = Math.floor((position + length) / this.chunkSize); // fetch them all as necessary

                  fetches = new Array(lastChunk - firstChunk + 1);

                  _loop = function _loop(chunk) {
                    fetches[chunk - firstChunk] = _this2._getChunk(chunk).then(function (data) {
                      return {
                        data: data,
                        chunkNumber: chunk
                      };
                    });
                  };

                  for (chunk = firstChunk; chunk <= lastChunk; chunk += 1) {
                    _loop(chunk);
                  } // stitch together the response buffer using them


                  _context5.next = 9;
                  return Promise.all(fetches);

                case 9:
                  chunks = _context5.sent;
                  chunksOffset = position - chunks[0].chunkNumber * this.chunkSize;
                  chunks.forEach(function (_ref2) {
                    var data = _ref2.data,
                        chunkNumber = _ref2.chunkNumber;
                    var chunkPositionStart = chunkNumber * _this2.chunkSize;
                    var copyStart = 0;
                    var copyEnd = _this2.chunkSize;
                    var copyOffset = offset + (chunkNumber - firstChunk) * _this2.chunkSize - chunksOffset;

                    if (chunkNumber === firstChunk) {
                      copyOffset = offset;
                      copyStart = chunksOffset;
                    }

                    if (chunkNumber === lastChunk) {
                      copyEnd = position + length - chunkPositionStart;
                    }

                    data.copy(outputBuffer, copyOffset, copyStart, copyEnd);
                  });

                case 12:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function get(_x4, _x5, _x6, _x7) {
          return _get.apply(this, arguments);
        }

        return get;
      }()
    }, {
      key: "_getChunk",
      value: function _getChunk(chunkNumber) {
        var cachedPromise = this.lruCache.get(chunkNumber);
        if (cachedPromise) return cachedPromise;
        var freshPromise = this.fetch(chunkNumber * this.chunkSize, this.chunkSize);
        this.lruCache.set(chunkNumber, freshPromise);
        return freshPromise;
      }
    }]);

    return BufferCache;
  }(); // From https://github.com/sindresorhus/quick-lru

  var QuickLRU =
  /*#__PURE__*/
  function () {
    function QuickLRU() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, QuickLRU);

      if (!(options.maxSize && options.maxSize > 0)) {
        throw new TypeError('`maxSize` must be a number greater than 0');
      }

      this.maxSize = options.maxSize;
      this.cache = new Map();
      this.oldCache = new Map();
      this._size = 0;
    }

    _createClass(QuickLRU, [{
      key: "_set",
      value: function _set(key, value) {
        this.cache.set(key, value);
        this._size++;

        if (this._size >= this.maxSize) {
          this._size = 0;
          this.oldCache = this.cache;
          this.cache = new Map();
        }
      }
    }, {
      key: "get",
      value: function get(key) {
        if (this.cache.has(key)) {
          return this.cache.get(key);
        }

        if (this.oldCache.has(key)) {
          var value = this.oldCache.get(key);

          this._set(key, value);

          return value;
        }
      }
    }, {
      key: "set",
      value: function set(key, value) {
        if (this.cache.has(key)) {
          this.cache.set(key, value);
        } else {
          this._set(key, value);
        }

        return this;
      }
    }, {
      key: "has",
      value: function has(key) {
        return this.cache.has(key) || this.oldCache.has(key);
      }
    }, {
      key: "peek",
      value: function peek(key) {
        if (this.cache.has(key)) {
          return this.cache.get(key);
        }

        if (this.oldCache.has(key)) {
          return this.oldCache.get(key);
        }
      }
    }, {
      key: "delete",
      value: function _delete(key) {
        var deleted = this.cache.delete(key);

        if (deleted) {
          this._size--;
        }

        return this.oldCache.delete(key) || deleted;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.cache.clear();
        this.oldCache.clear();
        this._size = 0;
      }
    }, {
      key: "keys",
      value:
      /*#__PURE__*/
      regeneratorRuntime.mark(function keys() {
        var _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, _step5$value, key;

        return regeneratorRuntime.wrap(function keys$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _iteratorNormalCompletion5 = true;
                _didIteratorError5 = false;
                _iteratorError5 = undefined;
                _context6.prev = 3;
                _iterator5 = this[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done) {
                  _context6.next = 12;
                  break;
                }

                _step5$value = _slicedToArray(_step5.value, 1), key = _step5$value[0];
                _context6.next = 9;
                return key;

              case 9:
                _iteratorNormalCompletion5 = true;
                _context6.next = 5;
                break;

              case 12:
                _context6.next = 18;
                break;

              case 14:
                _context6.prev = 14;
                _context6.t0 = _context6["catch"](3);
                _didIteratorError5 = true;
                _iteratorError5 = _context6.t0;

              case 18:
                _context6.prev = 18;
                _context6.prev = 19;

                if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                  _iterator5.return();
                }

              case 21:
                _context6.prev = 21;

                if (!_didIteratorError5) {
                  _context6.next = 24;
                  break;
                }

                throw _iteratorError5;

              case 24:
                return _context6.finish(21);

              case 25:
                return _context6.finish(18);

              case 26:
              case "end":
                return _context6.stop();
            }
          }
        }, keys, this, [[3, 14, 18, 26], [19,, 21, 25]]);
      })
    }, {
      key: "values",
      value:
      /*#__PURE__*/
      regeneratorRuntime.mark(function values() {
        var _iteratorNormalCompletion6, _didIteratorError6, _iteratorError6, _iterator6, _step6, _step6$value, value;

        return regeneratorRuntime.wrap(function values$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _iteratorNormalCompletion6 = true;
                _didIteratorError6 = false;
                _iteratorError6 = undefined;
                _context7.prev = 3;
                _iterator6 = this[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done) {
                  _context7.next = 12;
                  break;
                }

                _step6$value = _slicedToArray(_step6.value, 2), value = _step6$value[1];
                _context7.next = 9;
                return value;

              case 9:
                _iteratorNormalCompletion6 = true;
                _context7.next = 5;
                break;

              case 12:
                _context7.next = 18;
                break;

              case 14:
                _context7.prev = 14;
                _context7.t0 = _context7["catch"](3);
                _didIteratorError6 = true;
                _iteratorError6 = _context7.t0;

              case 18:
                _context7.prev = 18;
                _context7.prev = 19;

                if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
                  _iterator6.return();
                }

              case 21:
                _context7.prev = 21;

                if (!_didIteratorError6) {
                  _context7.next = 24;
                  break;
                }

                throw _iteratorError6;

              case 24:
                return _context7.finish(21);

              case 25:
                return _context7.finish(18);

              case 26:
              case "end":
                return _context7.stop();
            }
          }
        }, values, this, [[3, 14, 18, 26], [19,, 21, 25]]);
      })
    }, {
      key: Symbol.iterator,
      value:
      /*#__PURE__*/
      regeneratorRuntime.mark(function value() {
        var _iteratorNormalCompletion7, _didIteratorError7, _iteratorError7, _iterator7, _step7, item, _iteratorNormalCompletion8, _didIteratorError8, _iteratorError8, _iterator8, _step8, _item, _item2, key;

        return regeneratorRuntime.wrap(function value$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _iteratorNormalCompletion7 = true;
                _didIteratorError7 = false;
                _iteratorError7 = undefined;
                _context8.prev = 3;
                _iterator7 = this.cache[Symbol.iterator]();

              case 5:
                if (_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done) {
                  _context8.next = 12;
                  break;
                }

                item = _step7.value;
                _context8.next = 9;
                return item;

              case 9:
                _iteratorNormalCompletion7 = true;
                _context8.next = 5;
                break;

              case 12:
                _context8.next = 18;
                break;

              case 14:
                _context8.prev = 14;
                _context8.t0 = _context8["catch"](3);
                _didIteratorError7 = true;
                _iteratorError7 = _context8.t0;

              case 18:
                _context8.prev = 18;
                _context8.prev = 19;

                if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
                  _iterator7.return();
                }

              case 21:
                _context8.prev = 21;

                if (!_didIteratorError7) {
                  _context8.next = 24;
                  break;
                }

                throw _iteratorError7;

              case 24:
                return _context8.finish(21);

              case 25:
                return _context8.finish(18);

              case 26:
                _iteratorNormalCompletion8 = true;
                _didIteratorError8 = false;
                _iteratorError8 = undefined;
                _context8.prev = 29;
                _iterator8 = this.oldCache[Symbol.iterator]();

              case 31:
                if (_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done) {
                  _context8.next = 40;
                  break;
                }

                _item = _step8.value;
                _item2 = _slicedToArray(_item, 1), key = _item2[0];

                if (this.cache.has(key)) {
                  _context8.next = 37;
                  break;
                }

                _context8.next = 37;
                return _item;

              case 37:
                _iteratorNormalCompletion8 = true;
                _context8.next = 31;
                break;

              case 40:
                _context8.next = 46;
                break;

              case 42:
                _context8.prev = 42;
                _context8.t1 = _context8["catch"](29);
                _didIteratorError8 = true;
                _iteratorError8 = _context8.t1;

              case 46:
                _context8.prev = 46;
                _context8.prev = 47;

                if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
                  _iterator8.return();
                }

              case 49:
                _context8.prev = 49;

                if (!_didIteratorError8) {
                  _context8.next = 52;
                  break;
                }

                throw _iteratorError8;

              case 52:
                return _context8.finish(49);

              case 53:
                return _context8.finish(46);

              case 54:
              case "end":
                return _context8.stop();
            }
          }
        }, value, this, [[3, 14, 18, 26], [19,, 21, 25], [29, 42, 46, 54], [47,, 49, 53]]);
      })
    }, {
      key: "size",
      get: function get() {
        var oldCacheSize = 0;
        var _iteratorNormalCompletion9 = true;
        var _didIteratorError9 = false;
        var _iteratorError9 = undefined;

        try {
          for (var _iterator9 = this.oldCache.keys()[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
            var key = _step9.value;

            if (!this.cache.has(key)) {
              oldCacheSize++;
            }
          }
        } catch (err) {
          _didIteratorError9 = true;
          _iteratorError9 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
              _iterator9.return();
            }
          } finally {
            if (_didIteratorError9) {
              throw _iteratorError9;
            }
          }
        }

        return this._size + oldCacheSize;
      }
    }]);

    return QuickLRU;
  }();

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var CigarOperationTable = {
    "ALIGNMENT_MATCH": "M",
    "INSERT": "I",
    "DELETE": "D",
    "SKIP": "N",
    "CLIP_SOFT": "S",
    "CLIP_HARD": "H",
    "PAD": "P",
    "SEQUENCE_MATCH": "=",
    "SEQUENCE_MISMATCH": "X"
  };

  var Ga4ghAlignmentReader = function Ga4ghAlignmentReader(config, genome) {
    this.config = config;
    this.genome = genome;
    this.url = config.url;
    this.filter = new BamFilter(config.filter);
    this.readGroupSetIds = config.readGroupSetIds;
    this.authKey = config.authKey; // Might be undefined or nill

    this.samplingWindowSize = config.samplingWindowSize === undefined ? 100 : config.samplingWindowSize;
    this.samplingDepth = config.samplingDepth === undefined ? 1000 : config.samplingDepth;

    if (config.viewAsPairs) {
      this.pairsSupported = true;
    } else {
      this.pairsSupported = config.pairsSupported === undefined ? true : config.pairsSupported;
    }
  };

  Ga4ghAlignmentReader.prototype.readAlignments = function (chr, bpStart, bpEnd) {
    var genome = this.genome;
    var self = this;
    return getChrAliasTable().then(function (chrAliasTable) {
      var queryChr = chrAliasTable.hasOwnProperty(chr) ? chrAliasTable[chr] : chr,
          readURL = self.url + "/reads/search";
      return ga4ghSearch({
        url: readURL,
        body: {
          "readGroupSetIds": [self.readGroupSetIds],
          "referenceName": queryChr,
          "start": bpStart,
          "end": bpEnd,
          "pageSize": "10000"
        },
        decode: decodeGa4ghReads,
        results: new AlignmentContainer(chr, bpStart, bpEnd, self.samplingWindowSize, self.samplingDepth, self.pairsSupported, self.alleleFreqThreshold)
      });
    });

    function getChrAliasTable() {
      if (self.chrAliasTable) {
        return Promise.resolve(self.chrAliasTable);
      } else {
        return self.readMetadata().then(function (json) {
          self.chrAliasTable = {};

          if (genome && json.readGroups && json.readGroups.length > 0) {
            var referenceSetId = json.readGroups[0].referenceSetId;

            if (referenceSetId) {
              // Query for reference names to build an alias table (map of genome ref names -> dataset ref names)
              var readURL = self.url + "/references/search";
              return ga4ghSearch({
                url: readURL,
                body: {
                  "referenceSetId": referenceSetId
                },
                decode: function decode(j) {
                  return j.references;
                }
              }).then(function (references) {
                references.forEach(function (ref) {
                  var refName = ref.name,
                      alias = genome.getChromosomeName(refName);
                  self.chrAliasTable[alias] = refName;
                });
                return self.chrAliasTable;
              });
            } else {
              // Try hardcoded constants -- workaround for non-compliant data at Google
              populateChrAliasTable(self.chrAliasTable, self.config.datasetId);
              return self.chrAliasTable;
            }
          } else {
            // No browser object, can't build map.  This can occur when run from unit tests
            return self.chrAliasTable;
          }
        });
      }
    }
    /**
     * Decode an array of ga4gh read records
     *
      */


    function decodeGa4ghReads(j) {
      var i,
          jsonRecords = j.alignments,
          len = jsonRecords.length,
          alignment,
          jsonAlignment,
          cigarDecoded,
          alignments = [],
          mate,
          blocks;

      for (i = 0; i < len; i++) {
        var record = jsonRecords[i];
        alignment = new BamAlignment();
        alignment.readName = record.fragmentName;
        alignment.properPlacement = record.properPlacement;
        alignment.duplicateFragment = record.duplicateFragment;
        alignment.numberReads = record.numberReads;
        alignment.fragmentLength = record.fragmentLength;
        alignment.readNumber = record.readNumber;
        alignment.failedVendorQualityChecks = record.failedVendorQualityChecks;
        alignment.secondaryAlignment = record.secondaryAlignment;
        alignment.supplementaryAlignment = record.supplementaryAlignment;
        alignment.seq = record.alignedSequence;
        alignment.qual = record.alignedQuality;
        alignment.matePos = record.nextMatePosition;
        alignment.tagDict = record.info;
        alignment.flags = encodeFlags();
        jsonAlignment = record.alignment;

        if (jsonAlignment) {
          alignment.mapped = true;
          alignment.chr = record.alignment.position.referenceName;
          if (genome) alignment.chr = genome.getChromosomeName(alignment.chr);
          alignment.start = parseInt(record.alignment.position.position);
          alignment.strand = !record.alignment.position.reverseStrand;
          alignment.mq = record.alignment.mappingQuality;
          alignment.cigar = encodeCigar(record.alignment.cigar);
          cigarDecoded = translateCigar(record.alignment.cigar);
          alignment.lengthOnRef = cigarDecoded.lengthOnRef;
          blocks = makeBlocks(alignment, cigarDecoded.array);
          alignment.blocks = blocks.blocks;
          alignment.insertions = blocks.insertions;
        } else {
          alignment.mapped = false;
        }

        mate = record.nextMatePosition;

        if (mate) {
          alignment.mate = {
            chr: mate.referenceFrame,
            position: parseInt(mate.position),
            strand: !mate.reverseStrand
          };
        }

        if (self.filter.pass(alignment)) {
          alignments.push(alignment);
        }
      }

      return alignments; // Encode a cigar string -- used for popup text

      function encodeCigar(cigarArray) {
        var cigarString = "";
        cigarArray.forEach(function (cigarUnit) {
          var op = CigarOperationTable[cigarUnit.operation],
              len = cigarUnit.operationLength;
          cigarString = cigarString + (len + op);
        });
        return cigarString;
      } // TODO -- implement me


      function encodeFlags(json) {
        return 0;
      }

      function translateCigar(cigar) {
        var cigarUnit,
            opLen,
            opLtr,
            lengthOnRef = 0,
            cigarArray = [],
            i;

        for (i = 0; i < cigar.length; i++) {
          cigarUnit = cigar[i];
          opLtr = CigarOperationTable[cigarUnit.operation];
          opLen = parseInt(cigarUnit.operationLength); // Google represents long as a String

          if (opLtr === 'M' || opLtr === 'EQ' || opLtr === 'X' || opLtr === 'D' || opLtr === 'N' || opLtr === '=') lengthOnRef += opLen;
          cigarArray.push({
            len: opLen,
            ltr: opLtr
          });
        }

        return {
          lengthOnRef: lengthOnRef,
          array: cigarArray
        };
      }
      /**
       * Split the alignment record into blocks as specified in the cigarArray.  Each aligned block contains
       * its portion of the read sequence and base quality strings.  A read sequence or base quality string
       * of "*" indicates the value is not recorded.  In all other cases the length of the block sequence (block.seq)
       * and quality string (block.qual) must == the block length.
       *
       * NOTE: Insertions are not yet treated // TODO
       *
       * @param record
       * @param cigarArray
       * @returns array of blocks
       */


      function makeBlocks(record, cigarArray) {
        var blocks = [],
            insertions,
            seqOffset = 0,
            pos = record.start,
            len = cigarArray.length,
            gapType;

        for (var i = 0; i < len; i++) {
          var c = cigarArray[i];

          switch (c.ltr) {
            case 'H':
              break;
            // ignore hard clips

            case 'P':
              break;
            // ignore pads

            case 'S':
              seqOffset += c.len;
              gapType = 'S';
              break;
            // soft clip read bases

            case 'N':
              pos += c.len;
              gapType = 'N';
              break;
            // reference skip

            case 'D':
              pos += c.len;
              gapType = 'D';
              break;

            case 'I':
              if (insertions === undefined) insertions = [];
              insertions.push(new AlignmentBlock({
                start: pos,
                len: c.len,
                seqOffset: seqOffset
              }));
              seqOffset += c.len;
              break;

            case 'M':
            case 'EQ':
            case '=':
            case 'X':
              blocks.push(new AlignmentBlock({
                start: pos,
                len: c.len,
                seqOffset: seqOffset,
                gapType: gapType
              }));
              seqOffset += c.len;
              pos += c.len;
              break;

            default:

          }
        }

        return {
          blocks: blocks,
          insertions: insertions
        };
      }
    }
  };

  Ga4ghAlignmentReader.prototype.readMetadata = function () {
    return ga4ghGet({
      url: this.url,
      entity: "readgroupsets",
      entityId: this.readGroupSetIds
    });
  };
  /**
   * Hardcoded hack to work around some non-compliant google datasets
   *
   * @param chrAliasTable
   * @param datasetId
   */


  function populateChrAliasTable(chrAliasTable, datasetId) {
    var i;

    if ("461916304629" === datasetId || "337315832689" === datasetId) {
      for (i = 1; i < 23; i++) {
        chrAliasTable["chr" + i] = i;
      }

      chrAliasTable["chrX"] = "X";
      chrAliasTable["chrY"] = "Y";
      chrAliasTable["chrM"] = "MT";
    }
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var BamAlignmentRow = function BamAlignmentRow() {
    this.alignments = [];
    this.score = undefined;
  };

  BamAlignmentRow.prototype.findAlignment = function (genomicLocation) {
    var centerAlignment, a, i; // find single alignment that overlaps sort location

    for (i = 0; i < this.alignments.length; i++) {
      a = this.alignments[i];

      if (alignmentContains(a, genomicLocation)) {
        if (a.paired) {
          if (a.firstAlignment && alignmentContains(a.firstAlignment, genomicLocation)) {
            centerAlignment = a.firstAlignment;
          } else if (a.secondAlignment && alignmentContains(a.secondAlignment, genomicLocation)) {
            centerAlignment = a.secondAlignment;
          }
        } else {
          centerAlignment = a;
        }

        break;
      }
    }

    return centerAlignment;

    function alignmentContains(a, genomicLocation) {
      return genomicLocation >= a.start && genomicLocation < a.start + a.lengthOnRef;
    }
  };

  BamAlignmentRow.prototype.updateScore = function (options, alignmentContainer) {
    this.score = this.calculateScore(options, alignmentContainer);
  };

  BamAlignmentRow.prototype.calculateScore = function (options, alignmentContainer) {
    var genomicLocation = Math.floor(options.position);
    var sortOption = options.sortOption;
    var sortDirection = options.direction;
    var alignment = this.findAlignment(genomicLocation);

    if (undefined === alignment) {
      return sortDirection ? Number.MAX_VALUE : -Number.MAX_VALUE;
    }

    switch (sortOption) {
      case "NUCLEOTIDE":
        {
          var readBase = alignment.readBaseAt(genomicLocation);
          var quality = alignment.readBaseQualityAt(genomicLocation);

          if (!readBase) {
            return sortDirection ? Number.MAX_VALUE : -Number.MAX_VALUE;
          } else {
            return calculateBaseScore(readBase, quality, alignmentContainer, genomicLocation);
          }
        }

      case "STRAND":
        return alignment.strand ? 1 : -1;

      case "START":
        return alignment.start;

      case "TAG":
        {
          var tagKey = options.tag;
          var tagValue = alignment.tags()[tagKey];

          if (tagValue !== undefined) {
            return hashCode(tagValue);
          } else {
            return Number.MAX_VALUE;
          }
        }

      default:
        return Number.MAX_VALUE;
    }

    function calculateBaseScore(base, quality, alignmentContainer, genomicLocation) {
      var idx, reference, coverage, count;
      idx = Math.floor(genomicLocation) - alignmentContainer.start;

      if (idx < alignmentContainer.sequence.length) {
        reference = alignmentContainer.sequence.charAt(idx);
      }

      if (!reference) {
        return undefined;
      }

      if (undefined === base) {
        return Number.MAX_VALUE;
      }

      if ('N' === base) {
        return 2;
      } else if (reference === base || '=' === base) {
        return 4 - quality / 1000;
      } else if ("X" === base || reference !== base) {
        idx = Math.floor(genomicLocation) - alignmentContainer.coverageMap.bpStart;

        if (idx > 0 && idx < alignmentContainer.coverageMap.coverage.length) {
          coverage = alignmentContainer.coverageMap.coverage[idx];
          count = coverage["pos" + base] + coverage["neg" + base];
          return -(count + quality / 1000);
        } else {
          return -(1 + quality / 1000);
        }
      }

      return 0;
    }
  };

  var BamSource = function BamSource(config, browser) {
    var genome = browser.genome;
    this.config = config;
    this.genome = genome;
    this.alignmentContainer = undefined;

    if (isString(config.url) && config.url.startsWith("data:")) {
      if ("cram" === config.format) {
        throw "CRAM data uris are not supported";
      }

      this.config.indexed = false;
    }

    if ("ga4gh" === config.sourceType) {
      this.bamReader = new Ga4ghAlignmentReader(config, genome);
    } else if ("pysam" === config.sourceType) {
      this.bamReader = new BamWebserviceReader(config, genome);
    } else if ("htsget" === config.sourceType) {
      this.bamReader = new HtsgetReader(config, genome);
    } else if ("shardedBam" === config.sourceType) {
      this.bamReader = new ShardedBamReader(config, genome);
    } else if ("cram" === config.format) {
      this.bamReader = new CramReader(config, genome, browser);
    } else {
      if (this.config.indexed === false) {
        this.bamReader = new BamReaderNonIndexed(config, genome);
      } else {
        this.bamReader = new BamReader(config, genome);
      }
    }

    this.viewAsPairs = config.viewAsPairs;
    this.showSoftClips = config.showSoftClips;
  };

  BamSource.prototype.setViewAsPairs = function (bool) {

    if (this.viewAsPairs !== bool) {
      this.viewAsPairs = bool; // TODO -- repair alignments

      if (this.alignmentContainer) {
        var alignmentContainer = this.alignmentContainer,
            alignments;

        if (bool) {
          alignments = pairAlignments(alignmentContainer.packedAlignmentRows);
        } else {
          alignments = unpairAlignments(alignmentContainer.packedAlignmentRows);
        }

        alignmentContainer.packedAlignmentRows = packAlignmentRows(alignments, alignmentContainer.start, alignmentContainer.end);
      }
    }
  };

  BamSource.prototype.setShowSoftClips = function (bool) {
    if (this.showSoftClips !== bool) {
      this.showSoftClips = bool;

      if (this.alignmentContainer) {
        var alignments = allAlignments(this.alignmentContainer.packedAlignmentRows);
        var alignmentContainer = this.alignmentContainer;
        alignmentContainer.packedAlignmentRows = packAlignmentRows(alignments, alignmentContainer.start, alignmentContainer.end, bool);
      }
    }

    function allAlignments(rows) {
      var result = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var row = _step.value;
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = row.alignments[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var alignment = _step2.value;
              result.push(alignment);
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return result;
    }
  };

  BamSource.prototype.getAlignments =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd) {
      var genome, showSoftClips, alignmentContainer, alignments, hasAlignments, sequence;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              genome = this.genome;
              showSoftClips = this.showSoftClips;

              if (!(this.alignmentContainer && this.alignmentContainer.contains(chr, bpStart, bpEnd))) {
                _context.next = 7;
                break;
              }

              return _context.abrupt("return", this.alignmentContainer);

            case 7:
              _context.next = 9;
              return this.bamReader.readAlignments(chr, bpStart, bpEnd);

            case 9:
              alignmentContainer = _context.sent;
              alignments = alignmentContainer.alignments;

              if (!this.viewAsPairs) {
                alignments = unpairAlignments([{
                  alignments: alignments
                }]);
              }

              hasAlignments = alignments.length > 0;
              alignmentContainer.packedAlignmentRows = packAlignmentRows(alignments, alignmentContainer.start, alignmentContainer.end, showSoftClips);
              alignmentContainer.alignments = undefined; // Don't need to hold onto these anymore

              this.alignmentContainer = alignmentContainer;

              if (hasAlignments) {
                _context.next = 20;
                break;
              }

              return _context.abrupt("return", alignmentContainer);

            case 20:
              _context.next = 22;
              return genome.sequence.getSequence(chr, alignmentContainer.start, alignmentContainer.end);

            case 22:
              sequence = _context.sent;

              if (!sequence) {
                _context.next = 29;
                break;
              }

              alignmentContainer.coverageMap.refSeq = sequence; // TODO -- fix this

              alignmentContainer.sequence = sequence; // TODO -- fix this

              return _context.abrupt("return", alignmentContainer);

            case 29:
              console.error("No sequence for: " + chr + ":" + alignmentContainer.start + "-" + alignmentContainer.end);

            case 30:
              _context.next = 36;
              break;

            case 32:
              _context.prev = 32;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0);
              throw _context.t0;

            case 36:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[0, 32]]);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  function pairAlignments(rows) {
    var pairCache = {};
    var result = [];
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = rows[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var row = _step3.value;
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = row.alignments[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var alignment = _step4.value;

            if (canBePaired$1(alignment)) {
              var pairedAlignment = pairCache[alignment.readName];

              if (pairedAlignment) {
                pairedAlignment.setSecondAlignment(alignment);
                pairCache[alignment.readName] = undefined; // Don't need to track this anymore.
              } else {
                pairedAlignment = new PairedAlignment(alignment);
                pairCache[alignment.readName] = pairedAlignment;
                result.push(pairedAlignment);
              }
            } else {
              result.push(alignment);
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return result;
  }

  function unpairAlignments(rows) {
    var result = [];
    var _iteratorNormalCompletion5 = true;
    var _didIteratorError5 = false;
    var _iteratorError5 = undefined;

    try {
      for (var _iterator5 = rows[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
        var row = _step5.value;
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = row.alignments[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var alignment = _step6.value;

            if (alignment instanceof PairedAlignment) {
              if (alignment.firstAlignment) result.push(alignment.firstAlignment); // shouldn't need the null test

              if (alignment.secondAlignment) result.push(alignment.secondAlignment);
            } else {
              result.push(alignment);
            }
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
              _iterator6.return();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError5 = true;
      _iteratorError5 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
          _iterator5.return();
        }
      } finally {
        if (_didIteratorError5) {
          throw _iteratorError5;
        }
      }
    }

    return result;
  }

  function canBePaired$1(alignment) {
    return alignment.isPaired() && alignment.isMateMapped() && alignment.chr === alignment.mate.chr && (alignment.isFirstOfPair() || alignment.isSecondOfPair()) && !(alignment.isSecondary() || alignment.isSupplementary());
  }

  function packAlignmentRows(alignments, start, end, showSoftClips) {
    if (!alignments) {
      return undefined;
    } else if (alignments.length === 0) {
      return [];
    } else {
      alignments.sort(function (a, b) {
        return showSoftClips ? a.scStart - b.scStart : a.start - b.start;
      }); // bucketStart = Math.max(start, alignments[0].start);

      var firstAlignment = alignments[0];
      var bucketStart = Math.max(start, showSoftClips ? firstAlignment.scStart : firstAlignment.start);
      var nextStart = bucketStart;
      var bucketList = [];
      var _iteratorNormalCompletion7 = true;
      var _didIteratorError7 = false;
      var _iteratorError7 = undefined;

      try {
        for (var _iterator7 = alignments[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
          var _alignment = _step7.value;
          //var buckListIndex = Math.max(0, alignment.start - bucketStart);
          var s = showSoftClips ? _alignment.scStart : _alignment.start;
          var buckListIndex = Math.max(0, s - bucketStart);

          if (bucketList[buckListIndex] === undefined) {
            bucketList[buckListIndex] = [];
          }

          bucketList[buckListIndex].push(_alignment);
        }
      } catch (err) {
        _didIteratorError7 = true;
        _iteratorError7 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
            _iterator7.return();
          }
        } finally {
          if (_didIteratorError7) {
            throw _iteratorError7;
          }
        }
      }

      var allocatedCount = 0;
      var lastAllocatedCount = 0;
      var packedAlignmentRows = [];
      var alignmentSpace = 8;

      try {
        while (allocatedCount < alignments.length) {
          var alignmentRow = new BamAlignmentRow();

          while (nextStart <= end) {
            var bucket = undefined;
            var index = void 0;

            while (!bucket && nextStart <= end) {
              index = nextStart - bucketStart;

              if (bucketList[index] === undefined) {
                ++nextStart; // No alignments at this index
              } else {
                bucket = bucketList[index];
              }
            } // while (bucket)


            if (!bucket) {
              break;
            }

            var alignment = bucket.pop();

            if (0 === bucket.length) {
              bucketList[index] = undefined;
            }

            alignmentRow.alignments.push(alignment);
            nextStart = showSoftClips ? alignment.scStart + alignment.scLengthOnRef + alignmentSpace : alignment.start + alignment.lengthOnRef + alignmentSpace;
            ++allocatedCount;
          } // while (nextStart)


          if (alignmentRow.alignments.length > 0) {
            packedAlignmentRows.push(alignmentRow);
          }

          nextStart = bucketStart;
          if (allocatedCount === lastAllocatedCount) break; // Protect from infinite loops

          lastAllocatedCount = allocatedCount;
        } // while (allocatedCount)

      } catch (e) {
        console.error(e);
        throw e;
      }

      return packedAlignmentRows;
    }
  }

  var type = "alignment";
  var alignmentStartGap = 5;
  var downsampleRowHeight = 5;
  var DEFAULT_COVERAGE_TRACK_HEIGHT = 50;
  var DEFAULT_TRACK_HEIGHT = 300;
  var DEFAULT_ALIGNMENT_COLOR = "rgb(185, 185, 185)";
  var DEFAULT_COVERAGE_COLOR = "rgb(150, 150, 150)";
  var DEFAULT_CONNECTOR_COLOR = "rgb(200, 200, 200)";
  var BAMTrack = extend(TrackBase, function (config, browser) {
    this.type = type; // Override default track height for bams

    if (config.height === undefined) config.height = DEFAULT_TRACK_HEIGHT;
    TrackBase.call(this, config, browser);

    if (config.coverageTrackHeight === undefined) {
      config.coverageTrackHeight = DEFAULT_COVERAGE_TRACK_HEIGHT;
    }

    this.featureSource = new BamSource(config, browser);
    this.coverageTrack = new CoverageTrack(config, this);
    this.alignmentTrack = new AlignmentTrack(config, this);
    this.visibilityWindow = config.visibilityWindow || 30000;
    this.viewAsPairs = config.viewAsPairs;
    this.pairsSupported = undefined === config.pairsSupported;
    this.showSoftClips = config.showSoftClips;
    this.showAllBases = config.showAllBases;
    this.color = config.color || DEFAULT_ALIGNMENT_COLOR;
    this.coverageColor = config.coverageColor || DEFAULT_COVERAGE_COLOR;
    this.minFragmentLength = config.minFragmentLength; // Optional, might be undefined

    this.maxFragmentLength = config.maxFragmentLength; // Transient object, maintains the last sort option per viewport.

    this.sortObjects = {};

    if (config.sort) {
      if (Array.isArray(config.sort)) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = config.sort[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var sort = _step.value;
            assignSort(this.sortObjects, sort);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      } else {
        assignSort(this.sortObjects, config.sort);
      }

      config.sort = undefined;
    } // Assign sort objects to a genomic state


    function assignSort(currentSorts, sort) {
      var range = parseLocusString(sort.locus); // Loop through current genomic states, assign sort to first matching state

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = browser.genomicStateList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var gs = _step2.value;

          if (gs.chromosome.name === range.chr && range.start >= gs.start && range.start <= gs.end) {
            currentSorts[gs.id] = {
              chr: range.chr,
              position: range.start,
              sortOption: sort.option || "NUCLEOTIDE",
              direction: sort.direction || "ASC"
            };
            break;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  });

  BAMTrack.prototype.getFeatures =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(chr, bpStart, bpEnd, bpPerPixel, viewport) {
      var self, alignmentContainer, sort;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              self = this;
              _context.next = 3;
              return this.featureSource.getAlignments(chr, bpStart, bpEnd);

            case 3:
              alignmentContainer = _context.sent;

              if (alignmentContainer.alignments && alignmentContainer.alignments.length > 99) {
                if (undefined === self.minFragmentLength) {
                  self.minFragmentLength = alignmentContainer.pairedEndStats.lowerFragmentLength;
                }

                if (undefined === self.maxFragmentLength) {
                  self.maxFragmentLength = alignmentContainer.pairedEndStats.upperFragmentLength;
                }
              }

              sort = self.sortObjects[viewport.genomicState.id];

              if (sort) {
                if (sort.chr === chr && sort.position >= bpStart && sort.position <= bpEnd) {
                  self.alignmentTrack.sortAlignmentRows(sort, alignmentContainer);
                } else {
                  delete self.sortObjects[viewport.genomicState.id];
                }
              }

              return _context.abrupt("return", alignmentContainer);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function (_x, _x2, _x3, _x4, _x5) {
      return _ref.apply(this, arguments);
    };
  }();

  BAMTrack.filters = {
    noop: function noop() {
      return function (alignment) {
        return false;
      };
    },
    strand: function strand(_strand) {
      return function (alignment) {
        return alignment.strand === _strand;
      };
    },
    mappingQuality: function mappingQuality(lower, upper) {
      return function (alignment) {
        if (lower && alignment.mq < lower) {
          return true;
        }

        if (upper && alignment.mq > upper) {
          return true;
        }

        return false;
      };
    }
  };
  /**
   * Optional method to compute pixel height to accomodate the list of features.  The implementation below
   * has side effects (modifiying the samples hash).  This is unfortunate, but harmless.
   *
   * @param alignmentContainer
   * @returns {number}
   */

  BAMTrack.prototype.computePixelHeight = function (alignmentContainer) {
    return this.coverageTrack.computePixelHeight(alignmentContainer) + this.alignmentTrack.computePixelHeight(alignmentContainer) + 15;
  };

  BAMTrack.prototype.draw = function (options) {
    IGVGraphics.fillRect(options.context, 0, options.pixelTop, options.pixelWidth, options.pixelHeight, {
      'fillStyle': "rgb(255, 255, 255)"
    });

    if (this.coverageTrack.height > 0) {
      this.coverageTrack.draw(options);
    }

    this.alignmentTrack.draw(options);
  };

  BAMTrack.prototype.paintAxis = function (ctx, pixelWidth, pixelHeight) {
    if (this.browser.isMultiLocusMode()) {
      ctx.clearRect(0, 0, pixelWidth, pixelHeight);
    } else {
      this.coverageTrack.paintAxis(ctx, pixelWidth, this.coverageTrack.height);
    }
  };

  BAMTrack.prototype.contextMenuItemList = function (config) {
    return this.alignmentTrack.contextMenuItemList(config);
  };

  BAMTrack.prototype.popupData = function (config) {
    if (config.y >= this.coverageTrack.top && config.y < this.coverageTrack.height) {
      return this.coverageTrack.popupData(config);
    } else {
      return this.alignmentTrack.popupData(config);
    }
  };

  BAMTrack.prototype.menuItemList = function () {
    var self = this;
    var menuItems = [];
    var $e = $('<div class="igv-track-menu-category igv-track-menu-border-top">');
    $e.text('Color by');
    menuItems.push({
      name: undefined,
      object: $e,
      click: undefined,
      init: undefined
    });
    var colorByMenuItems = [{
      key: 'strand',
      label: 'read strand'
    }];

    if (self.alignmentTrack.hasPairs) {
      colorByMenuItems.push({
        key: 'firstOfPairStrand',
        label: 'first-of-pair strand'
      });
      colorByMenuItems.push({
        key: 'pairOrientation',
        label: 'pair orientation'
      });
      colorByMenuItems.push({
        key: 'fragmentLength',
        label: 'fragment length'
      });
    }

    var tagLabel = 'tag' + (self.alignmentTrack.colorByTag ? ' (' + self.alignmentTrack.colorByTag + ')' : '');
    colorByMenuItems.push({
      key: 'tag',
      label: tagLabel
    });
    colorByMenuItems.forEach(function (item) {
      var selected = self.alignmentTrack.colorBy === item.key;
      menuItems.push(colorByCB(item, selected));
    });
    menuItems.push({
      object: $('<div class="igv-track-menu-border-top">')
    });
    menuItems.push({
      object: createCheckbox("Show all bases", self.showAllBases),
      click: function click() {
        var $fa = $(this).find('i');
        self.showAllBases = !self.showAllBases;

        if (true === self.showAllBases) {
          $fa.removeClass('igv-fa-check-hidden');
          $fa.addClass('igv-fa-check-visible');
        } else {
          $fa.removeClass('igv-fa-check-visible');
          $fa.addClass('igv-fa-check-hidden');
        }

        self.config.showAllBases = self.showAllBases;
        self.trackView.updateViews(true);
      }
    });
    menuItems.push({
      object: $('<div class="igv-track-menu-border-top">')
    });

    if (self.pairsSupported && self.alignmentTrack.hasPairs) {
      menuItems.push({
        object: createCheckbox("View as pairs", self.viewAsPairs),
        click: function click() {
          var $fa = $(this).find('i');
          self.viewAsPairs = !self.viewAsPairs;

          if (true === self.viewAsPairs) {
            $fa.removeClass('igv-fa-check-hidden');
            $fa.addClass('igv-fa-check-visible');
          } else {
            $fa.removeClass('igv-fa-check-visible');
            $fa.addClass('igv-fa-check-hidden');
          }

          self.config.viewAsPairs = self.viewAsPairs;
          self.featureSource.setViewAsPairs(self.viewAsPairs);
          self.trackView.updateViews(true);
        }
      });
    }

    menuItems.push({
      object: createCheckbox("Show soft clips", self.showSoftClips),
      click: function click() {
        var $fa = $(this).find('i');
        self.showSoftClips = !self.showSoftClips;

        if (true === self.showSoftClips) {
          $fa.removeClass('igv-fa-check-hidden');
          $fa.addClass('igv-fa-check-visible');
        } else {
          $fa.removeClass('igv-fa-check-visible');
          $fa.addClass('igv-fa-check-hidden');
        }

        self.config.showSoftClips = self.showSoftClips;
        self.featureSource.setShowSoftClips(self.showSoftClips);
        self.trackView.updateViews(true);
      }
    });
    return menuItems;

    function colorByCB(menuItem, showCheck) {
      var $e = createCheckbox(menuItem.label, showCheck);

      var clickHandler = function clickHandler() {
        if (menuItem.key === self.alignmentTrack.colorBy) {
          self.alignmentTrack.colorBy = 'none';
          self.config.colorBy = 'none';
          self.trackView.repaintViews();
        } else if ('tag' === menuItem.key) {
          var clickFunction = function clickFunction() {
            self.alignmentTrack.colorBy = 'tag';
            self.config.colorBy = 'tag';
            var tag = self.browser.inputDialog.$input.val().trim();

            if (tag !== self.alignmentTrack.colorByTag) {
              self.alignmentTrack.colorByTag = tag;
              self.config.colorByTag = tag;
              self.alignmentTrack.tagColors = new PaletteColorTable("Set1");
              $('#color-by-tag').text(self.alignmentTrack.colorByTag);
            }

            self.trackView.repaintViews();
          };

          var config = {
            label: 'Tag Name',
            input: self.alignmentTrack.colorByTag ? self.alignmentTrack.colorByTag : '',
            click: clickFunction
          };
          self.browser.inputDialog.configure(config);
          self.browser.inputDialog.present($(self.trackView.trackDiv));
        } else {
          self.alignmentTrack.colorBy = menuItem.key;
          self.config.colorBy = menuItem.key;
          self.trackView.repaintViews();
        }
      };

      return {
        name: undefined,
        object: $e,
        click: clickHandler,
        init: undefined
      };
    }
  };

  function shadedBaseColor(qual, nucleotide) {
    var minQ = 5; //prefs.getAsInt(PreferenceManager.SAM_BASE_QUALITY_MIN),

    var maxQ = 20; //prefs.getAsInt(PreferenceManager.SAM_BASE_QUALITY_MAX);

    var alpha;

    if (qual < minQ) {
      alpha = 0.1;
    } else {
      alpha = Math.max(0.1, Math.min(1.0, 0.1 + 0.9 * (qual - minQ) / (maxQ - minQ)));
    } // Round alpha to nearest 0.1


    alpha = Math.round(alpha * 10) / 10.0;
    var baseColor;

    if (alpha >= 1) {
      baseColor = nucleotideColors[nucleotide];
    } else {
      var foregroundColor = nucleotideColorComponents[nucleotide];

      if (!foregroundColor) {
        return undefined;
      }

      baseColor = "rgba(" + foregroundColor[0] + "," + foregroundColor[1] + "," + foregroundColor[2] + "," + alpha + ")";
    }

    return baseColor;
  }
  /**
   * Called when the track is removed.  Do any needed cleanup here
   */


  BAMTrack.prototype.dispose = function () {
    this.trackView = undefined;
  };
  /**
   * Return the current state of the track.  Used to create sessions and bookmarks.
   *
   * @returns {*|{}}
   */


  BAMTrack.prototype.getState = function () {
    var config = Object.assign({}, this.config);
    config.sort = undefined;
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = this.browser.genomicStateList[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var gs = _step3.value;
        var s = this.sortObjects[gs.id];

        if (s) {
          config.sort = config.sort || [];
          config.sort.push({
            locus: s.chr + ":" + (s.position + 1),
            option: s.sortOption,
            direction: s.direction
          });
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return config;
  };

  var CoverageTrack = function CoverageTrack(config, parent) {
    this.parent = parent;
    this.featureSource = parent.featureSource;
    this.top = 0;
    this.height = config.coverageTrackHeight;
    this.dataRange = {
      min: 0
    }; // Leav max undefined

    this.paintAxis = paintAxis;
  };

  CoverageTrack.prototype.computePixelHeight = function (alignmentContainer) {
    return this.height;
  };

  CoverageTrack.prototype.draw = function (options) {
    var ctx = options.context;

    if (this.top) {
      ctx.translate(0, top);
    }

    var yTop = options.top || 0;
    var yBottom = yTop + options.pixelHeight;
    var alignmentContainer = options.features;
    var coverageMap = alignmentContainer.coverageMap;
    this.dataRange.max = coverageMap.maximum;
    var sequence;

    if (coverageMap.refSeq) {
      sequence = coverageMap.refSeq.toUpperCase();
    }

    var bpPerPixel = options.bpPerPixel;
    var bpStart = options.bpStart;
    var pixelWidth = options.pixelWidth;
    var bpEnd = bpStart + pixelWidth * bpPerPixel + 1; // paint for all coverage buckets
    // If alignment track color is != default, use it

    var color = this.parent.coverageColor;

    if (this.parent.color !== DEFAULT_ALIGNMENT_COLOR) {
      color = IGVColor.darkenLighten(this.parent.color, -35);
    }

    IGVGraphics.setProperties(ctx, {
      fillStyle: color,
      strokeStyle: color
    });
    var w = Math.max(1, Math.ceil(1.0 / bpPerPixel));

    for (var i = 0, len = coverageMap.coverage.length; i < len; i++) {
      var bp = coverageMap.bpStart + i;
      if (bp < bpStart) continue;
      if (bp > bpEnd) break;
      var item = coverageMap.coverage[i];
      if (!item) continue;
      var h = Math.round(item.total / this.dataRange.max * this.height);
      var y = this.height - h;
      var x = Math.floor((bp - bpStart) / bpPerPixel); // IGVGraphics.setProperties(ctx, {fillStyle: "rgba(0, 200, 0, 0.25)", strokeStyle: "rgba(0, 200, 0, 0.25)" });

      IGVGraphics.fillRect(ctx, x, y, w, h);
    } // coverage mismatch coloring -- don't try to do this in above loop, color bar will be overwritten when w<1


    if (sequence) {
      for (var _i = 0, _len = coverageMap.coverage.length; _i < _len; _i++) {
        var _bp = coverageMap.bpStart + _i;

        if (_bp < bpStart) continue;
        if (_bp > bpEnd) break;
        var _item = coverageMap.coverage[_i];
        if (!_item) continue;

        var _h = _item.total / this.dataRange.max * this.height;

        var _y = this.height - _h;

        var _x6 = Math.floor((_bp - bpStart) / bpPerPixel);

        var refBase = sequence[_i];

        if (_item.isMismatch(refBase)) {
          IGVGraphics.setProperties(ctx, {
            fillStyle: nucleotideColors[refBase]
          });
          IGVGraphics.fillRect(ctx, _x6, _y, w, _h);
          var accumulatedHeight = 0.0;

          for (var _i2 = 0, _arr = ["A", "C", "T", "G"]; _i2 < _arr.length; _i2++) {
            var nucleotide = _arr[_i2];
            var count = _item["pos" + nucleotide] + _item["neg" + nucleotide]; // non-logoritmic

            var hh = count / this.dataRange.max * this.height;
            _y = this.height - hh - accumulatedHeight;
            accumulatedHeight += hh;
            IGVGraphics.setProperties(ctx, {
              fillStyle: nucleotideColors[nucleotide]
            });
            IGVGraphics.fillRect(ctx, _x6, _y, w, hh);
          }
        }
      }
    }
  };

  CoverageTrack.prototype.popupData = function (config) {
    var features = config.viewport.getCachedFeatures();
    if (!features || features.length === 0) return;
    var genomicLocation = Math.floor(config.genomicLocation),
        referenceFrame = config.viewport.genomicState.referenceFrame,
        coverageMap = features.coverageMap,
        nameValues = [],
        coverageMapIndex = Math.floor(genomicLocation - coverageMap.bpStart),
        coverage = coverageMap.coverage[coverageMapIndex];

    if (coverage) {
      nameValues.push(referenceFrame.chrName + ":" + numberFormatter(1 + genomicLocation));
      nameValues.push({
        name: 'Total Count',
        value: coverage.total
      }); // A

      var tmp = coverage.posA + coverage.negA;
      if (tmp > 0) tmp = tmp.toString() + " (" + Math.round(tmp / coverage.total * 100.0) + "%, " + coverage.posA + "+, " + coverage.negA + "- )";
      nameValues.push({
        name: 'A',
        value: tmp
      }); // C

      tmp = coverage.posC + coverage.negC;
      if (tmp > 0) tmp = tmp.toString() + " (" + Math.round(tmp / coverage.total * 100.0) + "%, " + coverage.posC + "+, " + coverage.negC + "- )";
      nameValues.push({
        name: 'C',
        value: tmp
      }); // G

      tmp = coverage.posG + coverage.negG;
      if (tmp > 0) tmp = tmp.toString() + " (" + Math.round(tmp / coverage.total * 100.0) + "%, " + coverage.posG + "+, " + coverage.negG + "- )";
      nameValues.push({
        name: 'G',
        value: tmp
      }); // T

      tmp = coverage.posT + coverage.negT;
      if (tmp > 0) tmp = tmp.toString() + " (" + Math.round(tmp / coverage.total * 100.0) + "%, " + coverage.posT + "+, " + coverage.negT + "- )";
      nameValues.push({
        name: 'T',
        value: tmp
      }); // N

      tmp = coverage.posN + coverage.negN;
      if (tmp > 0) tmp = tmp.toString() + " (" + Math.round(tmp / coverage.total * 100.0) + "%, " + coverage.posN + "+, " + coverage.negN + "- )";
      nameValues.push({
        name: 'N',
        value: tmp
      });
      nameValues.push('<HR/>');
      nameValues.push({
        name: 'DEL',
        value: coverage.del.toString()
      });
      nameValues.push({
        name: 'INS',
        value: coverage.ins.toString()
      });
    }

    return nameValues;
  };

  var AlignmentTrack = function AlignmentTrack(config, parent) {
    this.parent = parent;
    this.browser = parent.browser;
    this.featureSource = parent.featureSource;
    this.top = config.coverageTrackHeight === 0 ? 0 : config.coverageTrackHeight + 5;
    this.alignmentRowHeight = config.alignmentRowHeight || 14;
    this.negStrandColor = config.negStrandColor || "rgba(150, 150, 230, 0.75)";
    this.posStrandColor = config.posStrandColor || "rgba(230, 150, 150, 0.75)";
    this.insertionColor = config.insertionColor || "rgb(138, 94, 161)";
    this.deletionColor = config.deletionColor || "black";
    this.skippedColor = config.skippedColor || "rgb(150, 170, 170)";
    this.pairConnectorColor = config.pairConnectorColor;
    this.smallFragmentLengthColor = config.smallFragmentLengthColor || "rgb(0, 0, 150)";
    this.largeFragmentLengthColor = config.largeFragmentLengthColor || "rgb(200, 0, 0)";
    this.pairOrientation = config.pairOrienation || 'fr';
    this.pairColors = {};
    this.pairColors["RL"] = config.rlColor || "rgb(0, 150, 0)";
    this.pairColors["RR"] = config.rrColor || "rgb(20, 50, 200)";
    this.pairColors["LL"] = config.llColor || "rgb(0, 150, 150)";
    this.colorBy = config.colorBy || "pairOrientation";
    this.colorByTag = config.colorByTag;
    this.bamColorTag = config.bamColorTag === undefined ? "YC" : config.bamColorTag;
    this.hasPairs = false; // Until proven otherwise
  };

  AlignmentTrack.prototype.computePixelHeight = function (alignmentContainer) {
    if (alignmentContainer.packedAlignmentRows) {
      var h = 0;

      if (alignmentContainer.hasDownsampledIntervals()) {
        h += downsampleRowHeight + alignmentStartGap;
      }

      return h + this.alignmentRowHeight * alignmentContainer.packedAlignmentRows.length + 5;
    } else {
      return this.height;
    }
  };

  AlignmentTrack.prototype.draw = function (options) {
    var alignmentContainer = options.features;
    var ctx = options.context;
    var bpPerPixel = options.bpPerPixel;
    var bpStart = options.bpStart;
    var pixelWidth = options.pixelWidth;
    var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;
    var packedAlignmentRows = alignmentContainer.packedAlignmentRows;
    var showSoftClips = this.parent.showSoftClips;
    var showAllBases = this.parent.showAllBases;
    var yTop = options.top || 0;
    var yBottom = yTop + options.pixelHeight;
    var referenceSequence = alignmentContainer.sequence;

    if (referenceSequence) {
      referenceSequence = referenceSequence.toUpperCase();
    }

    var alignmentRowYInset = 0;
    ctx.save();
    if (this.top) ctx.translate(0, this.top);

    if (alignmentContainer.hasDownsampledIntervals()) {
      alignmentRowYInset = downsampleRowHeight + alignmentStartGap;
      alignmentContainer.downsampledIntervals.forEach(function (interval) {
        var xBlockStart = (interval.start - bpStart) / bpPerPixel,
            xBlockEnd = (interval.end - bpStart) / bpPerPixel;

        if (xBlockEnd - xBlockStart > 5) {
          xBlockStart += 1;
          xBlockEnd -= 1;
        }

        IGVGraphics.fillRect(ctx, xBlockStart, 2, xBlockEnd - xBlockStart, downsampleRowHeight - 2, {
          fillStyle: "black"
        });
      });
    } else {
      alignmentRowYInset = 0;
    } // Transient variable -- rewritten on every draw, used for click object selection


    this.alignmentsYOffset = alignmentRowYInset;

    if (packedAlignmentRows) {
      var nRows = packedAlignmentRows.length;

      for (var rowIndex = 0; rowIndex < nRows; rowIndex++) {
        var alignmentRow = packedAlignmentRows[rowIndex];
        var alignmentY = alignmentRowYInset + this.alignmentRowHeight * rowIndex;
        var alignmentHeight = this.alignmentRowHeight <= 4 ? this.alignmentRowHeight : this.alignmentRowHeight - 2;
        var _iteratorNormalCompletion4 = true;
        var _didIteratorError4 = false;
        var _iteratorError4 = undefined;

        try {
          for (var _iterator4 = alignmentRow.alignments[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
            var alignment = _step4.value;
            this.hasPairs = this.hasPairs || alignment.isPaired();
            if (alignment.start + alignment.lengthOnRef < bpStart) continue;
            if (alignment.start > bpEnd) break;

            if (true === alignment.hidden) {
              continue;
            }

            if (alignment instanceof PairedAlignment) {
              drawPairConnector.call(this, alignment, alignmentY, alignmentHeight);
              drawSingleAlignment.call(this, alignment.firstAlignment, alignmentY, alignmentHeight);

              if (alignment.secondAlignment) {
                drawSingleAlignment.call(this, alignment.secondAlignment, alignmentY, alignmentHeight);
              }
            } else {
              drawSingleAlignment.call(this, alignment, alignmentY, alignmentHeight);
            }
          }
        } catch (err) {
          _didIteratorError4 = true;
          _iteratorError4 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
              _iterator4.return();
            }
          } finally {
            if (_didIteratorError4) {
              throw _iteratorError4;
            }
          }
        }
      }
    }

    ctx.restore(); // alignment is a PairedAlignment

    function drawPairConnector(alignment, yRect, alignmentHeight) {
      var connectorColor = this.getConnectorColor(alignment.firstAlignment),
          xBlockStart = (alignment.connectingStart - bpStart) / bpPerPixel,
          xBlockEnd = (alignment.connectingEnd - bpStart) / bpPerPixel,
          yStrokedLine = yRect + alignmentHeight / 2;

      if (alignment.connectingEnd < bpStart || alignment.connectingStart > bpEnd) {
        return;
      }

      if (alignment.mq <= 0) {
        connectorColor = IGVColor.addAlpha(connectorColor, 0.15);
      }

      IGVGraphics.setProperties(ctx, {
        fillStyle: connectorColor,
        strokeStyle: connectorColor
      });
      IGVGraphics.strokeLine(ctx, xBlockStart, yStrokedLine, xBlockEnd, yStrokedLine);
    }

    function drawSingleAlignment(alignment, yRect, alignmentHeight) {
      var alignmentColor, lastBlockEnd, blocks, block, b;
      alignmentColor = this.getAlignmentColor(alignment);
      var outlineColor = alignmentColor;
      blocks = showSoftClips ? alignment.blocks : alignment.blocks.filter(function (b) {
        return 'S' !== b.type;
      });

      if (alignment.start + alignment.lengthOnRef < bpStart || alignment.start > bpEnd) {
        return;
      }

      if (alignment.mq <= 0) {
        alignmentColor = IGVColor.addAlpha(alignmentColor, 0.15);
      }

      IGVGraphics.setProperties(ctx, {
        fillStyle: alignmentColor,
        strokeStyle: outlineColor
      });

      for (b = 0; b < blocks.length; b++) {
        // Can't use forEach here -- we need ability to break
        block = blocks[b]; // Somewhat complex test, neccessary to insure gaps are drawn.
        // If this is not the last block, and the next block starts before the orign (off screen to left)
        // then skip.

        if (b !== blocks.length - 1 && blocks[b + 1].start < bpStart) continue;
        drawBlock.call(this, block);
        if (block.start + block.len > bpEnd) break; // Do this after drawBlock to insure gaps are drawn

        if (alignment.insertions) {
          var _iteratorNormalCompletion5 = true;
          var _didIteratorError5 = false;
          var _iteratorError5 = undefined;

          try {
            for (var _iterator5 = alignment.insertions[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
              var _block = _step5.value;
              var refOffset = _block.start - bpStart;
              var xBlockStart = refOffset / bpPerPixel - 1;
              var widthBlock = 3;
              IGVGraphics.fillRect(ctx, xBlockStart, yRect - 1, widthBlock, alignmentHeight + 2, {
                fillStyle: this.insertionColor
              });
            }
          } catch (err) {
            _didIteratorError5 = true;
            _iteratorError5 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                _iterator5.return();
              }
            } finally {
              if (_didIteratorError5) {
                throw _iteratorError5;
              }
            }
          }
        }
      }

      function drawBlock(block) {
        var offsetBP = block.start - alignmentContainer.start;
        var blockStartPixel = (block.start - bpStart) / bpPerPixel;
        var blockEndPixel = (block.start + block.len - bpStart) / bpPerPixel;
        var blockWidthPixel = Math.max(1, blockEndPixel - blockStartPixel);
        var arrowHeadWidthPixel = this.alignmentRowHeight / 2.0;
        var yStrokedLine = yRect + alignmentHeight / 2;
        var isSoftClip = 'S' === block.type;
        var strokeOutline = alignment.mq <= 0 || this.highlightedAlignmentReadNamed === alignment.readName || isSoftClip;
        var blockOutlineColor = outlineColor;
        if (this.highlightedAlignmentReadNamed === alignment.readName) blockOutlineColor = 'red';else if (isSoftClip) blockOutlineColor = 'rgb(50,50,50)';

        if (block.gapType !== undefined && blockEndPixel !== undefined && lastBlockEnd !== undefined) {
          if ("D" === block.gapType) {
            IGVGraphics.strokeLine(ctx, lastBlockEnd, yStrokedLine, blockStartPixel, yStrokedLine, {
              strokeStyle: this.deletionColor
            });
          } else if ("N" === block.gapType) {
            IGVGraphics.strokeLine(ctx, lastBlockEnd, yStrokedLine, blockStartPixel, yStrokedLine, {
              strokeStyle: this.skippedColor
            });
          }
        }

        lastBlockEnd = blockEndPixel;
        var lastBlockPositiveStrand = true === alignment.strand && b === blocks.length - 1;
        var lastBlockReverseStrand = false === alignment.strand && b === 0;
        var lastBlock = lastBlockPositiveStrand | lastBlockReverseStrand;

        if (lastBlock) {
          var xListPixel;
          var yListPixel;

          if (lastBlockPositiveStrand) {
            xListPixel = [blockStartPixel, blockEndPixel, blockEndPixel + arrowHeadWidthPixel, blockEndPixel, blockStartPixel, blockStartPixel];
            yListPixel = [yRect, yRect, yRect + alignmentHeight / 2.0, yRect + alignmentHeight, yRect + alignmentHeight, yRect];
          } // Last block on - strand ?
          else if (lastBlockReverseStrand) {
              xListPixel = [blockEndPixel, blockStartPixel, blockStartPixel - arrowHeadWidthPixel, blockStartPixel, blockEndPixel, blockEndPixel];
              yListPixel = [yRect, yRect, yRect + alignmentHeight / 2.0, yRect + alignmentHeight, yRect + alignmentHeight, yRect];
            }

          IGVGraphics.fillPolygon(ctx, xListPixel, yListPixel, {
            fillStyle: alignmentColor
          });

          if (strokeOutline) {
            IGVGraphics.strokePolygon(ctx, xListPixel, yListPixel, {
              strokeStyle: blockOutlineColor
            });
          }
        } // Internal block
        else {
            IGVGraphics.fillRect(ctx, blockStartPixel, yRect, blockWidthPixel, alignmentHeight, {
              fillStyle: alignmentColor
            });

            if (strokeOutline) {
              ctx.save();
              ctx.strokeStyle = blockOutlineColor;
              ctx.strokeRect(blockStartPixel, yRect, blockWidthPixel, alignmentHeight);
              ctx.restore();
            }
          } // Mismatch coloring


        if (isSoftClip || showAllBases || referenceSequence && alignment.seq && alignment.seq !== "*") {
          var seq = alignment.seq ? alignment.seq.toUpperCase() : undefined;
          var qual = alignment.qual;
          var seqOffset = block.seqOffset;

          for (var i = 0, len = block.len; i < len; i++) {
            if (offsetBP + i < 0) continue;
            var readChar = seq ? seq.charAt(seqOffset + i) : '';
            var refChar = referenceSequence.charAt(offsetBP + i);

            if (readChar === "=") {
              readChar = refChar;
            }

            if (readChar === "X" || refChar !== readChar || isSoftClip || showAllBases) {
              var baseColor = void 0;

              if (!isSoftClip && qual !== undefined && qual.length > seqOffset + i) {
                var readQual = qual[seqOffset + i];
                baseColor = shadedBaseColor(readQual, readChar, i + block.start);
              } else {
                baseColor = nucleotideColors[readChar];
              }

              if (baseColor) {
                var xPixel = (block.start + i - bpStart) / bpPerPixel;
                var widthPixel = Math.max(1, 1 / bpPerPixel);
                renderBlockOrReadChar(ctx, bpPerPixel, {
                  x: xPixel,
                  y: yRect,
                  width: widthPixel,
                  height: alignmentHeight
                }, baseColor, readChar);
              }
            }
          }
        }
      }

      function renderBlockOrReadChar(context, bpp, bbox, color, char) {
        var threshold, center;
        threshold = 1.0 / 10.0;

        if (bpp <= threshold && bbox.height >= 8) {
          // render letter
          var fontHeight = Math.min(10, bbox.height);
          context.font = '' + fontHeight + 'px sans-serif';
          center = bbox.x + bbox.width / 2.0;
          IGVGraphics.strokeText(context, char, center - context.measureText(char).width / 2, fontHeight - 1 + bbox.y, {
            strokeStyle: color
          });
        } else {
          // render colored block
          IGVGraphics.fillRect(context, bbox.x, bbox.y, bbox.width, bbox.height, {
            fillStyle: color
          });
        }
      }
    }
  };

  AlignmentTrack.prototype.sortAlignmentRows = function (options, alignmentContainer) {
    var direction = options.direction;

    if (alignmentContainer === null) {
      alignmentContainer = this.featureSource.alignmentContainer;
    }

    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = alignmentContainer.packedAlignmentRows[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var row = _step6.value;
        row.updateScore(options, alignmentContainer);
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }

    alignmentContainer.packedAlignmentRows.sort(function (rowA, rowB) {
      var i = rowA.score > rowB.score ? 1 : rowA.score < rowB.score ? -1 : 0;
      return true === direction ? i : -i;
    });
  };

  AlignmentTrack.prototype.popupData = function (config) {
    var clickedObject = this.getClickedObject(config.viewport, config.y, config.genomicLocation);
    return clickedObject ? clickedObject.popupData(config.genomicLocation) : undefined;
  };

  AlignmentTrack.prototype.contextMenuItemList = function (clickState) {
    var self = this;
    var viewport = clickState.viewport;
    var genomicState = clickState.viewport.genomicState;
    var clickedObject = this.getClickedObject(clickState.viewport, clickState.y, clickState.genomicLocation);
    var isSingleAlignment = clickedObject && !clickedObject.paired && typeof clickedObject.isPaired === 'function';
    var list = [];
    list.push({
      label: 'Sort by base',
      click: sortByBase
    });
    list.push({
      label: 'Sort by read strand',
      click: sortByStrand
    });
    list.push({
      label: 'Sort by tag',
      click: sortByTag
    });
    list.push('<hr/>');

    if (isSingleAlignment && clickedObject.isMateMapped()) {
      list.push({
        label: 'View mate in split screen',
        click: viewMateInSplitScreen,
        init: undefined
      });
    }

    list.push({
      label: 'View read sequence',
      click: viewReadSequence
    });
    list.push('<hr/>');
    return list;

    function sortByStrand() {
      sortRows({
        chr: genomicState.referenceFrame.chrName,
        position: Math.floor(clickState.genomicLocation),
        sortOption: "STRAND"
      });
    }

    function sortByBase() {
      sortRows({
        chr: genomicState.referenceFrame.chrName,
        position: Math.floor(clickState.genomicLocation),
        sortOption: "NUCLEOTIDE"
      });
    }

    function sortByTag() {
      var config = {
        label: 'Tag Name',
        input: self.sortByTag ? self.sortByTag : '',
        click: function click() {
          var tag = self.browser.inputDialog.$input.val().trim();
          self.sortByTag = tag;
          sortRows({
            chr: genomicState.referenceFrame.chrName,
            position: Math.floor(clickState.genomicLocation),
            sortOption: "TAG",
            tag: tag
          });
        }
      };
      self.browser.inputDialog.configure(config);
      self.browser.inputDialog.present($(self.parent.trackView.trackDiv));
    }

    function sortRows(options) {
      if (!clickState.viewport.tile) {
        return;
      }

      var currentSorts = self.parent.sortObjects;
      var cs = currentSorts[viewport.genomicState.id];
      options.direction = cs ? !cs.direction : true;
      self.sortAlignmentRows(options, clickState.viewport.getCachedFeatures());
      self.parent.trackView.repaintViews();
      currentSorts[viewport.genomicState.id] = options;
    }

    function viewMateInSplitScreen() {
      if (clickedObject.mate) {
        self.highlightedAlignmentReadNamed = clickedObject.readName;
        self.browser.presentSplitScreenMultiLocusPanel(clickedObject, clickState.viewport.genomicState);
      }
    }

    function viewReadSequence() {
      var alignment = clickedObject;
      if (!alignment || !alignment.seq) return;
      var seqstring = alignment.seq; //.map(b => String.fromCharCode(b)).join("");

      self.browser.presentAlert(seqstring);
    }
  };

  AlignmentTrack.prototype.getClickedObject = function (viewport, y, genomicLocation) {
    var showSoftClips = this.parent.showSoftClips;
    var features = viewport.getCachedFeatures();
    if (!features || features.length === 0) return;
    var packedAlignmentRows = features.packedAlignmentRows;
    var downsampledIntervals = features.downsampledIntervals;
    var packedAlignmentsIndex = Math.floor((y - this.top - this.alignmentsYOffset) / this.alignmentRowHeight);

    if (packedAlignmentsIndex < 0) {
      for (var i = 0; i < downsampledIntervals.length; i++) {
        if (downsampledIntervals[i].start <= genomicLocation && downsampledIntervals[i].end >= genomicLocation) {
          return downsampledIntervals[i];
        }
      }
    } else if (packedAlignmentsIndex < packedAlignmentRows.length) {
      var alignmentRow = packedAlignmentRows[packedAlignmentsIndex];
      var clicked = alignmentRow.alignments.filter(function (alignment) {
        var s = showSoftClips ? alignment.scStart : alignment.start;
        var l = showSoftClips ? alignment.scLengthOnRef : alignment.lengthOnRef;
        return genomicLocation >= s && genomicLocation <= s + l;
      });
      if (clicked.length > 0) return clicked[0];
    }

    return undefined;
  };
  /**
   * Return the color for connectors in paired alignment view.   If explicitly set return that, otherwise return
   * the alignment color, unless the color option can result in split colors (separte color for each mate).
   *
   * @param alignment
   * @returns {string}
   */


  AlignmentTrack.prototype.getConnectorColor = function (alignment) {
    if (this.pairConnectorColor) {
      return this.pairConnectorColor;
    }

    switch (this.colorBy) {
      case "strand":
      case "firstOfPairStrand":
      case "pairOrientation":
      case "tag":
        return this.parent.color || DEFAULT_CONNECTOR_COLOR;

      default:
        return this.getAlignmentColor(alignment);
    }
  };

  AlignmentTrack.prototype.getAlignmentColor = function (alignment) {
    var self = this;
    var color = self.parent.color;
    var option = self.colorBy;
    var tagValue;

    switch (option) {
      case "strand":
        color = alignment.strand ? self.posStrandColor : self.negStrandColor;
        break;

      case "firstOfPairStrand":
        if (alignment instanceof PairedAlignment) {
          color = alignment.firstOfPairStrand() ? self.posStrandColor : self.negStrandColor;
        } else if (alignment.isPaired()) {
          if (alignment.isFirstOfPair()) {
            color = alignment.strand ? self.posStrandColor : self.negStrandColor;
          } else if (alignment.isSecondOfPair()) {
            color = alignment.strand ? self.negStrandColor : self.posStrandColor;
          } else {
            console.error("ERROR. Paired alignments are either first or second.");
          }
        }

        break;

      case "pairOrientation":
        if (alignment.mate && alignment.isMateMapped() && alignment.mate.chr !== alignment.chr) {
          color = getChrColor(alignment.mate.chr);
        } else if (self.pairOrientation && alignment.pairOrientation) {
          var oTypes = orientationTypes[self.pairOrientation];

          if (oTypes) {
            var pairColor = self.pairColors[oTypes[alignment.pairOrientation]];
            if (pairColor) color = pairColor;
          }
        }

        break;

      case "fragmentLength":
        if (alignment.mate && alignment.isMateMapped() && alignment.mate.chr !== alignment.chr) {
          color = getChrColor(alignment.mate.chr);
        } else if (self.parent.minFragmentLength && Math.abs(alignment.fragmentLength) < self.parent.minFragmentLength) {
          color = self.smallFragmentLengthColor;
        } else if (self.parent.maxFragmentLength && Math.abs(alignment.fragmentLength) > self.parent.maxFragmentLength) {
          color = self.largeFragmentLengthColor;
        }

        break;

      case "tag":
        tagValue = alignment.tags()[self.colorByTag];

        if (tagValue !== undefined) {
          if (self.bamColorTag === self.colorByTag) {
            // UCSC style color option
            color = "rgb(" + tagValue + ")";
          } else {
            if (!self.tagColors) {
              self.tagColors = new PaletteColorTable("Set1");
            }

            color = self.tagColors.getColor(tagValue);
          }
        }

        break;

      default:
        color = self.parent.color;
    }

    return color;
  };

  var orientationTypes = {
    "fr": {
      "F1R2": "LR",
      "F2R1": "LR",
      "F1F2": "LL",
      "F2F1": "LL",
      "R1R2": "RR",
      "R2R1": "RR",
      "R1F2": "RL",
      "R2F1": "RL"
    },
    "rf": {
      "R1F2": "LR",
      "R2F1": "LR",
      "R1R2": "LL",
      "R2R1": "LL",
      "F1F2": "RR",
      "F2F1": "RR",
      "F1R2": "RL",
      "F2R1": "RL"
    },
    "ff": {
      "F2F1": "LR",
      "R1R2": "LR",
      "F2R1": "LL",
      "R1F2": "LL",
      "R2F1": "RR",
      "F1R2": "RR",
      "R2R1": "RL",
      "F1F2": "RL"
    }
  };

  function getChrColor(chr) {
    if (chrColorMap[chr]) {
      return chrColorMap[chr];
    } else if (chrColorMap["chr" + chr]) {
      var color = chrColorMap["chr" + chr];
      chrColorMap[chr] = color;
      return color;
    } else {
      var _color = IGVColor.randomRGB();

      chrColorMap[chr] = _color;
      return _color;
    }
  }

  var chrColorMap = {
    "chrX": "rgb(204, 153, 0)",
    "chrY": "rgb(153, 204, 0",
    "chrUn": "rgb(50, 50, 50)",
    "chr1": "rgb(80, 80, 255)",
    "chrI": "rgb(139, 155, 187)",
    "chr2": "rgb(206, 61, 50)",
    "chrII": "rgb(206, 61, 50)",
    "chr2a": "rgb(216, 71, 60)",
    "chr2b": "rgb(226, 81, 70)",
    "chr3": "rgb(116, 155, 88)",
    "chrIII": "rgb(116, 155, 88)",
    "chr4": "rgb(240, 230, 133)",
    "chrIV": "rgb(240, 230, 133)",
    "chr5": "rgb(70, 105, 131)",
    "chr6": "rgb(186, 99, 56)",
    "chr7": "rgb(93, 177, 221)",
    "chr8": "rgb(128, 34, 104)",
    "chr9": "rgb(107, 215, 107)",
    "chr10": "rgb(213, 149, 167)",
    "chr11": "rgb(146, 72, 34)",
    "chr12": "rgb(131, 123, 141)",
    "chr13": "rgb(199, 81, 39)",
    "chr14": "rgb(213, 143, 92)",
    "chr15": "rgb(122, 101, 165)",
    "chr16": "rgb(228, 175, 105)",
    "chr17": "rgb(59, 27, 83)",
    "chr18": "rgb(205, 222, 183)",
    "chr19": "rgb(97, 42, 121)",
    "chr20": "rgb(174, 31, 99)",
    "chr21": "rgb(231, 199, 111)",
    "chr22": "rgb(90, 101, 94)",
    "chr23": "rgb(204, 153, 0)",
    "chr24": "rgb(153, 204, 0)",
    "chr25": "rgb(51, 204, 0)",
    "chr26": "rgb(0, 204, 51)",
    "chr27": "rgb(0, 204, 153)",
    "chr28": "rgb(0, 153, 204)",
    "chr29": "rgb(10, 71, 255)",
    "chr30": "rgb(71, 117, 255)",
    "chr31": "rgb(255, 194, 10)",
    "chr32": "rgb(255, 209, 71)",
    "chr33": "rgb(153, 0, 51)",
    "chr34": "rgb(153, 26, 0)",
    "chr35": "rgb(153, 102, 0)",
    "chr36": "rgb(128, 153, 0)",
    "chr37": "rgb(51, 153, 0)",
    "chr38": "rgb(0, 153, 26)",
    "chr39": "rgb(0, 153, 102)",
    "chr40": "rgb(0, 128, 153)",
    "chr41": "rgb(0, 51, 153)",
    "chr42": "rgb(26, 0, 153)",
    "chr43": "rgb(102, 0, 153)",
    "chr44": "rgb(153, 0, 128)",
    "chr45": "rgb(214, 0, 71)",
    "chr46": "rgb(255, 20, 99)",
    "chr47": "rgb(0, 214, 143)",
    "chr48": "rgb(20, 255, 177)"
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2018 The Regents of the University of California 
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var InteractionTrack = extend(TrackBase, function (config, browser) {
    TrackBase.call(this, config, browser);
    this.theta = config.theta || Math.PI / 4;
    this.sinTheta = Math.sin(this.theta);
    this.cosTheta = Math.cos(this.theta);
    this.height = config.height || 250;
    this.autoHeight = true;
    this.arcOrientation = config.arcOrientation === undefined ? true : config.arcOrientation; // true for up, false for down

    this.thickness = config.thickness || 2;
    this.color = config.color || "rgb(180,25,137)";
    this.visibilityWindow = -1;
    this.colorAlphaCache = {};
  });
  /**
   * Return the current state of the track.  Used to create sessions and bookmarks.
   *
   * @returns {*|{}}
   */

  InteractionTrack.prototype.getState = function () {
    var config = this.config || {};
    config.arcOrientation = this.arcOrientation;
    config.thickness = this.thickness;
    config.color = this.color;
    return config;
  };

  InteractionTrack.prototype.getFeatures = function (chr, bpStart, bpEnd) {
    var self = this;
    var genome = this.browser.genome;

    if (self.featureCache) {
      return Promise.resolve(self.featureCache.queryFeatures(chr, bpStart, bpEnd));
    } else {
      var options = buildOptions(self.config); // Add oauth token, if any

      return igvxhr.loadString(self.config.url, options).then(function (data) {
        var parser = new FeatureParser("bedpe");
        var header = parser.parseHeader(data);
        var features = parser.parseFeatures(data);
        self.featureCache = new FeatureCache(features, genome); // TODO -- whole genome features here.

        return self.featureCache.queryFeatures(chr, bpStart, bpEnd);
      });
    }
  };

  InteractionTrack.prototype.draw = function (options) {
    var self = this;
    var ctx = options.context;
    var pixelWidth = options.pixelWidth;
    var pixelHeight = options.pixelHeight;
    var viewportWidth = options.viewportWidth;
    var bpPerPixel = options.bpPerPixel;
    var bpStart = options.bpStart;
    var xScale = bpPerPixel;
    IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
      'fillStyle': "rgb(255, 255, 255)"
    });
    var featureList = options.features;

    if (featureList) {
      // Autoscale theta
      autoscale();
      featureList.forEach(function (feature) {
        var pixelStart = Math.round((feature.m1 - bpStart) / xScale);
        var pixelEnd = Math.round((feature.m2 - bpStart) / xScale);
        var direction = self.arcOrientation;
        var w = pixelEnd - pixelStart;

        if (w < 3) {
          w = 3;
          pixelStart--;
        }

        var a = w / 2;
        var r = a / self.sinTheta;
        var b = self.cosTheta * r;
        var xc = pixelStart + a;
        var yc, startAngle, endAngle;

        if (direction) {
          // UP
          var trackBaseLine = self.height;
          yc = trackBaseLine + b;
          startAngle = Math.PI + Math.PI / 2 - self.theta;
          endAngle = Math.PI + Math.PI / 2 + self.theta;
        } else {
          // DOWN
          yc = -b;
          startAngle = Math.PI / 2 - self.theta;
          endAngle = Math.PI / 2 + self.theta;
        }

        var color = feature.color || self.color;

        if (color && w > viewportWidth) {
          color = getAlphaColor.call(self, color, "0.1");
        }

        ctx.strokeStyle = color;
        ctx.lineWidth = feature.thickness || self.thicknewss || 1;
        ctx.beginPath();
        ctx.arc(xc, yc, r, startAngle, endAngle, false);
        ctx.stroke();
      });
    }

    function autoscale() {
      var max = 0;
      featureList.forEach(function (feature) {
        var pixelStart = (feature.start - bpStart) / xScale;
        var pixelEnd = (feature.end - bpStart) / xScale;

        if (pixelEnd >= 0 && pixelStart <= pixelWidth) {
          max = Math.max(max, pixelEnd - pixelStart);
        }
      });
      var a = Math.min(viewportWidth, max) / 2;

      if (max > 0) {
        var coa = pixelHeight / a;
        self.theta = estimateTheta(coa);
        self.sinTheta = Math.sin(self.theta);
        self.cosTheta = Math.cos(self.theta);
      }
    }
  };

  InteractionTrack.prototype.menuItemList = function () {
    var self = this;
    return [{
      name: "Toggle arc direction",
      click: function click() {
        self.arcOrientation = !self.arcOrientation;
        self.trackView.repaintViews();
      }
    }, {
      name: "Set track color",
      click: function click() {
        self.trackView.presentColorPicker();
      }
    }];
  }; //
  //
  //
  // InteractionTrack.prototype.popupData = function (config) {
  //
  //     return null;
  // };
  // InteractionTrack.prototype.contextMenuItemList = function (config) {
  //
  //     var self = this,
  //         clickHandler;
  //
  //
  //
  //     clickHandler = function () {
  //
  //         var genomicLocation = config.genomicLocation,
  //             referenceFrame = config.viewport.genomicState.referenceFrame;
  //
  //         // Define a region 5 "pixels" wide in genomic coordinates
  //         var bpWidth = referenceFrame.toBP(2.5);
  //
  //         self.sortSamples(referenceFrame.chrName, genomicLocation - bpWidth, genomicLocation + bpWidth, sortDirection);
  //
  //         sortDirection = (sortDirection === "ASC" ? "DESC" : "ASC");
  //
  //
  //     };
  //
  //     return [{label: 'Sort by value',  click: clickHandler, init: undefined}];
  //
  // };

  /**
   * Estimate theta given the ratio of track height to 1/2 the feature width (coa).  This relationship is approximately linear.
   */


  function estimateTheta(x) {
    var coa = [0.01570925532366355, 0.15838444032453644, 0.3249196962329063, 0.5095254494944288, 0.7265425280053609, 0.9999999999999999];
    var theta = [0.031415926535897934, 0.3141592653589793, 0.6283185307179586, 0.9424777960769379, 1.2566370614359172, 1.5707963267948966];
    var idx;

    for (idx = 0; idx < coa.length; idx++) {
      if (coa[idx] > x) {
        break;
      }
    }

    var left = idx === 0 ? 0 : coa[idx - 1];
    var right = idx < coa.length ? coa[idx] : 1;
    var r = (x - left) / (right - left);
    var thetaLeft = idx === 0 ? 0 : theta[idx - 1];
    var thetaRight = idx < theta.length ? theta[idx] : Math.PI / 2;
    return thetaLeft + r * (thetaRight - thetaLeft);
  }

  function getAlphaColor(color, alpha) {
    var c = this.colorAlphaCache[color];

    if (!c) {
      c = IGVColor.addAlpha(color, alpha);
      this.colorAlphaCache[color] = c;
    }

    return c;
  }

  var DEFAULT_VISIBILITY_WINDOW = 1000000;
  var type$1 = "variant";
  var topMargin = 10;
  var VariantTrack = extend(TrackBase, function (config, browser) {
    this.type = type$1;
    this.visibilityWindow = config.visibilityWindow;
    TrackBase.call(this, config, browser);
    this.displayMode = config.displayMode || "EXPANDED"; // COLLAPSED | EXPANDED | SQUISHED

    this.labelDisplayMode = config.labelDisplayMode;
    this.variantHeight = config.variantHeight || 10;
    this.squishedCallHeight = config.squishedCallHeight || 1;
    this.expandedCallHeight = config.expandedCallHeight || 10;
    this.expandedVGap = config.expandedVGap !== undefined ? config.expandedVGap : 2;
    this.squishedVGap = config.squishedVGap !== undefined ? config.squishedVGap : 1;
    this.expandedGroupGap = config.expandedGroupGap || 10;
    this.squishedGroupGap = config.squishedGroupGap || 5;
    this.featureHeight = config.featureHeight || 14;
    this.visibilityWindow = config.visibilityWindow;
    this.featureSource = new FeatureSource(config, browser.genome);
    this.nonRefColor = config.nonRefColor || "rgb(200, 200, 215)";
    this.mixedColor = config.mixedColor || "rgb(200, 220, 200)";
    this.homrefColor = config.homrefColor || "rgb(200, 200, 200)";
    this.homvarColor = config.homvarColor || "rgb(17,248,254)";
    this.hetvarColor = config.hetvarColor || "rgb(34,12,253)";
    this.sortDirection = "ASC";
    this.nRows = 1; // Computed dynamically
  });
  VariantTrack.prototype.postInit =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var header, fn, length;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return this.getFileHeader();

          case 2:
            header = _context.sent;

            // cricital, don't remove'
            if (undefined === this.visibilityWindow) {
              fn = this.config.url instanceof File ? this.config.url.name : this.config.url;

              if (isString(fn) && fn.toLowerCase().includes("gnomad")) {
                this.visibilityWindow = 1000; // these are known to be very dense
              } else if (this.callSets) {
                length = this.callSets.length;
                this.visibilityWindow = Math.max(1000, DEFAULT_VISIBILITY_WINDOW - length * (DEFAULT_VISIBILITY_WINDOW / 100));
              } else {
                this.visibilityWindow = DEFAULT_VISIBILITY_WINDOW;
              }
            }

            return _context.abrupt("return", this);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  VariantTrack.prototype.getFileHeader =
  /*#__PURE__*/
  _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee2() {
    var header;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!this.header) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", this.header);

          case 4:
            if (!(typeof this.featureSource.getFileHeader === "function")) {
              _context2.next = 13;
              break;
            }

            _context2.next = 7;
            return this.featureSource.getFileHeader();

          case 7:
            header = _context2.sent;

            if (header) {
              // Header (from track line).  Set properties,unless set in the config (config takes precedence)
              if (header.name && !this.config.name) {
                this.name = header.name;
              }

              if (header.color && !this.config.color) {
                this.color = "rgb(" + header.color + ")";
              }

              this.callSets = header.callSets || [];
            }

            this.header = header;
            return _context2.abrupt("return", header);

          case 13:
            this.callSets = [];
            return _context2.abrupt("return", undefined);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  VariantTrack.prototype.getCallsetsLength = function () {
    return this.callSets.length;
  };

  VariantTrack.prototype.getFeatures =
  /*#__PURE__*/
  function () {
    var _ref3 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(chr, bpStart, bpEnd, bpPerPixel) {
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(this.header === undefined)) {
                _context3.next = 4;
                break;
              }

              _context3.next = 3;
              return this.getFileHeader();

            case 3:
              this.header = _context3.sent;

            case 4:
              return _context3.abrupt("return", this.featureSource.getFeatures(chr, bpStart, bpEnd, bpPerPixel, this.visibilityWindow));

            case 5:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    return function (_x, _x2, _x3, _x4) {
      return _ref3.apply(this, arguments);
    };
  }();
  /**
   * The required height in pixels required for the track content.   This is not the visible track height, which
   * can be smaller (with a scrollbar) or larger.
   *
   * @param features
   * @returns {*}
   */


  VariantTrack.prototype.computePixelHeight = function (features) {
    if (this.displayMode === "COLLAPSED") {
      this.nRows = 1;
      return topMargin + this.variantHeight;
    } else {
      var maxRow = 0;

      if (features) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = features[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var feature = _step.value;
            if (feature.row && feature.row > maxRow) maxRow = feature.row;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      var vGap = this.displayMode === 'EXPANDED' ? this.expandedVGap : this.squishedVGap;
      this.nRows = maxRow + 1;
      var h = topMargin + this.nRows * (this.variantHeight + vGap);
      this.variantBandHeight = h;
      var callHeight = this.displayMode === "EXPANDED" ? this.expandedCallHeight : this.squishedCallHeight;
      var nCalls = this.getCallsetsLength() * this.nRows;
      return h + vGap + (nCalls + 1) * (callHeight + vGap);
    }
  };

  VariantTrack.prototype.draw = function (options) {
    var ctx = options.context;
    var callSets = this.callSets;
    var nCalls = this.getCallsetsLength();
    var pixelWidth = options.pixelWidth;
    var pixelHeight = options.pixelHeight;
    var callHeight = "EXPANDED" === this.displayMode ? this.expandedCallHeight : this.squishedCallHeight;
    var bpPerPixel = options.bpPerPixel;
    var bpStart = options.bpStart;
    var bpEnd = bpStart + pixelWidth * bpPerPixel + 1;
    IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
      'fillStyle': "rgb(255, 255, 255)"
    });
    var vGap = this.displayMode === 'EXPANDED' ? this.expandedVGap : this.squishedVGap;

    if (callSets && nCalls > 0 && "COLLAPSED" !== this.displayMode) {
      IGVGraphics.strokeLine(ctx, 0, this.variantBandHeight, pixelWidth, this.variantBandHeight, {
        strokeStyle: 'rgb(224,224,224) '
      });
    }

    var featureList = options.features;

    if (featureList) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = featureList[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var variant = _step2.value;
          if (variant.end < bpStart) continue;
          if (variant.start > bpEnd) break;
          var py = topMargin + ("COLLAPSED" === this.displayMode ? 0 : variant.row * (this.variantHeight + vGap));
          var vh = this.variantHeight; // Compute pixel width.   Minimum width is 3 pixels,  if > 5 pixels create gap between variants

          var px = Math.round((variant.start - bpStart) / bpPerPixel);
          var px1 = Math.round((variant.end - bpStart) / bpPerPixel);
          var pw = Math.max(1, px1 - px);

          if (pw < 3) {
            pw = 3;
            px -= 1;
          } else if (pw > 5) {
            px += 1;
            pw -= 2;
          }

          if ("NONVARIANT" === variant.type) {
            ctx.fillStyle = this.nonRefColor;
          } else if ("MIXED" === variant.type) {
            ctx.fillStyle = this.mixedColor;
          } else {
            ctx.fillStyle = this.color;
          }

          ctx.fillRect(px, py, pw, vh);

          if (nCalls > 0 && variant.calls && "COLLAPSED" !== this.displayMode) {
            var callsDrawn = 0;
            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = callSets[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var callSet = _step3.value;
                var call = variant.calls[callSet.id];

                if (call) {
                  var _py = this.variantBandHeight + vGap + (callsDrawn + variant.row) * (callHeight + vGap);

                  var allVar = true; // until proven otherwise

                  var allRef = true;
                  call.genotype.forEach(function (g) {
                    if (g !== 0) allRef = false;
                    if (g === 0) allVar = false;
                  });

                  if (allRef) {
                    ctx.fillStyle = this.homrefColor;
                  } else if (allVar) {
                    ctx.fillStyle = this.homvarColor;
                  } else {
                    ctx.fillStyle = this.hetvarColor;
                  }

                  ctx.fillRect(px, _py, pw, callHeight);
                }

                callsDrawn++;
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  };
  /**
   * Return "popup data" for feature @ genomic location.  Data is an array of key-value pairs
   */


  VariantTrack.prototype.popupData = function (clickState, featureList) {
    if (!featureList) featureList = this.clickedFeatures(clickState);
    var genomicLocation = clickState.genomicLocation;
    var genomeID = this.browser.genome.id;
    var popupData = [];
    var sampleInformation = this.browser.sampleInformation;
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = featureList[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var variant = _step4.value;

        if (popupData.length > 0) {
          popupData.push('<HR>');
        }

        if ("COLLAPSED" === self.displayMode) {
          Array.prototype.push.apply(popupData, variant.popupData(genomicLocation, this.type));
        } else {
          var yOffset = clickState.y;
          var vGap = this.displayMode === 'EXPANDED' ? this.expandedVGap : this.squishedVGap;

          if (yOffset <= this.variantBandHeight) {
            // Variant
            var row = Math.floor((yOffset - topMargin) / (this.variantHeight + vGap));

            if (variant.row === row) {
              Array.prototype.push.apply(popupData, variant.popupData(genomicLocation, genomeID), this.type);
            }
          } else {
            // Genotype
            var callSets = this.callSets;

            if (callSets && variant.calls) {
              var callHeight = this.nRows * ("SQUISHED" === this.displayMode ? this.squishedCallHeight : this.expandedCallHeight);

              var _row = Math.floor((yOffset - this.variantBandHeight) / (callHeight + vGap));

              if (_row >= 0 && _row < callSets.length) {
                var cs = callSets[_row];
                var call = variant.calls[cs.id];
                Array.prototype.push.apply(popupData, extractGenotypePopupData(call, variant, genomeID, sampleInformation));
              }
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }

    return popupData;
  };
  /**
   * Genotype popup text.
   * @param call
   * @param variant
   * @returns {Array}
   */


  function extractGenotypePopupData(call, variant, genomeId, sampleInformation) {
    var gt = '',
        popupData;
    var cravatLinks = [];
    popupData = [];
    var altArray = variant.alternateBases.split(",");
    call.genotype.forEach(function (i) {
      if (i === 0) {
        gt += variant.referenceBases;
      } else {
        var alt = altArray[i - 1].replace("<", "&lt;");
        gt += alt;
      }
    });

    if (call.callSetName !== undefined) {
      popupData.push({
        name: 'Name',
        value: call.callSetName
      });
    }

    popupData.push({
      name: 'Genotype',
      value: gt
    });

    if (call.phaseset !== undefined) {
      popupData.push({
        name: 'Phase set',
        value: call.phaseset
      });
    }

    if (call.genotypeLikelihood !== undefined) {
      popupData.push({
        name: 'genotypeLikelihood',
        value: call.genotypeLikelihood.toString()
      });
    }

    if (sampleInformation) {
      var attr = sampleInformation.getAttributes(call.callSetName);

      if (attr) {
        Object.keys(attr).forEach(function (attrName) {
          var displayText = attrName.replace(/([A-Z])/g, " $1");
          displayText = displayText.charAt(0).toUpperCase() + displayText.slice(1);
          popupData.push({
            name: displayText,
            value: attr[attrName]
          });
        });
      }
    }

    var infoKeys = Object.keys(call.info);

    if (infoKeys.length) {
      popupData.push("<hr>");
    }

    infoKeys.forEach(function (key) {
      popupData.push({
        name: key,
        value: call.info[key]
      });
    });

    if (cravatLinks.length > 0) {
      popupData.push("<HR/>");
      popupData = popupData.concat(cravatLinks);
    }

    return popupData;
  } // VariantTrack.prototype.contextMenuItemList = function (clickState) {
  //
  //     const self = this;
  //     const menuItems = [];
  //
  //     const featureList = this.clickedFeatures(clickState);
  //
  //     if (this.callSets && featureList && featureList.length > 0) {
  //
  //         featureList.forEach(function (variant) {
  //
  //             if ('str' === variant.type) {
  //
  //                 menuItems.push({
  //                     label: 'Sort by allele length',
  //                     click: function () {
  //                         sortCallSetsByAlleleLength(self.callSets, variant, self.sortDirection);
  //                         self.sortDirection = (self.sortDirection === "ASC") ? "DESC" : "ASC";
  //                         self.trackView.repaintViews();
  //                     }
  //                 });
  //
  //             }
  //
  //         });
  //     }
  //
  //
  //     function sortCallSetsByAlleleLength(callSets, variant, direction) {
  //         var d = (direction === "DESC") ? 1 : -1;
  //         Object.keys(callSets).forEach(function (property) {
  //             callSets[property].sort(function (a, b) {
  //                 var aNan = isNaN(variant.calls[a.id].genotype[0]);
  //                 var bNan = isNaN(variant.calls[b.id].genotype[0]);
  //                 if (aNan && bNan) {
  //                     return 0;
  //                 } else if (aNan) {
  //                     return 1;
  //                 } else if (bNan) {
  //                     return -1;
  //                 } else {
  //                     var a0 = getAlleleString(variant.calls[a.id], variant, 0);
  //                     var a1 = getAlleleString(variant.calls[a.id], variant, 1);
  //                     var b0 = getAlleleString(variant.calls[b.id], variant, 0);
  //                     var b1 = getAlleleString(variant.calls[b.id], variant, 1);
  //                     var result = Math.max(b0.length, b1.length) - Math.max(a0.length, a1.length);
  //                     if (result === 0) {
  //                         result = Math.min(b0.length, b1.length) - Math.min(a0.length, a1.length);
  //                     }
  //                     return d * result;
  //                 }
  //             });
  //         });
  //     }
  //
  //
  //     return menuItems;
  //
  // };


  VariantTrack.prototype.menuItemList = function () {
    var self = this,
        menuItems = [];
    menuItems.push({
      object: $('<div class="igv-track-menu-border-top">')
    });
    ["COLLAPSED", "SQUISHED", "EXPANDED"].forEach(function (displayMode) {
      var lut = {
        "COLLAPSED": "Collapse",
        "SQUISHED": "Squish",
        "EXPANDED": "Expand"
      };
      menuItems.push({
        object: createCheckbox(lut[displayMode], displayMode === self.displayMode),
        click: function click() {
          self.displayMode = displayMode;
          self.trackView.checkContentHeight();
          self.trackView.repaintViews();
        }
      });
    });
    return menuItems;
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var dataRangeMenuItem$1 = MenuUtils.dataRangeMenuItem;
  var EqtlTrack = extend(TrackBase, function (config, browser) {
    var url = config.url,
        label = config.name;
    this.config = config;
    this.url = url;
    this.name = label;
    this.pValueField = config.pValueField || "pValue";
    this.geneField = config.geneField || "geneSymbol";
    this.snpField = config.snpField || "snp";
    var min = config.minLogP || config.min;
    var max = config.maxLogP || config.max;
    this.dataRange = {
      min: min || 3.5,
      max: max || 25
    };

    if (!max) {
      this.autoscale = true;
    } else {
      this.autoscale = config.autoscale;
    }

    this.autoscalePercentile = config.autoscalePercentile === undefined ? 98 : config.autoscalePercentile;
    this.background = config.background; // No default

    this.divider = config.divider || "rgb(225,225,225)";
    this.dotSize = config.dotSize || 2;
    this.height = config.height || 100;
    this.autoHeight = false;
    this.disableButtons = config.disableButtons; // Limit visibility window to 2 mb,  gtex server gets flaky beyond that

    this.visibilityWindow = config.visibilityWindow === undefined ? 2000000 : config.visibilityWindow >= 0 ? Math.min(2000000, config.visibilityWindow) : 2000000;
    this.featureSource = new FeatureSource(config, browser.genome);
    GtexUtils.gtexLoaded = true;
  });

  EqtlTrack.prototype.paintAxis = function (ctx, pixelWidth, pixelHeight) {
    var track = this,
        yScale = (track.dataRange.max - track.dataRange.min) / pixelHeight;
    var font = {
      'font': 'normal 10px Arial',
      'textAlign': 'right',
      'strokeStyle': "black"
    };
    IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
      'fillStyle': "rgb(255, 255, 255)"
    }); // Determine a tick spacing such that there is at least 10 pixels between ticks

    var n = Math.ceil((this.dataRange.max - this.dataRange.min) * 10 / pixelHeight);

    for (var p = 4; p <= track.dataRange.max; p += n) {
      var x1, x2, y1, y2, ref; // TODO: Dashes may not actually line up with correct scale. Ask Jim about this

      ref = 0.85 * pixelWidth;
      x1 = ref - 5;
      x2 = ref;
      y1 = y2 = pixelHeight - Math.round((p - track.dataRange.min) / yScale);
      IGVGraphics.strokeLine(ctx, x1, y1, x2, y2, font); // Offset dashes up by 2 pixel

      if (y1 > 8) {
        IGVGraphics.fillText(ctx, p, x1 - 1, y1 + 2, font);
      } // Offset numbers down by 2 pixels;

    }

    font['textAlign'] = 'center';
    IGVGraphics.fillText(ctx, "-log10(pvalue)", pixelWidth / 4, pixelHeight / 2, font, {
      rotate: {
        angle: -90
      }
    });
  };

  EqtlTrack.prototype.getFeatures = function (chr, bpStart, bpEnd) {
    var pValueField = this.pValueField;
    return this.featureSource.getFeatures(chr, bpStart, bpEnd).then(function (features) {
      features.forEach(function (f) {
        f.value = f[pValueField];
      });
      return features;
    });
  };

  EqtlTrack.prototype.draw = function (options) {
    var self = this,
        featureList = options.features,
        ctx = options.context,
        bpPerPixel = options.bpPerPixel,
        bpStart = options.bpStart,
        pixelWidth = options.pixelWidth,
        pixelHeight = options.pixelHeight,
        yScale = (self.dataRange.max - self.dataRange.min) / pixelHeight,
        selection = options.genomicState.selection; // Background

    if (this.background) IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
      'fillStyle': this.background
    });
    IGVGraphics.strokeLine(ctx, 0, pixelHeight - 1, pixelWidth, pixelHeight - 1, {
      'strokeStyle': this.divider
    });

    if (ctx) {
      var len = featureList.length;
      ctx.save(); // Draw in two passes, with "selected" eqtls drawn last

      drawEqtls(false);
      drawEqtls(true);
      ctx.restore();
    }

    function drawEqtls(drawSelected) {
      var radius = drawSelected ? 2 * self.dotSize : self.dotSize,
          eqtl,
          i,
          px,
          py,
          color,
          isSelected,
          snp,
          geneName,
          capped;

      for (i = 0; i < len; i++) {
        eqtl = featureList[i];
        px = Math.round(eqtl.position - bpStart + 0.5) / bpPerPixel;
        if (px < 0) continue;else if (px > pixelWidth) break;
        snp = eqtl.snp.toUpperCase();
        geneName = eqtl[self.geneField].toUpperCase();
        isSelected = selection && (selection.snp === snp || selection.gene === geneName);

        if (!drawSelected || isSelected) {
          // Add eqtl's gene to the selection if this is the selected snp.
          // TODO -- this should not be done here in the rendering code.
          if (selection && selection.snp === snp) {
            selection.addGene(geneName);
          }

          var mLogP = -Math.log(eqtl[self.pValueField]) / Math.LN10;

          if (mLogP >= self.dataRange.min) {
            if (mLogP > self.dataRange.max) {
              mLogP = self.dataRange.max;
              capped = true;
            } else {
              capped = false;
            }

            py = Math.max(0 + radius, pixelHeight - Math.round((mLogP - self.dataRange.min) / yScale));
            eqtl.px = px;
            eqtl.py = py;

            if (drawSelected && selection) {
              color = selection.colorForGene(geneName);
              IGVGraphics.setProperties(ctx, {
                fillStyle: color,
                strokeStyle: "black"
              });
            } else {
              color = capped ? "rgb(150, 150, 150)" : "rgb(180, 180, 180)";
              IGVGraphics.setProperties(ctx, {
                fillStyle: color,
                strokeStyle: color
              });
            }

            IGVGraphics.fillCircle(ctx, px, py, radius);
            IGVGraphics.strokeCircle(ctx, px, py, radius);
          }
        }
      }
    }
  };
  /**
   * Return "popup data" for feature @ genomic location.  Data is an array of key-value pairs
   */


  EqtlTrack.prototype.popupData = function (config) {
    var features = config.viewport.getCachedFeatures();
    if (!features || features.length === 0) return [];
    var genomicLocation = config.genomicLocation,
        xOffset = config.x,
        yOffset = config.y,
        referenceFrame = config.viewport.genomicState.referenceFrame,
        tolerance = 2 * this.dotSize * referenceFrame.bpPerPixel,
        dotSize = this.dotSize,
        tissue = this.name,
        popupData = [];
    features.forEach(function (feature) {
      if (feature.end >= genomicLocation - tolerance && feature.start <= genomicLocation + tolerance && feature.py - yOffset < 2 * dotSize) {
        if (popupData.length > 0) {
          popupData.push("<hr>");
        }

        popupData.push({
          name: "snp id",
          value: feature.snp
        }, {
          name: "gene id",
          value: feature.geneId
        }, {
          name: "gene name",
          value: feature.geneName
        }, {
          name: "p value",
          value: feature.pValue
        }, {
          name: "tissue",
          value: tissue
        });
      }
    });
    return popupData;
  };

  EqtlTrack.prototype.menuItemList = function () {
    var self = this,
        menuItems = [];
    menuItems.push(dataRangeMenuItem$1(this.trackView));
    menuItems.push({
      object: createCheckbox("Autoscale", self.autoscale),
      click: function click() {
        var $fa = $(this).find('i');
        self.autoscale = !self.autoscale;

        if (true === self.autoscale) {
          $fa.removeClass('igv-fa-check-hidden');
          $fa.addClass('igv-fa-check-visible');
        } else {
          $fa.removeClass('igv-fa-check-visible');
          $fa.addClass('igv-fa-check-hidden');
        }

        self.config.autoscale = self.autoscale;
        self.trackView.setDataRange(undefined, undefined, self.autoscale);
      }
    });
    return menuItems;
  };

  EqtlTrack.prototype.doAutoscale = function (featureList) {
    if (featureList.length > 0) {
      var values = featureList.map(function (eqtl) {
        return -Math.log(eqtl.value) / Math.LN10;
      });
      this.dataRange.max = IGVMath.percentile(values, this.autoscalePercentile);
    } else {
      // No features -- default
      var max = this.config.maxLogP || this.config.max;
      this.dataRange.max = max || 25;
    }

    return this.dataRange;
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var VARIANT = "VARIANT";
  var TRAIT = "TRAIT";
  /**
   * @param url - url to the webservice
   * @constructor
   */

  var T2DVariantSource = function T2DVariantSource(config) {
    this.config = config;
    this.url = config.url;
    this.trait = config.trait;
    this.dataset = config.dataset;
    this.pvalue = config.pvalue; // Hack for old service that is missing CORS headers
    // if (config.dataset === undefined && config.proxy === undefined) {
    // }

    if (config.valueThreshold === undefined) {
      config.valueThreshold = 5E-2;
    }

    if (config.dataset === undefined) {
      this.queryJson = config.queryJson || queryJsonV1;
      this.jsonToVariants = config.jsonToVariants || jsonToVariantsV1;
    } else {
      this.queryJson = config.queryJson || queryJsonV2;
      this.jsonToVariants = config.jsonToVariants || jsonToVariantsV2;
    }
  };
  /**
   * Required function fo all data source objects.  Fetches features for the
   * range requested and passes them on to the success function.  Usually this is
   * a function that renders the features on the canvas
   *
   * @param queryChr
   * @param bpStart
   * @param bpEnd
   */


  T2DVariantSource.prototype.getFeatures = function (chr, bpStart, bpEnd) {
    var self = this;
    var genome = this.genome;
    return new Promise(function (fulfill, reject) {
      if (self.cache && self.cache.chr === chr && self.cache.end > bpEnd && self.cache.start < bpStart) {
        fulfill(self.cache.featuresBetween(bpStart, bpEnd));
      } else {
        // Get a minimum 10mb window around the requested locus
        var window = Math.max(bpEnd - bpStart, 10000000) / 2,
            center = (bpEnd + bpStart) / 2,
            queryChr = chr.startsWith("chr") ? chr.substring(3) : chr,
            // Webservice uses "1,2,3..." convention
        queryStart = Math.max(0, center - window),
            queryEnd = center + window,
            queryURL = self.config.proxy ? self.config.proxy : self.url,
            body = self.queryJson(queryChr, queryStart, queryEnd, self.config);
        igvxhr.loadJson(queryURL, {
          sendData: body,
          withCredentials: self.config.withCredentials
        }).then(function (json) {
          var variants;

          if (json) {
            if (json.error_code) {
              //alert("Error querying trait " + self.trait + "  (error_code=" + json.error_code + ")");
              Alert.presentAlert("Error querying trait " + self.trait + "  (error_code=" + json.error_code + ")", undefined);
              fulfill(null);
            } else {
              variants = self.jsonToVariants(json, self.config);
              variants.sort(function (a, b) {
                return a.POS - b.POS;
              }); // TODO -- extract pvalue

              self.cache = new FeatureCache$1(chr, queryStart, queryEnd, variants);
              fulfill(variants);
            }
          } else {
            fulfill(null);
          }
        }).catch(reject);
      }
    });
  }; // Experimental linear index feature cache.


  var FeatureCache$1 = function FeatureCache(chr, start, end, features) {
    var i, bin, lastBin;
    this.chr = chr;
    this.start = start;
    this.end = end;
    this.binSize = (end - start) / 100;
    this.binIndeces = [0];
    this.features = features;
    lastBin = 0;

    for (i = 0; i < features.length; i++) {
      bin = Math.max(0, Math.floor((features[i].POS - this.start) / this.binSize));

      if (bin > lastBin) {
        this.binIndeces.push(i);
        lastBin = bin;
      }
    }
  };

  FeatureCache$1.prototype.featuresBetween = function (start, end) {
    var startBin = Math.max(0, Math.min(Math.floor((start - this.start) / this.binSize) - 1, this.binIndeces.length - 1)),
        endBin = Math.max(0, Math.min(Math.floor((end - this.start) / this.binSize), this.binIndeces.length - 1)),
        startIdx = this.binIndeces[startBin],
        endIdx = this.binIndeces[endBin];
    return this.features; //.slice(startIdx, endIdx);
  }; //
  //

  /**
   * Default json -> variant converter function.  Can be overriden.
   * Convert webservice json to an array of variants
   *
   * @param json
   * @param config
   * @returns {Array|*}
   */


  function jsonToVariantsV2(json, config) {
    var variants = [];
    json.variants.forEach(function (record) {
      var variant = {};
      record.forEach(function (object) {
        for (var property in object) {
          if (object.hasOwnProperty(property)) {
            if ("POS" === property) {
              variant.start = object[property] - 1;
            }

            variant[property] = object[property];
          }
        }
      }); // "unwind" the pvalue, then null the nested array to save memory

      variant.pvalue = variant[config.pvalue][config.dataset][config.trait];
      variant[config.pvalue] = undefined;
      variants.push(variant);
    });
    return variants;
  }

  function queryJsonV2(queryChr, queryStart, queryEnd, config) {
    var phenotype = config.trait,
        pvalue = config.pvalue,
        dataset = config.dataset,
        properties = {
      "cproperty": ["VAR_ID", "DBSNP_ID", "CHROM", "POS"],
      "orderBy": ["CHROM"],
      "dproperty": {},
      "pproperty": JSON.parse('{"' + pvalue + '": {"' + dataset + '": ["' + phenotype + '"]}}')
    },
        filters = [{
      "dataset_id": "x",
      "phenotype": "x",
      "operand": "CHROM",
      "operator": "EQ",
      "value": queryChr,
      "operand_type": "STRING"
    }, {
      "dataset_id": "x",
      "phenotype": "x",
      "operand": "POS",
      "operator": "GTE",
      "value": queryStart,
      "operand_type": "INTEGER"
    }, {
      "dataset_id": "x",
      "phenotype": "x",
      "operand": "POS",
      "operator": "LTE",
      "value": queryEnd,
      "operand_type": "INTEGER"
    }, {
      "dataset_id": dataset,
      "phenotype": phenotype,
      "operand": pvalue,
      "operator": "LT",
      "value": config.valueThreshold,
      "operand_type": "FLOAT"
    }],
        data = {
      "passback": "x",
      "entity": "variant",
      "properties": properties,
      "filters": filters
    };
    return JSON.stringify(data);
  }

  function queryJsonV1(queryChr, queryStart, queryEnd, config) {
    var type = config.url.includes("variant") ? VARIANT : TRAIT,
        pvalue = config.pvalue ? config.pvalue : "PVALUE",
        filters = [{
      "operand": "CHROM",
      "operator": "EQ",
      "value": queryChr,
      "filter_type": "STRING"
    }, {
      "operand": "POS",
      "operator": "GT",
      "value": queryStart,
      "filter_type": "FLOAT"
    }, {
      "operand": "POS",
      "operator": "LT",
      "value": queryEnd,
      "filter_type": "FLOAT"
    }, {
      "operand": pvalue,
      "operator": "LTE",
      "value": config.valueThreshold,
      "filter_type": "FLOAT"
    }],
        columns = type === TRAIT ? ["CHROM", "POS", "DBSNP_ID", "PVALUE", "ZSCORE"] : ["CHROM", "POS", pvalue, "DBSNP_ID"],
        data = {
      "user_group": "ui",
      "filters": filters,
      "columns": columns
    };
    if (type === TRAIT) data.trait = config.trait;
    return config.proxy ? "url=" + config.url + "&data=" + JSON.stringify(data) : JSON.stringify(data);
  }

  function jsonToVariantsV1(json, config) {
    json.variants.forEach(function (variant) {
      variant.chr = variant.CHROM;
      variant.start = variant.POS - 1;
    });
    return json.variants;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var DEFAULT_POPOVER_WINDOW = 100000000;
  var GWASTrack = extend(TrackBase, function (config, browser) {
    this.config = config;
    this.url = config.url;
    this.name = config.name;
    this.trait = config.trait;
    this.height = config.height || 100; // The preferred height

    this.minLogP = config.minLogP || 0;
    this.maxLogP = config.maxLogP || 15;
    this.background = config.background; // No default

    this.divider = config.divider || "rgb(225,225,225)";
    this.dotSize = config.dotSize || 4;
    this.popoverWindow = config.popoverWindow === undefined ? DEFAULT_POPOVER_WINDOW : config.popoverWindow;
    this.description = config.description; // might be null

    this.proxy = config.proxy; // might be null

    this.portalURL = config.portalURL ? config.portalURL : window.location.origin;
    this.variantURL = config.variantURL || "http://www.type2diabetesgenetics.org/variant/variantInfo/";
    this.traitURL = config.traitURL || "http://www.type2diabetesgenetics.org/trait/traitInfo/";
    var cs = config.colorScale || {
      thresholds: [5e-8, 5e-4, 0.5],
      colors: ["rgb(255,50,50)", "rgb(251,100,100)", "rgb(251,170,170)", "rgb(227,238,249)"]
    };
    this.pvalue = config.pvalue ? config.pvalue : "PVALUE";
    this.colorScale = new BinnedColorScale(cs); // An obvious hack -- the source should be passed in as an arbument

    if (config.format && "gtexgwas" === config.format.toLowerCase()) {
      this.featureSource = new FeatureSource(config, browser.genome);
    } else {
      this.featureSource = new T2DVariantSource(config, browser.genome);
    }
  });

  GWASTrack.prototype.getFeatures = function (chr, bpStart, bpEnd) {
    return this.featureSource.getFeatures(chr, bpStart, bpEnd);
  };

  GWASTrack.prototype.draw = function (options) {
    var track = this,
        featureList = options.features,
        ctx = options.context,
        bpPerPixel = options.bpPerPixel,
        bpStart = options.bpStart,
        pixelWidth = options.pixelWidth,
        pixelHeight = options.pixelHeight,
        bpEnd = bpStart + pixelWidth * bpPerPixel + 1,
        yScale = (track.maxLogP - track.minLogP) / pixelHeight,
        enablePopover = bpEnd - bpStart < DEFAULT_POPOVER_WINDOW;

    if (enablePopover) {
      this.po = [];
    } else {
      this.po = undefined;
    }

    if (this.background) IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
      'fillStyle': this.background
    });
    IGVGraphics.strokeLine(ctx, 0, pixelHeight - 1, pixelWidth, pixelHeight - 1, {
      'strokeStyle': this.divider
    });
    var variant, pos, len, xScale, px, py, color, pvalue, val;

    if (featureList) {
      len = featureList.length;

      for (var i = 0; i < len; i++) {
        variant = featureList[i];
        pos = variant.start; // TODO fixme

        if (pos < bpStart) continue;
        if (pos > bpEnd) break;
        pvalue = variant.pvalue || variant[track.pvalue];
        if (!pvalue) continue;
        color = track.colorScale.getColor(pvalue);
        val = -Math.log(pvalue) / 2.302585092994046;
        xScale = bpPerPixel;
        px = Math.round((pos - bpStart) / xScale);
        py = Math.max(track.dotSize, pixelHeight - Math.round((val - track.minLogP) / yScale));
        if (color) IGVGraphics.setProperties(ctx, {
          fillStyle: color,
          strokeStyle: "black"
        });
        IGVGraphics.fillCircle(ctx, px, py, track.dotSize); //canvas.strokeCircle(px, py, radius);

        if (enablePopover) track.po.push({
          x: px,
          y: py,
          feature: variant
        });
      }
    }
  };

  GWASTrack.prototype.paintAxis = function (ctx, pixelWidth, pixelHeight) {
    var track = this,
        yScale = (track.maxLogP - track.minLogP) / pixelHeight;
    var font = {
      'font': 'normal 10px Arial',
      'textAlign': 'right',
      'strokeStyle': "black"
    };
    IGVGraphics.fillRect(ctx, 0, 0, pixelWidth, pixelHeight, {
      'fillStyle': "rgb(255, 255, 255)"
    });

    for (var p = 2; p < track.maxLogP; p += 2) {
      var yp = pixelHeight - Math.round((p - track.minLogP) / yScale); // TODO: Dashes may not actually line up with correct scale. Ask Jim about this

      IGVGraphics.strokeLine(ctx, 45, yp - 2, 50, yp - 2, font); // Offset dashes up by 2 pixel

      IGVGraphics.fillText(ctx, p, 44, yp + 2, font); // Offset numbers down by 2 pixels;
    }

    font['textAlign'] = 'center';
    IGVGraphics.fillText(ctx, "-log10(pvalue)", pixelWidth / 2, pixelHeight / 2, font, {
      rotate: {
        angle: -90
      }
    });
  };

  GWASTrack.prototype.popupData = function (config) {
    var genomicLocation = config.genomicLocation,
        xOffset = config.x,
        yOffset = config.y,
        referenceFrame = config.viewport.genomicState.referenceFrame,
        i,
        len,
        p,
        dbSnp,
        url,
        data = [],
        chr,
        pos,
        pvalue;

    if (this.po) {
      for (i = 0, len = this.po.length; i < len; i++) {
        p = this.po[i];

        if (Math.abs(xOffset - p.x) < this.dotSize && Math.abs(yOffset - p.y) <= this.dotSize) {
          chr = p.feature.CHROM || p.feature.chr; // TODO fixme

          pos = p.feature.POS || p.feature.start; // TODO fixme

          pvalue = p.feature[this.pvalue] || p.feature.pvalue;
          dbSnp = p.feature.DBSNP_ID;

          if (dbSnp) {
            url = this.variantURL.startsWith("http") ? this.variantURL : this.portalURL + "/" + this.variantURL;
            data.push("<a target='_blank' href='" + url + (url.endsWith("/") ? "" : "/") + dbSnp + "' >" + dbSnp + "</a>");
          }

          data.push(chr + ":" + pos.toString());
          data.push({
            name: 'p-value',
            value: pvalue
          });

          if (p.feature.ZSCORE) {
            data.push({
              name: 'z-score',
              value: p.feature.ZSCORE
            });
          }

          if (dbSnp) {
            url = this.traitURL.startsWith("http") ? this.traitURL : this.portalURL + "/" + this.traitURL;
            data.push("<a target='_blank' href='" + url + (url.endsWith("/") ? "" : "/") + dbSnp + "'>" + "see all available statistics for this variant</a>");
          }

          if (i < len - 1) {
            data.push("<p/>");
          }
        }
      }
    } else {
      data.push("Popover not available at this resolution.");
    }

    return data;
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var RnaStructTrack = extend(TrackBase, function (config, browser) {
    TrackBase.call(this, config, browser); // Set defaults

    if (!config.height) {
      this.height = 300;
    }

    this.arcOrientation = false;
    this.theta = Math.PI / 2;

    if ("bp" === config.format) {
      this.featureSource = new RNAFeatureSource(config, browser.genome);
    } else {
      this.featureSource = new RNAFeatureSource(config, browser.genome);
    }
  });

  RnaStructTrack.prototype.getFeatures = function (chr, start, end) {
    return this.featureSource.getFeatures(chr, start, end);
  };

  RnaStructTrack.prototype.draw = function (options) {
    var self = this;
    var theta = Math.PI / 2;
    var ctx = options.context;
    var pixelWidth = options.pixelWidth;
    var pixelHeight = options.pixelHeight;
    var viewportWidth = options.viewportWidth;
    var bpPerPixel = options.bpPerPixel;
    var bpStart = options.bpStart;
    var xScale = bpPerPixel;
    var orienation = self.arcOrientation;
    IGVGraphics.fillRect(ctx, 0, options.pixelTop, pixelWidth, pixelHeight, {
      'fillStyle': "rgb(255, 255, 255)"
    });
    var featureList = options.features;

    if (featureList) {
      // Sort by score -- draw lowest scored features first
      sortByScore(featureList, 1);
      featureList.forEach(function (feature) {
        if (feature.startLeft) {
          var sl = Math.round((feature.startLeft - bpStart) / xScale);
          var sr = Math.round((feature.startRight - bpStart) / xScale);
          var el = Math.round((feature.endLeft - bpStart) / xScale);
          var er = Math.round((feature.endRight - bpStart) / xScale);
          ctx.fillStyle = feature.color;
          ctx.strokeStyle = feature.color;
          ctx.beginPath(); // First arc

          var x1 = (sl + er) / 2;
          var r1 = (er - sl) / 2;
          var y1 = self.height;
          var sa = Math.PI + (Math.PI / 2 - theta);
          var ea = 2 * Math.PI - (Math.PI / 2 - theta);

          if (orienation) {
            y1 = 0;
            ctx.arc(x1, y1, r1, ea, sa);
            ctx.lineTo(er, y1);
          } else {
            ctx.arc(x1, y1, r1, sa, ea);
            ctx.lineTo(el, y1);
          } // Second arc


          var x2 = (sr + el) / 2;
          var r2 = (el - sr) / 2;
          var y2 = y1; // Only for theta == pi/2

          if (orienation) {
            ctx.arc(x2, y2, r2, sa, ea, true);
            ctx.lineTo(el, y2);
          } else {
            ctx.arc(x2, y2, r2, ea, sa, true);
            ctx.lineTo(sl, y2);
          }

          ctx.stroke();
          ctx.fill();
          feature.drawState = {
            x1: x1,
            y1: y1,
            r1: r1,
            x2: x2,
            y2: y2,
            r2: r2,
            sa: sa,
            ea: ea
          };
        } else {
          var s = Math.round((feature.start - bpStart) / xScale);
          var e = Math.round((feature.end - bpStart) / xScale);
          ctx.strokeStyle = feature.color;
          ctx.beginPath(); // First arc

          var x = (s + e) / 2;
          var r = (e - s) / 2;
          var y = self.height;

          var _sa = Math.PI + (Math.PI / 2 - theta);

          var _ea = 2 * Math.PI - (Math.PI / 2 - theta);

          if (orienation) {
            y = 0;
            ctx.arc(x, y, r, _ea, _sa);
          } else {
            ctx.arc(x, y, r, _sa, _ea);
          }

          ctx.stroke();
          feature.drawState = {
            x1: x,
            y1: y,
            r1: r,
            sa: _sa,
            ea: _ea
          };
        }
      });
    }
  };

  RnaStructTrack.prototype.clickedFeatures = function (clickState) {
    var features = TrackBase.prototype.clickedFeatures.call(this, clickState);
    var clicked = []; // Sort by score in descending order   (opposite order than drawn)

    sortByScore(features, -1);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = features[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var f = _step.value;
        var ds = f.drawState; // Distance from arc radius, or outer arc for type ".bp"

        var dx1 = clickState.canvasX - ds.x1;
        var dy1 = clickState.canvasY - ds.y1;
        var d1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);
        var outerLim = ds.r1 + 3;
        var d2 = void 0;
        var innerLim = void 0;

        if (ds.x2 === undefined) {
          d2 = d1;
          innerLim = ds.r1 - 3;
        } else {
          var dx2 = clickState.canvasX - ds.x2;
          var dy2 = clickState.canvasY - ds.y2;
          d2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);
          innerLim = ds.r2 - 3;
        } // Between outer and inner arcs, with some tolerance


        if (d1 < outerLim && d2 > innerLim) {
          clicked.push(f);
          break;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return clicked;
  };

  RnaStructTrack.prototype.popupData = function (clickState, features) {
    // We use the featureCache property rather than method to avoid async load.  If the
    // feature is not already loaded this won't work,  but the user wouldn't be mousing over it either.
    if (!features) features = this.clickedFeatures(clickState);

    if (features && features.length > 0) {
      return TrackBase.extractPopupData(features[0], this.getGenomeId());
    }
  };

  RnaStructTrack.prototype.menuItemList = function () {
    var self = this;
    return [{
      name: "Toggle arc direction",
      click: function click() {
        self.arcOrientation = !self.arcOrientation;
        self.trackView.repaintViews();
      }
    }];
  };
  /**
   * Return the current state of the track.  Used to create sessions and bookmarks.
   *
   * @returns {*|{}}
   */


  RnaStructTrack.prototype.getState = function () {
    var config = this._super.getState.call(this);

    config.arcOrientation = this.arcOrientation;
    config.thickness = this.thickness;
    config.color = this.color;
    return config;
  };

  function sortByScore(featureList, direction) {
    featureList.sort(function (a, b) {
      var s1 = a.score === undefined ? -Number.MAX_VALUE : a.score;
      var s2 = b.score === undefined ? -Number.MAX_VALUE : b.score;
      var d = direction === undefined ? 1 : direction;
      return d * (s1 - s2);
    });
  }

  function RNAFeatureSource(config, genome) {
    this.config = config;
    this.genome = genome;
  }

  RNAFeatureSource.prototype.getFeatures = function (chr, start, end) {
    var self = this;
    var genome = this.genome;

    if (!this.featureCache) {
      var options = buildOptions(this.config);
      return igvxhr.loadString(self.config.url, options).then(function (data) {
        self.featureCache = new FeatureCache(parseBP(data), genome);
        return self.featureCache.queryFeatures(chr, start, end);
      });
    } else {
      return Promise.resolve(self.featureCache.queryFeatures(chr, start, end));
    }

    function parseBP(data) {
      if (!data) return null;
      var dataWrapper = getDataWrapper(data);
      var header = true;
      var line;
      var colors = [];
      var descriptors = [];
      var features = [];

      while (line = dataWrapper.nextLine()) {
        var tokens = line.split('\t');

        if (header && line.startsWith("color:")) {
          var color = "rgb(" + tokens[1] + "," + tokens[2] + "," + tokens[3] + ")";
          colors.push(color);

          if (tokens.length > 4) {
            descriptors.push(tokens[4]);
          } // TODO - use label

        } else {
          header = false;
          var _chr = tokens[0];
          var startLeftNuc = Number.parseInt(tokens[1]) - 1;
          var startRightNuc = Number.parseInt(tokens[2]) - 1;
          var endLeftNuc = Number.parseInt(tokens[3]);
          var endRightNuc = Number.parseInt(tokens[4]);
          var colorIdx = Number.parseInt(tokens[5]);
          var _color = colors[colorIdx];
          var feature = void 0;

          if (startLeftNuc <= endRightNuc) {
            feature = {
              chr: _chr,
              startLeft: Math.min(startLeftNuc, startRightNuc),
              startRight: Math.max(startLeftNuc, startRightNuc),
              endLeft: Math.min(endLeftNuc, endRightNuc),
              endRight: Math.max(endLeftNuc, endRightNuc),
              color: _color,
              score: colorIdx
            };
          } else {
            feature = {
              chr: _chr,
              startLeft: Math.min(endLeftNuc, endRightNuc),
              startRight: Math.max(endLeftNuc, endRightNuc),
              endLeft: Math.min(startLeftNuc, startRightNuc),
              endRight: Math.max(startLeftNuc, startRightNuc),
              color: _color,
              score: colorIdx
            };
          }

          feature.start = feature.startLeft;
          feature.end = feature.endRight;

          if (descriptors.length > colorIdx) {
            feature.description = descriptors[colorIdx];
          }

          features.push(feature);
        }
      }

      return features;
    }
  };

  var TrackFactory = {
    'sequence': function sequence(config, browser) {
      return new SequenceTrack(config, browser);
    },
    'feature': function feature(config, browser) {
      return new FeatureTrack(config, browser);
    },
    'seg': function seg(config, browser) {
      return new SegTrack(config, browser);
    },
    'wig': function wig(config, browser) {
      return new WigTrack(config, browser);
    },
    'merged': function merged(config, browser) {
      return new MergedTrack(config, browser);
    },
    'alignment': function alignment(config, browser) {
      return new BAMTrack(config, browser);
    },
    'interaction': function interaction(config, browser) {
      return new InteractionTrack(config, browser);
    },
    'variant': function variant(config, browser) {
      return new VariantTrack(config, browser);
    },
    'eqtl': function eqtl(config, browser) {
      return new EqtlTrack(config, browser);
    },
    'gwas': function gwas(config, browser) {
      return new GWASTrack(config, browser);
    },
    'arc': function arc(config, browser) {
      return new RnaStructTrack(config, browser);
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var defaultHighlightColor = "rgba(68, 134, 247, 0.25)";

  var ROI = function ROI(config, genome) {
    this.config = config;
    this.name = config.name;
    this.roiSource = new FeatureSource(config, genome);
    this.color = config.color || defaultHighlightColor;
  };

  ROI.prototype.getFeatures = function (chr, start, end) {
    return this.roiSource.getFeatures(chr, start, end);
  };

  ROI.prototype.draw = function (drawConfiguration) {
    var endBP, region, coord, regions;
    regions = drawConfiguration.features;

    if (!regions) {
      return;
    }

    endBP = drawConfiguration.bpStart + (drawConfiguration.pixelWidth * drawConfiguration.bpPerPixel + 1);

    for (var i = 0, len = regions.length; i < len; i++) {
      region = regions[i];

      if (region.end < drawConfiguration.bpStart) {
        continue;
      }

      if (region.start > endBP) {
        break;
      }

      coord = coordinates(region, drawConfiguration.bpStart, drawConfiguration.bpPerPixel);
      IGVGraphics.fillRect(drawConfiguration.context, coord.x, 0, coord.width, drawConfiguration.pixelHeight, {
        fillStyle: this.color
      });
    }
  };

  function coordinates(region, startBP, bpp) {
    var ss, ee, width;
    ss = Math.round((region.start - startBP) / bpp);
    ee = Math.round((region.end - startBP) / bpp);
    width = ee - ss;

    if (width < 3) {
      width = 3;
      ss -= 1;
    }

    return {
      x: ss,
      width: width
    };
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var GtexSelection = function GtexSelection(gene, snp) {
    this.geneColors = {};
    this.gene = null;
    this.snp = null;
    this.genesCount = 0;

    if (gene) {
      this.gene = gene.toUpperCase();
      this.geneColors[this.gene] = brewer[this.genesCount++];
    }

    if (snp) {
      this.snp = snp.toUpperCase();
    }
  };

  GtexSelection.prototype.addGene = function (geneName) {
    if (!this.geneColors[geneName.toUpperCase()]) {
      this.geneColors[geneName.toUpperCase()] = brewer[this.genesCount++];
    }
  };

  GtexSelection.prototype.colorForGene = function (geneName) {
    return this.geneColors[geneName.toUpperCase()];
  };

  var brewer = new Array(); // Set +!

  brewer.push("rgb(228,26,28)");
  brewer.push("rgb(55,126,184)");
  brewer.push("rgb(77,175,74)");
  brewer.push("rgb(166,86,40)");
  brewer.push("rgb(152,78,163)");
  brewer.push("rgb(255,127,0)");
  brewer.push("rgb(247,129,191)");
  brewer.push("rgb(153,153,153)");
  brewer.push("rgb(255,255,51)"); // #Set 2

  brewer.push("rgb(102, 194, 165");
  brewer.push("rgb(252, 141, 98");
  brewer.push("rgb(141, 160, 203");
  brewer.push("rgb(231, 138, 195");
  brewer.push("rgb(166, 216, 84");
  brewer.push("rgb(255, 217, 47");
  brewer.push("rgb(229, 196, 148");
  brewer.push("rgb(179, 179, 179"); //#Set 3

  brewer.push("rgb( 141, 211, 199");
  brewer.push("rgb(255, 255, 179");
  brewer.push("rgb(190, 186, 218");
  brewer.push("rgb(251, 128, 114");
  brewer.push("rgb(128, 177, 211");
  brewer.push("rgb(253, 180, 98");
  brewer.push("rgb(179, 222, 105");
  brewer.push("rgb(252, 205, 229");
  brewer.push("rgb(217, 217, 217");
  brewer.push("rgb(188, 128, 189");
  brewer.push("rgb(204, 235, 197");
  brewer.push("rgb(255, 237, 111");

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  /**
   * Minimal support for the legacy IGV desktop session format.
   */
  var XMLSession = function XMLSession(xmlString, knownGenomes) {
    var self = this,
        parser,
        xmlDoc,
        elements;
    parser = new DOMParser();
    xmlDoc = parser.parseFromString(xmlString, "text/xml");
    processRootNode();
    elements = xmlDoc.getElementsByTagName("Resource");
    self.tracks = [];
    var resourceMap = {};
    Array.from(elements).forEach(function (r, idx) {
      var res = {
        url: r.getAttribute("path"),
        indexURL: r.getAttribute("index"),
        order: idx
      };
      self.tracks.push(res);
      resourceMap[res.url] = res;
    }); // Check for optional Track section

    elements = xmlDoc.getElementsByTagName("Track");

    if (elements && elements.length > 0) {
      // Track order is defined by elements, reset
      self.tracks = [];
      Array.from(elements).forEach(function (track) {
        var id, res, subtracks, mergedTrack;
        subtracks = track.getElementsByTagName("Track");

        if (subtracks && subtracks.length > 0) {
          mergedTrack = {
            type: 'merged',
            tracks: []
          };
          extractTrackAttributes(track, mergedTrack);
          self.tracks.push(mergedTrack);
          Array.from(subtracks).forEach(function (t) {
            t.processed = true;
            var id, res;
            id = t.getAttribute("id");
            res = resourceMap[id];

            if (res) {
              mergedTrack.tracks.push(res);
              extractTrackAttributes(t, res);
              res.autoscale = false;
              mergedTrack.height = res.height; //
            }
          });
        } else if (!track.processed) {
          id = track.getAttribute("id");
          res = resourceMap[id];

          if (res) {
            self.tracks.push(res);
            extractTrackAttributes(track, res);
          }
        }
      });
    }

    function extractTrackAttributes(track, config) {
      var color, height, autoScale, altColor, dataRange, dataRangeCltn, windowFunction, visWindow, indexed, autoscaleGroup;
      config.name = track.getAttribute("name");
      color = track.getAttribute("color");

      if (color) {
        config.color = "rgb(" + color + ")";
      }

      altColor = track.getAttribute("altColor");

      if (color) {
        config.altColor = "rgb(" + altColor + ")";
      }

      height = track.getAttribute("height");

      if (height) {
        config.height = parseInt(height);
      }

      autoScale = track.getAttribute("autoScale");

      if (autoScale) {
        config.autoScale = autoScale === "true";
      }

      autoscaleGroup = track.getAttribute("autoscaleGroup");

      if (autoscaleGroup) {
        config.autoscaleGroup = autoscaleGroup;
      }

      windowFunction = track.getAttribute("windowFunction");

      if (windowFunction) {
        config.windowFunction = windowFunction;
      }

      visWindow = track.getAttribute("visibilityWindow") || track.getAttribute("featureVisibilityWindow");

      if (visWindow) {
        config.visibilityWindow = visWindow;
      }

      indexed = track.getAttribute("indexed");

      if (indexed) {
        config.indexed = indexed === "true";
      }

      dataRangeCltn = track.getElementsByTagName("DataRange");

      if (dataRangeCltn.length > 0) {
        dataRange = dataRangeCltn.item(0);

        if (!autoScale) {
          config.min = parseInt(dataRange.getAttribute("minimum"));
          config.max = parseInt(dataRange.getAttribute("maximum"));
        }

        config.logScale = dataRange.getAttribute("type") === "LOG";
      }
    }

    function processRootNode() {
      var elements, session, genome, locus, ucscID;
      elements = xmlDoc.getElementsByTagName("Session");

      if (!elements || elements.length === 0) ;

      session = elements.item(0);
      genome = session.getAttribute("genome");
      locus = session.getAttribute("locus");
      ucscID = session.getAttribute("ucscID");

      if (knownGenomes && knownGenomes.hasOwnProperty(genome)) {
        self.genome = genome;
      } else {
        self.reference = {
          fastaURL: genome
        };

        if (ucscID) {
          self.reference.id = ucscID;
        }
      }

      if (locus) {
        self.locus = locus;
      }
    }
  };

  var SampleInformation = function SampleInformation() {
    this.attributes = {};
    this.plinkLoaded = false;
  };

  SampleInformation.prototype.loadPlinkFile =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(url, config) {
      var options, data, lines, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line, line_arr;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!config) config = {};
              options = buildOptions(config); // Add oauth token, if any

              _context.next = 4;
              return igvxhr.loadString(url, options);

            case 4:
              data = _context.sent;
              lines = splitLines(data);
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context.prev = 9;

              for (_iterator = lines[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                line = _step.value;
                line_arr = line.split(' ');
                this.attributes[line_arr[1]] = {
                  familyId: line_arr[0],
                  fatherId: line_arr[2],
                  motherId: line_arr[3],
                  sex: line_arr[4],
                  phenotype: line_arr[5]
                };
              }

              _context.next = 17;
              break;

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](9);
              _didIteratorError = true;
              _iteratorError = _context.t0;

            case 17:
              _context.prev = 17;
              _context.prev = 18;

              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }

            case 20:
              _context.prev = 20;

              if (!_didIteratorError) {
                _context.next = 23;
                break;
              }

              throw _iteratorError;

            case 23:
              return _context.finish(20);

            case 24:
              return _context.finish(17);

            case 25:
              this.plinkLoaded = true;
              return _context.abrupt("return", this);

            case 27:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this, [[9, 13, 17, 25], [18,, 20, 24]]);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
  /**
   * Return the attributes for the given sample as a map-like object (key-value pairs)
   * @param sample
   */


  SampleInformation.prototype.getAttributes = function (sample) {
    return this.attributes[sample];
  };

  SampleInformation.prototype.getAttributeNames = function () {
    if (this.hasAttributes()) {
      return Object.keys(this.attributes[Object.keys(this.attributes)[0]]);
    } else return [];
  };

  SampleInformation.prototype.hasAttributes = function () {
    return Object.keys(this.attributes).length > 0;
  };

  function loadPlinkFile(url, config) {
    var si = new SampleInformation();
    return si.loadPlinkFile(url, config);
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of panel software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and panel permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var IdeoPanel = function IdeoPanel($parent, panelWidth, browser) {
    this.browser = browser;
    this.$parent = $parent;
    this.buildPanels($parent, panelWidth);
  };

  IdeoPanel.prototype.renderSVGContext = function (context, offset) {
    var self = this;
    this.panels.forEach(function (panel, i) {
      var bbox = panel.$ideogram.get(0).getBoundingClientRect();
      var dx = offset.deltaX + i * (panel.$canvas.width() + context.multiLocusGap);
      var dy = offset.deltaY;
      context.addTrackGroupWithTranslationAndClipRect('ideogram', dx, dy, bbox.width, bbox.height, 0);
      context.save();
      var paintConfig = {
        ctx: context,
        width: panel.$canvas.width(),
        height: panel.$canvas.height(),
        genome: self.browser.genome,
        referenceFrame: panel.genomicState.referenceFrame,
        ideogramWidth: panel.$ideogram.width()
      };
      repaintContext(paintConfig);
      context.restore();
    });
  };

  IdeoPanel.prototype.buildPanels = function ($parent, width) {
    var self = this;
    $parent.append($('<div class="igv-ideogram-shim"></div>'));
    this.panels = this.browser.genomicStateList.map(function (genomicState) {
      return panelWithGenomicState.call(self, $parent, genomicState, width);
    });
  };

  IdeoPanel.prototype.setWidth = function (width, doRepaint) {
    this.panels.forEach(function (panel) {
      panel.$ideogram.outerWidth(width);
      setupCanvasSize(panel);
      panel.ideograms = {};
    });

    if (true === doRepaint) {
      this.repaint();
    }
  };

  IdeoPanel.prototype.resize = function () {
    this.setWidth(this.browser.viewportContainerWidth() / this.browser.genomicStateList.length, true);
  };

  IdeoPanel.prototype.repaint = function () {
    var self = this;
    this.panels.forEach(function (panel) {
      var config = {
        ctx: panel.ctx,
        width: panel.$canvas.width(),
        height: panel.$canvas.height(),
        genome: self.browser.genome,
        referenceFrame: panel.genomicState.referenceFrame,
        ideogramWidth: panel.$ideogram.width()
      };
      repaintContext(config);
    });
  };

  IdeoPanel.prototype.discardPanels = function () {
    this.panels.forEach(function (panel) {
      panel.$ideogram.remove();
    });
    this.panels = undefined;
  };

  IdeoPanel.prototype.addPanelWithGenomicStateAtIndex = function (genomicState, index, width) {
    var panel, $detached;
    panel = panelWithGenomicState.call(this, this.$parent, genomicState, width);

    if (index === this.panels.length) {
      this.panels.push(panel);
    } else {
      this.panels.splice(index, 0, panel); // The viewport constructor always appends. Reorder here.

      $detached = panel.$ideogram.detach();
      $detached.insertAfter(this.panels[index - 1].$ideogram);
    }

    assessBorders(this.panels);
  };

  IdeoPanel.prototype.removePanelWithLocusIndex = function (index) {
    this.panels[index].$ideogram.remove();
    this.panels.splice(index, 1);
    assessBorders(this.panels);
  };

  IdeoPanel.prototype.repaintPanelWithGenomicState = function (genomicState) {
    var panel = this.panels[this.browser.genomicStateList.indexOf(genomicState)];
    var config = {
      ctx: panel.ctx,
      width: panel.$canvas.width(),
      height: panel.$canvas.height(),
      genome: this.browser.genome,
      referenceFrame: panel.genomicState.referenceFrame,
      ideogramWidth: panel.$ideogram.width()
    };
    repaintContext(config);
  };

  function panelWithGenomicState($parent, genomicState, width) {
    var panel;
    var browser = this.browser;
    panel = {};
    panel.genomicState = genomicState;
    panel.$ideogram = $('<div class="igv-ideogram-content"></div>');
    $parent.append(panel.$ideogram);
    addBorder(panel.$ideogram, browser.genomicStateList.indexOf(genomicState), browser.genomicStateList.length);
    panel.$ideogram.outerWidth(width);
    panel.$canvas = $('<canvas>');
    panel.$ideogram.append(panel.$canvas);
    setupCanvasSize(panel);
    panel.ideograms = {};
    panel.$ideogram.on('click', function (e) {
      clickHandler(browser, panel, e);
    });
    return panel;
  }

  function addBorder($ideogram, index, length) {
    if (index < length && 1 + index !== length) {
      $ideogram.addClass('igv-ideogram-content-border-right');
    } else {
      $ideogram.removeClass('igv-ideogram-content-border-right');
    }
  }

  function assessBorders(panels) {
    panels.forEach(function (panel, p) {
      if (1 === panels.length || 1 + p === panels.length) {
        panel.$ideogram.removeClass('igv-ideogram-content-border-right');
      } else {
        panel.$ideogram.addClass('igv-ideogram-content-border-right');
      }
    });
  }

  function repaintContext(_ref) {
    var ctx = _ref.ctx,
        width = _ref.width,
        height = _ref.height,
        genome = _ref.genome,
        referenceFrame = _ref.referenceFrame,
        ideogramWidth = _ref.ideogramWidth;

    if (!(width > 0 && height > 0)) {
      return;
    }

    if (!(genome && referenceFrame && genome.getChromosome(referenceFrame.chrName) && height > 0)) {
      return;
    }

    var stainColors = [];
    IGVGraphics.fillRect(ctx, 0, 0, width, height, {
      fillStyle: IGVColor.greyScale(255)
    });

    if (referenceFrame.chrName.toLowerCase() === "all") {
      return;
    }

    drawIdeogram({
      ctx: ctx,
      referenceFrame: referenceFrame,
      genome: genome,
      width: width,
      height: height,
      stainColors: stainColors
    });
    var chromosome = genome.getChromosome(referenceFrame.chrName);
    var widthBP = Math.round(referenceFrame.bpPerPixel * ideogramWidth);
    var xBP = referenceFrame.start; // Total chromosome length can be > chromosome.bpLength for partial fastas.

    var chrLength = chromosome.bpLength;
    var cytobands = genome.getCytobands(referenceFrame.chrName);

    if (cytobands) {
      chrLength = Math.max(chrLength, cytobands[cytobands.length - 1].end);
    }

    if (widthBP < chrLength) {
      var percentWidth = widthBP / chrLength;
      var percentX = xBP / chrLength;
      var x = Math.floor(percentX * width);
      var ww = Math.floor(percentWidth * width);
      x = Math.max(0, x);
      x = Math.min(width - ww, x); // Push current context

      ctx.save(); // Draw red box

      ctx.strokeStyle = "red";
      ctx.lineWidth = ww < 2 ? 1 : 2;
      var xx = x + ctx.lineWidth / 2;
      ww = ww < 2 ? 1 : ww - ctx.lineWidth;
      var yy = ctx.lineWidth / 2;
      var hh = height - ctx.lineWidth;
      ctx.strokeRect(xx, yy, ww, hh); // Pop current context

      ctx.restore();
    }
  }

  function drawIdeogram(_ref2) {
    var ctx = _ref2.ctx,
        referenceFrame = _ref2.referenceFrame,
        genome = _ref2.genome,
        width = _ref2.width,
        height = _ref2.height,
        stainColors = _ref2.stainColors;
    var shim, shim2, ideogramTop, cytobands, cytoband, center, xC, yC, chrLength, scale, start, end, i;
    shim = 1;
    shim2 = 0.5 * shim;
    ideogramTop = 0;

    if (undefined === genome) {
      return;
    }

    IGVGraphics.fillRect(ctx, 0, 0, width, height, {
      fillStyle: IGVColor.greyScale(255)
    });
    cytobands = genome.getCytobands(referenceFrame.chrName);

    if (cytobands) {
      center = ideogramTop + height / 2;
      xC = [];
      yC = [];

      if (0 === cytobands.length) {
        return;
      }

      chrLength = cytobands[cytobands.length - 1].end;
      scale = width / chrLength; // round rect clipping path

      ctx.beginPath();
      IGVGraphics.roundRect(ctx, shim2, shim2 + ideogramTop, width - 2 * shim2, height - 2 * shim2, (height - 2 * shim2) / 2, 0, 1);
      ctx.clip();

      for (i = 0; i < cytobands.length; i++) {
        cytoband = cytobands[i];
        start = scale * cytoband.start;
        end = scale * cytoband.end;

        if (cytoband.type === 'c') {
          if (cytoband.name.charAt(0) === 'p') {
            xC[0] = start;
            yC[0] = height + ideogramTop;
            xC[1] = start;
            yC[1] = ideogramTop;
            xC[2] = end;
            yC[2] = center;
          } else {
            xC[0] = end;
            yC[0] = height + ideogramTop;
            xC[1] = end;
            yC[1] = ideogramTop;
            xC[2] = start;
            yC[2] = center;
          }

          ctx.fillStyle = "rgb(150, 0, 0)";
          ctx.strokeStyle = "rgb(150, 0, 0)";
          IGVGraphics.polygon(ctx, xC, yC, 1, 0);
        } else {
          ctx.fillStyle = getCytobandColor(stainColors, cytoband);
          IGVGraphics.fillRect(ctx, start, shim + ideogramTop, end - start, height - 2 * shim);
        }
      }
    } // round rect border


    ctx.strokeStyle = IGVColor.greyScale(41);
    IGVGraphics.roundRect(ctx, shim2, shim2 + ideogramTop, width - 2 * shim2, height - 2 * shim2, (height - 2 * shim2) / 2, 0, 1);
  }

  function getCytobandColor(colors, data) {
    if (data.type === 'c') {
      // centermere: "acen"
      return "rgb(150, 10, 10)";
    } else {
      var stain = data.stain; // + 4;

      var shade = 230;

      if (data.type === 'p') {
        shade = Math.floor(230 - stain / 100.0 * 230);
      }

      var c = colors[shade];

      if (!c) {
        c = "rgb(" + shade + "," + shade + "," + shade + ")";
        colors[shade] = c;
      }

      return c;
    }
  }

  function setupCanvasSize(panel) {
    var canvas = panel.$canvas.get(0);
    var w = +panel.$ideogram.width();
    var h = +panel.$ideogram.height();
    canvas.style.width = w + "px";
    canvas.style.height = h + "px";
    canvas.width = window.devicePixelRatio * w;
    canvas.height = window.devicePixelRatio * h;
    panel.ctx = canvas.getContext("2d");
    panel.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
  }

  function clickHandler(browser, panel, e) {
    var xy = translateMouseCoordinates(e, panel.$ideogram.get(0));
    var referenceFrame = panel.genomicState.referenceFrame;
    var locusLength = referenceFrame.bpPerPixel * panel.$ideogram.width();
    var chr = browser.genome.getChromosome(referenceFrame.chrName);
    var chrCoveragePercentage = locusLength / chr.bpLength;
    var xPercentage = xy.x / panel.$ideogram.width();

    if (xPercentage - chrCoveragePercentage / 2.0 < 0) {
      xPercentage = chrCoveragePercentage / 2.0;
    }

    if (xPercentage + chrCoveragePercentage / 2.0 > 1.0) {
      xPercentage = 1.0 - chrCoveragePercentage / 2.0;
    }

    var ss = Math.round((xPercentage - chrCoveragePercentage / 2.0) * chr.bpLength);
    var ee = Math.round((xPercentage + chrCoveragePercentage / 2.0) * chr.bpLength);
    referenceFrame.start = Math.round((xPercentage - chrCoveragePercentage / 2.0) * chr.bpLength);
    referenceFrame.bpPerPixel = (ee - ss) / panel.$ideogram.width();
    browser.updateLocusSearchWidget(panel.genomicState);
    browser.updateViews();
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var ReferenceFrame = function ReferenceFrame(genome, chrName, start, end, bpPerPixel) {
    this.genome = genome;
    this.chrName = chrName;
    this.start = start;
    this.initialEnd = end; // TODO WARNING THIS IS NOT UPDATED !!!

    this.bpPerPixel = bpPerPixel;
  };

  ReferenceFrame.prototype.calculateEnd = function (pixels) {
    return this.start + this.bpPerPixel * pixels;
  };

  ReferenceFrame.prototype.calculateBPP = function (end, pixels) {
    return (end - this.start) / pixels;
  };

  ReferenceFrame.prototype.set = function (json) {
    this.chrName = json.chrName;
    this.start = json.start;
    this.bpPerPixel = json.bpPerPixel;
  };

  ReferenceFrame.prototype.toPixels = function (bp) {
    return bp / this.bpPerPixel;
  };

  ReferenceFrame.prototype.toBP = function (pixels) {
    return this.bpPerPixel * pixels;
  };

  ReferenceFrame.prototype.shiftPixels = function (pixels, viewportWidth) {
    this.start += pixels * this.bpPerPixel;
    this.clamp(viewportWidth);
  };

  ReferenceFrame.prototype.clamp = function (viewportWidth) {
    // clamp left
    var min = this.genome.getChromosome(this.chrName).bpStart || 0;
    this.start = Math.max(min, this.start); // clamp right

    if (viewportWidth) {
      var chromosome = this.genome.getChromosome(this.chrName);
      var maxEnd = chromosome.bpLength;
      var maxStart = maxEnd - viewportWidth * this.bpPerPixel;

      if (this.start > maxStart) {
        this.start = maxStart;
      }
    }
  };

  ReferenceFrame.prototype.getChromosome = function () {
    return this.genome.getChromosome(this.chrName);
  };

  ReferenceFrame.prototype.showLocus = function (pixels) {
    if ('all' === this.chrName.toLowerCase()) {
      return this.chrName.toLowerCase();
    } else {
      var ss = numberFormatter(Math.floor(this.start) + 1);
      var ee = numberFormatter(Math.round(this.start + this.bpPerPixel * pixels));
      return this.chrName + ':' + ss + '-' + ee;
    }
  };

  ReferenceFrame.prototype.description = function () {
    return "ReferenceFrame " + this.chrName + " " + numberFormatter(Math.floor(this.start)) + " bpp " + this.bpPerPixel;
  };

  var Browser = function Browser(options, trackContainerDiv) {
    this.guid = guid();
    this.namespace = '.browser_' + this.guid;
    this.config = options;
    this.$root = $('<div class="igv-root-div">');
    initialize.call(this, options);
    this.trackContainerDiv = trackContainerDiv;
    this.trackViews = [];
    this.trackLabelsVisible = true;
    this.isCenterGuideVisible = false;
    this.cursorGuideVisible = false;
    this.featureDB = {}; // Hash of name -> feature, used for search function.

    this.constants = {
      dragThreshold: 3,
      scrollThreshold: 5,
      defaultColor: "rgb(0,0,150)",
      doubleClickDelay: options.doubleClickDelay || 500
    }; // Map of event name -> [ handlerFn, ... ]

    this.eventHandlers = {};
    this.$spinner = $('<div class="igv-track-container-spinner">');
    this.$spinner.append(createIcon("spinner"));
    $(this.trackContainerDiv).append(this.$spinner);
    this.stopSpinner();
    addMouseHandlers$1.call(this);
  };

  function initialize(options) {
    var genomeId;
    this.flanking = options.flanking;
    this.crossDomainProxy = options.crossDomainProxy;
    this.formats = options.formats;
    this.trackDefaults = options.trackDefaults;

    if (options.search) {
      this.searchConfig = {
        type: "json",
        url: options.search.url,
        coords: options.search.coords === undefined ? 1 : options.search.coords,
        chromosomeField: options.search.chromosomeField || "chromosome",
        startField: options.search.startField || "start",
        endField: options.search.endField || "end",
        geneField: options.search.geneField || "gene",
        snpField: options.search.snpField || "snp",
        resultsField: options.search.resultsField
      };
    } else {
      if (options.reference && options.reference.id) {
        genomeId = options.reference.id;
      } else if (options.genome) {
        genomeId = options.genome;
      } else {
        genomeId = "hg19";
      }

      this.searchConfig = {
        // Legacy support -- deprecated
        type: "plain",
        url: 'https://igv.org/genomes/locus.php?genome=$GENOME$&name=$FEATURE$',
        coords: 0,
        chromosomeField: "chromosome",
        startField: "start",
        endField: "end",
        geneField: "gene",
        snpField: "snp"
      };
    }
  }

  Browser.prototype.startSpinner = function () {
    var $spinner = this.$spinner;

    if ($spinner) {
      $spinner.addClass("igv-fa5-spin");
      $spinner.show();
    }
  };

  Browser.prototype.stopSpinner = function () {
    var $spinner = this.$spinner;

    if ($spinner) {
      $spinner.hide();
      $spinner.removeClass("igv-fa5-spin");
    }
  };

  Browser.prototype.isMultiLocusMode = function () {
    return this.genomicStateList && this.genomicStateList.length > 1;
  };

  Browser.prototype.isMultiLocusWholeGenomeView = function () {
    if (undefined === this.genomicStateList || 1 === this.genomicStateList.length) {
      return false;
    }

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.genomicStateList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var genomicState = _step.value;
        var chromosomeName = genomicState.referenceFrame.chrName.toLowerCase();

        if ('all' === chromosomeName) {
          return true;
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return false;
  };

  Browser.prototype.toSVG = function () {
    var trackContainerBBox = this.trackContainerDiv.getBoundingClientRect();
    var anyViewportContainerBBox = this.trackViews[0].$viewportContainer.get(0).getBoundingClientRect();
    var ideoPanelBBox = this.ideoPanel ? this.ideoPanel.panels[0].$ideogram.get(0).getBoundingClientRect() : {
      height: 0,
      width: 0
    }; // multi-locus inter-panel gap

    var multiLocusGap = 8;
    var w = trackContainerBBox.width + (this.genomicStateList.length - 1) * multiLocusGap;
    var h_output = trackContainerBBox.height + ideoPanelBBox.height;
    var h_render = 8000;
    var svgContext = new C2S({
      width: w,
      height: h_render,
      backdropColor: 'white',
      multiLocusGap: multiLocusGap,
      viewbox: {
        x: 0,
        y: 0,
        width: w,
        height: h_render
      }
    });
    var dx = anyViewportContainerBBox.x - trackContainerBBox.x; // ideoPanel -> SVG

    if (this.ideoPanel) {
      this.ideoPanel.renderSVGContext(svgContext, {
        deltaX: dx,
        deltaY: 0
      });
    } // tracks -> SVG


    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = this.trackViews[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        var trackView = _step2.value;
        trackView.renderSVGContext(svgContext, {
          deltaX: dx,
          deltaY: ideoPanelBBox.height - trackContainerBBox.y
        });
      } // reset height to trim away unneeded svg canvas real estate. Yes, a bit of a hack.

    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    svgContext.setHeight(h_output);
    return svgContext.getSerializedSvg(true);
  };

  Browser.prototype.renderSVG = function (config) {
    var svg = this.toSVG();

    if (config.$container) {
      var trackContainerBBox = this.trackContainerDiv.getBoundingClientRect();
      config.$container.empty();
      config.$container.width(trackContainerBBox.width);
      config.$container.append(svg);
    }

    var path = config.filename || 'igv.svg';
    var data = URL.createObjectURL(new Blob([svg], {
      type: "application/octet-stream"
    }));
    download(path, data);
  };
  /**
   * Initialize a session from an object, json, or by loading from a file.
   *
   * TODO Really should be split into at least 2 functions, load from file and load from object/json
   *
   * @param options
   * @param config
   * @returns {*}
   */


  Browser.prototype.loadSession =
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2(options) {
      var self, session, loadSessionFile, _loadSessionFile;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _loadSessionFile = function _ref3() {
                _loadSessionFile = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee(options) {
                  var urlOrFile, json, filename, knownGenomes, string;
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          urlOrFile = options.url || options.file;

                          if (!(options.url && (options.url.startsWith("blob:") || options.url.startsWith("data:")))) {
                            _context.next = 6;
                            break;
                          }

                          json = Browser.uncompressSession(options.url);
                          return _context.abrupt("return", JSON.parse(json));

                        case 6:
                          filename = options.filename;

                          if (!filename) {
                            filename = options.url ? getFilename(options.url) : options.file.name;
                          }

                          if (!filename.endsWith(".xml")) {
                            _context.next = 18;
                            break;
                          }

                          _context.next = 11;
                          return GenomeUtils.getKnownGenomes();

                        case 11:
                          knownGenomes = _context.sent;
                          _context.next = 14;
                          return igvxhr.loadString(urlOrFile);

                        case 14:
                          string = _context.sent;
                          return _context.abrupt("return", new XMLSession(string, knownGenomes));

                        case 18:
                          if (!filename.endsWith(".json")) {
                            _context.next = 22;
                            break;
                          }

                          return _context.abrupt("return", igvxhr.loadJson(urlOrFile));

                        case 22:
                          return _context.abrupt("return", undefined);

                        case 23:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));
                return _loadSessionFile.apply(this, arguments);
              };

              loadSessionFile = function _ref2(_x2) {
                return _loadSessionFile.apply(this, arguments);
              };

              self = this;

              if (!(options.url || options.file)) {
                _context2.next = 9;
                break;
              }

              _context2.next = 6;
              return loadSessionFile(options);

            case 6:
              session = _context2.sent;
              _context2.next = 10;
              break;

            case 9:
              session = options;

            case 10:
              return _context2.abrupt("return", self.loadSessionObject(session));

            case 11:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();

  Browser.prototype.loadSessionObject =
  /*#__PURE__*/
  function () {
    var _ref4 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3(session) {
      var genome, genomicStates, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, gs, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, s, _gs, gene, snp, _iteratorNormalCompletion5, _didIteratorError5, _iteratorError5, _iterator5, _step5, r, panelWidth;

      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              this.removeAllTracks(true);
              _context3.next = 3;
              return this.loadGenome(session.reference || session.genome, session.locus);

            case 3:
              genome = _context3.sent;

              if (!session.gtexSelections) {
                _context3.next = 44;
                break;
              }

              genomicStates = {};
              _iteratorNormalCompletion3 = true;
              _didIteratorError3 = false;
              _iteratorError3 = undefined;
              _context3.prev = 9;

              for (_iterator3 = this.genomicStateList[Symbol.iterator](); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                gs = _step3.value;
                genomicStates[gs.locusSearchString] = gs;
              }

              _context3.next = 17;
              break;

            case 13:
              _context3.prev = 13;
              _context3.t0 = _context3["catch"](9);
              _didIteratorError3 = true;
              _iteratorError3 = _context3.t0;

            case 17:
              _context3.prev = 17;
              _context3.prev = 18;

              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }

            case 20:
              _context3.prev = 20;

              if (!_didIteratorError3) {
                _context3.next = 23;
                break;
              }

              throw _iteratorError3;

            case 23:
              return _context3.finish(20);

            case 24:
              return _context3.finish(17);

            case 25:
              _iteratorNormalCompletion4 = true;
              _didIteratorError4 = false;
              _iteratorError4 = undefined;
              _context3.prev = 28;

              for (_iterator4 = Object.getOwnPropertyNames(session.gtexSelections)[Symbol.iterator](); !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                s = _step4.value;
                _gs = genomicStates[s];

                if (_gs) {
                  gene = session.gtexSelections[s].gene;
                  snp = session.gtexSelections[s].snp;
                  _gs.selection = new GtexSelection(gene, snp);
                }
              }

              _context3.next = 36;
              break;

            case 32:
              _context3.prev = 32;
              _context3.t1 = _context3["catch"](28);
              _didIteratorError4 = true;
              _iteratorError4 = _context3.t1;

            case 36:
              _context3.prev = 36;
              _context3.prev = 37;

              if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                _iterator4.return();
              }

            case 39:
              _context3.prev = 39;

              if (!_didIteratorError4) {
                _context3.next = 42;
                break;
              }

              throw _iteratorError4;

            case 42:
              return _context3.finish(39);

            case 43:
              return _context3.finish(36);

            case 44:
              if (!session.roi) {
                _context3.next = 65;
                break;
              }

              this.roi = [];
              _iteratorNormalCompletion5 = true;
              _didIteratorError5 = false;
              _iteratorError5 = undefined;
              _context3.prev = 49;

              for (_iterator5 = session.roi[Symbol.iterator](); !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                r = _step5.value;
                this.roi.push(new ROI(r, genome));
              }

              _context3.next = 57;
              break;

            case 53:
              _context3.prev = 53;
              _context3.t2 = _context3["catch"](49);
              _didIteratorError5 = true;
              _iteratorError5 = _context3.t2;

            case 57:
              _context3.prev = 57;
              _context3.prev = 58;

              if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                _iterator5.return();
              }

            case 60:
              _context3.prev = 60;

              if (!_didIteratorError5) {
                _context3.next = 63;
                break;
              }

              throw _iteratorError5;

            case 63:
              return _context3.finish(60);

            case 64:
              return _context3.finish(57);

            case 65:
              if (!session.tracks) {
                // eslint-disable-next-line require-atomic-updates
                session.tracks = [];
              }

              if (session.tracks.filter(function (track) {
                return track.type === 'sequence';
              }).length === 0) {
                session.tracks.push({
                  type: "sequence",
                  order: -Number.MAX_VALUE
                });
              }

              _context3.next = 69;
              return this.loadTrackList(session.tracks);

            case 69:
              if (false !== session.showIdeogram && !this.ideoPanel) {
                panelWidth = this.viewportContainerWidth() / this.genomicStateList.length;
                this.ideoPanel = new IdeoPanel(this.$contentHeader, panelWidth, this);
                this.ideoPanel.repaint();
              }

              this.updateLocusSearchWidget(this.genomicStateList[0]);
              this.windowSizePanel.updateWithGenomicState(this.genomicStateList[0]); // Resize is called to address minor alignment problems with multi-locus view.

              this.resize();

            case 73:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[9, 13, 17, 25], [18,, 20, 24], [28, 32, 36, 44], [37,, 39, 43], [49, 53, 57, 65], [58,, 60, 64]]);
    }));

    return function (_x3) {
      return _ref4.apply(this, arguments);
    };
  }();

  Browser.prototype.loadGenome =
  /*#__PURE__*/
  function () {
    var _ref5 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee5(idOrConfig, initialLocus) {
      var genomeConfig, genome, genomeChange, genomicStateList, errorString, expandReference, _expandReference, getInitialLocus;

      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              getInitialLocus = function _ref8(locus, genome) {
                var loci = [];

                if (locus) {
                  if (Array.isArray(locus)) {
                    loci = locus.join(' ');
                  } else {
                    loci = locus;
                  }
                } else {
                  loci = genome.getHomeChromosomeName();
                }

                return loci;
              };

              _expandReference = function _ref7() {
                _expandReference = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee4(conf) {
                  var genomeID, knownGenomes, reference;
                  return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                      switch (_context4.prev = _context4.next) {
                        case 0:
                          if (isString(conf)) {
                            genomeID = conf;
                          } else if (conf.genome) {
                            genomeID = conf.genome;
                          } else if (conf.id !== undefined && conf.fastaURL === undefined) {
                            // Backward compatibility
                            genomeID = conf.id;
                          }

                          if (!genomeID) {
                            _context4.next = 10;
                            break;
                          }

                          _context4.next = 4;
                          return GenomeUtils.getKnownGenomes();

                        case 4:
                          knownGenomes = _context4.sent;
                          reference = knownGenomes[genomeID];

                          if (!reference) {
                            this.presentAlert("Uknown genome id: " + genomeID, undefined);
                          }

                          return _context4.abrupt("return", reference);

                        case 10:
                          return _context4.abrupt("return", conf);

                        case 11:
                        case "end":
                          return _context4.stop();
                      }
                    }
                  }, _callee4, this);
                }));
                return _expandReference.apply(this, arguments);
              };

              expandReference = function _ref6(_x6) {
                return _expandReference.apply(this, arguments);
              };

              // idOrConfig might be json
              if (isString(idOrConfig) && idOrConfig.startsWith("{")) {
                try {
                  idOrConfig = JSON.parse(idOrConfig);
                } catch (e) {// Apparently its not json,  just continue
                }
              }

              _context5.next = 6;
              return expandReference.call(this, idOrConfig);

            case 6:
              genomeConfig = _context5.sent;
              _context5.next = 9;
              return GenomeUtils.loadGenome(genomeConfig);

            case 9:
              genome = _context5.sent;
              genomeChange = this.genome && this.genome.id !== genome.id;
              this.genome = genome;
              this.$current_genome.text(genome.id || '');
              this.$current_genome.attr('title', genome.id || '');
              this.chromosomeSelectWidget.update(genome);

              if (genomeChange) {
                this.removeAllTracks();
              }

              this.genome = genome;
              _context5.prev = 17;
              _context5.next = 20;
              return this.search(getInitialLocus(initialLocus, genome), true);

            case 20:
              genomicStateList = _context5.sent;
              _context5.next = 29;
              break;

            case 23:
              _context5.prev = 23;
              _context5.t0 = _context5["catch"](17);
              // Couldn't find initial locus
              console.error(_context5.t0);
              _context5.next = 28;
              return this.search(this.genome.getHomeChromosomeName());

            case 28:
              genomicStateList = _context5.sent;

            case 29:
              this.genomicStateList = genomicStateList;

              if (this.genomicStateList.length > 0) {
                if (!this.rulerTrack && false !== this.config.showRuler) {
                  this.rulerTrack = new RulerTrack(this);
                  this.addTrack(this.rulerTrack);
                }
              } else {
                errorString = 'Unrecognized locus ' + this.config.locus;
                this.presentAlert(errorString, undefined);
              }

              if (!genomeConfig.tracks) {
                _context5.next = 34;
                break;
              }

              _context5.next = 34;
              return this.loadTrackList(genomeConfig.tracks);

            case 34:
              this.resize(); // Force recomputation and repaint

              return _context5.abrupt("return", this.genome);

            case 36:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[17, 23]]);
    }));

    return function (_x4, _x5) {
      return _ref5.apply(this, arguments);
    };
  }(); //


  Browser.prototype.updateUIWithGenomicStateListChange = function (genomicStateList) {
    var isWGV = this.isMultiLocusWholeGenomeView() || GenomeUtils.isWholeGenomeView(genomicStateList[0].referenceFrame);

    if (isWGV || this.isMultiLocusMode()) {
      this.centerGuide.forcedHide();
    } else {
      this.centerGuide.forcedShow();
    }

    this.navbarManager.navbarDidResize(this.$navigation.width(), isWGV);
    toggleTrackLabels(this.trackViews, this.trackLabelsVisible);
  }; // track labels


  Browser.prototype.setTrackLabelName = function (trackView, name) {
    trackView.viewports.forEach(function (viewport) {
      viewport.setTrackLabel(name);
    });
  };

  Browser.prototype.hideTrackLabels = function () {
    this.trackLabelsVisible = false;
    toggleTrackLabels(this.trackViews, this.trackLabelsVisible);
  };

  Browser.prototype.showTrackLabels = function () {
    this.trackLabelsVisible = true;
    toggleTrackLabels(this.trackViews, this.trackLabelsVisible);
  };

  function toggleTrackLabels(trackViews, isVisible) {
    var _iteratorNormalCompletion6 = true;
    var _didIteratorError6 = false;
    var _iteratorError6 = undefined;

    try {
      for (var _iterator6 = trackViews[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
        var trackView = _step6.value;
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = trackView.viewports[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var viewport = _step7.value;

            if (viewport.$trackLabel) {
              if (0 === trackView.viewports.indexOf(viewport) && true === isVisible) {
                viewport.$trackLabel.show();
              } else {
                viewport.$trackLabel.hide();
              }
            }
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7.return != null) {
              _iterator7.return();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }
      }
    } catch (err) {
      _didIteratorError6 = true;
      _iteratorError6 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion6 && _iterator6.return != null) {
          _iterator6.return();
        }
      } finally {
        if (_didIteratorError6) {
          throw _iteratorError6;
        }
      }
    }
  } // cursor guide


  Browser.prototype.hideCursorGuide = function () {
    this.cursorGuide.$guide.hide();
    this.cursorGuideVisible = false;
  };

  Browser.prototype.showCursorGuide = function () {
    this.cursorGuide.$guide.show();
    this.cursorGuideVisible = true;
  };

  Browser.prototype.setCustomCursorGuideMouseHandler = function (mouseHandler) {
    this.cursorGuide.customMouseHandler = mouseHandler;
  }; // center guide


  Browser.prototype.hideCenterGuide = function () {
    this.centerGuide.$container.hide();
    this.isCenterGuideVisible = false;
  };

  Browser.prototype.showCenterGuide = function () {
    this.centerGuide.$container.show();
    this.centerGuide.resize();
    this.isCenterGuideVisible = true;
  };

  Browser.prototype.loadTrackList =
  /*#__PURE__*/
  function () {
    var _ref9 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee6(configList) {
      var self, unloadableTracks, message, promises, loadedTracks, groupAutoscaleViews;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              self = this;
              unloadableTracks = configList.filter(function (config) {
                return !knowHowToLoad(config);
              });

              if (unloadableTracks.length > 0) {
                message = "The following tracks could not be loaded.  Are these local files?";
                unloadableTracks.forEach(function (config) {
                  message += ", " + config.name;
                });
                self.presentAlert(message);
              }

              _context6.prev = 3;
              this.startSpinner();
              promises = [];
              configList.filter(knowHowToLoad).forEach(function (config) {
                config.noSpinner = true;
                promises.push(self.loadTrack(config));
              });
              _context6.next = 9;
              return Promise.all(promises);

            case 9:
              loadedTracks = _context6.sent;
              groupAutoscaleViews = self.trackViews.filter(function (trackView) {
                return trackView.track.autoscaleGroup;
              });

              if (groupAutoscaleViews.length > 0) {
                self.updateViews(self.genomicStateList[0], groupAutoscaleViews);
              }

              return _context6.abrupt("return", loadedTracks);

            case 13:
              _context6.prev = 13;
              this.stopSpinner();
              return _context6.finish(13);

            case 16:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[3,, 13, 16]]);
    }));

    return function (_x7) {
      return _ref9.apply(this, arguments);
    };
  }();

  function knowHowToLoad(config) {
    // config might be json
    if (isString(config)) {
      config = JSON.parse(config);
    }

    var url = config.url;
    var features = config.features;
    return undefined === url || isString(url) || url instanceof File;
  }
  /**
   * Return a promise to load a track
   *
   * @param config
   * @returns {*}
   */


  Browser.prototype.loadTrack =
  /*#__PURE__*/
  function () {
    var _ref10 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee7(config) {
      var json, settings, property, newTrack, msg;
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              // config might be json
              if (isString(config)) {
                config = JSON.parse(config);
              }

              if (isString(config.url)) {
                config.url = config.url.trim();
              }

              if (config.indexURL && isString(config.indexURL)) {
                config.indexURL = config.indexURL.trim();
              }

              if (knowHowToLoad(config)) {
                _context7.next = 6;
                break;
              }

              this.presentAlert("The following track could not be loaded.  Is this a local file? " + config.name);
              return _context7.abrupt("return");

            case 6:
              if (!(isString(config.url) && config.url.startsWith("https://drive.google.com"))) {
                _context7.next = 16;
                break;
              }

              _context7.next = 9;
              return google.getDriveFileInfo(config.url);

            case 9:
              json = _context7.sent;
              config.url = "https://www.googleapis.com/drive/v3/files/" + json.id + "?alt=media";

              if (!config.filename) {
                config.filename = json.originalFileName;
              }

              if (!config.format) {
                config.format = inferFileFormat(config.filename);
              }

              if (config.indexURL && config.indexURL.startsWith("https://drive.google.com")) {
                config.indexURL = google.driveDownloadURL(config.indexURL);
              }

              _context7.next = 17;
              break;

            case 16:
              if (config.url && !config.filename) {
                config.filename = getFilename(config.url);
              }

            case 17:
              inferTrackTypes(config); // Set defaults if specified

              if (this.trackDefaults && config.type) {
                settings = this.trackDefaults[config.type];

                if (settings) {
                  for (property in settings) {
                    if (settings.hasOwnProperty(property) && config[property] === undefined) {
                      config[property] = settings[property];
                    }
                  }
                }
              }

              _context7.prev = 19;
              if (!config.noSpinner) this.startSpinner();
              newTrack = this.createTrack(config);

              if (!(undefined === newTrack)) {
                _context7.next = 25;
                break;
              }

              this.presentAlert("Unknown file type: " + config.url, undefined);
              return _context7.abrupt("return", newTrack);

            case 25:
              // Set order field of track here.  Otherwise track order might get shuffled during asynchronous load
              if (undefined === newTrack.order) {
                newTrack.order = this.trackViews.length;
              }

              if (!(typeof newTrack.postInit === 'function')) {
                _context7.next = 29;
                break;
              }

              _context7.next = 29;
              return newTrack.postInit();

            case 29:
              this.addTrack(newTrack);
              return _context7.abrupt("return", newTrack);

            case 33:
              _context7.prev = 33;
              _context7.t0 = _context7["catch"](19);
              console.error(_context7.t0);
              msg = _context7.t0.message || _context7.t0.toString();
              this.presentAlert(msg, undefined);

            case 38:
              _context7.prev = 38;
              if (!config.noSpinner) this.stopSpinner();
              return _context7.finish(38);

            case 41:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[19, 33, 38, 41]]);
    }));

    return function (_x8) {
      return _ref10.apply(this, arguments);
    };
  }();

  Browser.prototype.createTrack = function (config) {
    // Lowercase format
    if (config.format) {
      config.format = config.format.toLowerCase();
    }

    var type = undefined === config.type ? 'unknown_type' : config.type.toLowerCase();
    if ("data" === type) type = "wig"; // deprecated
    // add browser to track config

    var trackConfig = Object.assign({}, config);
    trackConfig.browser = this;
    var track;

    switch (type) {
      case "annotation":
      case "genes":
      case "fusionjuncspan":
      case "snp":
        track = TrackFactory["feature"](trackConfig, this);
        break;

      default:
        if (TrackFactory.hasOwnProperty(type)) {
          track = TrackFactory[type](trackConfig, this);
        } else {
          track = undefined;
        }

    }

    if (config.roi && track) {
      track.roi = [];
      var _iteratorNormalCompletion8 = true;
      var _didIteratorError8 = false;
      var _iteratorError8 = undefined;

      try {
        for (var _iterator8 = config.roi[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {
          var r = _step8.value;
          track.roi.push(new ROI(r, this.genome));
        }
      } catch (err) {
        _didIteratorError8 = true;
        _iteratorError8 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion8 && _iterator8.return != null) {
            _iterator8.return();
          }
        } finally {
          if (_didIteratorError8) {
            throw _iteratorError8;
          }
        }
      }
    }

    return track;
  };
  /**
   * Add a new track.  Each track is associated with the following DOM elements
   *
   *      leftHandGutter  - div on the left for track controls and legend
   *      contentDiv  - a div element wrapping all the track content.  Height can be > viewportDiv height
   *      viewportDiv - a div element through which the track is viewed.  This might have a vertical scrollbar
   *      canvas     - canvas element upon which the track is drawn.  Child of contentDiv
   *
   * The width of all elements should be equal.  Height of the viewportDiv is controlled by the user, but never
   * greater than the contentDiv height.   Height of contentDiv and canvas are equal, and governed by the data
   * loaded.
   *
   * @param track
   */


  Browser.prototype.addTrack = function (track) {
    var trackView;
    trackView = new TrackView(this, $(this.trackContainerDiv), track);
    this.trackViews.push(trackView);
    toggleTrackLabels(this.trackViews, this.trackLabelsVisible);
    this.reorderTracks();

    if (!track.autoscaleGroup) {
      // Group autoscale groups will get updated later (as a group)
      trackView.updateViews();
    }
  };

  Browser.prototype.reorderTracks = function () {
    var myself = this;
    this.trackViews.sort(function (a, b) {
      var aOrder = a.track.order || 0;
      var bOrder = b.track.order || 0;
      return aOrder - bOrder;
    }); // Reattach the divs to the dom in the correct order

    $(this.trackContainerDiv).children("igv-track-div").detach();
    this.trackViews.forEach(function (trackView) {
      myself.trackContainerDiv.appendChild(trackView.trackDiv);
    });
  };

  Browser.prototype.removeTrackByName = function (name) {
    var copy = this.trackViews.slice();
    var _iteratorNormalCompletion9 = true;
    var _didIteratorError9 = false;
    var _iteratorError9 = undefined;

    try {
      for (var _iterator9 = copy[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {
        var trackView = _step9.value;

        if (name === trackView.track.name) {
          this.removeTrack(trackView.track);
        }
      }
    } catch (err) {
      _didIteratorError9 = true;
      _iteratorError9 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion9 && _iterator9.return != null) {
          _iterator9.return();
        }
      } finally {
        if (_didIteratorError9) {
          throw _iteratorError9;
        }
      }
    }
  };

  Browser.prototype.removeTrack = function (track) {
    // Find track panel
    var trackPanelRemoved;

    for (var i = 0; i < this.trackViews.length; i++) {
      if (track === this.trackViews[i].track) {
        trackPanelRemoved = this.trackViews[i];
        break;
      }
    }

    if (trackPanelRemoved) {
      this.trackViews.splice(i, 1);
      $(trackPanelRemoved.trackDiv).remove();
      this.fireEvent('trackremoved', [trackPanelRemoved.track]);
      trackPanelRemoved.dispose();
    }
  };
  /**
   * API function
   */


  Browser.prototype.removeAllTracks = function (removeSequence) {
    var self = this,
        newTrackViews = [];
    var _iteratorNormalCompletion10 = true;
    var _didIteratorError10 = false;
    var _iteratorError10 = undefined;

    try {
      for (var _iterator10 = this.trackViews[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {
        var tv = _step10.value;

        if ((removeSequence || tv.track.id !== 'sequence') && tv.track.id !== 'ruler') {
          self.trackContainerDiv.removeChild(tv.trackDiv);
          self.fireEvent('trackremoved', [tv.track]);
          tv.dispose();
        } else {
          newTrackViews.push(tv);
        }
      }
    } catch (err) {
      _didIteratorError10 = true;
      _iteratorError10 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion10 && _iterator10.return != null) {
          _iterator10.return();
        }
      } finally {
        if (_didIteratorError10) {
          throw _iteratorError10;
        }
      }
    }

    this.trackViews = newTrackViews;
  };
  /**
   *
   * @param property
   * @param value
   * @returns {Array}  tracks with given property value.  e.g. findTracks("type", "annotation")
   */


  Browser.prototype.findTracks = function (property, value) {
    var tracks = [];
    this.trackViews.forEach(function (trackView) {
      if (value === trackView.track[property]) {
        tracks.push(trackView.track);
      }
    });
    return tracks;
  };

  Browser.prototype.setTrackHeight = function (newHeight) {
    this.trackHeight = newHeight;
    this.trackViews.forEach(function (trackView) {
      trackView.setTrackHeight(newHeight);
    });
  };

  Browser.prototype.visibilityChange = function () {
    this.resize();
  };

  Browser.prototype.resize = function () {
    var self = this; // Recompute bpPerPixel -- if previous width was zero this can be infinity

    var viewportWidth = this.viewportWidth();

    if (viewportWidth === 0) {
      return;
    }

    if (this.genomicStateList && viewportWidth > 0) {
      var isWGV = this.isMultiLocusWholeGenomeView() || GenomeUtils.isWholeGenomeView(this.genomicStateList[0].referenceFrame);

      if (isWGV || this.isMultiLocusMode()) {
        this.centerGuide.forcedHide();
      } else {
        this.centerGuide.forcedShow();
      }

      this.navbarManager.navbarDidResize(this.$navigation.width(), isWGV);
      this.genomicStateList.forEach(function (gstate) {
        var referenceFrame = gstate.referenceFrame;

        if (!isFinite(referenceFrame.bpPerPixel) && undefined !== referenceFrame.initialEnd) {
          referenceFrame.bpPerPixel = (referenceFrame.initialEnd - referenceFrame.start) / viewportWidth;
        }
      });
    }

    if (this.genomicStateList && 1 === this.genomicStateList.length && resizeWillExceedChromosomeLength(this.genomicStateList[0])) {
      this.search(this.genomicStateList[0].chromosome.name);
    } else {
      if (this.ideoPanel) this.ideoPanel.resize();
      if (this.centerGuide) this.centerGuide.resize();
      this.trackViews.forEach(function (trackView) {
        trackView.resize();
      });
    }

    if (this.genomicStateList && this.genomicStateList.length > 0) {
      this.updateLocusSearchWidget(this.genomicStateList[0]);
      this.windowSizePanel.updateWithGenomicState(this.genomicStateList[0]);
    }

    this.updateViews();

    function resizeWillExceedChromosomeLength(genomicState) {
      var pixel = self.viewportContainerWidth();
      var bpp = genomicState.referenceFrame.bpPerPixel;
      var bp = pixel * bpp;
      return bp > genomicState.chromosome.bpLength;
    }
  };

  Browser.prototype.updateViews = function (genomicState, views) {
    var self = this,
        groupAutoscaleTracks,
        otherTracks;

    if (!genomicState) {
      genomicState = this.genomicStateList[0];
    }

    if (!views) {
      views = this.trackViews;
    }

    this.updateLocusSearchWidget(genomicState);
    this.windowSizePanel.updateWithGenomicState(genomicState);

    if (this.ideoPanel) {
      this.ideoPanel.repaint();
    }

    if (this.centerGuide) {
      this.centerGuide.repaint();
    } // Don't autoscale while dragging.


    if (self.isDragging) {
      views.forEach(function (trackView) {
        trackView.updateViews();
      });
    } else {
      // Group autoscale
      groupAutoscaleTracks = {};
      otherTracks = [];
      views.forEach(function (trackView) {
        var group = trackView.track.autoscaleGroup;

        if (group) {
          var l = groupAutoscaleTracks[group];

          if (!l) {
            l = [];
            groupAutoscaleTracks[group] = l;
          }

          l.push(trackView);
        } else {
          otherTracks.push(trackView);
        }
      });
      Object.keys(groupAutoscaleTracks).forEach(function (group) {
        var groupTrackViews, promises;
        groupTrackViews = groupAutoscaleTracks[group];
        promises = [];
        groupTrackViews.forEach(function (trackView) {
          promises.push(trackView.getInViewFeatures());
        });
        Promise.all(promises).then(function (featureArray) {
          var allFeatures = [],
              dataRange;
          featureArray.forEach(function (features) {
            allFeatures = allFeatures.concat(features);
          });
          dataRange = doAutoscale(allFeatures);
          groupTrackViews.forEach(function (trackView) {
            trackView.track.dataRange = dataRange;
            trackView.track.autoscale = false;
            trackView.updateViews();
          });
        });
      });
      otherTracks.forEach(function (trackView) {
        trackView.updateViews();
      });
    }
  };

  Browser.prototype.loadInProgress = function () {
    var i;

    for (i = 0; i < this.trackViews.length; i++) {
      if (this.trackViews[i].isLoading()) return true;
    }

    return false;
  };

  Browser.prototype.updateLocusSearchWidget = function (genomicState) {
    var self = this,
        referenceFrame,
        ss,
        ee,
        str,
        end,
        chromosome;

    if (this.rulerTrack) {
      this.rulerTrack.updateLocusLabel();
    }

    if (0 === this.genomicStateList.indexOf(genomicState) && 1 === this.genomicStateList.length) {
      if (genomicState.locusSearchString && 'all' === genomicState.locusSearchString.toLowerCase()) {
        this.$searchInput.val(genomicState.locusSearchString);
        this.chromosomeSelectWidget.$select.val('all');
      } else {
        referenceFrame = genomicState.referenceFrame;
        this.chromosomeSelectWidget.$select.val(referenceFrame.chrName);

        if (this.$searchInput) {
          end = referenceFrame.start + referenceFrame.bpPerPixel * (self.viewportContainerWidth() / this.genomicStateList.length);

          if (this.genome) {
            chromosome = this.genome.getChromosome(referenceFrame.chrName);

            if (chromosome) {
              end = Math.min(end, chromosome.bpLength);
            }
          }

          ss = numberFormatter(Math.floor(referenceFrame.start + 1));
          ee = numberFormatter(Math.floor(end));
          str = referenceFrame.chrName + ":" + ss + "-" + ee;
          this.$searchInput.val(str);
        }

        this.fireEvent('locuschange', [{
          chr: referenceFrame.chrName,
          start: ss,
          end: ee,
          label: str
        }]);
      }
    } else {
      this.$searchInput.val('');
      this.chromosomeSelectWidget.$select.val('');
    }
  };
  /**
   * Return the visible width of a track.  All tracks should have the same width.
   */


  Browser.prototype.viewportContainerWidth = function () {
    if (this.trackViews && this.trackViews.length > 0) {
      return this.trackViews[0].$viewportContainer.width();
    } else {
      return syntheticViewportContainerWidth.call(this);
    }

    function syntheticViewportContainerWidth() {
      var $track, $viewportContainer, width;
      $track = $('<div class="igv-track-div">');
      $(this.trackContainerDiv).append($track);
      $viewportContainer = $('<div class="igv-viewport-container">');
      $track.append($viewportContainer);
      width = $viewportContainer.width(); // discard temporary DOM elements

      $track.remove();
      return width;
    }
  };

  Browser.prototype.viewportWidth = function () {
    var cw, vw;
    cw = this.viewportContainerWidth();
    vw = undefined === this.genomicStateList || 1 === this.genomicStateList.length ? cw : Math.round(cw / this.genomicStateList.length);
    return vw;
  };

  Browser.prototype.minimumBases = function () {
    return this.config.minimumBases;
  };

  Browser.prototype.updateZoomSlider = function ($slider) {
    var viewport = this.trackViews[0].viewports[0];
    var referenceFrame = viewport.genomicState.referenceFrame;
    var window = viewport.$viewport.width() * referenceFrame.bpPerPixel;
    var maxWindow = referenceFrame.getChromosome().bpLength;
    var minWindow = this.minimumBases();
    var v = (maxWindow - window) / (maxWindow - minWindow);
    var value = Math.round(100 * v);
    $slider.val(value);
  };

  Browser.prototype.zoom = function (scaleFactor) {
    this.zoomWithScaleFactor(scaleFactor);
  }; // Zoom in by a factor of 2, keeping the same center location


  Browser.prototype.zoomIn = function () {
    this.zoomWithScaleFactor(0.5);
  }; // Zoom out by a factor of 2, keeping the same center location if possible


  Browser.prototype.zoomOut = function () {
    this.zoomWithScaleFactor(2.0);
  };

  Browser.prototype.zoomWithRangePercentage = function (percentage) {
    var _this = this;

    if (this.loadInProgress()) {
      return;
    }

    var self = this;
    this.trackViews[0].viewports.forEach(function (viewport) {
      var referenceFrame = viewport.genomicState.referenceFrame;
      var centerBP = referenceFrame.start + referenceFrame.toBP(viewport.$viewport.width() / 2.0);
      var chromosome = referenceFrame.getChromosome();
      var bpp = lerp((chromosome.bpLength - chromosome.bpStart) / viewport.$viewport.width(), _this.minimumBases() / viewport.$viewport.width(), percentage);
      var viewportWidthBP = bpp * viewport.$viewport.width();
      referenceFrame.start = centerBP - viewportWidthBP / 2;
      referenceFrame.bpPerPixel = bpp;
      self.updateViews(viewport.genomicState);

      function lerp(v0, v1, t) {
        return (1 - t) * v0 + t * v1;
      }
    });
  };

  Browser.prototype.zoomWithScaleFactor = function (scaleFactor, centerBPOrUndefined, viewportOrUndefined) {
    var viewports = viewportOrUndefined ? [viewportOrUndefined] : this.trackViews[0].viewports;
    var _iteratorNormalCompletion11 = true;
    var _didIteratorError11 = false;
    var _iteratorError11 = undefined;

    try {
      for (var _iterator11 = viewports[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {
        var viewport = _step11.value;
        var referenceFrame = viewport.genomicState.referenceFrame;
        var chromosome = referenceFrame.getChromosome();
        var chromosomeLengthBP = chromosome.bpLength - chromosome.bpStart;
        var bppThreshold = scaleFactor < 1.0 ? this.minimumBases() / viewport.$viewport.width() : chromosomeLengthBP / viewport.$viewport.width();
        var centerBP = undefined === centerBPOrUndefined ? referenceFrame.start + referenceFrame.toBP(viewport.$viewport.width() / 2.0) : centerBPOrUndefined;
        var bpp = void 0;

        if (scaleFactor < 1.0) {
          bpp = Math.max(referenceFrame.bpPerPixel * scaleFactor, bppThreshold);
        } else {
          bpp = Math.min(referenceFrame.bpPerPixel * scaleFactor, bppThreshold);
        }

        var viewportWidthBP = bpp * viewport.$viewport.width();
        referenceFrame.start = centerBP - viewportWidthBP / 2;
        referenceFrame.bpPerPixel = bpp;
        referenceFrame.clamp(viewport.$viewport.width());
        this.updateViews(viewport.genomicState);
      }
    } catch (err) {
      _didIteratorError11 = true;
      _iteratorError11 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion11 && _iterator11.return != null) {
          _iterator11.return();
        }
      } finally {
        if (_didIteratorError11) {
          throw _iteratorError11;
        }
      }
    }
  };

  Browser.prototype.presentSplitScreenMultiLocusPanel = function (alignment, genomicState) {
    var genome = this.genome;
    var referenceFrame, viewportWidth, leftMatePairGenomicState, rightMatePairGenomicState; // account for reduced viewport width as a result of adding right mate pair panel

    viewportWidth = this.viewportContainerWidth() / (1 + this.genomicStateList.length); // adjust left mate pair reference frame

    leftMatePairGenomicState = genomicState;
    referenceFrame = leftMatePairGenomicState.referenceFrame;
    var chrName = genome.getChromosomeName(alignment.chr);
    leftMatePairGenomicState.referenceFrame = createReferenceFrame(chrName, referenceFrame.bpPerPixel, viewportWidth, alignment.start, alignment.lengthOnRef); // create right mate pair reference frame

    var mateChrName = genome.getChromosomeName(alignment.mate.chr);
    rightMatePairGenomicState = {};
    rightMatePairGenomicState.chromosome = leftMatePairGenomicState.chromosome;
    rightMatePairGenomicState.referenceFrame = createReferenceFrame(mateChrName, referenceFrame.bpPerPixel, viewportWidth, alignment.mate.position, alignment.lengthOnRef); // add right mate panel beside left mate panel

    this.addMultiLocusPanelWithGenomicStateAtIndex(rightMatePairGenomicState, 1 + this.genomicStateList.indexOf(leftMatePairGenomicState), viewportWidth);

    function createReferenceFrame(chromosomeName, bpp, pixels, alignmentStart, alignmentLength) {
      var ss, ee, alignmentEE, alignmentCC;
      alignmentEE = alignmentStart + alignmentLength;
      alignmentCC = (alignmentStart + alignmentEE) / 2;
      ss = alignmentCC - bpp * (pixels / 2);
      ee = ss + bpp * pixels;
      return new ReferenceFrame(genome, chromosomeName, ss, ee, bpp);
    }
  };

  Browser.prototype.selectMultiLocusPanelWithGenomicState = function (selectedGenomicState) {
    var self = this,
        removable;
    removable = this.genomicStateList.filter(function (gs) {
      return selectedGenomicState !== gs;
    });
    removable.forEach(function (gs) {
      self.removeMultiLocusPanelWithGenomicState(gs, false);
    });
    this.resize();
  };

  Browser.prototype.removeMultiLocusPanelWithGenomicState = function (genomicState, doResize) {
    var genome = this.genome;
    var self = this,
        index,
        viewportContainerWidth,
        previousGenomicStateListLength;
    index = this.genomicStateList.indexOf(genomicState);

    if (this.ideoPanel) {
      this.ideoPanel.removePanelWithLocusIndex(index);
    }

    this.trackViews.forEach(function (trackView) {
      trackView.removeViewportWithLocusIndex(index);
    });
    viewportContainerWidth = this.viewportContainerWidth();
    previousGenomicStateListLength = this.genomicStateList.length;
    this.genomicStateList.splice(index, 1);
    this.genomicStateList.forEach(function (gs, i) {
      var ee = gs.referenceFrame.calculateEnd(viewportContainerWidth / previousGenomicStateListLength);
      var bpp = gs.referenceFrame.calculateBPP(ee, viewportContainerWidth / self.genomicStateList.length);
      self.genomicStateList[i].referenceFrame = new ReferenceFrame(genome, gs.chromosome.name, gs.referenceFrame.start, ee, bpp);
    });
    this.updateUIWithGenomicStateListChange(this.genomicStateList);

    if (true === doResize) {
      this.resize();
    }
  };

  Browser.prototype.addMultiLocusPanelWithGenomicStateAtIndex = function (genomicState, index, viewportWidth) {
    if (index === this.genomicStateList.length) {
      this.genomicStateList.push(genomicState);

      if (this.ideoPanel) {
        this.ideoPanel.addPanelWithGenomicStateAtIndex(genomicState, index, viewportWidth);
      }

      this.trackViews.forEach(function (trackView) {
        var viewport;
        viewport = new ViewPort(trackView, trackView.$viewportContainer, genomicState, viewportWidth);
        trackView.viewports.push(viewport);
        trackView.decorateViewports();
        trackView.configureViewportContainer(trackView.$viewportContainer, trackView.viewports);
      });
    } else {
      this.genomicStateList.splice(index, 0, genomicState);

      if (this.ideoPanel) {
        this.ideoPanel.addPanelWithGenomicStateAtIndex(genomicState, index, viewportWidth);
      }

      this.trackViews.forEach(function (trackView) {
        var viewport, $detached;
        viewport = new ViewPort(trackView, trackView.$viewportContainer, genomicState, viewportWidth);
        trackView.viewports.splice(index, 0, viewport); // The viewport constructor always appends. Reorder here.

        $detached = viewport.$viewport.detach();
        $detached.insertAfter(trackView.viewports[index - 1].$viewport);
        trackView.decorateViewports();
        trackView.configureViewportContainer(trackView.$viewportContainer, trackView.viewports);
      });
    }

    if (this.rulerTrack) {
      this.rulerTrack.updateLocusLabel();
    }

    this.updateUIWithGenomicStateListChange(this.genomicStateList);
    this.resize();
  };

  Browser.prototype.emptyViewportContainers = function () {
    var _iteratorNormalCompletion12 = true;
    var _didIteratorError12 = false;
    var _iteratorError12 = undefined;

    try {
      for (var _iterator12 = this.trackViews[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {
        var trackView = _step12.value;

        if (trackView.$outerScroll) {
          trackView.$outerScroll.remove();
        }

        var _iteratorNormalCompletion13 = true;
        var _didIteratorError13 = false;
        var _iteratorError13 = undefined;

        try {
          for (var _iterator13 = trackView.viewports[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {
            var viewport = _step13.value;

            if (viewport.rulerSweeper) {
              viewport.rulerSweeper.$rulerSweeper.remove();
            }

            if (viewport.popover) {
              viewport.popover.$popover.off();
              viewport.popover.$popover.empty();
              viewport.popover.$popover.remove();
            }

            viewport.$viewport.remove();
          }
        } catch (err) {
          _didIteratorError13 = true;
          _iteratorError13 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion13 && _iterator13.return != null) {
              _iterator13.return();
            }
          } finally {
            if (_didIteratorError13) {
              throw _iteratorError13;
            }
          }
        }

        delete trackView.viewports;
        trackView.viewports = [];
        delete trackView.scrollbar;
      }
    } catch (err) {
      _didIteratorError12 = true;
      _iteratorError12 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion12 && _iterator12.return != null) {
          _iterator12.return();
        }
      } finally {
        if (_didIteratorError12) {
          throw _iteratorError12;
        }
      }
    }

    this.$contentHeader.empty();
  };

  Browser.prototype.buildViewportsWithGenomicStateList = function (genomicStateList) {
    var width;
    width = this.viewportContainerWidth() / this.genomicStateList.length;
    this.trackViews.forEach(function (trackView) {
      genomicStateList.forEach(function (genomicState) {
        var viewport;
        viewport = new ViewPort(trackView, trackView.$viewportContainer, genomicState, width);
        trackView.viewports.push(viewport);
      });
      trackView.decorateViewports();
      trackView.configureViewportContainer(trackView.$viewportContainer, trackView.viewports);
    });
  };

  Browser.prototype.goto = function (chrName, start, end) {
    return this.search(chrName + ":" + start + "-" + end);
  };

  Browser.prototype.search =
  /*#__PURE__*/
  function () {
    var _ref11 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee10(string, init) {
      var self, genome, loci, genomicStateList, _iteratorNormalCompletion14, _didIteratorError14, _iteratorError14, _iterator14, _step14, gs, panelWidth, createGenomicStateList, _createGenomicStateList;

      return regeneratorRuntime.wrap(function _callee10$(_context10) {
        while (1) {
          switch (_context10.prev = _context10.next) {
            case 0:
              _createGenomicStateList = function _ref18() {
                _createGenomicStateList = _asyncToGenerator(
                /*#__PURE__*/
                regeneratorRuntime.mark(function _callee9(loci) {
                  var searchConfig, result, _iteratorNormalCompletion15, _didIteratorError15, _iteratorError15, _iterator15, _step15, locus, genomicState, feature, chromosome, response, _genomicState, appendReferenceFrames, searchWebService, _searchWebService, processSearchResult, isLocusChrNameStartEnd;

                  return regeneratorRuntime.wrap(function _callee9$(_context9) {
                    while (1) {
                      switch (_context9.prev = _context9.next) {
                        case 0:
                          isLocusChrNameStartEnd = function _ref16(locus, genome) {
                            var a, b, numeric, chr, chromosome, locusObject;
                            locusObject = {};
                            a = locus.split(':');
                            chr = a[0];
                            chromosome = genome.getChromosome(chr); // Map chr to official name from (possible) alias

                            if (!chromosome) {
                              return undefined; // Unknown chromosome
                            }

                            locusObject.chromosome = chromosome; // Map chr to offical name from possible alias

                            locusObject.start = 0;
                            locusObject.end = chromosome.bpLength; // if just a chromosome name we are done

                            if (1 === a.length) {
                              return locusObject;
                            } else {
                              b = a[1].split('-');

                              if (b.length > 2) {
                                return undefined; // Not a locus string
                              } else {
                                locusObject.start = locusObject.end = undefined;
                                numeric = b[0].replace(/,/g, '');

                                if (isNaN(numeric)) {
                                  return undefined;
                                }

                                locusObject.start = parseInt(numeric, 10) - 1;

                                if (isNaN(locusObject.start)) {
                                  return undefined;
                                }

                                if (2 === b.length) {
                                  numeric = b[1].replace(/,/g, '');

                                  if (isNaN(numeric)) {
                                    return false;
                                  }

                                  locusObject.end = parseInt(numeric, 10);
                                }
                              }

                              validateLocusExtent(locusObject.chromosome.bpLength, locusObject, self.minimumBases());
                              return locusObject;
                            }
                          };

                          processSearchResult = function _ref15(searchServiceResponse, locusSearchString) {
                            var results;

                            if ('plain' === searchConfig.type) {
                              results = parseSearchResults(searchServiceResponse);
                            } else {
                              results = JSON.parse(searchServiceResponse);
                            }

                            if (searchConfig.resultsField) {
                              results = results[searchConfig.resultsField];
                            }

                            if (!results || 0 === results.length) {
                              return undefined;
                            } else {
                              // Ingoring all but first result for now
                              // TODO -- present all and let user select if results.length > 1
                              var _result = results[0];

                              if (!(_result.hasOwnProperty(searchConfig.chromosomeField) && _result.hasOwnProperty(searchConfig.startField))) {
                                return undefined;
                              }

                              var chr = _result[searchConfig.chromosomeField];
                              var start = _result[searchConfig.startField] - searchConfig.coords;
                              var end = _result[searchConfig.endField];

                              if (undefined === end) {
                                end = start + 1;
                              }

                              if (self.flanking) {
                                start = Math.max(0, start - self.flanking);
                                end += self.flanking;
                              }

                              var geneNameLocusObject = Object.assign({}, _result);
                              geneNameLocusObject.chromosome = self.genome.getChromosome(chr);
                              geneNameLocusObject.start = start;
                              geneNameLocusObject.end = end;
                              geneNameLocusObject.locusSearchString = locusSearchString;
                              geneNameLocusObject.selection = new GtexSelection(_result[searchConfig.geneField], _result[searchConfig.snpField]);
                              return geneNameLocusObject;
                            }
                            /**
                             * Parse the igv line-oriented (non json) search results.
                             * Example
                             *    EGFR    chr7:55,086,724-55,275,031    refseq
                             *
                             * @param data
                             */


                            function parseSearchResults(data) {
                              var linesTrimmed = [];
                              var results = [];
                              var lines = splitLines(data);
                              lines.forEach(function (item) {
                                if ("" === item) ; else {
                                  linesTrimmed.push(item);
                                }
                              });
                              linesTrimmed.forEach(function (line) {
                                var tokens = line.split("\t"),
                                    source,
                                    locusTokens,
                                    rangeTokens,
                                    obj;

                                if (tokens.length >= 3) {
                                  locusTokens = tokens[1].split(":");
                                  rangeTokens = locusTokens[1].split("-");
                                  source = tokens[2].trim();
                                  obj = {
                                    gene: tokens[0],
                                    chromosome: self.genome.getChromosomeName(locusTokens[0].trim()),
                                    start: parseInt(rangeTokens[0].replace(/,/g, '')),
                                    end: parseInt(rangeTokens[1].replace(/,/g, '')),
                                    type: "gtex" === source ? "snp" : "gene"
                                  };
                                  results.push(obj);
                                }
                              });
                              return results;
                            }
                          };

                          _searchWebService = function _ref14() {
                            _searchWebService = _asyncToGenerator(
                            /*#__PURE__*/
                            regeneratorRuntime.mark(function _callee8(locus) {
                              var path, result;
                              return regeneratorRuntime.wrap(function _callee8$(_context8) {
                                while (1) {
                                  switch (_context8.prev = _context8.next) {
                                    case 0:
                                      path = searchConfig.url.replace("$FEATURE$", locus.toUpperCase());

                                      if (path.indexOf("$GENOME$") > -1) {
                                        path = path.replace("$GENOME$", self.genome.id ? self.genome.id : "hg19");
                                      }

                                      _context8.next = 4;
                                      return igvxhr.loadString(path);

                                    case 4:
                                      result = _context8.sent;
                                      return _context8.abrupt("return", {
                                        result: result,
                                        locusSearchString: locus
                                      });

                                    case 6:
                                    case "end":
                                      return _context8.stop();
                                  }
                                }
                              }, _callee8);
                            }));
                            return _searchWebService.apply(this, arguments);
                          };

                          searchWebService = function _ref13(_x12) {
                            return _searchWebService.apply(this, arguments);
                          };

                          appendReferenceFrames = function _ref12(genomicStateList) {
                            var viewportWidth = self.viewportContainerWidth() / genomicStateList.length;
                            genomicStateList.forEach(function (gs) {
                              gs.referenceFrame = new ReferenceFrame(genome, gs.chromosome.name, gs.start, gs.end, (gs.end - gs.start) / viewportWidth);
                            });
                            return genomicStateList;
                          };

                          searchConfig = self.searchConfig;
                          result = []; // Try locus string first  (e.g.  chr1:100-200)

                          _iteratorNormalCompletion15 = true;
                          _didIteratorError15 = false;
                          _iteratorError15 = undefined;
                          _context9.prev = 10;
                          _iterator15 = loci[Symbol.iterator]();

                        case 12:
                          if (_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done) {
                            _context9.next = 35;
                            break;
                          }

                          locus = _step15.value;
                          genomicState = isLocusChrNameStartEnd(locus, self.genome);

                          if (!genomicState) {
                            _context9.next = 20;
                            break;
                          }

                          genomicState.locusSearchString = locus;
                          result.push(genomicState);
                          _context9.next = 31;
                          break;

                        case 20:
                          // Try local feature cache.    This is created from feature tracks tagged "searchable"
                          feature = self.featureDB[locus.toUpperCase()];

                          if (!feature) {
                            _context9.next = 26;
                            break;
                          }

                          chromosome = self.genome.getChromosome(feature.chr);

                          if (chromosome) {
                            genomicState = {
                              chromosome: chromosome,
                              start: feature.start,
                              end: feature.end,
                              locusSearchString: locus
                            };
                            validateLocusExtent(genomicState.chromosome.bpLength, genomicState, self.minimumBases());
                            result.push(genomicState);
                          }

                          _context9.next = 31;
                          break;

                        case 26:
                          _context9.next = 28;
                          return searchWebService(locus);

                        case 28:
                          response = _context9.sent;
                          _genomicState = processSearchResult(response.result, response.locusSearchString);

                          if (_genomicState) {
                            result.push(_genomicState);
                          }

                        case 31:
                          appendReferenceFrames(result);

                        case 32:
                          _iteratorNormalCompletion15 = true;
                          _context9.next = 12;
                          break;

                        case 35:
                          _context9.next = 41;
                          break;

                        case 37:
                          _context9.prev = 37;
                          _context9.t0 = _context9["catch"](10);
                          _didIteratorError15 = true;
                          _iteratorError15 = _context9.t0;

                        case 41:
                          _context9.prev = 41;
                          _context9.prev = 42;

                          if (!_iteratorNormalCompletion15 && _iterator15.return != null) {
                            _iterator15.return();
                          }

                        case 44:
                          _context9.prev = 44;

                          if (!_didIteratorError15) {
                            _context9.next = 47;
                            break;
                          }

                          throw _iteratorError15;

                        case 47:
                          return _context9.finish(44);

                        case 48:
                          return _context9.finish(41);

                        case 49:
                          return _context9.abrupt("return", result);

                        case 50:
                        case "end":
                          return _context9.stop();
                      }
                    }
                  }, _callee9, null, [[10, 37, 41, 49], [42,, 44, 48]]);
                }));
                return _createGenomicStateList.apply(this, arguments);
              };

              createGenomicStateList = function _ref17(_x11) {
                return _createGenomicStateList.apply(this, arguments);
              };

              self = this;
              genome = this.genome;
              if (string && string.trim().toLowerCase() === "all") string = "all";
              loci = string.split(' ');
              _context10.next = 8;
              return createGenomicStateList(loci);

            case 8:
              genomicStateList = _context10.sent;

              if (!(!genomicStateList || genomicStateList.length === 0)) {
                _context10.next = 13;
                break;
              }

              _context10.next = 12;
              return createGenomicStateList([string]);

            case 12:
              genomicStateList = _context10.sent;

            case 13:
              if (!(genomicStateList.length > 0)) {
                _context10.next = 38;
                break;
              }

              this.emptyViewportContainers();
              this.genomicStateList = genomicStateList;
              this.buildViewportsWithGenomicStateList(genomicStateList); // assign ids to the state objects

              _iteratorNormalCompletion14 = true;
              _didIteratorError14 = false;
              _iteratorError14 = undefined;
              _context10.prev = 20;

              for (_iterator14 = genomicStateList[Symbol.iterator](); !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {
                gs = _step14.value;
                gs.id = guid();
              }

              _context10.next = 28;
              break;

            case 24:
              _context10.prev = 24;
              _context10.t0 = _context10["catch"](20);
              _didIteratorError14 = true;
              _iteratorError14 = _context10.t0;

            case 28:
              _context10.prev = 28;
              _context10.prev = 29;

              if (!_iteratorNormalCompletion14 && _iterator14.return != null) {
                _iterator14.return();
              }

            case 31:
              _context10.prev = 31;

              if (!_didIteratorError14) {
                _context10.next = 34;
                break;
              }

              throw _iteratorError14;

            case 34:
              return _context10.finish(31);

            case 35:
              return _context10.finish(28);

            case 36:
              _context10.next = 39;
              break;

            case 38:
              throw new Error('Unrecognized locus ' + string);

            case 39:
              if (this.ideoPanel) {
                this.ideoPanel.discardPanels();
                panelWidth = self.viewportContainerWidth() / genomicStateList.length;
                this.ideoPanel.buildPanels(this.$contentHeader, panelWidth);
              }

              this.updateUIWithGenomicStateListChange(genomicStateList);

              if (!init) {
                this.updateViews();
              }

              return _context10.abrupt("return", genomicStateList);

            case 43:
            case "end":
              return _context10.stop();
          }
        }
      }, _callee10, this, [[20, 24, 28, 36], [29,, 31, 35]]);
    }));

    return function (_x9, _x10) {
      return _ref11.apply(this, arguments);
    };
  }();

  Browser.prototype.loadSampleInformation =
  /*#__PURE__*/
  function () {
    var _ref19 = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee11(url) {
      var name, ext;
      return regeneratorRuntime.wrap(function _callee11$(_context11) {
        while (1) {
          switch (_context11.prev = _context11.next) {
            case 0:
              name = url;

              if (url instanceof File) {
                name = url.name;
              }

              ext = name.substr(name.lastIndexOf('.') + 1);

              if (!(ext === 'fam')) {
                _context11.next = 7;
                break;
              }

              _context11.next = 6;
              return loadPlinkFile(url);

            case 6:
              this.sampleInformation = _context11.sent;

            case 7:
            case "end":
              return _context11.stop();
          }
        }
      }, _callee11, this);
    }));

    return function (_x13) {
      return _ref19.apply(this, arguments);
    };
  }(); // EVENTS


  Browser.prototype.on = function (eventName, fn) {
    if (!this.eventHandlers[eventName]) {
      this.eventHandlers[eventName] = [];
    }

    this.eventHandlers[eventName].push(fn);
  };
  /**
   * @deprecated use off()
   * @param eventName
   * @param fn
   */


  Browser.prototype.un = function (eventName, fn) {
    if (!this.eventHandlers[eventName]) {
      return;
    }

    var callbackIndex = this.eventHandlers[eventName].indexOf(fn);

    if (callbackIndex !== -1) {
      this.eventHandlers[eventName].splice(callbackIndex, 1);
    }
  };

  Browser.prototype.off = function (eventName, fn) {
    if (!eventName) {
      this.eventHandlers = {}; // Remove all event handlers
    } else if (!fn) {
      this.eventHandlers[eventName] = []; // Remove all eventhandlers matching name
    } else {
      // Remove specific event handler
      var callbackIndex = this.eventHandlers[eventName].indexOf(fn);

      if (callbackIndex !== -1) {
        this.eventHandlers[eventName].splice(callbackIndex, 1);
      }
    }
  };

  Browser.prototype.fireEvent = function (eventName, args, thisObj) {
    var scope,
        results,
        eventHandler = this.eventHandlers[eventName];

    if (undefined === eventHandler || eventHandler.length === 0) {
      return undefined;
    }

    scope = thisObj || window;
    results = eventHandler.map(function (event) {
      return event.apply(scope, args);
    });
    return results[0];
  };

  Browser.prototype.dispose = function () {
    $(window).off(this.namespace);
    $(document).off(this.namespace);
    this.eventHandlers = undefined;
    this.trackViews.forEach(function (tv) {
      tv.dispose();
    });
  };

  Browser.prototype.toJSON = function () {
    var json, trackJson;
    json = {
      "reference": this.genome.toJSON()
    }; // Use first available trackView.

    var locus = [];
    var gtexSelections = {};
    var anyTrackView = this.trackViews[0];
    anyTrackView.viewports.forEach(function (viewport) {
      var genomicState = viewport.genomicState;
      var pixelWidth = viewport.$viewport[0].clientWidth;
      var locusString = genomicState.referenceFrame.showLocus(pixelWidth);
      locus.push(locusString);

      if (genomicState.selection) {
        var selection = {
          gene: genomicState.selection.gene,
          snp: genomicState.selection.snp
        };
        gtexSelections[locusString] = selection;
      }
    });
    json["locus"] = locus;
    var gtexKeys = Object.getOwnPropertyNames(gtexSelections);

    if (gtexKeys.length > 0) {
      json["gtexSelections"] = gtexSelections;
    }

    trackJson = [];
    this.trackViews.forEach(function (tv) {
      var track, config;
      track = tv.track;

      if (typeof track.getState === "function") {
        config = track.getState();
      } else {
        config = track.config;
      }

      if (config) {
        // null backpointer to browser
        if (config.browser) {
          delete config.browser;
        }

        config.order = track.order; //order++;

        trackJson.push(config);
      }
    });
    json["tracks"] = trackJson;
    return json; // This is an object, not a json string
  };

  Browser.prototype.compressedSession = function () {
    var json;
    json = JSON.stringify(this.toJSON());
    return compressString(json);
  };

  Browser.uncompressSession = function (url) {
    var bytes;

    if (url.indexOf('/gzip;base64') > 0) {
      //Proper dataURI
      bytes = decodeDataURI(url);
      var json = '';
      var _iteratorNormalCompletion16 = true;
      var _didIteratorError16 = false;
      var _iteratorError16 = undefined;

      try {
        for (var _iterator16 = bytes[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {
          var b = _step16.value;
          json += String.fromCharCode(b);
        }
      } catch (err) {
        _didIteratorError16 = true;
        _iteratorError16 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion16 && _iterator16.return != null) {
            _iterator16.return();
          }
        } finally {
          if (_didIteratorError16) {
            throw _iteratorError16;
          }
        }
      }

      return json;
    } else {
      var enc = url.substring(5);
      return uncompressString(enc);
    }
  };

  Browser.prototype.sessionURL = function () {
    var surl, path, idx;
    path = window.location.href.slice();
    idx = path.indexOf("?");
    surl = (idx > 0 ? path.substring(0, idx) : path) + "?sessionURL=data:" + this.compressedSession();
    return surl;
  };

  var httpMessages = {
    "401": "Access unauthorized",
    "403": "Access forbidden",
    "404": "Not found"
  };

  Browser.prototype.presentAlert = function (alert, $parent) {
    var string;
    string = alert.message || alert;

    if (httpMessages.hasOwnProperty(string)) {
      string = httpMessages[string];
    }

    this.alertDialog.configure({
      label: string
    });
    this.alertDialog.present($parent);
  };

  Browser.prototype.presentMessageWithCallback = function (message, callback) {
    this.alertDialog.presentMessageWithCallback(message, callback);
  };
  /**
   * Record a mouse click on a specific viewport.   This might be the start of a drag operation.   Dragging
   * (panning) is handled here so that the mouse can move out of a specific viewport (e.g. stray into another
   * track) without halting the drag.
   *
   * @param e
   * @param viewport
   */


  Browser.prototype.mouseDownOnViewport = function (e, viewport) {
    var coords;
    coords = pageCoordinates(e);
    this.vpMouseDown = {
      viewport: viewport,
      lastMouseX: coords.x,
      mouseDownX: coords.x,
      lastMouseY: coords.y,
      mouseDownY: coords.y,
      genomicState: viewport.genomicState,
      referenceFrame: viewport.genomicState.referenceFrame
    };
  };

  Browser.prototype.cancelTrackPan = function () {
    var dragEnd = this.isDragging;
    this.isDragging = false;
    this.isScrolling = false;
    this.vpMouseDown = undefined;

    if (dragEnd) {
      this.updateViews();
      this.fireEvent('trackdragend');
    }
  };

  Browser.prototype.startTrackDrag = function (trackView) {
    this.dragTrack = trackView;
  };

  Browser.prototype.updateTrackDrag = function (dragDestination) {
    if (dragDestination && this.dragTrack) {
      var dragged = this.dragTrack;
      var indexDestination = this.trackViews.indexOf(dragDestination);
      var indexDragged = this.trackViews.indexOf(dragged);
      var trackViews = this.trackViews;
      trackViews[indexDestination] = dragged;
      trackViews[indexDragged] = dragDestination;
      var newOrder = this.trackViews[indexDestination].track.order;
      this.trackViews[indexDragged].track.order = newOrder;
      var nTracks = trackViews.length;
      var lastOrder = newOrder;

      if (indexDestination < indexDragged) {
        // Displace tracks below
        for (var i = indexDestination + 1; i < nTracks; i++) {
          var track = trackViews[i].track;

          if (track.order <= lastOrder) {
            track.order = Math.min(Number.MAX_VALUE, lastOrder + 1);
            lastOrder = track.order;
          } else {
            break;
          }
        }
      } else {
        // Displace tracks above.  First track (index 0) is "ruler"
        for (var _i = indexDestination - 1; _i > 0; _i--) {
          var _track = trackViews[_i].track;

          if (_track.order >= lastOrder) {
            _track.order = Math.max(-Number.MAX_VALUE, lastOrder - 1);
            lastOrder = _track.order;
          } else {
            break;
          }
        }
      }

      this.reorderTracks();
    }
  };

  Browser.prototype.endTrackDrag = function () {
    if (this.dragTrack) {
      this.dragTrack.$trackDragScrim.hide();
    }

    this.dragTrack = undefined;
  };
  /**
   * Mouse handlers to support drag (pan)
   */


  function addMouseHandlers$1() {
    var self = this;
    $(window).on('resize' + this.namespace, function () {
      self.resize();
    });
    $(this.root).on('mouseup', mouseUpOrLeave);
    $(this.root).on('mouseleave', mouseUpOrLeave);
    $(this.trackContainerDiv).on('mousemove', handleMouseMove);
    $(this.trackContainerDiv).on('touchmove', handleMouseMove);
    $(this.trackContainerDiv).on('mouseleave', mouseUpOrLeave);
    $(this.trackContainerDiv).on('mouseup', mouseUpOrLeave);
    $(this.trackContainerDiv).on('touchend', mouseUpOrLeave);

    function handleMouseMove(e) {
      var coords, viewport, viewportWidth, referenceFrame;
      e.preventDefault();

      if (self.loadInProgress()) {
        return;
      }

      coords = pageCoordinates(e);

      if (self.vpMouseDown) {
        // Determine direction,  true == horizontal
        var horizontal = Math.abs(coords.x - self.vpMouseDown.mouseDownX) > Math.abs(coords.y - self.vpMouseDown.mouseDownY);
        viewport = self.vpMouseDown.viewport;
        viewportWidth = viewport.$viewport.width();
        referenceFrame = viewport.genomicState.referenceFrame;

        if (!self.isDragging && !self.isScrolling) {
          if (horizontal) {
            if (self.vpMouseDown.mouseDownX && Math.abs(coords.x - self.vpMouseDown.mouseDownX) > self.constants.dragThreshold) {
              self.isDragging = true;
            }
          } else {
            if (self.vpMouseDown.mouseDownY && Math.abs(coords.y - self.vpMouseDown.mouseDownY) > self.constants.scrollThreshold) {
              self.isScrolling = true;
              var trackView = viewport.trackView;
              var viewportContainerHeight = trackView.$viewportContainer.height();
              var contentHeight = trackView.maxContentHeight();
              self.vpMouseDown.r = viewportContainerHeight / contentHeight;
            }
          }
        }

        if (self.isDragging) {
          referenceFrame.shiftPixels(self.vpMouseDown.lastMouseX - coords.x, viewportWidth);
          self.updateLocusSearchWidget(self.vpMouseDown.genomicState);
          self.updateViews();
          self.fireEvent('trackdrag');
        }

        if (self.isScrolling) {
          var delta = self.vpMouseDown.r * (self.vpMouseDown.lastMouseY - coords.y);
          self.vpMouseDown.viewport.trackView.scrollBy(delta);
        }

        self.vpMouseDown.lastMouseX = coords.x;
        self.vpMouseDown.lastMouseY = coords.y;
      }
    }

    function mouseUpOrLeave(e) {
      self.cancelTrackPan();
      self.endTrackDrag();
    }
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var WindowSizePanel = function WindowSizePanel($parent, browser) {
    this.$content = $('<div class="igv-windowsizepanel-content-div">');
    $parent.append(this.$content);
    this.browser = browser;
  };

  WindowSizePanel.prototype.show = function () {
    this.$content.show();
  };

  WindowSizePanel.prototype.hide = function () {
    this.$content.hide();
  };

  WindowSizePanel.prototype.updateWithGenomicState = function (genomicState) {
    this.$content.text(prettyBasePairNumber(Math.round(this.browser.viewportWidth() * genomicState.referenceFrame.bpPerPixel)));
  };

  function prettyBasePairNumber(raw) {
    var denom, units, value, floored;

    if (raw > 1e7) {
      denom = 1e6;
      units = " mb";
    } else if (raw > 1e4) {
      denom = 1e3;
      units = " kb";
      value = raw / denom;
      floored = Math.floor(value);
      return numberFormatter(floored) + units;
    } else {
      return numberFormatter(raw) + " bp";
    }

    value = raw / denom;
    floored = Math.floor(value);
    return floored.toString() + units;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var InputDialog = function InputDialog($parent) {
    var self = this,
        $header,
        $buttons; // dialog container

    this.$container = $("<div>", {
      class: 'igv-generic-dialog-container'
    });
    $parent.append(this.$container);
    this.$container.offset({
      left: 0,
      top: 0
    }); // dialog header

    $header = $("<div>", {
      class: 'igv-generic-dialog-header'
    });
    this.$container.append($header);
    attachDialogCloseHandlerWithParent($header, function () {
      self.$input.val(undefined);
      self.$container.offset({
        left: 0,
        top: 0
      });
      self.$container.hide();
    }); // dialog label

    this.$label = $("<div>", {
      class: 'igv-generic-dialog-one-liner'
    });
    this.$container.append(this.$label);
    this.$label.text('Unlabeled'); // input container

    this.$input_container = $("<div>", {
      class: 'igv-generic-dialog-input'
    });
    this.$container.append(this.$input_container); //

    this.$input = $("<input>");
    this.$input_container.append(this.$input); // ok | cancel

    $buttons = $("<div>", {
      class: 'igv-generic-dialog-ok-cancel'
    });
    this.$container.append($buttons); // ok

    this.$ok = $("<div>");
    $buttons.append(this.$ok);
    this.$ok.text('OK'); // cancel

    this.$cancel = $("<div>");
    $buttons.append(this.$cancel);
    this.$cancel.text('Cancel');
    this.$cancel.on('click', function () {
      self.$input.val(undefined);
      self.$container.offset({
        left: 0,
        top: 0
      });
      self.$container.hide();
    }); //this.$container.draggable({ handle:$header.get(0) });

    makeDraggable(this.$container.get(0), $header.get(0));
    this.$container.hide();
  };

  InputDialog.prototype.configure = function (config) {
    var self = this;
    this.$label.text(config.label);
    this.$input.val(config.input);
    this.$input.unbind();
    this.$input.on('keyup', function (e) {
      if (13 === e.keyCode) {
        config.click();
        self.$input.val(undefined);
        self.$container.offset({
          left: 0,
          top: 0
        });
        self.$container.hide();
      }
    });
    this.$ok.unbind();
    this.$ok.on('click', function () {
      config.click();
      self.$input.val(undefined);
      self.$container.offset({
        left: 0,
        top: 0
      });
      self.$container.hide();
    });
  };

  InputDialog.prototype.present = function ($parent) {
    var offset_top, scroll_top;
    offset_top = $parent.offset().top;
    scroll_top = $('body').scrollTop();
    this.$container.offset({
      left: $parent.width() - this.$container.width(),
      top: offset_top + scroll_top
    });
    this.$container.show();
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California 
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var DataRangeDialog = function DataRangeDialog($parent, browser) {
    var self = this,
        $header,
        $buttons,
        $div;
    this.browser = browser; // dialog container

    this.$container = $("<div>", {
      class: 'igv-generic-dialog-container'
    });
    $parent.append(this.$container);
    this.$container.offset({
      left: 0,
      top: 0
    }); // dialog header

    $header = $("<div>", {
      class: 'igv-generic-dialog-header'
    });
    this.$container.append($header);
    attachDialogCloseHandlerWithParent($header, function () {
      self.$minimum_input.val(undefined);
      self.$maximum_input.val(undefined);
      self.$container.offset({
        left: 0,
        top: 0
      });
      self.$container.hide();
    }); // minimun

    this.$minimum = $("<div>", {
      class: 'igv-generic-dialog-label-input'
    });
    this.$container.append(this.$minimum); //

    $div = $('<div>');
    $div.text('Minimum');
    this.$minimum.append($div); //

    this.$minimum_input = $("<input>");
    this.$minimum.append(this.$minimum_input); // maximum

    this.$maximum = $("<div>", {
      class: 'igv-generic-dialog-label-input'
    });
    this.$container.append(this.$maximum); //

    $div = $('<div>');
    $div.text('Maximum');
    this.$maximum.append($div); //

    this.$maximum_input = $("<input>");
    this.$maximum.append(this.$maximum_input); // ok | cancel

    $buttons = $("<div>", {
      class: 'igv-generic-dialog-ok-cancel'
    });
    this.$container.append($buttons); // ok

    this.$ok = $("<div>");
    $buttons.append(this.$ok);
    this.$ok.text('OK'); // cancel

    this.$cancel = $("<div>");
    $buttons.append(this.$cancel);
    this.$cancel.text('Cancel');
    this.$cancel.on('click', function () {
      self.$minimum_input.val(undefined);
      self.$maximum_input.val(undefined);
      self.$container.offset({
        left: 0,
        top: 0
      });
      self.$container.hide();
    }); //this.$container.draggable({ handle:$header.get(0) });

    makeDraggable(this.$container.get(0), $header.get(0));
    this.$container.hide();
  };

  DataRangeDialog.prototype.configure = function (config) {
    var self = this,
        dataRange,
        min,
        max;
    dataRange = config.trackView.dataRange();

    if (dataRange) {
      min = dataRange.min;
      max = dataRange.max;
    } else {
      min = 0;
      max = 100;
    }

    this.$minimum_input.val(min);
    this.$maximum_input.val(max);
    this.$minimum_input.unbind();
    this.$minimum_input.on('keyup', function (e) {
      if (13 === e.keyCode) {
        processResults.call(self, config);
      }
    });
    this.$maximum_input.unbind();
    this.$maximum_input.on('keyup', function (e) {
      if (13 === e.keyCode) {
        processResults.call(self, config);
      }
    });
    this.$ok.unbind();
    this.$ok.on('click', function () {
      processResults.call(self, config);
    });
  };

  function processResults(config) {
    var self = this,
        min,
        max;
    min = parseFloat(this.$minimum_input.val());
    max = parseFloat(this.$maximum_input.val());

    if (isNaN(min) || isNaN(max)) {
      self.browser.presentAlert("Must input numeric values", undefined);
    } else {
      if (true === config.trackView.track.autoscale) {
        $('#datarange-autoscale').trigger('click');
      }

      config.trackView.setDataRange(min, max, false);
    }

    this.$minimum_input.val(undefined);
    this.$maximum_input.val(undefined);
    this.$container.offset({
      left: 0,
      top: 0
    });
    this.$container.hide();
  }

  DataRangeDialog.prototype.present = function ($parent) {
    var offset_top, scroll_top;
    offset_top = $parent.offset().top;
    scroll_top = $('body').scrollTop();
    this.$container.offset({
      left: $parent.width() - this.$container.width(),
      top: offset_top + scroll_top
    });
    this.$container.show();
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var TrackRemovalDialog = function TrackRemovalDialog($parent) {
    var self = this,
        $header,
        $buttons; // dialog container

    this.$container = $("<div>", {
      class: 'igv-generic-dialog-container'
    });
    $parent.append(this.$container);
    this.$container.offset({
      left: 0,
      top: 0
    }); // dialog header

    $header = $("<div>", {
      class: 'igv-generic-dialog-header'
    });
    this.$container.append($header);
    attachDialogCloseHandlerWithParent($header, function () {
      self.$track_name.text(undefined);
      self.$container.offset({
        left: 0,
        top: 0
      });
      self.$container.hide();
    }); // dialog label

    this.$label = $("<div>", {
      class: 'igv-generic-dialog-one-liner'
    });
    this.$container.append(this.$label);
    this.$label.text('Remove track:'); // track name

    this.$track_name = $("<div>", {
      class: 'igv-generic-dialog-one-liner igv-ellipsis'
    });
    this.$container.append(this.$track_name); // this.$track_name.text('this is a really long track name so I better make it interesting');
    // ok | cancel

    $buttons = $("<div>", {
      class: 'igv-generic-dialog-ok-cancel'
    });
    this.$container.append($buttons); // ok

    this.$ok = $("<div>");
    $buttons.append(this.$ok);
    this.$ok.text('OK'); // cancel

    this.$cancel = $("<div>");
    $buttons.append(this.$cancel);
    this.$cancel.text('Cancel');
    this.$cancel.on('click', function () {
      self.$track_name.text(undefined);
      self.$container.offset({
        left: 0,
        top: 0
      });
      self.$container.hide();
    }); // this.$container.draggable({ handle:$header.get(0) });

    makeDraggable(this.$container.get(0), $header.get(0));
    this.$container.hide();
  };

  TrackRemovalDialog.prototype.configure = function (config) {
    var self = this;
    this.$track_name.text(config.name || 'unnamed');
    this.$ok.unbind();
    this.$ok.on('click', function () {
      config.click();
      self.$track_name.text(undefined);
      self.$container.offset({
        left: 0,
        top: 0
      });
      self.$container.hide();
    });
  };

  TrackRemovalDialog.prototype.present = function ($parent) {
    var offset_top, scroll_top;
    offset_top = $parent.offset().top;
    scroll_top = $('body').scrollTop();
    this.$container.offset({
      left: $parent.width() - this.$container.width(),
      top: offset_top + scroll_top
    });
    this.$container.show();
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var AlertDialog = function AlertDialog($parent) {
    this.$parent = $parent; // container

    this.$container = $("<div>", {
      class: 'igv-alert-dialog-container'
    });
    $parent.append(this.$container);
    this.$container.offset({
      left: 0,
      top: 0
    }); // header

    var $header = $("<div>");
    this.$container.append($header); // body container

    var $div = $("<div>", {
      id: 'igv-alert-dialog-body'
    });
    this.$container.append($div); // body copy

    this.$body = $("<div>", {
      id: 'igv-alert-dialog-body-copy'
    });
    $div.append(this.$body);
    var self = this; // attachDialogCloseHandlerWithParent($header, function () {
    //     self.$body.html('');
    //     self.$container.offset( { left:0, top:0 } );
    //     self.$container.hide();
    // });
    // ok container

    var $ok_container = $("<div>");
    this.$container.append($ok_container); // ok

    this.$ok = $("<div>");
    $ok_container.append(this.$ok);
    this.$ok.text('OK');
    this.$ok.on('click', function () {
      self.$body.html('');
      self.$container.offset({
        left: 0,
        top: 0
      });
      self.$container.hide();
    });
    makeDraggable(this.$container.get(0), $header.get(0));
    this.$container.hide();
  };

  AlertDialog.prototype.configure = function (config) {
    this.$body.html(config.label);
  };

  AlertDialog.prototype.presentMessageWithCallback = function (message, callback) {
    this.$body.text(message);
    var css = {
      left: (this.$parent.width() - this.$container.width()) / 2,
      top: (this.$parent.height() - this.$container.height()) / 2
    };
    this.$container.css(css);
    this.$container.show();
    this.$ok.text('OK');
    var self = this;
    this.$ok.on('click', function () {
      callback('OK');
      self.$body.html('');
      self.$container.offset({
        left: 0,
        top: 0
      });
      self.$container.hide();
    });
  };

  AlertDialog.prototype.present = function ($alternativeParent) {
    var obj, $p;
    $p = $alternativeParent || this.$parent;
    obj = {
      left: ($p.width() - this.$container.width()) / 2,
      top: ($p.height() - this.$container.height()) / 2
    };
    this.$container.css(obj);
    this.$container.show();
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var UserFeedback = function UserFeedback($parent) {
    this.$container = $('<div class="igv-user-feedback">');
    $parent.append(this.$container); // header

    var $header = $('<div>');
    this.$container.append($header); // alert

    var $exclamation = $('<div>');
    $header.append($exclamation);
    var $a = createIcon("exclamation-triangle", 'red');
    $exclamation.append($a); // dismiss

    var $dismiss = $('<div>');
    $header.append($dismiss);
    var $b = createIcon("times-circle", 'grey');
    $dismiss.append($b); // body copy

    var $bodyCopyContainer = $('<div>');
    this.$container.append($bodyCopyContainer);
    var $bodyCopy = $('<div>');
    $bodyCopyContainer.append($bodyCopy);
    $bodyCopy.text('i am user feedback');
    var self;
    $dismiss.click(function () {
      $bodyCopy.html('');
      self.$container.hide();
    });
  };

  UserFeedback.prototype.show = function () {
    this.$container.show();
  };

  UserFeedback.prototype.hide = function () {
    this.$container.hide();
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 University of California San Diego
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var SVGSaveControl = function SVGSaveControl($parent, browser) {
    var $button = $('<div class="igv-nav-bar-button">');
    $parent.append($button);
    $button.text('Save SVG');
    $button.on('click.svg-save-control', function () {
      // browser.renderSVG({ $container: $('#igv-svg-container') })
      browser.renderSVG({});
    });
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 University of California San Diego
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var ZoomWidget = function ZoomWidget(browser, $parent) {
    var $div;
    this.$zoomContainer = $('<div class="igv-zoom-widget">');
    $parent.append(this.$zoomContainer); // zoom out

    $div = $('<div>');
    this.$zoomContainer.append($div);
    $div.append(createIcon("minus-circle"));
    $div.on('click', function () {
      browser.zoomOut();
    }); // Range slider

    $div = $('<div>');
    this.$zoomContainer.append($div);
    this.$slider = $('<input type="range"/>');
    $div.append(this.$slider);
    this.$slider.on('change', function (e) {
      browser.zoomWithRangePercentage(e.target.value / 100.0);
    }); // zoom in

    $div = $('<div>');
    this.$zoomContainer.append($div);
    $div.append(createIcon("plus-circle"));
    $div.on('click', function () {
      browser.zoomIn();
    });
    this.currentChr = undefined;
    var self = this;
    browser.on('locuschange', function () {
      browser.updateZoomSlider(self.$slider);
    });
  };

  ZoomWidget.prototype.hide = function () {
    this.$zoomContainer.hide();
  };

  ZoomWidget.prototype.show = function () {
    this.$zoomContainer.show();
  };

  ZoomWidget.prototype.hideSlider = function () {
    this.$slider.hide();
  };

  ZoomWidget.prototype.showSlider = function () {
    this.$slider.show();
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016-2017 The Regents of the University of California 
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var ChromosomeSelectWidget = function ChromosomeSelectWidget(browser, $parent) {
    this.showAllChromosomes = browser.config.showAllChromosomes;
    this.$container = $('<div>', {
      class: 'igv-chromosome-select-widget-container'
    });
    $parent.append(this.$container);
    this.$select = $('<select>', {
      'name': 'chromosome-select-widget'
    });
    this.$container.append(this.$select);
    this.$select.on('change', function () {
      var value = $(this).val();

      if (value !== '') {
        browser.search($(this).val());
        $(this).blur();
      }
    });
  };

  ChromosomeSelectWidget.prototype.update = function (genome) {
    this.$select.empty();
    var list = this.showAllChromosomes ? genome.chromosomeNames.slice() : genome.wgChromosomeNames.slice(); // slice used to copy list

    list.unshift('all');
    list.unshift('');
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var name = _step.value;
        var $o;
        $o = $('<option>', {
          'value': name
        });
        this.$select.append($o);
        $o.text(name);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 University of California San Diego
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var TrackLabelControl = function TrackLabelControl($parent, browser) {
    var self = this;
    this.browser = browser;
    this.$button = $('<div class="igv-nav-bar-button">');
    $parent.append(this.$button);
    this.$button.text('track labels');
    this.$button.on('click', function () {
      if (true === browser.trackLabelsVisible) {
        self.doHide();
      } else {
        self.doShow();
      }
    });
  };

  TrackLabelControl.prototype.doHide = function () {
    this.$button.removeClass('igv-nav-bar-button-clicked');
    this.browser.hideTrackLabels();
  };

  TrackLabelControl.prototype.doShow = function () {
    this.$button.addClass('igv-nav-bar-button-clicked');
    this.browser.showTrackLabels();
  };

  TrackLabelControl.prototype.setState = function (trackLabelsVisible) {
    if (true === trackLabelsVisible) {
      this.$button.addClass('igv-nav-bar-button-clicked');
    } else {
      this.$button.removeClass('igv-nav-bar-button-clicked');
    }
  };

  TrackLabelControl.prototype.disable = function () {
    this.doHide();
    this.$button.hide();
  };

  TrackLabelControl.prototype.enable = function () {
    this.$button.show();
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 University of California San Diego
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var CenterGuide = function CenterGuide($guideParent, $controlParent, config, browser) {
    var self = this;
    this.browser = browser;
    this.$container = $('<div class="igv-center-guide igv-center-guide-thin">');
    $guideParent.append(this.$container);

    if (true === config.showCenterGuideButton) {
      this.$centerGuideToggle = $('<div class="igv-nav-bar-button">');
      $controlParent.append(this.$centerGuideToggle);
      this.$centerGuideToggle.text('center line');
      this.$centerGuideToggle.on('click', function () {
        if (true === browser.isCenterGuideVisible) {
          self.doHide();
        } else {
          self.doShow();
        }
      });
    }
  };

  CenterGuide.prototype.doHide = function () {
    if (this.$centerGuideToggle) {
      this.$centerGuideToggle.removeClass('igv-nav-bar-button-clicked');
    }

    this.browser.hideCenterGuide();
  };

  CenterGuide.prototype.doShow = function () {
    if (this.$centerGuideToggle) {
      this.$centerGuideToggle.addClass('igv-nav-bar-button-clicked');
    }

    this.browser.showCenterGuide();
  };

  CenterGuide.prototype.setState = function (isCenterGuideVisible) {
    if (this.$centerGuideToggle) {
      if (true === isCenterGuideVisible) {
        this.$centerGuideToggle.addClass('igv-nav-bar-button-clicked');
      } else {
        this.$centerGuideToggle.removeClass('igv-nav-bar-button-clicked');
      }
    }
  };

  CenterGuide.prototype.forcedHide = function () {
    if (this.$centerGuideToggle) {
      this.$centerGuideToggle.hide();
    }

    if (true === this.browser.isCenterGuideVisible) {
      this.$container.hide();
    }
  };

  CenterGuide.prototype.forcedShow = function () {
    if (this.$centerGuideToggle) {
      this.$centerGuideToggle.show();
    }

    if (true === this.browser.isCenterGuideVisible) {
      this.$container.show();
    }
  };

  CenterGuide.prototype.repaint = function () {
    var ppb, xy, halfWidth, width, left, ls, ws, center, referenceFrame;

    if (this.browser.genomicStateList) {
      referenceFrame = this.browser.genomicStateList[0].referenceFrame;
      ppb = 1.0 / referenceFrame.bpPerPixel;

      if (ppb > 1) {
        xy = this.browser.trackViews[0].$viewportContainer.position();
        halfWidth = Math.round(this.browser.trackViews[0].$viewportContainer.width() / 2);
        center = xy.left + halfWidth;
        width = referenceFrame.toPixels(1);
        left = center - 0.5 * width;
        ls = Math.round(left).toString() + 'px';
        ws = Math.round(width).toString() + 'px';
        this.$container.css({
          left: ls,
          width: ws
        });
        this.$container.removeClass('igv-center-guide-thin');
        this.$container.addClass('igv-center-guide-wide');
      } else {
        this.$container.css({
          left: '50%',
          width: '1px'
        });
        this.$container.removeClass('igv-center-guide-wide');
        this.$container.addClass('igv-center-guide-thin');
      }
    }
  };

  CenterGuide.prototype.resize = function () {
    this.repaint();
  };

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 University of California San Diego
   * Author: Jim Robinson
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */

  var CursorGuide = function CursorGuide($cursorGuideParent, $controlParent, config, browser) {
    var _this = this;

    var self = this;
    this.browser = browser;
    this.$guide = $('<div class="igv-cursor-tracking-guide">');
    $cursorGuideParent.append(this.$guide); // Guide line is bound within track area, and offset by 5 pixels so as not to interfere mouse clicks.

    $cursorGuideParent.on('mousemove.cursor-guide', function (e) {
      e.preventDefault();
      var $canvas = $(document.elementFromPoint(e.clientX, e.clientY));
      var $viewportContent = $canvas.parent();

      if ($viewportContent.hasClass('igv-viewport-content-div')) {
        var _mouseHandler = mouseHandler(e, $viewportContent, _this.$guide, $cursorGuideParent, browser),
            bp = _mouseHandler.bp,
            start = _mouseHandler.start,
            end = _mouseHandler.end,
            interpolant = _mouseHandler.interpolant; // console.log('x ' + interpolant.toFixed(3) + ' bp ' + numberFormatter(bp) + ' start ' + numberFormatter(start) + ' end ' + numberFormatter(end));


        if (_this.customMouseHandler) {
          _this.customMouseHandler({
            bp: bp,
            start: start,
            end: end,
            interpolant: interpolant
          });
        }
      }
    });

    if (true === config.showCursorTrackingGuideButton) {
      this.$button = $('<div class="igv-nav-bar-button">');
      $controlParent.append(this.$button);
      this.$button.text('cursor guide');
      this.$button.on('click', function () {
        if (true === browser.cursorGuideVisible) {
          self.doHide();
        } else {
          self.doShow();
        }
      });
    }
  };

  var mouseHandler = function mouseHandler(event, $viewportContent, $guideLine, $guideParent, browser) {
    // pixel location of guide line
    var guideParentMouseXY = getMouseXY($guideParent.get(0), event);
    var left = guideParentMouseXY.x + 'px';
    $guideLine.css({
      left: left
    }); // base-pair location of guide line

    var viewportContentMouseXY = getMouseXY($viewportContent.get(0), event);
    var index = $viewportContent.data('genomicStateIndex');
    var referenceFrame = browser.genomicStateList[index].referenceFrame;
    var _startBP = referenceFrame.start;

    var _endBP = 1 + referenceFrame.start + viewportContentMouseXY.width * referenceFrame.bpPerPixel; // bp = bp + (pixel * (bp / pixel))


    var bp = Math.round(_startBP + viewportContentMouseXY.x * referenceFrame.bpPerPixel); // TODO: Can we make use of this in the custom mouse handler (ie: Tracing3D)

    var $trackContainer = $viewportContent.closest('.igv-track-container-div');
    var trackContainerMouseXY = getMouseXY($trackContainer.get(0), event);
    return {
      $host: $trackContainer,
      host_css_left: left,
      bp: bp,
      start: _startBP,
      end: _endBP,
      interpolant: viewportContentMouseXY.xNormalized
    };
  };

  CursorGuide.prototype.doHide = function () {
    if (this.$button) {
      this.$button.removeClass('igv-nav-bar-button-clicked');
    }

    this.browser.hideCursorGuide();
  };

  CursorGuide.prototype.doShow = function () {
    this.$button.addClass('igv-nav-bar-button-clicked');
    this.browser.showCursorGuide();
  };

  CursorGuide.prototype.setState = function (cursorGuideVisible) {
    if (this.$button) {
      if (true === cursorGuideVisible) {
        this.$button.addClass('igv-nav-bar-button-clicked');
      } else {
        this.$button.removeClass('igv-nav-bar-button-clicked');
      }
    }
  };

  CursorGuide.prototype.disable = function () {
    this.doHide();
    this.$guide.hide();
  };

  CursorGuide.prototype.enable = function () {
    if (this.$button) {
      this.$button.show();
    }
  };

  function getMouseXY(domElement, event) {
    // a DOMRect object with eight properties: left, top, right, bottom, x, y, width, height
    var dr = domElement.getBoundingClientRect();
    var xy = {
      x: event.clientX - dr.left,
      y: event.clientY - dr.top,
      xNormalized: (event.clientX - dr.left) / dr.width,
      yNormalized: (event.clientY - dr.top) / dr.height,
      width: dr.width,
      height: dr.height
    };
    return xy;
  }

  /*
   * The MIT License (MIT)
   *
   * Copyright (c) 2014 Broad Institute
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var NavbarManager = function NavbarManager(browser) {
    this.browser = browser;
  };

  NavbarManager.prototype.navbarDidResize = function (width, isWholeGenomeView) {
    updateNavbar.call(this, createResponsiveClassSchedule.call(this, width, isWholeGenomeView));
  };

  function updateNavbar(responsiveClassSchedule) {
    this.browser['$toggle_button_container'].removeClass();
    this.browser['$toggle_button_container'].addClass(responsiveClassSchedule['$toggle_button_container']);
    this.browser.zoomWidget['$zoomContainer'].removeClass();
    this.browser.zoomWidget['$zoomContainer'].addClass(responsiveClassSchedule['$zoomContainer']);
  }

  function createResponsiveClassSchedule(navbarWidth, isWholeGenomeView) {
    var candidates = {};

    if (isWholeGenomeView) {
      this.browser.windowSizePanel.hide();
    } else {
      this.browser.windowSizePanel.show();
    }

    if (navbarWidth > 990) {
      candidates['$toggle_button_container'] = 'igv-nav-bar-toggle-button-container';
      candidates['$zoomContainer'] = 'igv-zoom-widget';
    } else if (navbarWidth > 860) {
      candidates['$toggle_button_container'] = 'igv-nav-bar-toggle-button-container';
      candidates['$zoomContainer'] = 'igv-zoom-widget-900';
    } else if (navbarWidth > 540) {
      candidates['$toggle_button_container'] = 'igv-nav-bar-toggle-button-container-750';
      candidates['$zoomContainer'] = 'igv-zoom-widget-900';
    } else {
      candidates['$toggle_button_container'] = 'igv-nav-bar-toggle-button-container-750';
      candidates['$zoomContainer'] = 'igv-zoom-widget-900';
      this.browser.windowSizePanel.hide();
    }

    if (isWholeGenomeView) {
      candidates['$zoomContainer'] = 'igv-zoom-widget-hidden';
    }

    return candidates;
  }

  var allBrowsers = [];
  /**
   * Create an igv.browser instance.  This object defines the public API for interacting with the genome browser.
   *
   * @param parentDiv - DOM tree root
   * @param config - configuration options.
   *
   */

  function createBrowser(_x, _x2) {
    return _createBrowser.apply(this, arguments);
  }

  function _createBrowser() {
    _createBrowser = _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee(parentDiv, config) {
      var browser, loadSession;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              loadSession = function _ref(config) {
                if (config.sessionURL) {
                  return browser.loadSession({
                    url: config.sessionURL
                  });
                } else {
                  return browser.loadSessionObject(config);
                }
              };

              if (undefined === config) config = {}; // Path to genomes.json file.   This is globally shared among all browser objects

              GenomeUtils.genomeList = config.genomeList || "https://s3.amazonaws.com/igv.org.genomes/genomes.json";
              setDefaults(config); // Explicit parameters have priority

              if (config.queryParametersSupported !== false) {
                extractQuery(config);
              } // Set track order explicitly. Otherwise they will be ordered randomly as each completes its async load


              setTrackOrder(config);
              browser = new Browser(config, $('<div class="igv-track-container-div">')[0]);
              browser.parent = parentDiv;
              $(parentDiv).append(browser.$root);
              setControls(browser, config);
              browser.$content = $('<div class="igv-content-div">');
              browser.$root.append(browser.$content);
              browser.$contentHeader = $('<div>', {
                class: 'igv-content-header'
              });
              browser.$content.append(browser.$contentHeader);
              browser.$content.append(browser.trackContainerDiv); // user feedback

              browser.userFeedback = new UserFeedback(browser.$content);
              browser.userFeedback.hide(); // browser.popover = new Popover(browser.$content, browser);

              browser.alertDialog = new AlertDialog(browser.$content);
              browser.inputDialog = new InputDialog(browser.$root);
              browser.trackRemovalDialog = new TrackRemovalDialog(browser.$root);
              browser.dataRangeDialog = new DataRangeDialog(browser.$root, browser);

              if (config.apiKey) {
                google.setApiKey(config.apiKey);
              }

              if (config.oauthToken) {
                oauth.setToken(config.oauthToken);
              }

              return _context.abrupt("return", loadSession(config).then(function (ignore) {
                if (false === config.showTrackLabels) {
                  browser.hideTrackLabels();
                } else {
                  browser.showTrackLabels();

                  if (browser.trackLabelControl) {
                    browser.trackLabelControl.setState(browser.trackLabelsVisible);
                  }
                }

                if (false === config.showCursorTrackingGuide) {
                  browser.cursorGuide.doHide();
                } else {
                  browser.cursorGuide.doShow();
                }

                if (false === config.showCenterGuide) {
                  browser.centerGuide.doHide();
                } else {
                  browser.centerGuide.doShow();
                }

                var isWGV = browser.isMultiLocusWholeGenomeView() || GenomeUtils.isWholeGenomeView(browser.genomicStateList[0].referenceFrame); // multi-locus mode or isWGV

                if (browser.isMultiLocusMode() || isWGV) {
                  browser.centerGuide.forcedHide();
                } else {
                  browser.centerGuide.forcedShow();
                }

                igvxhr.startup();
                browser.navbarManager.navbarDidResize(browser.$navigation.width(), isWGV);
                return browser;
              }).then(function (browser) {
                allBrowsers.push(browser);
                return browser;
              }));

            case 24:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _createBrowser.apply(this, arguments);
  }

  function removeBrowser(browser) {
    browser.dispose();
    browser.$root.remove();
    allBrowsers = allBrowsers.filter(function (item) {
      return item !== browser;
    }); // backward compatibility -- this will be removed in a future release

    if (typeof igv !== 'undefined' && browser === igv.browser) {
      igv.browser = undefined;
    }
  } // A hack to replace the global igv.browser for the purpose of alert dialogs
  // TODO fixme


  function getBrowser() {
    return allBrowsers[0];
  }
  /**
   * This function provided so clients can inform igv of a visibility change, typically when an igv instance is
   * made visible from a tab, accordion, or similar widget.
   */


  function visibilityChange() {
    allBrowsers.forEach(function (browser) {
      browser.visibilityChange();
    });
  }

  function setTrackOrder(conf) {
    var trackOrder = 1;

    if (conf.tracks) {
      conf.tracks.forEach(function (track) {
        if (track.order === undefined) {
          track.order = trackOrder++;
        }
      });
    }
  }

  function setControls(browser, conf) {
    var controlDiv; // Create controls. Can be customized by passing in a creation function that returns a div containing the controls

    controlDiv = conf.createControls ? conf.createControls(browser, conf) : createStandardControls(browser, conf);
    browser.$root.append($(controlDiv));

    if (false === conf.showControls) {
      $(controlDiv).hide();
    }
  }

  function createStandardControls(browser, config) {
    var $div, $igv_nav_bar_left_container, $igv_nav_bar_right_container, $genomic_location, $locus_size_group, $toggle_button_container, logoDiv, logoSvg, $controls, $navigation, $searchContainer;
    $controls = $('<div>', {
      class: 'igvControlDiv'
    });
    $navigation = $('<div>', {
      class: 'igv-navbar'
    });
    $controls.append($navigation);
    browser.$navigation = $navigation;
    browser.navbarManager = new NavbarManager(browser);
    $igv_nav_bar_left_container = $('<div>', {
      class: 'igv-nav-bar-left-container'
    });
    $navigation.append($igv_nav_bar_left_container); // IGV logo

    logoDiv = $('<div>', {
      class: 'igv-logo'
    });
    logoSvg = logo();
    logoSvg.css("width", "34px");
    logoSvg.css("height", "32px");
    logoDiv.append(logoSvg);
    $igv_nav_bar_left_container.append(logoDiv); // current genome

    browser.$current_genome = $('<div>', {
      class: 'igv-current-genome'
    });
    $igv_nav_bar_left_container.append(browser.$current_genome);
    browser.$current_genome.text(''); //

    $genomic_location = $('<div>', {
      class: 'igv-nav-bar-genomic-location'
    });
    $igv_nav_bar_left_container.append($genomic_location); // chromosome select widget

    browser.chromosomeSelectWidget = new ChromosomeSelectWidget(browser, $genomic_location);

    if (undefined === config.showChromosomeWidget) {
      config.showChromosomeWidget = true; // Default to true
    }

    if (true === config.showChromosomeWidget) {
      browser.chromosomeSelectWidget.$container.show();
    } else {
      browser.chromosomeSelectWidget.$container.hide();
    }

    $locus_size_group = $('<div>', {
      class: 'igv-locus-size-group'
    });
    $genomic_location.append($locus_size_group); // locus goto widget container

    $searchContainer = $('<div>', {
      class: 'igv-search-container'
    });
    $locus_size_group.append($searchContainer); // locus goto input

    browser.$searchInput = $('<input type="text" placeholder="Locus Search">');
    $searchContainer.append(browser.$searchInput);
    browser.$searchInput.change(function (e) {
      browser.search($(this).val()).catch(function (error) {
        browser.presentAlert(error);
      });
    }); // search icon container

    $div = $('<div>');
    $searchContainer.append($div); // search icon svg

    $div.append(createIcon("search"));
    $div.click(function () {
      browser.search(browser.$searchInput.val());
    }); // $searchContainer.append($faSearch);
    // TODO: Currently not used
    // search results presented in table
    // browser.$searchResults = $('<div class="igv-search-results">');
    // $searchContainer.append(browser.$searchResults.get(0));
    // browser.$searchResultsTable = $('<table>');
    // browser.$searchResults.append(browser.$searchResultsTable.get(0));
    // browser.$searchResults.hide();
    // window size display

    browser.windowSizePanel = new WindowSizePanel($locus_size_group, browser); // cursor guide | center guide | track labels

    $igv_nav_bar_right_container = $('<div class="igv-nav-bar-right-container">');
    $navigation.append($igv_nav_bar_right_container);
    $toggle_button_container = $('<div class="igv-nav-bar-toggle-button-container">');
    $igv_nav_bar_right_container.append($toggle_button_container);
    browser.$toggle_button_container = $toggle_button_container; // cursor guide

    browser.cursorGuide = new CursorGuide($(browser.trackContainerDiv), $toggle_button_container, config, browser); // center guide

    browser.centerGuide = new CenterGuide($(browser.trackContainerDiv), $toggle_button_container, config, browser); // toggle track labels

    if (true === config.showTrackLabelButton) {
      browser.trackLabelControl = new TrackLabelControl($toggle_button_container, browser);
    } // SVG save button


    if (config.showSVGButton) {
      browser.svgSaveControl = new SVGSaveControl($toggle_button_container, browser);
    } // zoom widget


    browser.zoomWidget = new ZoomWidget(browser, $igv_nav_bar_right_container);

    if (false === config.showNavigation) {
      browser.$navigation.hide();
    }

    return $controls.get(0);
  }

  function setDefaults(config) {
    if (undefined === config.promisified) {
      config.promisified = false;
    }

    if (undefined === config.minimumBases) {
      config.minimumBases = 40;
    }

    if (undefined === config.showIdeogram) {
      config.showIdeogram = true;
    }

    if (undefined === config.showCursorTrackingGuideButton) {
      config.showCursorTrackingGuideButton = true;
    }

    if (undefined === config.showCenterGuideButton) {
      config.showCenterGuideButton = true;
    }

    if (undefined === config.showSVGButton) {
      config.showSVGButton = true;
    }

    if (undefined === config.showTrackLabelButton) {
      config.showTrackLabelButton = true;
    }

    if (undefined === config.showCursorTrackingGuide) {
      config.showCursorTrackingGuide = false;
    }

    if (undefined === config.showCenterGuide) {
      config.showCenterGuide = false;
    }

    if (undefined === config.showTrackLabels) {
      config.showTrackLabels = true;
    }

    if (config.showControls === undefined) {
      config.showControls = true;
    }

    if (config.showNavigation === undefined) {
      config.showNavigation = true;
    }

    if (config.showRuler === undefined) {
      config.showRuler = true;
    }

    if (config.showSequence === undefined) {
      config.showSequence = true;
    }

    if (config.flanking === undefined) {
      config.flanking = 1000;
    }

    if (config.pairsSupported === undefined) {
      config.pairsSupported = true;
    }

    if (!config.tracks) {
      config.tracks = [];
    }

    if (config.showSequence) {
      config.tracks.push({
        type: "sequence",
        order: -Number.MAX_VALUE
      });
    }
  }

  function extractQuery(config) {
    var i1, i2, i, j, s, query, tokens, uri, key, value;
    uri = window.location.href;
    query = {};
    i1 = uri.indexOf("?");
    i2 = uri.lastIndexOf("#");
    var files;
    var indexURLs;

    if (i1 >= 0) {
      if (i2 < 0) i2 = uri.length;

      for (i = i1 + 1; i < i2;) {
        j = uri.indexOf("&", i);
        if (j < 0) j = i2;
        s = uri.substring(i, j);
        tokens = s.split("=", 2);

        if (tokens.length === 2) {
          key = tokens[0];
          value = decodeURIComponent(tokens[1]);

          if ('file' === key) {
            // IGV desktop style file parameter
            files = value.split(',');
          } else if ('index' === key) {
            // IGV desktop style index parameter
            indexURLs = value.split(',');
          } else {
            config[key] = value;
          }

          i = j + 1;
        }
      }
    }

    if (files) {
      if (!config.tracks) config.tracks = [];

      for (var _i = 0; _i < files.length; _i++) {
        if (files[_i].endsWith(".xml") || files[_i].endsWith(".json")) {
          config.sessionURL = files[_i];
          break;
        }

        var trackConfig = {
          url: files[_i]
        };

        if (indexURLs && indexURLs.length > _i) {
          trackConfig.indexURL = indexURLs[_i];
        }

        config.tracks.push(trackConfig);
      }
    }

    return query;
  }

  function logo() {
    return $('<svg width="690px" height="324px" viewBox="0 0 690 324" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">' + '<title>IGV</title>' + '<g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">' + '<g id="IGV" fill="#666666">' + '<polygon id="Path" points="379.54574 8.00169252 455.581247 8.00169252 515.564813 188.87244 532.884012 253.529506 537.108207 253.529506 554.849825 188.87244 614.833392 8.00169252 689.60164 8.00169252 582.729511 320.722144 486.840288 320.722144"></polygon>' + '<path d="M261.482414,323.793286 C207.975678,323.793286 168.339046,310.552102 142.571329,284.069337 C116.803612,257.586572 103.919946,217.158702 103.919946,162.784513 C103.919946,108.410325 117.437235,67.8415913 144.472217,41.0770945 C171.507199,14.3125977 212.903894,0.930550071 268.663545,0.930550071 C283.025879,0.930550071 298.232828,1.84616386 314.284849,3.6774189 C330.33687,5.50867394 344.839793,7.97378798 357.794056,11.072835 L357.794056,68.968378 C339.48912,65.869331 323.578145,63.5450806 310.060654,61.9955571 C296.543163,60.4460336 284.574731,59.6712835 274.154998,59.6712835 C255.850062,59.6712835 240.502308,61.4320792 228.111274,64.9537236 C215.720241,68.4753679 205.793482,74.2507779 198.330701,82.2801269 C190.867919,90.309476 185.587729,100.87425 182.48997,113.974767 C179.392212,127.075284 177.843356,143.345037 177.843356,162.784513 C177.843356,181.942258 179.251407,198.000716 182.067551,210.960367 C184.883695,223.920018 189.671068,234.41436 196.429813,242.443709 C203.188559,250.473058 212.059279,256.178037 223.042241,259.558815 C234.025202,262.939594 247.683295,264.629958 264.01693,264.629958 C268.241146,264.629958 273.098922,264.489094 278.590403,264.207362 C284.081883,263.925631 289.643684,263.50304 295.275972,262.939577 L295.275972,159.826347 L361.595831,159.826347 L361.595831,308.579859 C344.698967,313.087564 327.239137,316.750019 309.215815,319.567334 C291.192494,322.38465 275.281519,323.793286 261.482414,323.793286 L261.482414,323.793286 L261.482414,323.793286 Z" id="Path"></path>;' + '<polygon id="Path" points="0.81355666 5.00169252 73.0472883 5.00169252 73.0472883 317.722144 0.81355666 317.722144"></polygon>' + '</g> </g> </svg>');
  }

  function createTrack(config, browser) {
    return Browser.prototype.createTrack.call(browser, config);
  }

  function embedCSS() {
    var css = '.igv-user-feedback {\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 512px;\n  height: 360px;\n  z-index: 2048;\n  background-color: white;\n  border-color: #a2a2a2;\n  border-style: solid;\n  border-width: thin;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  color: #444;\n  display: flex;\n  flex-direction: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center; }\n  .igv-user-feedback div:first-child {\n    position: relative;\n    height: 24px;\n    width: 100%;\n    background-color: white;\n    border-bottom-color: #a2a2a2;\n    border-bottom-style: solid;\n    border-bottom-width: thin; }\n    .igv-user-feedback div:first-child div {\n      position: absolute;\n      top: 2px;\n      width: 16px;\n      height: 16px;\n      background-color: transparent; }\n    .igv-user-feedback div:first-child div:first-child {\n      left: 8px; }\n    .igv-user-feedback div:first-child div:last-child {\n      cursor: pointer;\n      right: 8px; }\n  .igv-user-feedback div:last-child {\n    width: 100%;\n    height: calc(100% - 24px);\n    border-width: 0; }\n    .igv-user-feedback div:last-child div {\n      width: auto;\n      height: auto;\n      margin: 8px; }\n\n.igv-color-swatch {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  width: 32px;\n  height: 32px;\n  border-style: solid;\n  border-width: 2px;\n  border-color: white;\n  border-radius: 4px; }\n\n.igv-colorpicker-menu-close-button {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center;\n  width: 100%;\n  height: 32px;\n  margin-top: 4px;\n  margin-bottom: 4px;\n  padding-right: 8px; }\n  .igv-colorpicker-menu-close-button i.fa {\n    display: block;\n    margin-left: 4px;\n    margin-right: 4px;\n    color: #5f5f5f; }\n  .igv-colorpicker-menu-close-button i.fa:hover,\n  .igv-colorpicker-menu-close-button i.fa:focus,\n  .igv-colorpicker-menu-close-button i.fa:active {\n    cursor: pointer;\n    color: #0f0f0f; }\n\n.igv-alert-dialog-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 300px;\n  height: 256px;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 15px;\n  font-weight: 400;\n  z-index: 2048;\n  background-color: white;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center; }\n  .igv-alert-dialog-container div:first-child {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n    width: 100%;\n    height: 24px;\n    cursor: move;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-color: #7F7F7F;\n    border-bottom-style: solid;\n    border-bottom-width: thin;\n    background-color: #eee; }\n    .igv-alert-dialog-container div:first-child div {\n      margin-right: 4px;\n      margin-bottom: 2px;\n      height: 12px;\n      width: 12px;\n      color: #7F7F7F; }\n    .igv-alert-dialog-container div:first-child div:hover {\n      cursor: pointer;\n      color: #444; }\n  .igv-alert-dialog-container #igv-alert-dialog-body {\n    color: #373737;\n    width: 100%;\n    height: calc(100% - 24px - 64px);\n    overflow-y: scroll; }\n    .igv-alert-dialog-container #igv-alert-dialog-body #igv-alert-dialog-body-copy {\n      cursor: pointer;\n      margin: 16px;\n      width: auto;\n      height: auto;\n      overflow-wrap: break-word;\n      word-break: break-word;\n      background-color: white;\n      border: unset; }\n  .igv-alert-dialog-container div:last-child {\n    width: 100%;\n    height: 64px;\n    background-color: white;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: center;\n    align-items: center; }\n    .igv-alert-dialog-container div:last-child div {\n      width: 98px;\n      height: 36px;\n      line-height: 36px;\n      text-align: center;\n      color: white;\n      font-family: \"Open Sans\", sans-serif;\n      font-size: medium;\n      font-weight: 400;\n      border-color: #2B81AF;\n      border-style: solid;\n      border-width: thin;\n      border-radius: 4px;\n      background-color: #2B81AF; }\n    .igv-alert-dialog-container div:last-child div:hover {\n      cursor: pointer;\n      border-color: #25597f;\n      background-color: #25597f; }\n\n.igv-generic-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 2048;\n  background-color: white;\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  align-items: center; }\n  .igv-generic-container div:first-child {\n    cursor: move;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n    height: 24px;\n    width: 100%;\n    background-color: #dddddd; }\n    .igv-generic-container div:first-child i {\n      display: block;\n      color: #5f5f5f;\n      cursor: pointer;\n      width: 14px;\n      height: 14px;\n      margin-right: 8px;\n      margin-bottom: 4px; }\n\n.igv-generic-dialog-container {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 300px;\n  height: 200px;\n  border-color: #7F7F7F;\n  border-radius: 4px;\n  border-style: solid;\n  border-width: thin;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: medium;\n  font-weight: 400;\n  z-index: 2048;\n  background-color: white;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center; }\n  .igv-generic-dialog-container .igv-generic-dialog-header {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center;\n    width: 100%;\n    height: 24px;\n    cursor: move;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-color: #7F7F7F;\n    border-bottom-style: solid;\n    border-bottom-width: thin;\n    background-color: #eee; }\n    .igv-generic-dialog-container .igv-generic-dialog-header div {\n      margin-right: 4px;\n      margin-bottom: 2px;\n      height: 12px;\n      width: 12px;\n      color: #7F7F7F; }\n    .igv-generic-dialog-container .igv-generic-dialog-header div:hover {\n      cursor: pointer;\n      color: #444; }\n  .igv-generic-dialog-container .igv-generic-dialog-one-liner {\n    color: #373737;\n    width: 95%;\n    height: 24px;\n    line-height: 24px;\n    text-align: left;\n    margin-top: 8px;\n    padding-left: 8px;\n    overflow-wrap: break-word;\n    background-color: white; }\n  .igv-generic-dialog-container .igv-generic-dialog-label-input {\n    margin-top: 8px;\n    width: 95%;\n    height: 24px;\n    color: #373737;\n    line-height: 24px;\n    padding-left: 8px;\n    background-color: white;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-items: center; }\n    .igv-generic-dialog-container .igv-generic-dialog-label-input div {\n      width: 30%;\n      height: 100%;\n      font-size: 16px;\n      text-align: right;\n      padding-right: 8px;\n      background-color: white; }\n    .igv-generic-dialog-container .igv-generic-dialog-label-input input {\n      display: block;\n      height: 100%;\n      width: 100%;\n      padding-left: 4px;\n      font-family: \"Open Sans\", sans-serif;\n      font-weight: 400;\n      color: #373737;\n      text-align: left;\n      outline: none;\n      border-style: solid;\n      border-width: thin;\n      border-color: #7F7F7F;\n      background-color: white; }\n    .igv-generic-dialog-container .igv-generic-dialog-label-input input {\n      width: 50%;\n      font-size: 16px; }\n  .igv-generic-dialog-container .igv-generic-dialog-input {\n    margin-top: 8px;\n    width: calc(100% - 16px);\n    height: 24px;\n    color: #373737;\n    line-height: 24px;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-generic-dialog-container .igv-generic-dialog-input input {\n      display: block;\n      height: 100%;\n      width: 100%;\n      padding-left: 4px;\n      font-family: \"Open Sans\", sans-serif;\n      font-weight: 400;\n      color: #373737;\n      text-align: left;\n      outline: none;\n      border-style: solid;\n      border-width: thin;\n      border-color: #7F7F7F;\n      background-color: white; }\n    .igv-generic-dialog-container .igv-generic-dialog-input input {\n      font-size: 16px; }\n  .igv-generic-dialog-container .igv-generic-dialog-ok-cancel {\n    width: 100%;\n    height: 28px;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div {\n      margin-top: 32px;\n      color: white;\n      font-family: \"Open Sans\", sans-serif;\n      font-size: 14px;\n      font-weight: 400;\n      width: 75px;\n      height: 28px;\n      line-height: 28px;\n      text-align: center;\n      border-color: transparent;\n      border-style: solid;\n      border-width: thin;\n      border-radius: 2px; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:first-child {\n      margin-left: 32px;\n      margin-right: 0;\n      background-color: #5ea4e0; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:last-child {\n      margin-left: 0;\n      margin-right: 32px;\n      background-color: #c4c4c4; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:first-child:hover {\n      cursor: pointer;\n      background-color: #3b5c7f; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok-cancel div:last-child:hover {\n      cursor: pointer;\n      background-color: #7f7f7f; }\n  .igv-generic-dialog-container .igv-generic-dialog-ok {\n    width: 100%;\n    height: 36px;\n    margin-top: 32px;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-around;\n    align-items: center; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok div {\n      width: 98px;\n      height: 36px;\n      line-height: 36px;\n      text-align: center;\n      color: white;\n      font-family: \"Open Sans\", sans-serif;\n      font-size: medium;\n      font-weight: 400;\n      border-color: white;\n      border-style: solid;\n      border-width: thin;\n      border-radius: 4px;\n      background-color: #2B81AF; }\n    .igv-generic-dialog-container .igv-generic-dialog-ok div:hover {\n      cursor: pointer;\n      background-color: #25597f; }\n\n.igv-popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  min-width: 128px;\n  z-index: 4096;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: small;\n  font-weight: 400;\n  color: #4b4b4b;\n  background-color: white;\n  border-radius: 4px;\n  border-color: #7F7F7F;\n  border-style: solid;\n  border-width: thin;\n  display: none; }\n\n.igv-popover-header {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: flex-end;\n  align-items: center;\n  width: 100%;\n  height: 24px;\n  cursor: move;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee; }\n  .igv-popover-header div {\n    margin-right: 4px;\n    height: 12px;\n    width: 12px;\n    color: #7F7F7F; }\n  .igv-popover-header div:hover {\n    cursor: pointer;\n    color: #444; }\n\n.igv-popover-track-popup-content {\n  position: relative;\n  top: 0;\n  left: 0;\n  max-height: 384px;\n  overflow-x: hidden;\n  overflow-y: auto;\n  background-color: white; }\n  .igv-popover-track-popup-content div {\n    margin-left: 4px;\n    background-color: white; }\n  .igv-popover-track-popup-content div:hover {\n    cursor: pointer;\n    background-color: #efefef; }\n\n.igv-popover-name-value {\n  cursor: default;\n  text-wrap: none;\n  white-space: nowrap;\n  max-width: 384px; }\n\n.igv-popover-name {\n  font-weight: bold;\n  padding-right: 4px;\n  float: left; }\n\n.igv-popover-value {\n  padding-left: 4px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 256px;\n  display: inline-block; }\n\n.igv-trackgear-container {\n  position: relative;\n  width: 20px;\n  height: 20px;\n  margin-left: 4px;\n  color: #7F7F7F; }\n\n.igv-trackgear-container:hover {\n  cursor: pointer;\n  color: #444; }\n\n.igv-trackgear-popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  min-width: 132px;\n  z-index: 4096;\n  cursor: pointer;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: small;\n  font-weight: 400;\n  color: #4b4b4b;\n  background: white;\n  border-radius: 4px;\n  border-color: #7F7F7F;\n  border-style: solid;\n  border-width: thin;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: flex-end;\n  text-align: left; }\n  .igv-trackgear-popover > div:not(:first-child) {\n    width: 100%; }\n    .igv-trackgear-popover > div:not(:first-child) > div {\n      background: white; }\n    .igv-trackgear-popover > div:not(:first-child) > div:last-child {\n      border-bottom-left-radius: 4px;\n      border-bottom-right-radius: 4px;\n      border-bottom-color: transparent;\n      border-bottom-style: solid;\n      border-bottom-width: thin; }\n    .igv-trackgear-popover > div:not(:first-child) > div:hover {\n      background: #efefef; }\n\n.igv-trackgear-popover-shim {\n  padding-left: 8px;\n  padding-right: 8px; }\n\n.igv-trackgear-popover-header {\n  position: relative;\n  width: 100%;\n  height: 24px;\n  cursor: move;\n  border-top-color: transparent;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-color: #7F7F7F;\n  border-bottom-style: solid;\n  border-bottom-width: thin;\n  background-color: #eee;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-end;\n  align-items: center; }\n  .igv-trackgear-popover-header div {\n    margin-right: 4px;\n    height: 12px;\n    width: 12px;\n    color: #7F7F7F; }\n  .igv-trackgear-popover-header div:hover {\n    cursor: pointer;\n    color: #444; }\n\n.igv-trackgear-popover-check-container {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 20px;\n  background-color: transparent; }\n  .igv-trackgear-popover-check-container div {\n    padding-top: 2px;\n    padding-left: 8px; }\n  .igv-trackgear-popover-check-container div:first-child {\n    position: relative;\n    width: 12px;\n    height: 12px; }\n    .igv-trackgear-popover-check-container div:first-child svg {\n      position: absolute;\n      width: 12px;\n      height: 12px; }\n\n.igvControlDiv {\n  position: relative; }\n\n.igv-content-header {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: flex-start;\n  align-items: center;\n  margin-top: 10px;\n  height: 16px;\n  width: 100%; }\n  .igv-content-header .igv-ideogram-shim {\n    height: 100%;\n    width: 50px;\n    background-color: white; }\n  .igv-content-header .igv-ideogram-content {\n    height: 100%;\n    background-color: white; }\n  .igv-content-header .igv-ideogram-content-border-right {\n    border-right-color: #292929;\n    border-right-style: solid;\n    border-right-width: 1px; }\n\n.igv-multi-locus-panel-border {\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100%;\n  width: 1px;\n  background-color: green;\n  border-right-color: #ff0000;\n  border-right-style: solid;\n  border-right-width: 1px; }\n\n.igv-navbar {\n  position: relative;\n  padding-left: 8px;\n  padding-right: 8px;\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  color: #444;\n  font-size: 12px;\n  font-family: \"Open Sans\", sans-serif;\n  font-weight: 400;\n  line-height: 32px;\n  margin-top: 2px;\n  margin-bottom: 4px;\n  height: 32px;\n  border-style: solid;\n  border-radius: 3px;\n  border-width: thin;\n  border-color: #bfbfbf;\n  background-color: #f3f3f3; }\n\n.igv-nav-bar-left-container {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  height: 32px;\n  line-height: 32px; }\n  .igv-nav-bar-left-container .igv-logo {\n    width: 34px;\n    height: 32px;\n    margin-top: 6px;\n    margin-right: 8px; }\n  .igv-nav-bar-left-container .igv-current-genome {\n    height: 32px;\n    width: 40px;\n    margin-left: 4px;\n    margin-right: 4px;\n    user-select: none;\n    line-height: 32px;\n    vertical-align: middle;\n    text-align: center; }\n\n.igv-nav-bar-genomic-location {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  height: 100%; }\n\n.igv-chromosome-select-widget-container {\n  height: 100%;\n  width: 125px;\n  margin-right: 4px;\n  display: flex;\n  flex-flow: column;\n  flex-wrap: nowrap;\n  justify-content: space-around;\n  align-items: center; }\n  .igv-chromosome-select-widget-container select {\n    display: block;\n    cursor: pointer;\n    width: 100px;\n    height: 75%;\n    outline: none;\n    font-size: 12px;\n    font-family: \"Open Sans\", sans-serif;\n    font-weight: 400; }\n\n.igv-locus-size-group {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  margin-left: 8px;\n  height: calc(32px - 10px); }\n  .igv-locus-size-group .igv-search-container {\n    width: 200px;\n    height: calc(32px - 10px);\n    line-height: calc(32px - 10px);\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-start;\n    align-items: center; }\n    .igv-locus-size-group .igv-search-container input {\n      cursor: text;\n      width: 85%;\n      height: calc(32px - 10px);\n      line-height: calc(32px - 10px);\n      font-size: 12px;\n      font-family: \"Open Sans\", sans-serif;\n      font-weight: 400;\n      text-align: left;\n      padding-left: 8px;\n      margin-right: 8px;\n      outline: none;\n      border-style: solid;\n      border-radius: 3px;\n      border-width: thin;\n      border-color: #bfbfbf;\n      background-color: white; }\n    .igv-locus-size-group .igv-search-container div {\n      cursor: pointer;\n      height: 16px;\n      width: 16px; }\n  .igv-locus-size-group .igv-windowsizepanel-content-div {\n    margin-left: 4px;\n    user-select: none; }\n\n.igv-nav-bar-right-container {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  height: 32px;\n  line-height: 32px; }\n  .igv-nav-bar-right-container .igv-nav-bar-toggle-button-container {\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: space-between;\n    align-items: center;\n    height: 100%; }\n    .igv-nav-bar-right-container .igv-nav-bar-toggle-button-container div {\n      margin-left: 0;\n      margin-right: 4px; }\n    .igv-nav-bar-right-container .igv-nav-bar-toggle-button-container div:last-child {\n      margin-left: 0;\n      margin-right: 0; }\n  .igv-nav-bar-right-container .igv-nav-bar-toggle-button-container-750 {\n    display: none; }\n  .igv-nav-bar-right-container .igv-zoom-widget {\n    color: #737373;\n    font-size: 18px;\n    height: 32px;\n    line-height: 32px;\n    margin-left: 8px;\n    user-select: none;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center; }\n    .igv-nav-bar-right-container .igv-zoom-widget div {\n      cursor: pointer;\n      margin-left: unset;\n      margin-right: unset; }\n    .igv-nav-bar-right-container .igv-zoom-widget div:first-child {\n      height: 24px;\n      width: 24px;\n      margin-left: unset;\n      margin-right: 8px; }\n    .igv-nav-bar-right-container .igv-zoom-widget div:last-child {\n      height: 24px;\n      width: 24px;\n      margin-left: 8px;\n      margin-right: unset; }\n    .igv-nav-bar-right-container .igv-zoom-widget div:nth-child(even) {\n      display: block;\n      height: fit-content; }\n    .igv-nav-bar-right-container .igv-zoom-widget input {\n      display: block;\n      width: 125px; }\n    .igv-nav-bar-right-container .igv-zoom-widget svg {\n      display: block; }\n  .igv-nav-bar-right-container .igv-zoom-widget-900 {\n    color: #737373;\n    font-size: 18px;\n    height: 32px;\n    line-height: 32px;\n    margin-left: 8px;\n    user-select: none;\n    display: flex;\n    flex-flow: row;\n    flex-wrap: nowrap;\n    justify-content: flex-end;\n    align-items: center; }\n    .igv-nav-bar-right-container .igv-zoom-widget-900 div {\n      cursor: pointer;\n      margin-left: unset;\n      margin-right: unset; }\n    .igv-nav-bar-right-container .igv-zoom-widget-900 div:first-child {\n      height: 24px;\n      width: 24px;\n      margin-left: unset;\n      margin-right: 8px; }\n    .igv-nav-bar-right-container .igv-zoom-widget-900 div:last-child {\n      height: 24px;\n      width: 24px;\n      margin-left: 8px;\n      margin-right: unset; }\n    .igv-nav-bar-right-container .igv-zoom-widget-900 div:nth-child(even) {\n      width: 0;\n      height: 0;\n      display: none; }\n    .igv-nav-bar-right-container .igv-zoom-widget-900 input {\n      width: 0;\n      height: 0;\n      display: none; }\n    .igv-nav-bar-right-container .igv-zoom-widget-900 svg {\n      display: block; }\n  .igv-nav-bar-right-container .igv-zoom-widget-hidden {\n    display: none; }\n\n.igv-nav-bar-button {\n  box-sizing: unset;\n  padding-left: 6px;\n  padding-right: 6px;\n  height: 18px;\n  text-transform: capitalize;\n  user-select: none;\n  line-height: 18px;\n  text-align: center;\n  vertical-align: middle;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 11px;\n  font-weight: 200;\n  color: #737373;\n  background-color: #f3f3f3;\n  border-color: #737373;\n  border-style: solid;\n  border-width: thin;\n  border-radius: 6px; }\n\n.igv-nav-bar-button-clicked {\n  color: white;\n  background-color: #737373; }\n\n.igv-nav-bar-button:hover {\n  cursor: pointer; }\n\n.igv-logo-nonav {\n  margin-left: 4px;\n  margin-top: 12px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 34px;\n  height: 16px; }\n\n.igv-search-results {\n  position: absolute;\n  top: 32px;\n  left: 2px;\n  height: 320px;\n  width: 213px;\n  background-color: white;\n  border-color: #7F7F7F;\n  border-style: solid;\n  border-width: thin;\n  overflow-x: hidden;\n  overflow-y: auto;\n  z-index: 9999; }\n  .igv-search-results tr {\n    font-family: \"Open Sans\", sans-serif;\n    font-size: small;\n    font-weight: 400;\n    color: #444; }\n  .igv-search-results tr:hover,\n  .igv-search-results tr:focus,\n  .igv-search-results tr:active {\n    cursor: pointer;\n    font-weight: 700;\n    color: #141414; }\n\n.igv-root-div {\n  position: relative;\n  left: 0;\n  right: 0;\n  height: auto;\n  margin-left: 10px;\n  margin-right: 10px;\n  padding-top: 4px; }\n\n.igv-content-div {\n  position: relative;\n  width: 100%;\n  height: 100%; }\n\n.igv-track-container-div {\n  user-select: none;\n  position: relative;\n  clear: both; }\n\n.igv-track-div {\n  position: relative;\n  width: 100%;\n  margin-top: 5px;\n  margin-bottom: 5px; }\n\n.igv-viewport-container {\n  position: absolute;\n  left: 50px;\n  right: 50px;\n  height: 100%;\n  white-space: nowrap;\n  overflow-x: hidden;\n  overflow-y: hidden; }\n\n.igv-viewport-div {\n  position: relative;\n  display: inline-block;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: hidden; }\n\n.igv-viewport-content-div {\n  position: absolute;\n  width: 100%; }\n\n.igv-viewport-message {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  color: rgba(0, 0, 0, 0.15);\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 25px;\n  font-weight: bold;\n  user-select: none; }\n\n.igv-whole-genome-container {\n  display: flex;\n  flex-flow: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  width: 100%;\n  height: 100%;\n  background-color: white; }\n  .igv-whole-genome-container div {\n    font-family: \"Open Sans\", sans-serif;\n    font-size: 10px;\n    font-weight: 400;\n    color: #444;\n    height: 100%;\n    text-align: center;\n    border-right-color: #bfbfbf;\n    border-right-style: solid;\n    border-right-width: thin; }\n    .igv-whole-genome-container div span {\n      display: block;\n      padding-top: 6px;\n      text-overflow: ellipsis; }\n  .igv-whole-genome-container div:last-child {\n    border-right-color: transparent; }\n  .igv-whole-genome-container div:hover,\n  .igv-whole-genome-container div:focus,\n  .igv-whole-genome-container div:active {\n    cursor: pointer;\n    background-color: #efefef; }\n\n.igv-viewport-div-border-right {\n  border-right-color: #292929;\n  border-right-style: solid;\n  border-right-width: 1px; }\n\n.igv-multi-locus-panel-close-container {\n  position: absolute;\n  top: 4px;\n  right: 4px;\n  width: 16px;\n  height: 16px;\n  color: #666666;\n  z-index: 1000; }\n\n.igv-multi-locus-panel-close-container:hover {\n  cursor: pointer;\n  color: #434343; }\n\n.igv-multi-locus-panel-label-div {\n  position: absolute;\n  left: 50%;\n  top: 25%;\n  transform: translate(-50%, -25%);\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 12px;\n  font-weight: 400;\n  text-align: center;\n  min-width: 16px;\n  z-index: 64;\n  color: #373737;\n  background-color: white;\n  padding: 1px; }\n\n.igv-multi-locus-panel-label-div:hover {\n  cursor: pointer; }\n\n.igv-viewport-ruler {\n  cursor: pointer;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 10px;\n  font-weight: 200;\n  text-align: center; }\n  .igv-viewport-ruler > div {\n    height: 100%; }\n\n.igv-viewport-sequence {\n  font-family: \"Open Sans\", sans-serif;\n  font-size: 8px;\n  font-weight: 200;\n  text-align: center; }\n\n.igv-viewport-spinner {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1024;\n  width: 24px;\n  height: 24px;\n  pointer-events: none;\n  color: #737373; }\n\n.igv-track-container-spinner {\n  position: absolute;\n  top: 90%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  z-index: 1024;\n  width: 24px;\n  height: 24px;\n  pointer-events: none;\n  color: #737373; }\n\n.igv-ruler-sweeper-div {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 0;\n  height: 100%;\n  z-index: 99999;\n  background-color: rgba(68, 134, 247, 0.25); }\n\n.igv-right-hand-gutter {\n  position: absolute;\n  right: 0;\n  width: 36px;\n  height: 100%;\n  background: white; }\n\n.igv-left-hand-gutter {\n  position: absolute;\n  left: 0;\n  width: 50px;\n  height: 100%; }\n  .igv-left-hand-gutter canvas {\n    position: absolute; }\n\n.igv-track-menu-border-top {\n  border-top-color: #a2a2a2;\n  border-top-style: solid;\n  border-top-width: thin; }\n\n.igv-track-menu-category {\n  padding-left: 4px;\n  font-weight: 400; }\n\n.igv-track-drag-scrim {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 256;\n  background-color: rgba(68, 134, 247, 0.25); }\n\n.igv-track-manipulation-handle {\n  cursor: pointer;\n  position: absolute;\n  right: 36px;\n  width: 12px;\n  margin-left: 2px;\n  height: 100%;\n  box-sizing: border-box;\n  font-size: medium;\n  border-color: #c4c4c4;\n  border-style: solid;\n  border-width: thin;\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n  z-index: 512;\n  background-color: #c4c4c4; }\n\n.igv-track-manipulation-handle:hover,\n.igv-track-manipulation-handle:focus,\n.igv-track-manipulation-handle:active {\n  border-color: #7e7e7e;\n  background-color: #7e7e7e; }\n\n.igv-track-label {\n  position: absolute;\n  left: 8px;\n  top: 4px;\n  width: auto;\n  height: auto;\n  max-width: 200px;\n  padding-left: 4px;\n  padding-right: 4px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  font-family: \"Open Sans\", sans-serif;\n  font-size: small;\n  font-weight: 400;\n  text-align: center;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  border-color: #444;\n  border-radius: 2px;\n  border-style: solid;\n  border-width: thin;\n  background-color: white;\n  z-index: 128;\n  cursor: pointer; }\n\n.igv-track-label:hover,\n.igv-track-label:focus,\n.igv-track-label:active {\n  background-color: rgba(0, 0, 0, 0.05); }\n\n.igv-scrollbar-outer-div {\n  position: absolute;\n  top: 0;\n  right: 0;\n  width: 14px;\n  height: 100%;\n  background-color: white; }\n  .igv-scrollbar-outer-div div {\n    position: absolute;\n    top: 0;\n    left: 3px;\n    width: 8px;\n    border-style: solid;\n    border-width: thin;\n    border-color: #c4c4c4;\n    border-top-left-radius: 4px;\n    border-top-right-radius: 4px;\n    border-bottom-left-radius: 4px;\n    border-bottom-right-radius: 4px;\n    background-color: white; }\n  .igv-scrollbar-outer-div div:hover,\n  .igv-scrollbar-outer-div div:focus,\n  .igv-scrollbar-outer-div div:active {\n    cursor: pointer;\n    background-color: #c4c4c4; }\n\n.zoom-in-notice-container {\n  position: absolute;\n  top: 10px;\n  left: 50%; }\n  .zoom-in-notice-container div {\n    position: relative;\n    left: -50%;\n    font-family: \"Open Sans\", sans-serif;\n    font-size: medium;\n    font-weight: 400;\n    color: #3f3f3f;\n    background-color: rgba(255, 255, 255, 0.51);\n    z-index: 64; }\n\n.igv-center-guide {\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 50%;\n  width: 8px;\n  z-index: 8;\n  display: none;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none;\n  border-left-style: dashed;\n  border-left-width: thin;\n  border-right-style: dashed;\n  border-right-width: thin; }\n\n.igv-center-guide-wide {\n  background-color: rgba(0, 0, 0, 0);\n  border-left-color: rgba(127, 127, 127, 0.51);\n  border-right-color: rgba(127, 127, 127, 0.51); }\n\n.igv-center-guide-thin {\n  left: 50%;\n  width: 1px;\n  background-color: rgba(0, 0, 0, 0);\n  border-left-color: rgba(127, 127, 127, 0.51);\n  border-right-color: rgba(0, 0, 0, 0);\n  /*background-color: rgba(127, 127, 127, 0.51);*/\n  /*border-left-color: rgba(0,0,0,0);*/\n  /*border-right-color: rgba(0,0,0,0);*/ }\n\n.igv-cursor-tracking-guide {\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 50%;\n  width: 1px;\n  z-index: 1;\n  border-left-style: dotted;\n  border-left-width: thin;\n  border-left-color: rgba(127, 127, 127, 0.76);\n  display: none;\n  user-select: none;\n  -moz-user-select: none;\n  -webkit-user-select: none; }\n\n.igv-clickable {\n  cursor: pointer;\n  background-color: white; }\n\n#color-by-tag {\n  color: #444; }\n\n#color-by-tag:hover,\n#color-by-tag:focus,\n#color-by-tag:active {\n  cursor: pointer;\n  padding-left: 2px;\n  padding-right: 2px;\n  color: white;\n  border-color: #444;\n  border-radius: 2px;\n  border-style: solid;\n  border-width: thin;\n  background-color: #7f7f7f; }\n\n.igv-ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis; }\n\n.igv-spinner-container {\n  color: #3f3f3f;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  padding-top: 8px;\n  font-size: 24px;\n  z-index: 512; }\n\n.igv-fa-check-visible {\n  color: inherit;\n  padding-right: 2px; }\n\n.igv-fa-check-hidden {\n  color: transparent;\n  padding-right: 2px; }\n\n.validateTips {\n  border: 1px solid transparent;\n  padding: 0.3em; }\n  .validateTips fieldset {\n    border: 0; }\n\n.igv-spacer-10 {\n  height: 10px;\n  width: 100%;\n  font-size: 0;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  display: block; }\n\n.igv-fa5-spin {\n  -webkit-animation: igv-fa5-spin 2s infinite linear;\n  animation: igv-fa5-spin 2s infinite linear; }\n\n@-webkit-keyframes igv-fa5-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg); } }\n@keyframes igv-fa5-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg); } }\n\n/*# sourceMappingURL=igv.css.map */\n';
    var style = document.createElement('style');
    style.setAttribute('type', 'text/css');
    style.innerHTML = css;
    document.head.insertBefore(style, document.head.childNodes[document.head.childNodes.length - 1]);
  }

  // Defines the top-level API for the igv module

  function setGoogleOauthToken(accessToken) {
    return oauth.setToken(accessToken);
  }

  function setApiKey(apiKey) {
    return google.setApiKey(apiKey);
  } // for juicebox


  function appendRightHandGutter($parent) {
    TrackView.prototype.appendRightHandGutter.call(this, $parent);
  }

  var xhr = igvxhr;
  var Color = IGVColor;
  var graphics = IGVGraphics;
  embedCSS();
  var api = {
    createBrowser: createBrowser,
    removeBrowser: removeBrowser,
    visibilityChange: visibilityChange,
    setGoogleOauthToken: setGoogleOauthToken,
    oauth: oauth,
    //exports below are not supported and will be removed over time
    getBrowser: getBrowser,
    doAutoscale: doAutoscale,
    graphics: graphics,
    createTrack: createTrack,
    getFilename: getFilename,
    getExtension: getExtension,
    isFilePath: isFilePath,
    inferFileFormat: inferFileFormat,
    inferTrackTypes: inferTrackTypes,
    knownFileExtensions: knownFileExtensions,
    appendRightHandGutter: appendRightHandGutter,
    attachDialogCloseHandlerWithParent: attachDialogCloseHandlerWithParent,
    guid: guid,
    pageCoordinates: pageCoordinates,
    translateMouseCoordinates: translateMouseCoordinates,
    createIcon: createIcon,
    GtexUtils: GtexUtils,
    xhr: xhr,
    Color: Color,
    splitLines: splitLines,
    isString: isString,
    numberFormatter: numberFormatter,
    getDataWrapper: getDataWrapper,
    setApiKey: setApiKey,
    createColorSwatchSelector: createColorSwatchSelector,
    makeDraggable: makeDraggable,
    GenericContainer: GenericContainer,
    Popover: Popover,
    AlertDialog: AlertDialog,
    InputDialog: InputDialog,
    TrackRemovalDialog: TrackRemovalDialog,
    DataRangeDialog: DataRangeDialog,
    MenuUtils: MenuUtils,
    Alert: Alert
  };

  return api;

}));

